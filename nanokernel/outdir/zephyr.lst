
zephyr.elf:     file format elf32-littlearc


Disassembly of section text:

40000000 <_VectorTable>:
40000000:	34 c3 00 40 70 be 00 40 70 be 00 40 70 be 00 40     4..@p..@p..@p..@
40000010:	70 be 00 40 70 be 00 40 70 be 00 40 70 be 00 40     p..@p..@p..@p..@
40000020:	70 be 00 40 70 be 00 40 70 be 00 40 70 be 00 40     p..@p..@p..@p..@
40000030:	70 be 00 40 70 be 00 40 00 00 00 00 00 00 00 00     p..@p..@........

40000040 <_irq_vector_table>:
40000040:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
40000050:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
40000060:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
40000070:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
40000080:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
40000090:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
400000a0:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
400000b0:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
400000c0:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
400000d0:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
400000e0:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
400000f0:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@
40000100:	80 bf 00 40 80 bf 00 40 80 bf 00 40 80 bf 00 40     ...@...@...@...@

40000110 <_sw_isr_table>:
40000110:	00 00 00 00 58 a3 00 40                             ....X..@

40000118 <_isr_irq17>:
40000118:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000120 <_isr_irq18>:
40000120:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000128 <_isr_irq19>:
40000128:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000130 <_isr_irq20.2898>:
40000130:	70 0d 00 a8 d0 a6 00 40                             p......@

40000138 <_isr_irq21.2904>:
40000138:	7c 0d 00 a8 d0 a6 00 40                             |......@

40000140 <_isr_irq22.2801>:
40000140:	88 0d 00 a8 00 a9 00 40                             .......@

40000148 <_isr_irq23.2805>:
40000148:	88 0d 00 a8 00 a9 00 40                             .......@

40000150 <_isr_irq24.2809>:
40000150:	88 0d 00 a8 00 a9 00 40                             .......@

40000158 <_isr_irq25.2813>:
40000158:	88 0d 00 a8 00 a9 00 40                             .......@

40000160 <_isr_irq26>:
40000160:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000168 <_isr_irq27>:
40000168:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000170 <_isr_irq28>:
40000170:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000178 <_isr_irq29>:
40000178:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000180 <_isr_irq30>:
40000180:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000188 <_isr_irq31>:
40000188:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000190 <_isr_irq32>:
40000190:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000198 <_isr_irq33>:
40000198:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001a0 <_isr_irq34>:
400001a0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001a8 <_isr_irq35>:
400001a8:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001b0 <_isr_irq36>:
400001b0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001b8 <_isr_irq37>:
400001b8:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001c0 <_isr_irq38>:
400001c0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001c8 <_isr_irq39>:
400001c8:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001d0 <_isr_irq40>:
400001d0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001d8 <_isr_irq41>:
400001d8:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001e0 <_isr_irq42>:
400001e0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001e8 <_isr_irq43>:
400001e8:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001f0 <_isr_irq44>:
400001f0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400001f8 <_isr_irq45>:
400001f8:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000200 <_isr_irq46>:
40000200:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000208 <_isr_irq47>:
40000208:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000210 <_isr_irq48>:
40000210:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000218 <_isr_irq49>:
40000218:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000220 <_isr_irq50>:
40000220:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000228 <_isr_irq51>:
40000228:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000230 <_isr_irq52>:
40000230:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000238 <_isr_irq53>:
40000238:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000240 <_isr_irq54>:
40000240:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000248 <_isr_irq55>:
40000248:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000250 <_isr_irq56>:
40000250:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000258 <_isr_irq57.1710>:
40000258:	00 00 00 00 40 ac 00 40                             ....@..@

40000260 <_isr_irq58>:
40000260:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000268 <_isr_irq59>:
40000268:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000270 <_isr_irq60>:
40000270:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000278 <_isr_irq61>:
40000278:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000280 <_isr_irq62>:
40000280:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000288 <_isr_irq63>:
40000288:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000290 <_isr_irq64>:
40000290:	ea 1d ad ab 6c bf 00 40                             ....l..@

40000298 <_isr_irq65>:
40000298:	ea 1d ad ab 6c bf 00 40                             ....l..@

400002a0 <_isr_irq66>:
400002a0:	ea 1d ad ab 6c bf 00 40                             ....l..@

400002a8 <_isr_irq67>:
400002a8:	ea 1d ad ab 6c bf 00 40                             ....l..@

400002b0 <malloc>:
400002b0:	00 41                   	mov_s      r1,r0
400002b2:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
400002ba:	19 00 00 00             	b          400002d0 <_malloc_r>

400002be:	e0 78                   	nop_s      

400002c0 <free>:
400002c0:	00 41                   	mov_s      r1,r0
400002c2:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
400002ca:	45 05 c0 01             	b          4000400c <_free_r>

400002ce:	e0 78                   	nop_s      

400002d0 <_malloc_r>:
400002d0:	f1 c0                   	push_s     blink
400002d2:	e4 1c 48 b3             	st.a       r13,[sp,-28]
400002d6:	41 c6                   	st_s       r14,[sp,4]
400002d8:	42 c7                   	st_s       r15,[sp,8]
400002da:	0c 1c 00 34             	st         r16,[sp,12]
400002de:	10 1c 40 34             	st         r17,[sp,16]
400002e2:	14 1c 80 34             	st         r18,[sp,20]
400002e6:	18 1c c0 34             	st         r19,[sp,24]
400002ea:	40 21 cd 02             	add        r13,r1,11
400002ee:	95 0d f4 15             	brlo.d     r13,23,40000380 <_malloc_r+0xb0>

400002f2:	08 46                   	mov_s      r14,r0
400002f4:	6c 25 8d 10             	bmskn      r13,r13,2
400002f8:	a1 42                   	mov_s      r2,r13
400002fa:	00 22 be 80             	add.f      0,r2,r2
400002fe:	6f 22 0b 00             	rlc        r2,0
40000302:	89 0d 44 10             	brlo       r13,r1,40000388 <_malloc_r+0xb8>

40000306:	85 0a 11 00             	brne       r2,0,40000388 <_malloc_r+0xb8>

4000030a:	f2 08 60 00             	bl.d       40000bf8 <__malloc_lock>

4000030e:	c1 40                   	mov_s      r0,r14
40000310:	85 0e 44 73 00 00 f7 01 	brlo       0x1f7,r13,40000394 <_malloc_r+0xc4>

40000318:	a1 47                   	mov_s      r7,r13
4000031a:	2f 27 c2 01             	lsr        r7,r7
4000031e:	2f 27 c2 01             	lsr        r7,r7
40000322:	2f 27 c2 01             	lsr        r7,r7
40000326:	16 26 c2 71 00 a8 08 04 	add3       r2,0xa8000408,r7
4000032e:	e3 82                   	ld_s       r15,[r2,12]
40000330:	50 77                   	cmp_s      r15,r2
40000332:	54 05 01 00             	bz         40000884 <_malloc_r+0x5b4>

40000336:	41 87                   	ld_s       r2,[r15,4]
40000338:	63 87                   	ld_s       r3,[r15,12]
4000033a:	08 17 04 10             	ld         r4,[r15,8]
4000033e:	6c 22 42 00             	bmskn      r2,r2,1
40000342:	0c 1c c0 00             	st         r3,[r4,12]
40000346:	fa 62                   	add_s      r2,r2,r15
40000348:	04 12 05 00             	ld         r5,[r2,4]
4000034c:	08 1b 00 01             	st         r4,[r3,8]
40000350:	45 25 43 00             	or         r3,r5,1
40000354:	61 a2                   	st_s       r3,[r2,4]
40000356:	c1 40                   	mov_s      r0,r14
40000358:	a6 08 60 00             	bl.d       40000bfc <__malloc_unlock>

4000035c:	08 e7                   	add_s      r15,r15,8
4000035e:	e1 40                   	mov_s      r0,r15
40000360:	1c 14 1f 30             	ld         blink,[sp,28]
40000364:	00 c5                   	ld_s       r13,[sp,0]
40000366:	01 c6                   	ld_s       r14,[sp,4]
40000368:	02 c7                   	ld_s       r15,[sp,8]
4000036a:	0c 14 10 30             	ld         r16,[sp,12]
4000036e:	10 14 11 30             	ld         r17,[sp,16]
40000372:	14 14 12 30             	ld         r18,[sp,20]
40000376:	18 14 13 30             	ld         r19,[sp,24]
4000037a:	e0 7f                   	j_s.d      [blink]
4000037c:	a8 c0                   	add_s      sp,sp,32
4000037e:	e0 78                   	nop_s      
40000380:	10 dd                   	mov_s      r13,16
40000382:	87 0d 65 90             	brhs.nt.d  r13,r1,40000306 <_malloc_r+0x36>

40000386:	4c 70                   	mov_s      r2,0
40000388:	00 1e 01 13             	st         12,[r14]
4000038c:	d3 07 ef ff             	b.d        4000035e <_malloc_r+0x8e>

40000390:	ed 70                   	mov_s      r15,0
40000392:	e0 78                   	nop_s      
40000394:	a1 42                   	mov_s      r2,r13
40000396:	4a 24 40 f2             	mov.f      lp_count,9
4000039a:	e8 20 e2 01             	lpnz       400003a6 <_malloc_r+0xd6>

4000039e:	2f 22 82 00             	lsr        r2,r2
400003a2:	4a 26 00 70             	nop        
400003a6:	4b 7a                   	tst_s      r2,r2
400003a8:	e0 01 21 00             	bz.d       40000588 <_malloc_r+0x2b8>

400003ac:	8a 25 81 0f             	mov        r5,126
400003b0:	54 74                   	cmp_s      r2,4
400003b2:	d8 03 2d 00             	bhi.d      40000788 <_malloc_r+0x4b8>

400003b6:	94 e2                   	cmp_s      r2,20
400003b8:	a1 47                   	mov_s      r7,r13
400003ba:	4a 24 80 f1             	mov.f      lp_count,6
400003be:	e8 20 e2 01             	lpnz       400003ca <_malloc_r+0xfa>

400003c2:	2f 27 c2 01             	lsr        r7,r7
400003c6:	4a 26 00 70             	nop        
400003ca:	40 27 07 0e             	add        r7,r7,56
400003ce:	e0 45                   	mov_s      r5,r7
400003d0:	00 25 45 01             	add        r5,r5,r5
400003d4:	15 26 45 71 00 a8 08 04 	add2       r5,0xa8000408,r5
400003dc:	0c 15 02 00             	ld         r2,[r5,12]
400003e0:	13 0d 89 00             	brne.t     r5,r2,400003f2 <_malloc_r+0x122>

400003e4:	e4 71                   	add_s      r7,r7,1
400003e6:	12 f0                   	b_s        40000408 <_malloc_r+0x138>

400003e8:	a8 01 0a 00             	bge        40000590 <_malloc_r+0x2c0>

400003ec:	43 82                   	ld_s       r2,[r2,12]
400003ee:	1b 0d 80 00             	breq       r5,r2,40000406 <_malloc_r+0x136>

400003f2:	04 12 04 00             	ld         r4,[r2,4]
400003f6:	6c 24 44 00             	bmskn      r4,r4,1
400003fa:	02 24 43 03             	sub        r3,r4,r13
400003fe:	ed 0b 32 84             	brlt.d     r3,16,400003e8 <_malloc_r+0x118>

40000402:	74 70                   	cmp_s      r3,0
40000404:	e4 77                   	add_s      r7,r7,-1
40000406:	e4 71                   	add_s      r7,r7,1
40000408:	00 16 0f 70 00 a8 18 04 	ld         r15,[0xa8000418]
40000410:	d3 77 00 a8 10 04       	cmp_s      r15,0xa8000410
40000416:	48 04 01 00             	bz         4000085c <_malloc_r+0x58c>

4000041a:	41 87                   	ld_s       r2,[r15,4]
4000041c:	6c 22 42 00             	bmskn      r2,r2,1
40000420:	02 22 43 03             	sub        r3,r2,r13
40000424:	8f e3                   	cmp_s      r3,15
40000426:	f4 03 29 00             	bgt.d      40000818 <_malloc_r+0x548>

4000042a:	74 70                   	cmp_s      r3,0
4000042c:	0a 24 80 0f 00 a8 18 04 	mov        r4,0xa8000418
40000434:	00 1c 80 0f 00 a8 10 04 	st         0xa8000410,[r4]
4000043c:	0a 24 80 0f 00 a8 1c 04 	mov        r4,0xa800041c
40000444:	00 1c 80 0f 00 a8 10 04 	st         0xa8000410,[r4]
4000044c:	74 01 2a 00             	bge.d      400005c0 <_malloc_r+0x2f0>

40000450:	8c 22 c7 8f             	cmp        r2,0x1ff
40000454:	60 03 2d 00             	bhi.d      400007b4 <_malloc_r+0x4e4>

40000458:	40 43                   	mov_s      r3,r2
4000045a:	2f 22 82 00             	lsr        r2,r2
4000045e:	2f 22 82 00             	lsr        r2,r2
40000462:	2f 22 82 00             	lsr        r2,r2
40000466:	16 26 83 70 00 a8 08 04 	add3       r3,0xa8000408,r2
4000046e:	08 13 04 00             	ld         r4,[r3,8]
40000472:	00 16 08 70 00 a8 0c 04 	ld         r8,[0xa800040c]
4000047a:	63 a7                   	st_s       r3,[r15,12]
4000047c:	08 1f 00 11             	st         r4,[r15,8]
40000480:	e2 a3                   	st_s       r15,[r3,8]
40000482:	2f 22 81 00             	asr        r2,r2
40000486:	2f 22 81 00             	asr        r2,r2
4000048a:	6c 71                   	mov_s      r3,1
4000048c:	0c 1c c0 03             	st         r15,[r4,12]
40000490:	44 22 fc 87             	and.f      lp_count,r2,31
40000494:	e8 20 a2 01             	lpnz       400004a0 <_malloc_r+0x1d0>

40000498:	00 23 c3 00             	add        r3,r3,r3
4000049c:	4a 26 00 70             	nop        
400004a0:	05 20 c8 10             	or         r8,r8,r3
400004a4:	00 1e 00 72 00 a8 0c 04 	st         r8,[0xa800040c]
400004ac:	e0 42                   	mov_s      r2,r7
400004ae:	2f 22 81 00             	asr        r2,r2
400004b2:	2f 22 81 00             	asr        r2,r2
400004b6:	ac 71                   	mov_s      r5,1
400004b8:	44 22 fc 87             	and.f      lp_count,r2,31
400004bc:	e8 20 a2 01             	lpnz       400004c8 <_malloc_r+0x1f8>

400004c0:	00 25 45 01             	add        r5,r5,r5
400004c4:	4a 26 00 70             	nop        
400004c8:	0c 25 00 82             	cmp        r5,r8
400004cc:	0c 01 2d 00             	bhi.d      400005d8 <_malloc_r+0x308>

400004d0:	0b 20 40 91             	tst        r8,r5
400004d4:	11 f4                   	bne_s      400004f6 <_malloc_r+0x226>

400004d6:	6c 27 47 00             	bmskn      r7,r7,1
400004da:	00 25 45 01             	add        r5,r5,r5
400004de:	0b 20 40 91             	tst        r8,r5
400004e2:	16 00 22 00             	bnz.d      400004f6 <_malloc_r+0x226>

400004e6:	e4 74                   	add_s      r7,r7,4
400004e8:	00 25 45 01             	add        r5,r5,r5
400004ec:	0b 20 40 91             	tst        r8,r5
400004f0:	f8 07 e1 ff             	bz.d       400004e8 <_malloc_r+0x218>

400004f4:	e4 74                   	add_s      r7,r7,4
400004f6:	16 26 c9 71 00 a8 08 04 	add3       r9,0xa8000408,r7
400004fe:	e8 42                   	mov_s      r10,r7
40000500:	21 46                   	mov_s      r6,r9
40000502:	0c 16 03 00             	ld         r3,[r6,12]
40000506:	1f 0e c9 00             	brne.t     r6,r3,40000522 <_malloc_r+0x252>

4000050a:	45 71                   	add_s      r10,r10,1
4000050c:	67 03 20 00             	b.d        40000872 <_malloc_r+0x5a2>

40000510:	44 22 c2 10             	and        r2,r10,3
40000514:	88 03 0a 00             	bge        4000089c <_malloc_r+0x5cc>

40000518:	63 83                   	ld_s       r3,[r3,12]
4000051a:	0c 26 c0 80             	cmp        r6,r3
4000051e:	50 03 01 00             	bz         4000086c <_malloc_r+0x59c>

40000522:	41 83                   	ld_s       r2,[r3,4]
40000524:	6c 22 42 00             	bmskn      r2,r2,1
40000528:	02 22 44 03             	sub        r4,r2,r13
4000052c:	e9 0c 32 84             	brlt.d     r4,16,40000514 <_malloc_r+0x244>

40000530:	94 70                   	cmp_s      r4,0
40000532:	43 83                   	ld_s       r2,[r3,12]
40000534:	68 47                   	mov_s      r15,r3
40000536:	08 17 05 12             	ld.a       r5,[r15,8]
4000053a:	45 25 46 10             	or         r6,r13,1
4000053e:	04 1b 80 01             	st         r6,[r3,4]
40000542:	0c 1d 80 00             	st         r2,[r5,12]
40000546:	08 1a 40 01             	st         r5,[r2,8]
4000054a:	bb 63                   	add_s      r3,r3,r13
4000054c:	00 1e c0 70 00 a8 1c 04 	st         r3,[0xa800041c]
40000554:	00 1e c0 70 00 a8 18 04 	st         r3,[0xa8000418]
4000055c:	45 24 42 00             	or         r2,r4,1
40000560:	0c 1b 80 0f 00 a8 10 04 	st         0xa8000410,[r3,12]
40000568:	41 a3                   	st_s       r2,[r3,4]
4000056a:	08 1b 80 0f 00 a8 10 04 	st         0xa8000410,[r3,8]
40000572:	80 73                   	add_s      r3,r3,r4
40000574:	00 1b 00 01             	st         r4,[r3]
40000578:	86 0e 20 00             	bl.d       40000bfc <__malloc_unlock>

4000057c:	0a 20 80 03             	mov        r0,r14
40000580:	e1 05 ef ff             	b.d        40000360 <_malloc_r+0x90>

40000584:	e1 40                   	mov_s      r0,r15
40000586:	e0 78                   	nop_s      
40000588:	4d 06 ef ff             	b.d        400003d4 <_malloc_r+0x104>

4000058c:	4a 27 c0 0f             	mov        r7,63
40000590:	63 82                   	ld_s       r3,[r2,12]
40000592:	08 12 05 00             	ld         r5,[r2,8]
40000596:	00 24 84 00             	add        r4,r4,r2
4000059a:	0c 1d c0 00             	st         r3,[r5,12]
4000059e:	04 14 06 00             	ld         r6,[r4,4]
400005a2:	08 1b 40 01             	st         r5,[r3,8]
400005a6:	45 26 43 00             	or         r3,r6,1
400005aa:	04 1c c0 00             	st         r3,[r4,4]
400005ae:	c1 40                   	mov_s      r0,r14
400005b0:	4e 0e 20 00             	bl.d       40000bfc <__malloc_unlock>

400005b4:	40 22 0f 02             	add        r15,r2,8
400005b8:	a9 05 ef ff             	b.d        40000360 <_malloc_r+0x90>

400005bc:	e1 40                   	mov_s      r0,r15
400005be:	e0 78                   	nop_s      
400005c0:	fa 62                   	add_s      r2,r2,r15
400005c2:	61 82                   	ld_s       r3,[r2,4]
400005c4:	c1 40                   	mov_s      r0,r14
400005c6:	80 bb                   	bset_s     r3,r3,0
400005c8:	36 0e 20 00             	bl.d       40000bfc <__malloc_unlock>

400005cc:	04 1a c0 00             	st         r3,[r2,4]
400005d0:	8f 05 ef ff             	b.d        4000035e <_malloc_r+0x8e>

400005d4:	08 e7                   	add_s      r15,r15,8
400005d6:	e0 78                   	nop_s      
400005d8:	00 16 0f 70 00 a8 10 04 	ld         r15,[0xa8000410]
400005e0:	04 17 11 10             	ld         r17,[r15,4]
400005e4:	6c 21 51 20             	bmskn      r17,r17,1
400005e8:	13 09 64 23             	brlo.d     r17,r13,400005fa <_malloc_r+0x32a>

400005ec:	02 21 42 23             	sub        r2,r17,r13
400005f0:	8f e2                   	cmp_s      r2,15
400005f2:	78 01 29 00             	bgt.d      40000768 <_malloc_r+0x498>

400005f6:	45 25 43 10             	or         r3,r13,1
400005fa:	00 16 02 70 00 a8 00 04 	ld         r2,[0xa8000400]
40000602:	00 16 12 70 00 a8 d0 0d 	ld         r18,[0xa8000dd0]
4000060a:	54 77                   	cmp_s      r2,-1
4000060c:	00 22 52 23             	add        r18,r18,r13
40000610:	c1 40                   	mov_s      r0,r14
40000612:	c0 22 82 2f 00 00 0f 10 	add.nz     r18,r18,0x100f
4000061a:	c0 22 21 24             	add.z      r18,r18,16
4000061e:	ec 22 e2 22             	bmskn.nz   r18,r18,11
40000622:	00 27 53 14             	add        r19,r15,r17
40000626:	3e 0e 20 00             	bl.d       40000c60 <_sbrk_r>

4000062a:	42 41                   	mov_s      r1,r18
4000062c:	14 77                   	cmp_s      r0,-1
4000062e:	d6 02 21 00             	bz.d       40000902 <_malloc_r+0x632>

40000632:	10 40                   	mov_s      r16,r0
40000634:	0c 23 00 a0             	cmp        r19,r0
40000638:	c0 02 0d 00             	bhi        400008f8 <_malloc_r+0x628>

4000063c:	00 16 03 70 00 a8 a0 0d 	ld         r3,[0xa8000da0]
40000644:	0c 23 00 a4             	cmp        r19,r16
40000648:	42 73                   	add_s      r3,r3,r18
4000064a:	00 1e c0 70 00 a8 a0 0d 	st         r3,[0xa8000da0]
40000652:	dc 03 21 00             	bz.d       40000a2c <_malloc_r+0x75c>

40000656:	53 23 c2 22             	bmsk       r2,r19,11
4000065a:	00 16 02 70 00 a8 00 04 	ld         r2,[0xa8000400]
40000662:	54 77                   	cmp_s      r2,-1
40000664:	14 04 21 00             	bz.d       40000a78 <_malloc_r+0x7a8>

40000668:	02 20 c2 24             	sub        r2,r16,r19
4000066c:	5b 63                   	add_s      r3,r3,r2
4000066e:	00 1e c0 70 00 a8 a0 0d 	st         r3,[0xa8000da0]
40000676:	44 20 c3 a1             	and.f      r3,r16,7
4000067a:	ca 23 81 0f 00 00 00 10 	mov.z      r3,0x1000
40000682:	1e 00 21 00             	bz.d       4000069e <_malloc_r+0x3ce>

40000686:	00 20 82 24             	add        r2,r16,r18
4000068a:	4e 23 02 02             	rsub       r2,r3,8
4000068e:	0e 23 83 0f 00 00 08 10 	rsub       r3,r3,0x1008
40000696:	00 20 90 20             	add        r16,r16,r2
4000069a:	00 20 82 24             	add        r2,r16,r18
4000069e:	cb ba                   	bmsk_s     r2,r2,11
400006a0:	c1 40                   	mov_s      r0,r14
400006a2:	02 23 92 00             	sub        r18,r3,r2
400006a6:	be 0d 20 00             	bl.d       40000c60 <_sbrk_r>

400006aa:	42 41                   	mov_s      r1,r18
400006ac:	14 77                   	cmp_s      r0,-1
400006ae:	c4 03 21 00             	bz.d       40000a70 <_malloc_r+0x7a0>

400006b2:	02 20 00 04             	sub        r0,r0,r16
400006b6:	00 22 02 20             	add        r2,r18,r0
400006ba:	80 ba                   	bset_s     r2,r2,0
400006bc:	00 16 03 70 00 a8 a0 0d 	ld         r3,[0xa8000da0]
400006c4:	00 1e 00 74 00 a8 10 04 	st         r16,[0xa8000410]
400006cc:	42 73                   	add_s      r3,r3,r18
400006ce:	04 18 80 20             	st         r2,[r16,4]
400006d2:	00 1e c0 70 00 a8 a0 0d 	st         r3,[0xa8000da0]
400006da:	39 0f 80 1f 00 a8 08 04 	breq       r15,0xa8000408,40000710 <_malloc_r+0x440>

400006e2:	4c 21 c0 a3             	cmp        r17,15
400006e6:	ac 02 0e 00             	bls        40000990 <_malloc_r+0x6c0>

400006ea:	41 87                   	ld_s       r2,[r15,4]
400006ec:	42 21 04 23             	sub        r4,r17,12
400006f0:	c0 ba                   	bmsk_s     r2,r2,0
400006f2:	6c 24 84 00             	bmskn      r4,r4,2
400006f6:	05 22 02 01             	or         r2,r2,r4
400006fa:	41 a7                   	st_s       r2,[r15,4]
400006fc:	00 27 02 11             	add        r2,r15,r4
40000700:	04 1a 49 01             	st.a       5,[r2,4]
40000704:	4c 24 c0 83             	cmp        r4,15
40000708:	50 03 2d 00             	bhi.d      40000a58 <_malloc_r+0x788>

4000070c:	04 1a 41 01             	st         5,[r2,4]
40000710:	00 16 0f 70 00 a8 10 04 	ld         r15,[0xa8000410]
40000718:	00 16 04 70 00 a8 cc 0d 	ld         r4,[0xa8000dcc]
40000720:	0d 0c c5 00             	brhs.t     r4,r3,4000072c <_malloc_r+0x45c>

40000724:	00 1e c0 70 00 a8 cc 0d 	st         r3,[0xa8000dcc]
4000072c:	00 16 04 70 00 a8 c8 0d 	ld         r4,[0xa8000dc8]
40000734:	90 73                   	cmp_s      r3,r4
40000736:	c4 02 0e 00             	bls        400009f8 <_malloc_r+0x728>

4000073a:	41 87                   	ld_s       r2,[r15,4]
4000073c:	00 1e c0 70 00 a8 c8 0d 	st         r3,[0xa8000dc8]
40000744:	6c 22 43 00             	bmskn      r3,r2,1
40000748:	11 0b 64 03             	brlo.d     r3,r13,40000758 <_malloc_r+0x488>

4000074c:	02 23 42 03             	sub        r2,r3,r13
40000750:	19 0a 3b 04             	brge.t.d   r2,16,40000768 <_malloc_r+0x498>

40000754:	45 25 43 10             	or         r3,r13,1
40000758:	c1 40                   	mov_s      r0,r14
4000075a:	a6 0c 20 00             	bl.d       40000bfc <__malloc_unlock>

4000075e:	ed 70                   	mov_s      r15,0
40000760:	01 04 ef ff             	b.d        40000360 <_malloc_r+0x90>

40000764:	e1 40                   	mov_s      r0,r15
40000766:	e0 78                   	nop_s      
40000768:	61 a7                   	st_s       r3,[r15,4]
4000076a:	fd 65                   	add_s      r13,r13,r15
4000076c:	00 1e 40 73 00 a8 10 04 	st         r13,[0xa8000410]
40000774:	80 ba                   	bset_s     r2,r2,0
40000776:	41 a5                   	st_s       r2,[r13,4]
40000778:	c1 40                   	mov_s      r0,r14
4000077a:	86 0c 20 00             	bl.d       40000bfc <__malloc_unlock>

4000077e:	08 e7                   	add_s      r15,r15,8
40000780:	e1 03 ef ff             	b.d        40000360 <_malloc_r+0x90>

40000784:	e1 40                   	mov_s      r0,r15
40000786:	e0 78                   	nop_s      
40000788:	44 01 2e 00             	bls.d      400008cc <_malloc_r+0x5fc>

4000078c:	40 47                   	mov_s      r7,r2
4000078e:	d4 e2                   	cmp_s      r2,84
40000790:	d8 01 2d 00             	bhi.d      40000968 <_malloc_r+0x698>

40000794:	a1 47                   	mov_s      r7,r13
40000796:	4a 24 00 f3             	mov.f      lp_count,12
4000079a:	e8 20 e2 01             	lpnz       400007a6 <_malloc_r+0x4d6>

4000079e:	2f 27 c2 01             	lsr        r7,r7
400007a2:	4a 26 00 70             	nop        
400007a6:	80 27 81 0b             	add        r7,r7,110
400007aa:	e0 45                   	mov_s      r5,r7
400007ac:	00 25 45 01             	add        r5,r5,r5
400007b0:	25 04 cf ff             	b          400003d4 <_malloc_r+0x104>

400007b4:	4a 24 40 f2             	mov.f      lp_count,9
400007b8:	e8 20 a2 01             	lpnz       400007c4 <_malloc_r+0x4f4>

400007bc:	2f 23 c2 00             	lsr        r3,r3
400007c0:	4a 26 00 70             	nop        
400007c4:	74 74                   	cmp_s      r3,4
400007c6:	18 01 2e 00             	bls.d      400008dc <_malloc_r+0x60c>

400007ca:	40 44                   	mov_s      r4,r2
400007cc:	94 e3                   	cmp_s      r3,20
400007ce:	38 02 2d 00             	bhi.d      40000a04 <_malloc_r+0x734>

400007d2:	60 44                   	mov_s      r4,r3
400007d4:	80 24 c1 06             	add        r4,r4,91
400007d8:	80 45                   	mov_s      r5,r4
400007da:	00 25 45 01             	add        r5,r5,r5
400007de:	15 26 45 71 00 a8 08 04 	add2       r5,0xa8000408,r5
400007e6:	08 15 03 00             	ld         r3,[r5,8]
400007ea:	b0 73                   	cmp_s      r3,r5
400007ec:	b0 01 01 00             	bz         4000099c <_malloc_r+0x6cc>

400007f0:	04 13 04 00             	ld         r4,[r3,4]
400007f4:	6c 24 44 00             	bmskn      r4,r4,1
400007f8:	0b 0a 05 01             	brhs.t     r2,r4,40000802 <_malloc_r+0x532>

400007fc:	62 83                   	ld_s       r3,[r3,8]
400007fe:	f5 0d c1 80             	brne       r5,r3,400007f0 <_malloc_r+0x520>

40000802:	43 83                   	ld_s       r2,[r3,12]
40000804:	00 16 08 70 00 a8 0c 04 	ld         r8,[0xa800040c]
4000080c:	43 a7                   	st_s       r2,[r15,12]
4000080e:	62 a7                   	st_s       r3,[r15,8]
40000810:	e2 a2                   	st_s       r15,[r2,8]
40000812:	9d 04 ef ff             	b.d        400004ac <_malloc_r+0x1dc>

40000816:	e3 a3                   	st_s       r15,[r3,12]
40000818:	45 25 42 10             	or         r2,r13,1
4000081c:	41 a7                   	st_s       r2,[r15,4]
4000081e:	fd 65                   	add_s      r13,r13,r15
40000820:	00 1e 40 73 00 a8 1c 04 	st         r13,[0xa800041c]
40000828:	00 1e 40 73 00 a8 18 04 	st         r13,[0xa8000418]
40000830:	45 23 42 00             	or         r2,r3,1
40000834:	0c 1d 80 1f 00 a8 10 04 	st         0xa8000410,[r13,12]
4000083c:	41 a5                   	st_s       r2,[r13,4]
4000083e:	08 1d 80 1f 00 a8 10 04 	st         0xa8000410,[r13,8]
40000846:	7d 65                   	add_s      r13,r13,r3
40000848:	60 a5                   	st_s       r3,[r13,0]
4000084a:	c1 40                   	mov_s      r0,r14
4000084c:	b2 0b 20 00             	bl.d       40000bfc <__malloc_unlock>

40000850:	40 27 0f 12             	add        r15,r15,8
40000854:	0d 03 ef ff             	b.d        40000360 <_malloc_r+0x90>

40000858:	e1 40                   	mov_s      r0,r15
4000085a:	e0 78                   	nop_s      
4000085c:	00 16 08 70 00 a8 0c 04 	ld         r8,[0xa800040c]
40000864:	4b 04 ef ff             	b.d        400004ae <_malloc_r+0x1de>

40000868:	e0 42                   	mov_s      r2,r7
4000086a:	e0 78                   	nop_s      
4000086c:	45 71                   	add_s      r10,r10,1
4000086e:	44 22 c2 10             	and        r2,r10,3
40000872:	4b 7a                   	tst_s      r2,r2
40000874:	8e 04 e2 ff             	bnz.d      40000502 <_malloc_r+0x232>

40000878:	40 26 06 02             	add        r6,r6,8
4000087c:	a7 00 20 00             	b.d        40000922 <_malloc_r+0x652>

40000880:	44 27 c3 00             	and        r3,r7,3
40000884:	40 27 02 12             	add        r2,r15,8
40000888:	e5 87                   	ld_s       r15,[r15,20]
4000088a:	f1 72                   	cmp_s      r2,r15
4000088c:	7c 03 e1 ff             	bz.d       40000408 <_malloc_r+0x138>

40000890:	c0 27 a1 00             	add.z      r7,r7,2
40000894:	a5 02 ef ff             	b.d        40000338 <_malloc_r+0x68>

40000898:	41 87                   	ld_s       r2,[r15,4]
4000089a:	e0 78                   	nop_s      
4000089c:	7a 62                   	add_s      r2,r2,r3
4000089e:	04 12 05 00             	ld         r5,[r2,4]
400008a2:	0c 13 04 00             	ld         r4,[r3,12]
400008a6:	68 47                   	mov_s      r15,r3
400008a8:	08 17 03 12             	ld.a       r3,[r15,8]
400008ac:	45 25 45 00             	or         r5,r5,1
400008b0:	04 1a 40 01             	st         r5,[r2,4]
400008b4:	0c 1b 00 01             	st         r4,[r3,12]
400008b8:	08 1c c0 00             	st         r3,[r4,8]
400008bc:	42 0b 20 00             	bl.d       40000bfc <__malloc_unlock>

400008c0:	0a 20 80 03             	mov        r0,r14
400008c4:	9d 02 ef ff             	b.d        40000360 <_malloc_r+0x90>

400008c8:	e1 40                   	mov_s      r0,r15
400008ca:	e0 78                   	nop_s      
400008cc:	80 27 c1 06             	add        r7,r7,91
400008d0:	e0 45                   	mov_s      r5,r7
400008d2:	00 25 45 01             	add        r5,r5,r5
400008d6:	01 03 cf ff             	b          400003d4 <_malloc_r+0x104>

400008da:	e0 78                   	nop_s      
400008dc:	4a 24 80 f1             	mov.f      lp_count,6
400008e0:	e8 20 a2 01             	lpnz       400008ec <_malloc_r+0x61c>

400008e4:	2f 24 02 01             	lsr        r4,r4
400008e8:	4a 26 00 70             	nop        
400008ec:	40 24 04 0e             	add        r4,r4,56
400008f0:	80 45                   	mov_s      r5,r4
400008f2:	00 25 45 01             	add        r5,r5,r5
400008f6:	75 f1                   	b_s        400007de <_malloc_r+0x50e>

400008f8:	d3 77 00 a8 08 04       	cmp_s      r15,0xa8000408
400008fe:	40 05 c1 ff             	bz         4000063c <_malloc_r+0x36c>

40000902:	00 16 0f 70 00 a8 10 04 	ld         r15,[0xa8000410]
4000090a:	61 87                   	ld_s       r3,[r15,4]
4000090c:	3d 06 ef ff             	b.d        40000748 <_malloc_r+0x478>

40000910:	6c 23 43 00             	bmskn      r3,r3,1
40000914:	00 11 09 10             	ld         r9,[r9,0]
40000918:	1f 09 a1 10             	brne.d     r9,r2,40000936 <_malloc_r+0x666>

4000091c:	e4 77                   	add_s      r7,r7,-1
4000091e:	44 27 c3 00             	and        r3,r7,3
40000922:	f5 0b 31 80             	brne.d     r3,0,40000914 <_malloc_r+0x644>

40000926:	42 21 02 12             	sub        r2,r9,8
4000092a:	06 20 48 11             	bic        r8,r8,r5
4000092e:	00 1e 00 72 00 a8 0c 04 	st         r8,[0xa800040c]
40000936:	00 25 45 01             	add        r5,r5,r5
4000093a:	0c 25 00 82             	cmp        r5,r8
4000093e:	9c 04 ed ff             	bhi.d      400005d8 <_malloc_r+0x308>

40000942:	0b 25 40 81             	tst        r5,r5
40000946:	94 04 e1 ff             	bz.d       400005d8 <_malloc_r+0x308>

4000094a:	0b 20 40 91             	tst        r8,r5
4000094e:	aa 03 e2 ff             	bnz.d      400004f6 <_malloc_r+0x226>

40000952:	41 47                   	mov_s      r7,r10
40000954:	00 25 45 01             	add        r5,r5,r5
40000958:	0b 20 40 91             	tst        r8,r5
4000095c:	f8 07 e1 ff             	bz.d       40000954 <_malloc_r+0x684>

40000960:	e4 74                   	add_s      r7,r7,4
40000962:	97 03 cf ff             	b          400004f6 <_malloc_r+0x226>

40000966:	e0 78                   	nop_s      
40000968:	69 0e 84 70 00 00 54 01 	brlo       0x154,r2,400009d0 <_malloc_r+0x700>

40000970:	a1 47                   	mov_s      r7,r13
40000972:	4a 24 c0 f3             	mov.f      lp_count,15
40000976:	e8 20 e2 01             	lpnz       40000982 <_malloc_r+0x6b2>

4000097a:	2f 27 c2 01             	lsr        r7,r7
4000097e:	4a 26 00 70             	nop        
40000982:	80 27 c1 0d             	add        r7,r7,119
40000986:	e0 45                   	mov_s      r5,r7
40000988:	00 25 45 01             	add        r5,r5,r5
4000098c:	49 02 cf ff             	b          400003d4 <_malloc_r+0x104>

40000990:	04 18 41 20             	st         1,[r16,4]
40000994:	0a 47                   	mov_s      r15,r16
40000996:	b5 05 ef ff             	b.d        40000748 <_malloc_r+0x478>

4000099a:	6c 70                   	mov_s      r3,0
4000099c:	00 16 08 70 00 a8 0c 04 	ld         r8,[0xa800040c]
400009a4:	2f 24 01 01             	asr        r4,r4
400009a8:	2f 24 01 01             	asr        r4,r4
400009ac:	ac 71                   	mov_s      r5,1
400009ae:	44 24 fc 87             	and.f      lp_count,r4,31
400009b2:	e8 20 e2 01             	lpnz       400009be <_malloc_r+0x6ee>

400009b6:	00 25 45 01             	add        r5,r5,r5
400009ba:	4a 26 00 70             	nop        
400009be:	05 20 48 11             	or         r8,r8,r5
400009c2:	00 1e 00 72 00 a8 0c 04 	st         r8,[0xa800040c]
400009ca:	45 06 ef ff             	b.d        4000080c <_malloc_r+0x53c>

400009ce:	60 42                   	mov_s      r2,r3
400009d0:	7d 0e 84 70 00 00 54 05 	brlo       0x554,r2,40000a4c <_malloc_r+0x77c>

400009d8:	a1 47                   	mov_s      r7,r13
400009da:	4a 24 80 f4             	mov.f      lp_count,18
400009de:	e8 20 e2 01             	lpnz       400009ea <_malloc_r+0x71a>

400009e2:	2f 27 c2 01             	lsr        r7,r7
400009e6:	4a 26 00 70             	nop        
400009ea:	80 27 01 0f             	add        r7,r7,124
400009ee:	e0 45                   	mov_s      r5,r7
400009f0:	00 25 45 01             	add        r5,r5,r5
400009f4:	e1 01 cf ff             	b          400003d4 <_malloc_r+0x104>

400009f8:	61 87                   	ld_s       r3,[r15,4]
400009fa:	51 05 ef ff             	b.d        40000748 <_malloc_r+0x478>

400009fe:	6c 23 43 00             	bmskn      r3,r3,1
40000a02:	e0 78                   	nop_s      
40000a04:	85 0e c4 70 00 00 54 00 	brlo       84,r3,40000a88 <_malloc_r+0x7b8>

40000a0c:	40 44                   	mov_s      r4,r2
40000a0e:	4a 24 00 f3             	mov.f      lp_count,12
40000a12:	e8 20 e2 01             	lpnz       40000a1e <_malloc_r+0x74e>

40000a16:	2f 24 02 01             	lsr        r4,r4
40000a1a:	4a 26 00 70             	nop        
40000a1e:	80 24 81 0b             	add        r4,r4,110
40000a22:	80 45                   	mov_s      r5,r4
40000a24:	00 25 45 01             	add        r5,r5,r5
40000a28:	b7 05 cf ff             	b          400007de <_malloc_r+0x50e>

40000a2c:	4b 7a                   	tst_s      r2,r2
40000a2e:	2e 04 c2 ff             	bnz        4000065a <_malloc_r+0x38a>

40000a32:	00 16 0f 70 00 a8 10 04 	ld         r15,[0xa8000410]
40000a3a:	00 21 91 24             	add        r17,r17,r18
40000a3e:	45 21 51 20             	or         r17,r17,1
40000a42:	d9 04 ef ff             	b.d        40000718 <_malloc_r+0x448>

40000a46:	04 1f 40 14             	st         r17,[r15,4]
40000a4a:	e0 78                   	nop_s      
40000a4c:	8a 25 03 0f             	mov        r5,252
40000a50:	85 01 ef ff             	b.d        400003d4 <_malloc_r+0x104>

40000a54:	8a 27 81 0f             	mov        r7,126
40000a58:	c1 40                   	mov_s      r0,r14
40000a5a:	b6 0d a0 01             	bl.d       4000400c <_free_r>

40000a5e:	40 27 01 12             	add        r1,r15,8
40000a62:	00 16 03 70 00 a8 a0 0d 	ld         r3,[0xa8000da0]
40000a6a:	a9 04 cf ff             	b          40000710 <_malloc_r+0x440>

40000a6e:	e0 78                   	nop_s      
40000a70:	4c 71                   	mov_s      r2,1
40000a72:	4d 04 ef ff             	b.d        400006bc <_malloc_r+0x3ec>

40000a76:	4e 70                   	mov_s      r18,0
40000a78:	00 1e 00 74 00 a8 00 04 	st         r16,[0xa8000400]
40000a80:	fb 03 ef ff             	b.d        4000067a <_malloc_r+0x3aa>

40000a84:	44 20 c3 a1             	and.f      r3,r16,7
40000a88:	29 0e c4 70 00 00 54 01 	brlo       0x154,r3,40000ab0 <_malloc_r+0x7e0>

40000a90:	40 44                   	mov_s      r4,r2
40000a92:	4a 24 c0 f3             	mov.f      lp_count,15
40000a96:	e8 20 e2 01             	lpnz       40000aa2 <_malloc_r+0x7d2>

40000a9a:	2f 24 02 01             	lsr        r4,r4
40000a9e:	4a 26 00 70             	nop        
40000aa2:	80 24 c1 0d             	add        r4,r4,119
40000aa6:	80 45                   	mov_s      r5,r4
40000aa8:	00 25 45 01             	add        r5,r5,r5
40000aac:	33 05 cf ff             	b          400007de <_malloc_r+0x50e>

40000ab0:	29 0e c4 70 00 00 54 05 	brlo       0x554,r3,40000ad8 <_malloc_r+0x808>

40000ab8:	40 44                   	mov_s      r4,r2
40000aba:	4a 24 80 f4             	mov.f      lp_count,18
40000abe:	e8 20 e2 01             	lpnz       40000aca <_malloc_r+0x7fa>

40000ac2:	2f 24 02 01             	lsr        r4,r4
40000ac6:	4a 26 00 70             	nop        
40000aca:	80 24 01 0f             	add        r4,r4,124
40000ace:	80 45                   	mov_s      r5,r4
40000ad0:	00 25 45 01             	add        r5,r5,r5
40000ad4:	0b 05 cf ff             	b          400007de <_malloc_r+0x50e>

40000ad8:	8a 25 03 0f             	mov        r5,252
40000adc:	03 05 ef ff             	b.d        400007de <_malloc_r+0x50e>

40000ae0:	8a 24 81 0f             	mov        r4,126

40000ae4 <memcpy>:
40000ae4:	05 20 43 00             	or         r3,r0,r1
40000ae8:	53 23 7e 80             	bmsk.f     0,r3,1
40000aec:	28 ea                   	breq_s     r2,0,40000b3c <memcpy+0x58>

40000aee:	00 45                   	mov_s      r5,r0
40000af0:	50 00 22 00             	bnz.d      40000b40 <memcpy+0x5c>

40000af4:	00 20 86 00             	add        r6,r0,r2
40000af8:	69 6a                   	sub_s      r3,r2,1
40000afa:	80 81                   	ld_s       r12,[r1,0]
40000afc:	11 0b be 00             	bbit0.d    r3,2,40000b0c <memcpy+0x28>

40000b00:	42 26 06 02             	sub        r6,r6,8
40000b04:	04 1d 10 03             	st.ab      r12,[r5,4]
40000b08:	04 11 0c 02             	ld.a       r12,[r1,4]
40000b0c:	17 0a 54 02             	brlo       r2,9,40000b22 <memcpy+0x3e>

40000b10:	61 81                   	ld_s       r3,[r1,4]
40000b12:	08 1d 10 03             	st.ab      r12,[r5,8]
40000b16:	08 11 0c 02             	ld.a       r12,[r1,8]
40000b1a:	f9 0d a4 81             	brlo.d     r5,r6,40000b10 <memcpy+0x2c>

40000b1e:	fc 1d c0 80             	st         r3,[r5,-4]
40000b22:	00 15 03 00             	ld         r3,[r5,0]
40000b26:	16 26 82 70 ff ff ff ff 	add3       r2,-1,r2
40000b2e:	67 7c                   	xor_s      r12,r12,r3
40000b30:	13 24 8c 10             	bmsk       r12,r12,r2
40000b34:	67 7c                   	xor_s      r12,r12,r3
40000b36:	e0 7f                   	j_s.d      [blink]
40000b38:	00 1d 00 03             	st         r12,[r5]
40000b3c:	e0 7e                   	j_s        [blink]
40000b3e:	e0 78                   	nop_s      
40000b40:	80 89                   	ldb_s      r12,[r1,0]
40000b42:	13 0a 3f 00             	bbit1.d    r2,0,40000b52 <memcpy+0x6e>

40000b46:	42 26 86 00             	sub        r6,r6,2
40000b4a:	01 1d 12 03             	stb.ab     r12,[r5,1]
40000b4e:	01 11 8c 02             	ldb.a      r12,[r1,1]
40000b52:	19 0a d4 00             	brlo       r2,3,40000b68 <memcpy+0x84>

40000b56:	61 89                   	ldb_s      r3,[r1,1]
40000b58:	02 1d 12 03             	stb.ab     r12,[r5,2]
40000b5c:	02 11 8c 02             	ldb.a      r12,[r1,2]
40000b60:	f7 0d a4 81             	brlo.d     r5,r6,40000b56 <memcpy+0x72>

40000b64:	ff 1d c2 80             	stb        r3,[r5,-1]
40000b68:	e0 7f                   	j_s.d      [blink]
40000b6a:	00 1d 02 03             	stb        r12,[r5]
40000b6e:	e0 78                   	nop_s      

40000b70 <memset>:
40000b70:	6f 0a 74 02             	brlo.d     r2,9,40000bde <__strncpy_bzero+0x6>

40000b74:	00 43                   	mov_s      r3,r0
40000b76:	05 20 8c 00             	or         r12,r0,r2
40000b7a:	53 24 4c 90             	bmsk.f     r12,r12,1
40000b7e:	0e e9                   	breq_s     r1,0,40000b98 <memset+0x28>

40000b80:	4a 24 00 00             	mov        r4,0
40000b84:	fc 1c 4a b0             	stb.a      r1,[sp,-4]
40000b88:	01 1c 42 30             	stb        r1,[sp,1]
40000b8c:	02 1c 42 30             	stb        r1,[sp,2]
40000b90:	03 1c 42 30             	stb        r1,[sp,3]
40000b94:	04 14 01 34             	ld.ab      r1,[sp,4]
40000b98:	20 00 21 00             	bz.d       40000bb8 <memset+0x48>

40000b9c:	00 22 c6 00             	add        r6,r2,r3
40000ba0:	ff 1e 42 80             	stb        r1,[r6,-1]
40000ba4:	50 26 0c 00             	bclr       r12,r6,0
40000ba8:	fe 1c 44 90             	sth        r1,[r12,-2]
40000bac:	01 1b 52 00             	stb.ab     r1,[r3,1]
40000bb0:	a0 bb                   	bclr_s     r3,r3,0
40000bb2:	02 1b 54 00             	sth.ab     r1,[r3,2]
40000bb6:	a1 bb                   	bclr_s     r3,r3,1
40000bb8:	42 26 06 02             	sub        r6,r6,8
40000bbc:	15 0e e4 00             	brlo.d     r6,r3,40000bd0 <memset+0x60>

40000bc0:	42 26 06 02             	sub        r6,r6,8
40000bc4:	04 1b 40 00             	st         r1,[r3,4]
40000bc8:	fd 0e e5 80             	brhs.nt.d  r6,r3,40000bc4 <memset+0x54>

40000bcc:	08 1b 50 00             	st.ab      r1,[r3,8]
40000bd0:	46 26 cc 00             	bic        r12,r6,3
40000bd4:	e0 7f                   	j_s.d      [blink]
40000bd6:	23 a4                   	st_s       r1,[r12,12]

40000bd8 <__strncpy_bzero>:
40000bd8:	c5 0a 75 82             	brhs.nt.d  r2,9,40000b9c <memset+0x2c>

40000bdc:	2c 70                   	mov_s      r1,0
40000bde:	6b ba                   	sub_s      r2,r2,11
40000be0:	17 27 8c 70             	sub1       r12,pcl,r2
40000be4:	00 7c                   	j_s        [r12]
40000be6:	27 ab                   	stb_s      r1,[r3,7]
40000be8:	26 ab                   	stb_s      r1,[r3,6]
40000bea:	25 ab                   	stb_s      r1,[r3,5]
40000bec:	24 ab                   	stb_s      r1,[r3,4]
40000bee:	23 ab                   	stb_s      r1,[r3,3]
40000bf0:	22 ab                   	stb_s      r1,[r3,2]
40000bf2:	21 ab                   	stb_s      r1,[r3,1]
40000bf4:	20 ab                   	stb_s      r1,[r3,0]
40000bf6:	e0 7e                   	j_s        [blink]

40000bf8 <__malloc_lock>:
40000bf8:	e0 7e                   	j_s        [blink]
40000bfa:	e0 78                   	nop_s      

40000bfc <__malloc_unlock>:
40000bfc:	e0 7e                   	j_s        [blink]
40000bfe:	e0 78                   	nop_s      

40000c00 <_printf_r>:
40000c00:	a6 c1                   	sub_s      sp,sp,24
40000c02:	f1 c0                   	push_s     blink
40000c04:	41 c2                   	st_s       r2,[sp,4]
40000c06:	42 c3                   	st_s       r3,[sp,8]
40000c08:	0c 1c 00 31             	st         r4,[sp,12]
40000c0c:	10 1c 40 31             	st         r5,[sp,16]
40000c10:	14 1c 80 31             	st         r6,[sp,20]
40000c14:	18 1c c0 31             	st         r7,[sp,24]
40000c18:	20 42                   	mov_s      r2,r1
40000c1a:	22 80                   	ld_s       r1,[r0,8]
40000c1c:	1a 09 20 00             	bl.d       40000d34 <_vfprintf_r>

40000c20:	81 c3                   	add_s      r3,sp,4
40000c22:	00 14 1f 30             	ld         blink,[sp,0]
40000c26:	e0 7f                   	j_s.d      [blink]
40000c28:	a7 c0                   	add_s      sp,sp,28
40000c2a:	e0 78                   	nop_s      

40000c2c <printf>:
40000c2c:	a7 c1                   	sub_s      sp,sp,28
40000c2e:	f1 c0                   	push_s     blink
40000c30:	42 c2                   	st_s       r2,[sp,8]
40000c32:	00 42                   	mov_s      r2,r0
40000c34:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
40000c3c:	43 c3                   	st_s       r3,[sp,12]
40000c3e:	41 c1                   	st_s       r1,[sp,4]
40000c40:	10 1c 00 31             	st         r4,[sp,16]
40000c44:	14 1c 40 31             	st         r5,[sp,20]
40000c48:	18 1c 80 31             	st         r6,[sp,24]
40000c4c:	1c 1c c0 31             	st         r7,[sp,28]
40000c50:	22 80                   	ld_s       r1,[r0,8]
40000c52:	e6 08 20 00             	bl.d       40000d34 <_vfprintf_r>

40000c56:	81 c3                   	add_s      r3,sp,4
40000c58:	00 14 1f 30             	ld         blink,[sp,0]
40000c5c:	e0 7f                   	j_s.d      [blink]
40000c5e:	a8 c0                   	add_s      sp,sp,32

40000c60 <_sbrk_r>:
40000c60:	f1 c0                   	push_s     blink
40000c62:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40000c66:	c3 42 00 a8 1c 15       	mov_s      r2,0xa800151c
40000c6c:	08 45                   	mov_s      r13,r0
40000c6e:	00 1a 01 00             	st         0,[r2]
40000c72:	92 0a 20 05             	bl.d       4000af00 <_sbrk>

40000c76:	20 40                   	mov_s      r0,r1
40000c78:	15 08 80 0f ff ff ff ff 	breq       r0,-1,40000c8c <_sbrk_r+0x2c>

40000c80:	04 14 1f 30             	ld         blink,[sp,4]
40000c84:	00 c5                   	ld_s       r13,[sp,0]
40000c86:	e0 7f                   	j_s.d      [blink]
40000c88:	a2 c0                   	add_s      sp,sp,8
40000c8a:	e0 78                   	nop_s      
40000c8c:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
40000c94:	76 ea                   	breq_s     r2,0,40000c80 <_sbrk_r+0x20>

40000c96:	40 a5                   	st_s       r2,[r13,0]
40000c98:	04 14 1f 30             	ld         blink,[sp,4]
40000c9c:	00 c5                   	ld_s       r13,[sp,0]
40000c9e:	e0 7f                   	j_s.d      [blink]
40000ca0:	a2 c0                   	add_s      sp,sp,8
40000ca2:	e0 78                   	nop_s      

40000ca4 <strcmp>:
40000ca4:	05 20 42 00             	or         r2,r0,r1
40000ca8:	c1 ba                   	bmsk_s     r2,r2,1
40000caa:	75 0a 11 00             	brne       r2,0,40000d1c <strcmp+0x78>

40000cae:	cb 44 01 01 01 01       	mov_s      r12,0x01010101
40000cb4:	2f 25 03 03             	ror        r5,r12
40000cb8:	04 10 02 04             	ld.ab      r2,[r0,4]
40000cbc:	04 11 03 04             	ld.ab      r3,[r1,4]
40000cc0:	e0 78                   	nop_s      
40000cc2:	02 22 04 03             	sub        r4,r2,r12
40000cc6:	06 24 84 00             	bic        r4,r4,r2
40000cca:	04 24 44 01             	and        r4,r4,r5
40000cce:	29 0c 11 00             	brne       r4,0,40000cf4 <strcmp+0x50>

40000cd2:	e9 0a c0 80             	breq       r2,r3,40000cb8 <strcmp+0x14>

40000cd6:	07 22 c0 00             	xor        r0,r2,r3
40000cda:	29 68                   	sub_s      r1,r0,1
40000cdc:	26 78                   	bic_s      r0,r0,r1
40000cde:	02 25 01 00             	sub        r1,r5,r0
40000ce2:	07 25 40 00             	xor        r0,r5,r1
40000ce6:	04 7a                   	and_s      r2,r2,r0
40000ce8:	04 7b                   	and_s      r3,r3,r0
40000cea:	70 72                   	cmp_s      r2,r3
40000cec:	0c 71                   	mov_s      r0,1
40000cee:	e0 7f                   	j_s.d      [blink]
40000cf0:	cf 20 e5 07             	bset.c     r0,r0,31
40000cf4:	07 22 c0 00             	xor        r0,r2,r3
40000cf8:	05 20 00 01             	or         r0,r0,r4
40000cfc:	29 68                   	sub_s      r1,r0,1
40000cfe:	26 78                   	bic_s      r0,r0,r1
40000d00:	02 25 01 00             	sub        r1,r5,r0
40000d04:	07 25 40 00             	xor        r0,r5,r1
40000d08:	04 7a                   	and_s      r2,r2,r0
40000d0a:	04 7b                   	and_s      r3,r3,r0
40000d0c:	02 22 c0 80             	sub.f      r0,r2,r3
40000d10:	ca 20 6d 00             	mov.hi     r0,1
40000d14:	e0 7f                   	j_s.d      [blink]
40000d16:	cf 20 e5 07             	bset.c     r0,r0,31
40000d1a:	e0 78                   	nop_s      
40000d1c:	01 10 82 04             	ldb.ab     r2,[r0,1]
40000d20:	01 11 83 04             	ldb.ab     r3,[r1,1]
40000d24:	e0 78                   	nop_s      
40000d26:	0b 0a 10 00             	breq       r2,0,40000d2e <strcmp+0x8a>

40000d2a:	f5 0a c0 80             	breq       r2,r3,40000d1c <strcmp+0x78>

40000d2e:	e0 7f                   	j_s.d      [blink]
40000d30:	02 22 c0 00             	sub        r0,r2,r3

40000d34 <_vfprintf_r>:
40000d34:	f1 c0                   	push_s     blink
40000d36:	d0 1c 48 b3             	st.a       r13,[sp,-48]
40000d3a:	18 1c c0 34             	st         r19,[sp,24]
40000d3e:	42 c7                   	st_s       r15,[sp,8]
40000d40:	14 1c 80 34             	st         r18,[sp,20]
40000d44:	41 c6                   	st_s       r14,[sp,4]
40000d46:	0c 1c 00 34             	st         r16,[sp,12]
40000d4a:	10 1c 40 34             	st         r17,[sp,16]
40000d4e:	1c 1c 00 35             	st         r20,[sp,28]
40000d52:	20 1c 40 35             	st         r21,[sp,32]
40000d56:	24 1c 80 35             	st         r22,[sp,36]
40000d5a:	28 1c c0 35             	st         r23,[sp,40]
40000d5e:	2c 1c 00 36             	st         r24,[sp,44]
40000d62:	08 47                   	mov_s      r15,r0
40000d64:	82 24 03 3a             	sub        sp,sp,232
40000d68:	28 45                   	mov_s      r13,r1
40000d6a:	50 42                   	mov_s      r18,r2
40000d6c:	12 0f a0 01             	bl.d       4000447c <_localeconv_r>

40000d70:	46 c3                   	st_s       r3,[sp,24]
40000d72:	00 80                   	ld_s       r0,[r0,0]
40000d74:	1a 09 60 02             	bl.d       4000568c <strlen>

40000d78:	34 1c 00 30             	st         r0,[sp,52]
40000d7c:	13 0f 30 10             	breq.d     r15,0,40000d8e <_vfprintf_r+0x5a>

40000d80:	4f c0                   	st_s       r0,[sp,60]
40000d82:	4e 87                   	ld_s       r2,[r15,56]
40000d84:	4b 7a                   	tst_s      r2,r2
40000d86:	5c 0f 61 01             	blz.d      40003ce0 <__sinit>

40000d8a:	ca 20 c1 03             	mov.z      r0,r15
40000d8e:	66 9d                   	ldh_s.x    r3,[r13,12]
40000d90:	2f 22 c8 00             	exth       r2,r3
40000d94:	19 0a 7f 03             	bbit1.d    r2,13,40000dac <_vfprintf_r+0x78>

40000d98:	64 15 04 10             	ld         r4,[r13,100]
40000d9c:	50 24 44 03             	bclr       r4,r4,13
40000da0:	64 1d 00 11             	st         r4,[r13,100]
40000da4:	4f 23 42 03             	bset       r2,r3,13
40000da8:	46 b5                   	sth_s      r2,[r13,12]
40000daa:	50 7a                   	exth_s     r2,r2
40000dac:	e3 ba                   	btst_s     r2,3
40000dae:	ec 02 01 00             	bz         40001098 <_vfprintf_r+0x364>

40000db2:	64 85                   	ld_s       r3,[r13,16]
40000db4:	6b 7b                   	tst_s      r3,r3
40000db6:	e4 02 21 00             	bz.d       40001098 <_vfprintf_r+0x364>

40000dba:	44 22 82 06             	and        r2,r2,26
40000dbe:	8a e2                   	cmp_s      r2,10
40000dc0:	f4 02 01 00             	bz         400010b4 <_vfprintf_r+0x380>

40000dc4:	56 24 57 35             	add3       r23,sp,21
40000dc8:	a7 da                   	mov_s      r2,167
40000dca:	99 c3                   	add_s      r3,sp,100
40000dcc:	83 72                   	add_s      r2,r2,sp
40000dce:	7c 1c 01 30             	st         0,[sp,124]
40000dd2:	02 27 84 20             	sub        r4,r23,r2
40000dd6:	74 1c c0 35             	st         r23,[sp,116]
40000dda:	78 1c 01 30             	st         0,[sp,120]
40000dde:	43 c2                   	st_s       r2,[sp,12]
40000de0:	30 1c 01 30             	st         0,[sp,48]
40000de4:	38 1c 01 30             	st         0,[sp,56]
40000de8:	40 1c 01 30             	st         0,[sp,64]
40000dec:	48 1c 01 30             	st         0,[sp,72]
40000df0:	44 1c 01 30             	st         0,[sp,68]
40000df4:	20 1c 01 30             	st         0,[sp,32]
40000df8:	44 c3                   	st_s       r3,[sp,16]
40000dfa:	50 1c 00 31             	st         r4,[sp,80]
40000dfe:	ea 40                   	mov_s      r8,r23
40000e00:	55 24 58 37             	add2       r24,sp,29
40000e04:	00 12 82 20             	ldb        r2,[r18,0]
40000e08:	4b 7a                   	tst_s      r2,r2
40000e0a:	34 03 21 00             	bz.d       4000113c <_vfprintf_r+0x408>

40000e0e:	a5 e2                   	cmp_s      r2,37
40000e10:	2c 03 21 00             	bz.d       4000113c <_vfprintf_r+0x408>

40000e14:	40 22 42 20             	add        r2,r18,1
40000e18:	13 00 20 00             	b.d        40000e2a <_vfprintf_r+0xf6>

40000e1c:	48 46                   	mov_s      r14,r2
40000e1e:	e0 78                   	nop_s      
40000e20:	17 0b 30 00             	breq.d     r3,0,40000e36 <_vfprintf_r+0x102>

40000e24:	02 26 90 94             	sub.f      r16,r14,r18
40000e28:	48 46                   	mov_s      r14,r2
40000e2a:	01 12 83 04             	ldb.ab     r3,[r2,1]
40000e2e:	f5 0b 71 89             	brne.d     r3,37,40000e20 <_vfprintf_r+0xec>

40000e32:	02 26 90 94             	sub.f      r16,r14,r18
40000e36:	32 00 21 00             	bz.d       40000e66 <_vfprintf_r+0x132>

40000e3a:	1f c2                   	ld_s       r2,[sp,124]
40000e3c:	00 18 80 14             	st         r18,[r8]
40000e40:	00 22 03 04             	add        r3,r2,r16
40000e44:	1e c2                   	ld_s       r2,[sp,120]
40000e46:	04 18 00 14             	st         r16,[r8,4]
40000e4a:	44 71                   	add_s      r2,r2,1
40000e4c:	5f c3                   	st_s       r3,[sp,124]
40000e4e:	87 e2                   	cmp_s      r2,7
40000e50:	b4 02 29 00             	bgt.d      40001104 <_vfprintf_r+0x3d0>

40000e54:	5e c2                   	st_s       r2,[sp,120]
40000e56:	40 20 08 12             	add        r8,r8,8
40000e5a:	20 14 05 30             	ld         r5,[sp,32]
40000e5e:	00 20 50 21             	add        r16,r16,r5
40000e62:	20 1c 00 34             	st         r16,[sp,32]
40000e66:	40 8e                   	ldb_s      r2,[r14,0]
40000e68:	4b 7a                   	tst_s      r2,r2
40000e6a:	b8 02 21 00             	bz.d       40001120 <_vfprintf_r+0x3ec>

40000e6e:	4c 70                   	mov_s      r2,0
40000e70:	57 1c 82 30             	stb        r2,[sp,87]
40000e74:	40 26 52 10             	add        r18,r14,1
40000e78:	01 16 91 10             	ldb        r17,[r14,1]
40000e7c:	6c 70                   	mov_s      r3,0
40000e7e:	6e 77                   	mov_s      r19,-1
40000e80:	ce 70                   	mov_s      r22,0
40000e82:	cd 70                   	mov_s      r14,0
40000e84:	46 71                   	add_s      r18,r18,1
40000e86:	42 21 02 28             	sub        r2,r17,32
40000e8a:	39 0e 85 70 00 00 58 00 	brhs.t     88,r2,40000ec0 <_vfprintf_r+0x18c>

40000e92:	0b 21 40 a4             	tst        r17,r17
40000e96:	8c 02 21 00             	bz.d       40001120 <_vfprintf_r+0x3ec>

40000e9a:	57 1c c2 30             	stb        r3,[sp,87]
40000e9e:	4c 70                   	mov_s      r2,0
40000ea0:	80 1c 42 34             	stb        r17,[sp,128]
40000ea4:	57 1c 82 30             	stb        r2,[sp,87]
40000ea8:	ac 70                   	mov_s      r5,0
40000eaa:	14 1c 41 30             	st         1,[sp,20]
40000eae:	1c 1c 41 30             	st         1,[sp,28]
40000eb2:	6e 70                   	mov_s      r19,0
40000eb4:	2c 1c 01 30             	st         0,[sp,44]
40000eb8:	11 01 20 00             	b.d        40000fc8 <_vfprintf_r+0x294>

40000ebc:	56 24 10 34             	add3       r16,sp,16
40000ec0:	f0 26 82 70 00 40 5c d3 	ld.as      r2,[0x4000d35c,r2]
40000ec8:	00 7a                   	j_s        [r2]
40000eca:	e0 78                   	nop_s      
40000ecc:	84 be                   	bset_s     r14,r14,4
40000ece:	e5 be                   	btst_s     r14,5
40000ed0:	fc 02 22 00             	bnz.d      400011cc <_vfprintf_r+0x498>

40000ed4:	18 14 05 30             	ld         r5,[sp,24]
40000ed8:	e4 be                   	btst_s     r14,4
40000eda:	bc 00 a1 00             	bz.d       40001f94 <_vfprintf_r+0x1260>

40000ede:	06 c2                   	ld_s       r2,[sp,24]
40000ee0:	06 c3                   	ld_s       r3,[sp,24]
40000ee2:	00 12 14 00             	ld         r20,[r2,0]
40000ee6:	64 74                   	add_s      r3,r3,4
40000ee8:	4c 71                   	mov_s      r2,1
40000eea:	ae 70                   	mov_s      r21,0
40000eec:	2d 00 20 00             	b.d        40000f18 <_vfprintf_r+0x1e4>

40000ef0:	46 c3                   	st_s       r3,[sp,24]
40000ef2:	e0 78                   	nop_s      
40000ef4:	84 be                   	bset_s     r14,r14,4
40000ef6:	e5 be                   	btst_s     r14,5
40000ef8:	bc 02 22 00             	bnz.d      400011b4 <_vfprintf_r+0x480>

40000efc:	18 14 05 30             	ld         r5,[sp,24]
40000f00:	e4 be                   	btst_s     r14,4
40000f02:	f0 07 61 00             	bz.d       40001ef0 <_vfprintf_r+0x11bc>

40000f06:	06 c3                   	ld_s       r3,[sp,24]
40000f08:	06 c2                   	ld_s       r2,[sp,24]
40000f0a:	64 74                   	add_s      r3,r3,4
40000f0c:	46 c3                   	st_s       r3,[sp,24]
40000f0e:	00 12 14 00             	ld         r20,[r2,0]
40000f12:	ae 70                   	mov_s      r21,0
40000f14:	4a 22 00 00             	mov        r2,0
40000f18:	6c 70                   	mov_s      r3,0
40000f1a:	57 1c c2 30             	stb        r3,[sp,87]
40000f1e:	ac 70                   	mov_s      r5,0
40000f20:	76 70                   	cmp_s      r19,0
40000f22:	d0 26 ea 11             	bclr.ge    r14,r14,7
40000f26:	13 0b 31 20             	brne.d     r19,0,40000f36 <_vfprintf_r+0x202>

40000f2a:	54 71                   	cmp_s      r2,1
40000f2c:	05 24 7e a5             	or.f       0,r20,r21
40000f30:	94 00 61 00             	bz.d       400017c4 <_vfprintf_r+0xa90>

40000f34:	54 71                   	cmp_s      r2,1
40000f36:	6c 03 61 00             	bz.d       40001aa0 <_vfprintf_r+0xd6c>

40000f3a:	54 72                   	cmp_s      r2,2
40000f3c:	a7 da                   	mov_s      r2,167
40000f3e:	08 02 22 00             	bnz.d      40001144 <_vfprintf_r+0x410>

40000f42:	83 72                   	add_s      r2,r2,sp
40000f44:	48 14 09 30             	ld         r9,[sp,72]
40000f48:	82 43                   	mov_s      r3,r20
40000f4a:	c3 bb                   	bmsk_s     r3,r3,3
40000f4c:	21 73                   	add_s      r3,r3,r9
40000f4e:	00 13 86 00             	ldb        r6,[r3,0]
40000f52:	a2 43                   	mov_s      r3,r21
40000f54:	2f 23 c2 00             	lsr        r3,r3
40000f58:	2f 23 c2 00             	lsr        r3,r3
40000f5c:	2f 23 c2 00             	lsr        r3,r3
40000f60:	2f 23 c2 00             	lsr        r3,r3
40000f64:	50 40                   	mov_s      r16,r2
40000f66:	a2 44                   	mov_s      r4,r21
40000f68:	82 47                   	mov_s      r7,r20
40000f6a:	4a 24 00 f7             	mov.f      lp_count,28
40000f6e:	e8 20 e2 01             	lpnz       40000f7a <_vfprintf_r+0x246>

40000f72:	00 24 04 01             	add        r4,r4,r4
40000f76:	4a 26 00 70             	nop        
40000f7a:	2f 27 c2 01             	lsr        r7,r7
40000f7e:	2f 27 c2 01             	lsr        r7,r7
40000f82:	2f 27 c2 01             	lsr        r7,r7
40000f86:	2f 27 c2 01             	lsr        r7,r7
40000f8a:	00 18 82 21             	stb        r6,[r16]
40000f8e:	05 24 d4 01             	or         r20,r4,r7
40000f92:	70 45                   	mov_s      r21,r3
40000f94:	05 24 7e a5             	or.f       0,r20,r21
40000f98:	b0 07 e2 ff             	bnz.d      40000f48 <_vfprintf_r+0x214>

40000f9c:	42 20 42 20             	sub        r2,r16,1
40000fa0:	02 27 03 24             	sub        r3,r23,r16
40000fa4:	47 c3                   	st_s       r3,[sp,28]
40000fa6:	1c 14 06 30             	ld         r6,[sp,28]
40000faa:	2c 1c 01 30             	st         0,[sp,44]
40000fae:	08 26 c6 04             	max        r6,r6,r19
40000fb2:	14 1c 80 31             	st         r6,[sp,20]
40000fb6:	19 0d 30 00             	breq.d     r5,0,40000fcc <_vfprintf_r+0x298>

40000fba:	44 26 86 10             	and        r6,r14,2
40000fbe:	14 14 04 30             	ld         r4,[sp,20]
40000fc2:	84 71                   	add_s      r4,r4,1
40000fc4:	14 1c 00 31             	st         r4,[sp,20]
40000fc8:	44 26 86 10             	and        r6,r14,2
40000fcc:	13 0e 7e 10             	bbit0.d    r14,1,40000fde <_vfprintf_r+0x2aa>

40000fd0:	24 1c 80 31             	st         r6,[sp,36]
40000fd4:	14 14 04 30             	ld         r4,[sp,20]
40000fd8:	84 72                   	add_s      r4,r4,2
40000fda:	14 1c 00 31             	st         r4,[sp,20]
40000fde:	04 26 86 9f 00 00 84 00 	and.f      r6,r14,132
40000fe6:	28 05 22 00             	bnz.d      4000150c <_vfprintf_r+0x7d8>

40000fea:	28 1c 80 31             	st         r6,[sp,40]
40000fee:	14 14 04 30             	ld         r4,[sp,20]
40000ff2:	02 26 03 21             	sub        r3,r22,r4
40000ff6:	74 70                   	cmp_s      r3,0
40000ff8:	14 05 2c 00             	ble.d      4000150c <_vfprintf_r+0x7d8>

40000ffc:	7c 14 04 30             	ld         r4,[sp,124]
40001000:	5d 0b 72 04             	brlt.d     r3,17,4000105c <_vfprintf_r+0x328>

40001004:	1e c2                   	ld_s       r2,[sp,120]
40001006:	53 c6                   	st_s       r14,[sp,76]
40001008:	15 00 20 00             	b.d        4000101c <_vfprintf_r+0x2e8>

4000100c:	68 46                   	mov_s      r14,r3
4000100e:	e0 78                   	nop_s      
40001010:	42 26 0e 14             	sub        r14,r14,16
40001014:	45 0e 72 14             	brlt.d     r14,17,40001058 <_vfprintf_r+0x324>

40001018:	40 20 08 12             	add        r8,r8,8
4000101c:	44 71                   	add_s      r2,r2,1
4000101e:	40 24 04 04             	add        r4,r4,16
40001022:	00 18 80 1f 00 40 d0 d4 	st         0x4000d4d0,[r8]
4000102a:	04 18 01 14             	st         16,[r8,4]
4000102e:	5e c2                   	st_s       r2,[sp,120]
40001030:	e1 0a 32 82             	brlt.d     r2,8,40001010 <_vfprintf_r+0x2dc>

40001034:	7c 1c 00 31             	st         r4,[sp,124]
40001038:	e1 40                   	mov_s      r0,r15
4000103a:	a1 41                   	mov_s      r1,r13
4000103c:	aa 0f 20 02             	bl.d       400057e4 <__sprint_r>

40001040:	0a 22 00 06             	mov        r2,r24
40001044:	ed 08 31 00             	brne.d     r0,0,40001130 <_vfprintf_r+0x3fc>

40001048:	42 26 0e 14             	sub        r14,r14,16
4000104c:	7c 14 04 30             	ld         r4,[sp,124]
40001050:	1e c2                   	ld_s       r2,[sp,120]
40001052:	cd 0e 73 94             	brge.d     r14,17,4000101c <_vfprintf_r+0x2e8>

40001056:	ea 40                   	mov_s      r8,r23
40001058:	c1 43                   	mov_s      r3,r14
4000105a:	13 c6                   	ld_s       r14,[sp,76]
4000105c:	44 71                   	add_s      r2,r2,1
4000105e:	00 24 c4 00             	add        r4,r4,r3
40001062:	00 18 80 1f 00 40 d0 d4 	st         0x4000d4d0,[r8]
4000106a:	04 18 c0 10             	st         r3,[r8,4]
4000106e:	7c 1c 00 31             	st         r4,[sp,124]
40001072:	87 e2                   	cmp_s      r2,7
40001074:	a8 02 69 00             	bgt.d      40001b1c <_vfprintf_r+0xde8>

40001078:	5e c2                   	st_s       r2,[sp,120]
4000107a:	40 20 08 12             	add        r8,r8,8
4000107e:	95 04 20 00             	b.d        40001510 <_vfprintf_r+0x7dc>

40001082:	57 14 85 30             	ldb        r5,[sp,87]
40001086:	e0 78                   	nop_s      
40001088:	46 c2                   	st_s       r2,[sp,24]
4000108a:	4e 26 16 20             	rsub       r22,r22,0
4000108e:	82 be                   	bset_s     r14,r14,2
40001090:	f5 05 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

40001094:	00 12 91 20             	ldb        r17,[r18,0]
40001098:	e1 40                   	mov_s      r0,r15
4000109a:	3a 0d a0 00             	bl.d       400025d0 <__swsetup_r>

4000109e:	a1 41                   	mov_s      r1,r13
400010a0:	96 e8                   	brne_s     r0,0,400010cc <_vfprintf_r+0x398>

400010a2:	0c 15 02 11             	ldh        r2,[r13,12]
400010a6:	44 22 82 06             	and        r2,r2,26
400010aa:	8a e2                   	cmp_s      r2,10
400010ac:	1c 05 e2 ff             	bnz.d      40000dc8 <_vfprintf_r+0x94>

400010b0:	56 24 57 35             	add3       r23,sp,21
400010b4:	47 9d                   	ldh_s.x    r2,[r13,14]
400010b6:	54 70                   	cmp_s      r2,0
400010b8:	0c 05 eb ff             	blt.d      40000dc4 <_vfprintf_r+0x90>

400010bc:	06 c3                   	ld_s       r3,[sp,24]
400010be:	e1 40                   	mov_s      r0,r15
400010c0:	a1 41                   	mov_s      r1,r13
400010c2:	76 0c a0 00             	bl.d       40002534 <__sbprintf>

400010c6:	42 42                   	mov_s      r2,r18
400010c8:	03 f0                   	b_s        400010ce <_vfprintf_r+0x39a>

400010ca:	e0 78                   	nop_s      
400010cc:	0c 77                   	mov_s      r0,-1
400010ce:	46 14 1f 36             	ld.as      blink,[sp,70]
400010d2:	e8 14 0d 32             	ld.a       r13,[sp,232]
400010d6:	01 c6                   	ld_s       r14,[sp,4]
400010d8:	02 c7                   	ld_s       r15,[sp,8]
400010da:	0c 14 10 30             	ld         r16,[sp,12]
400010de:	10 14 11 30             	ld         r17,[sp,16]
400010e2:	14 14 12 30             	ld         r18,[sp,20]
400010e6:	18 14 13 30             	ld         r19,[sp,24]
400010ea:	1c 14 14 30             	ld         r20,[sp,28]
400010ee:	20 14 15 30             	ld         r21,[sp,32]
400010f2:	24 14 16 30             	ld         r22,[sp,36]
400010f6:	28 14 17 30             	ld         r23,[sp,40]
400010fa:	2c 14 18 30             	ld         r24,[sp,44]
400010fe:	e0 7f                   	j_s.d      [blink]
40001100:	ad c0                   	add_s      sp,sp,52
40001102:	e0 78                   	nop_s      
40001104:	e1 40                   	mov_s      r0,r15
40001106:	a1 41                   	mov_s      r1,r13
40001108:	de 0e 20 02             	bl.d       400057e4 <__sprint_r>

4000110c:	0a 22 00 06             	mov        r2,r24
40001110:	21 08 31 00             	brne.d     r0,0,40001130 <_vfprintf_r+0x3fc>

40001114:	ea 40                   	mov_s      r8,r23
40001116:	4b 05 ef ff             	b.d        40000e5e <_vfprintf_r+0x12a>

4000111a:	20 14 05 30             	ld         r5,[sp,32]
4000111e:	e0 78                   	nop_s      
40001120:	1f c2                   	ld_s       r2,[sp,124]
40001122:	11 0a 38 00             	breq.t.d   r2,0,40001130 <_vfprintf_r+0x3fc>

40001126:	e1 40                   	mov_s      r0,r15
40001128:	a1 41                   	mov_s      r1,r13
4000112a:	be 0e 20 02             	bl.d       400057e4 <__sprint_r>

4000112e:	9d c2                   	add_s      r2,sp,116
40001130:	0c 15 02 11             	ldh        r2,[r13,12]
40001134:	99 0a 97 81             	bbit1.nt   r2,6,400010cc <_vfprintf_r+0x398>

40001138:	08 c0                   	ld_s       r0,[sp,32]
4000113a:	cb f1                   	b_s        400010ce <_vfprintf_r+0x39a>

4000113c:	2b 05 ef ff             	b.d        40000e66 <_vfprintf_r+0x132>

40001140:	4a 46                   	mov_s      r14,r18
40001142:	e0 78                   	nop_s      
40001144:	a2 44                   	mov_s      r4,r21
40001146:	2f 24 02 01             	lsr        r4,r4
4000114a:	2f 24 02 01             	lsr        r4,r4
4000114e:	2f 24 02 01             	lsr        r4,r4
40001152:	50 40                   	mov_s      r16,r2
40001154:	82 43                   	mov_s      r3,r20
40001156:	a2 47                   	mov_s      r7,r21
40001158:	82 46                   	mov_s      r6,r20
4000115a:	44 27 c7 01             	and        r7,r7,7
4000115e:	2f 27 c3 01             	ror        r7,r7
40001162:	2f 27 c3 01             	ror        r7,r7
40001166:	2f 27 c3 01             	ror        r7,r7
4000116a:	2f 26 82 01             	lsr        r6,r6
4000116e:	2f 26 82 01             	lsr        r6,r6
40001172:	2f 26 82 01             	lsr        r6,r6
40001176:	c2 bb                   	bmsk_s     r3,r3,2
40001178:	30 e3                   	add_s      r3,r3,48
4000117a:	00 18 c2 20             	stb        r3,[r16]
4000117e:	05 27 94 01             	or         r20,r7,r6
40001182:	90 45                   	mov_s      r21,r4
40001184:	05 24 7e a5             	or.f       0,r20,r21
40001188:	bc 07 e2 ff             	bnz.d      40001144 <_vfprintf_r+0x410>

4000118c:	42 20 42 20             	sub        r2,r16,1
40001190:	e0 be                   	btst_s     r14,0
40001192:	10 06 e1 ff             	bz.d       40000fa0 <_vfprintf_r+0x26c>

40001196:	02 44                   	mov_s      r4,r16
40001198:	b0 e3                   	cmp_s      r3,48
4000119a:	62 01 61 00             	bz.d       40001afa <_vfprintf_r+0xdc6>

4000119e:	02 27 86 20             	sub        r6,r23,r2
400011a2:	50 40                   	mov_s      r16,r2
400011a4:	1c 1c 80 31             	st         r6,[sp,28]
400011a8:	30 da                   	mov_s      r2,48
400011aa:	ff 05 ef ff             	b.d        40000fa6 <_vfprintf_r+0x272>

400011ae:	ff 1c 82 80             	stb        r2,[r4,-1]
400011b2:	e0 78                   	nop_s      
400011b4:	4c 70                   	mov_s      r2,0
400011b6:	40 25 06 02             	add        r6,r5,8
400011ba:	00 15 14 00             	ld         r20,[r5,0]
400011be:	04 15 15 00             	ld         r21,[r5,4]
400011c2:	59 05 ef ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

400011c6:	18 1c 80 31             	st         r6,[sp,24]
400011ca:	e0 78                   	nop_s      
400011cc:	4c 71                   	mov_s      r2,1
400011ce:	40 25 06 02             	add        r6,r5,8
400011d2:	00 15 14 00             	ld         r20,[r5,0]
400011d6:	04 15 15 00             	ld         r21,[r5,4]
400011da:	41 05 ef ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

400011de:	18 1c 80 31             	st         r6,[sp,24]
400011e2:	e0 78                   	nop_s      
400011e4:	84 be                   	bset_s     r14,r14,4
400011e6:	e5 be                   	btst_s     r14,5
400011e8:	22 01 21 00             	bz.d       4000130a <_vfprintf_r+0x5d6>

400011ec:	57 1c c2 30             	stb        r3,[sp,87]
400011f0:	18 14 04 30             	ld         r4,[sp,24]
400011f4:	04 14 02 00             	ld         r2,[r4,4]
400011f8:	00 14 14 00             	ld         r20,[r4,0]
400011fc:	40 24 05 02             	add        r5,r4,8
40001200:	18 1c 40 31             	st         r5,[sp,24]
40001204:	50 45                   	mov_s      r21,r2
40001206:	54 70                   	cmp_s      r2,0
40001208:	58 03 4b 00             	blt        40001d60 <_vfprintf_r+0x102c>

4000120c:	57 14 85 30             	ldb        r5,[sp,87]
40001210:	11 05 ef ff             	b.d        40000f20 <_vfprintf_r+0x1ec>

40001214:	4c 71                   	mov_s      r2,1
40001216:	e0 78                   	nop_s      
40001218:	e3 be                   	btst_s     r14,3
4000121a:	b4 04 61 00             	bz.d       40001ecc <_vfprintf_r+0x1198>

4000121e:	57 1c c2 30             	stb        r3,[sp,87]
40001222:	18 14 05 30             	ld         r5,[sp,24]
40001226:	18 14 06 30             	ld         r6,[sp,24]
4000122a:	06 c2                   	ld_s       r2,[sp,24]
4000122c:	00 15 05 00             	ld         r5,[r5,0]
40001230:	04 16 06 00             	ld         r6,[r6,4]
40001234:	08 e2                   	add_s      r2,r2,8
40001236:	38 1c 40 31             	st         r5,[sp,56]
4000123a:	40 1c 80 31             	st         r6,[sp,64]
4000123e:	46 c2                   	st_s       r2,[sp,24]
40001240:	0e c0                   	ld_s       r0,[sp,56]
40001242:	10 c1                   	ld_s       r1,[sp,64]
40001244:	22 0b 20 02             	bl.d       40005564 <__fpclassifyd>

40001248:	00 1c 00 32             	st         r8,[sp]
4000124c:	14 71                   	cmp_s      r0,1
4000124e:	30 03 62 00             	bnz.d      40001d7c <_vfprintf_r+0x1048>

40001252:	00 14 08 30             	ld         r8,[sp,0]
40001256:	0e c0                   	ld_s       r0,[sp,56]
40001258:	10 c1                   	ld_s       r1,[sp,64]
4000125a:	4c 70                   	mov_s      r2,0
4000125c:	c6 0f e0 03             	bl.d       40009220 <__ltdf2>

40001260:	6c 70                   	mov_s      r3,0
40001262:	14 70                   	cmp_s      r0,0
40001264:	58 00 ab 00             	blt.d      400022bc <_vfprintf_r+0x1588>

40001268:	00 14 08 30             	ld         r8,[sp,0]
4000126c:	57 14 85 30             	ldb        r5,[sp,87]
40001270:	0a 20 80 2f 00 40 b8 df 	mov        r16,0x4000dfb8
40001278:	8c 21 c1 a1             	cmp        r17,71
4000127c:	a7 be                   	bclr_s     r14,r14,7
4000127e:	ca 20 89 2f 00 40 bc df 	mov.gt     r16,0x4000dfbc
40001286:	14 1c c1 30             	st         3,[sp,20]
4000128a:	1c 1c c1 30             	st         3,[sp,28]
4000128e:	6e 70                   	mov_s      r19,0
40001290:	27 05 ef ff             	b.d        40000fb6 <_vfprintf_r+0x282>

40001294:	2c 1c 01 30             	st         0,[sp,44]
40001298:	83 be                   	bset_s     r14,r14,3
4000129a:	ed 03 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

4000129e:	00 12 91 20             	ldb        r17,[r18,0]
400012a2:	e0 78                   	nop_s      
400012a4:	57 1c c2 30             	stb        r3,[sp,87]
400012a8:	48 1c 80 3f 00 40 c8 df 	st         0x4000dfc8,[sp,72]
400012b0:	e5 be                   	btst_s     r14,5
400012b2:	82 01 21 00             	bz.d       40001432 <_vfprintf_r+0x6fe>

400012b6:	18 14 06 30             	ld         r6,[sp,24]
400012ba:	00 16 14 00             	ld         r20,[r6,0]
400012be:	04 16 15 00             	ld         r21,[r6,4]
400012c2:	40 26 02 02             	add        r2,r6,8
400012c6:	46 c2                   	st_s       r2,[sp,24]
400012c8:	e0 be                   	btst_s     r14,0
400012ca:	50 04 e1 ff             	bz.d       40000f18 <_vfprintf_r+0x1e4>

400012ce:	4c 72                   	mov_s      r2,2
400012d0:	05 24 7e a5             	or.f       0,r20,r21
400012d4:	44 04 c1 ff             	bz         40000f18 <_vfprintf_r+0x1e4>

400012d8:	30 da                   	mov_s      r2,48
400012da:	59 1c 42 34             	stb        r17,[sp,89]
400012de:	76 c2                   	stb_s      r2,[sp,88]
400012e0:	81 be                   	bset_s     r14,r14,1
400012e2:	39 04 ef ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

400012e6:	4c 72                   	mov_s      r2,2
400012e8:	06 c3                   	ld_s       r3,[sp,24]
400012ea:	40 83                   	ld_s       r2,[r3,0]
400012ec:	64 74                   	add_s      r3,r3,4
400012ee:	80 1c 82 30             	stb        r2,[sp,128]
400012f2:	46 c3                   	st_s       r3,[sp,24]
400012f4:	4c 70                   	mov_s      r2,0
400012f6:	b5 03 ef ff             	b.d        40000ea8 <_vfprintf_r+0x174>

400012fa:	57 1c 82 30             	stb        r2,[sp,87]
400012fe:	e0 78                   	nop_s      
40001300:	e5 be                   	btst_s     r14,5
40001302:	f0 06 e2 ff             	bnz.d      400011f0 <_vfprintf_r+0x4bc>

40001306:	57 1c c2 30             	stb        r3,[sp,87]
4000130a:	e4 be                   	btst_s     r14,4
4000130c:	04 04 61 00             	bz.d       40001f10 <_vfprintf_r+0x11dc>

40001310:	18 14 06 30             	ld         r6,[sp,24]
40001314:	00 16 02 00             	ld         r2,[r6,0]
40001318:	c4 74                   	add_s      r6,r6,4
4000131a:	18 1c 80 31             	st         r6,[sp,24]
4000131e:	40 43                   	mov_s      r3,r2
40001320:	50 44                   	mov_s      r20,r2
40001322:	00 23 fe 80             	add.f      0,r3,r3
40001326:	03 23 c3 00             	sbc        r3,r3,r3
4000132a:	60 42                   	mov_s      r2,r3
4000132c:	db 06 ef ff             	b.d        40001206 <_vfprintf_r+0x4d2>

40001330:	70 45                   	mov_s      r21,r3
40001332:	e0 78                   	nop_s      
40001334:	85 be                   	bset_s     r14,r14,5
40001336:	51 03 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

4000133a:	00 12 91 20             	ldb        r17,[r18,0]
4000133e:	e0 78                   	nop_s      
40001340:	86 be                   	bset_s     r14,r14,6
40001342:	45 03 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

40001346:	00 12 91 20             	ldb        r17,[r18,0]
4000134a:	e0 78                   	nop_s      
4000134c:	00 12 91 20             	ldb        r17,[r18,0]
40001350:	42 42                   	mov_s      r2,r18
40001352:	8c 21 01 ab             	cmp        r17,108
40001356:	30 03 e2 ff             	bnz.d      40000e84 <_vfprintf_r+0x150>

4000135a:	cf 26 22 11             	bset.nz    r14,r14,4
4000135e:	46 71                   	add_s      r18,r18,1
40001360:	85 be                   	bset_s     r14,r14,5
40001362:	25 03 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

40001366:	01 12 91 00             	ldb        r17,[r2,1]
4000136a:	e0 78                   	nop_s      
4000136c:	e5 be                   	btst_s     r14,5
4000136e:	cc 03 61 00             	bz.d       40001f38 <_vfprintf_r+0x1204>

40001372:	57 1c c2 30             	stb        r3,[sp,87]
40001376:	06 c3                   	ld_s       r3,[sp,24]
40001378:	18 14 06 30             	ld         r6,[sp,24]
4000137c:	40 83                   	ld_s       r2,[r3,0]
4000137e:	20 14 05 30             	ld         r5,[sp,32]
40001382:	08 c3                   	ld_s       r3,[sp,32]
40001384:	c4 74                   	add_s      r6,r6,4
40001386:	00 23 fe 80             	add.f      0,r3,r3
4000138a:	03 23 c3 00             	sbc        r3,r3,r3
4000138e:	00 1a 40 01             	st         r5,[r2]
40001392:	61 a2                   	st_s       r3,[r2,4]
40001394:	71 02 ef ff             	b.d        40000e04 <_vfprintf_r+0xd0>

40001398:	18 1c 80 31             	st         r6,[sp,24]
4000139c:	06 c2                   	ld_s       r2,[sp,24]
4000139e:	06 c3                   	ld_s       r3,[sp,24]
400013a0:	00 12 10 00             	ld         r16,[r2,0]
400013a4:	4c 70                   	mov_s      r2,0
400013a6:	57 1c 82 30             	stb        r2,[sp,87]
400013aa:	0b 20 00 a4             	tst        r16,r16
400013ae:	54 06 61 00             	bz.d       40002200 <_vfprintf_r+0x14cc>

400013b2:	64 74                   	add_s      r3,r3,4
400013b4:	76 70                   	cmp_s      r19,0
400013b6:	a4 05 6b 00             	blt.d      40002158 <_vfprintf_r+0x1424>

400013ba:	02 40                   	mov_s      r0,r16
400013bc:	42 c3                   	st_s       r3,[sp,8]
400013be:	00 1c 00 32             	st         r8,[sp]
400013c2:	2c 70                   	mov_s      r1,0
400013c4:	f2 09 a0 01             	bl.d       400045b4 <memchr>

400013c8:	62 42                   	mov_s      r2,r19
400013ca:	02 c3                   	ld_s       r3,[sp,8]
400013cc:	0b 78                   	tst_s      r0,r0
400013ce:	2c 07 61 00             	bz.d       400022f8 <_vfprintf_r+0x15c4>

400013d2:	00 14 08 30             	ld         r8,[sp,0]
400013d6:	02 20 00 04             	sub        r0,r0,r16
400013da:	57 14 85 30             	ldb        r5,[sp,87]
400013de:	48 20 06 00             	max        r6,r0,0
400013e2:	47 c0                   	st_s       r0,[sp,28]
400013e4:	14 1c 80 31             	st         r6,[sp,20]
400013e8:	46 c3                   	st_s       r3,[sp,24]
400013ea:	6e 70                   	mov_s      r19,0
400013ec:	cb 03 ef ff             	b.d        40000fb6 <_vfprintf_r+0x282>

400013f0:	2c 1c 01 30             	st         0,[sp,44]
400013f4:	18 14 06 30             	ld         r6,[sp,24]
400013f8:	00 16 16 00             	ld         r22,[r6,0]
400013fc:	c0 42                   	mov_s      r2,r6
400013fe:	d6 70                   	cmp_s      r22,0
40001400:	88 04 eb ff             	blt.d      40001088 <_vfprintf_r+0x354>

40001404:	44 74                   	add_s      r2,r2,4
40001406:	00 12 91 20             	ldb        r17,[r18,0]
4000140a:	7d 02 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

4000140e:	46 c2                   	st_s       r2,[sp,24]
40001410:	00 12 91 20             	ldb        r17,[r18,0]
40001414:	71 02 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

40001418:	2b db                   	mov_s      r3,43
4000141a:	e0 78                   	nop_s      
4000141c:	57 1c c2 30             	stb        r3,[sp,87]
40001420:	48 1c 80 3f 00 40 dc df 	st         0x4000dfdc,[sp,72]
40001428:	e5 be                   	btst_s     r14,5
4000142a:	92 06 e2 ff             	bnz.d      400012ba <_vfprintf_r+0x586>

4000142e:	18 14 06 30             	ld         r6,[sp,24]
40001432:	e4 be                   	btst_s     r14,4
40001434:	40 03 61 00             	bz.d       40001f74 <_vfprintf_r+0x1240>

40001438:	06 c3                   	ld_s       r3,[sp,24]
4000143a:	ae 70                   	mov_s      r21,0
4000143c:	00 13 14 00             	ld         r20,[r3,0]
40001440:	64 74                   	add_s      r3,r3,4
40001442:	89 06 ef ff             	b.d        400012c8 <_vfprintf_r+0x594>

40001446:	46 c3                   	st_s       r3,[sp,24]
40001448:	18 14 06 30             	ld         r6,[sp,24]
4000144c:	30 da                   	mov_s      r2,48
4000144e:	76 c2                   	stb_s      r2,[sp,88]
40001450:	78 da                   	mov_s      r2,120
40001452:	00 16 14 00             	ld         r20,[r6,0]
40001456:	59 1c 82 30             	stb        r2,[sp,89]
4000145a:	c4 74                   	add_s      r6,r6,4
4000145c:	ae 70                   	mov_s      r21,0
4000145e:	81 be                   	bset_s     r14,r14,1
40001460:	18 1c 80 31             	st         r6,[sp,24]
40001464:	48 1c 80 3f 00 40 dc df 	st         0x4000dfdc,[sp,72]
4000146c:	4c 72                   	mov_s      r2,2
4000146e:	ad 02 ef ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

40001472:	8a 21 01 2e             	mov        r17,120
40001476:	e0 78                   	nop_s      
40001478:	6b 7b                   	tst_s      r3,r3
4000147a:	00 12 91 20             	ldb        r17,[r18,0]
4000147e:	09 02 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

40001482:	ca 23 21 08             	mov.z      r3,32
40001486:	e0 78                   	nop_s      
40001488:	80 be                   	bset_s     r14,r14,0
4000148a:	fd 01 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

4000148e:	00 12 91 20             	ldb        r17,[r18,0]
40001492:	e0 78                   	nop_s      
40001494:	4a 26 00 20             	mov        r22,0
40001498:	42 21 02 2c             	sub        r2,r17,48
4000149c:	01 12 91 24             	ldb.ab     r17,[r18,1]
400014a0:	15 26 96 25             	add2       r22,r22,r22
400014a4:	14 22 96 05             	add1       r22,r2,r22
400014a8:	42 21 02 2c             	sub        r2,r17,48
400014ac:	f1 0a 94 82             	brlo       r2,10,4000149c <_vfprintf_r+0x768>

400014b0:	42 21 02 28             	sub        r2,r17,32
400014b4:	d7 01 cf ff             	b          40000e8a <_vfprintf_r+0x156>

400014b8:	00 12 91 20             	ldb        r17,[r18,0]
400014bc:	4c 21 80 aa             	cmp        r17,42
400014c0:	08 00 a1 00             	bz.d       400024c8 <_vfprintf_r+0x1794>

400014c4:	40 22 44 20             	add        r4,r18,1
400014c8:	42 21 02 2c             	sub        r2,r17,48
400014cc:	89 e2                   	cmp_s      r2,9
400014ce:	ca 22 0d 21             	mov.hi     r18,r4
400014d2:	b6 01 ed ff             	bhi.d      40000e86 <_vfprintf_r+0x152>

400014d6:	ca 23 2d 20             	mov.hi     r19,0
400014da:	6e 70                   	mov_s      r19,0
400014dc:	01 14 91 04             	ldb.ab     r17,[r4,1]
400014e0:	15 23 d3 24             	add2       r19,r19,r19
400014e4:	14 22 d3 04             	add1       r19,r2,r19
400014e8:	42 21 02 2c             	sub        r2,r17,48
400014ec:	f1 0a 94 82             	brlo       r2,10,400014dc <_vfprintf_r+0x7a8>

400014f0:	90 42                   	mov_s      r18,r4
400014f2:	88 23 ff 2f             	max        r19,r19,-1
400014f6:	97 01 ef ff             	b.d        40000e8a <_vfprintf_r+0x156>

400014fa:	42 21 02 28             	sub        r2,r17,32
400014fe:	e0 78                   	nop_s      
40001500:	87 be                   	bset_s     r14,r14,7
40001502:	85 01 ef ff             	b.d        40000e84 <_vfprintf_r+0x150>

40001506:	00 12 91 20             	ldb        r17,[r18,0]
4000150a:	e0 78                   	nop_s      
4000150c:	7c 14 04 30             	ld         r4,[sp,124]
40001510:	31 0d 30 00             	breq.d     r5,0,40001540 <_vfprintf_r+0x80c>

40001514:	24 14 06 30             	ld         r6,[sp,36]
40001518:	1e c2                   	ld_s       r2,[sp,120]
4000151a:	84 71                   	add_s      r4,r4,1
4000151c:	44 71                   	add_s      r2,r2,1
4000151e:	83 45                   	mov_s      r5,sp
40001520:	04 18 41 10             	st         1,[r8,4]
40001524:	80 25 c1 05             	add        r5,r5,87
40001528:	7c 1c 00 31             	st         r4,[sp,124]
4000152c:	00 18 40 11             	st         r5,[r8]
40001530:	87 e2                   	cmp_s      r2,7
40001532:	90 04 29 00             	bgt.d      400019c0 <_vfprintf_r+0xc8c>

40001536:	5e c2                   	st_s       r2,[sp,120]
40001538:	40 20 08 12             	add        r8,r8,8
4000153c:	24 14 06 30             	ld         r6,[sp,36]
40001540:	2d 0e 30 00             	breq.d     r6,0,4000156c <_vfprintf_r+0x838>

40001544:	28 14 05 30             	ld         r5,[sp,40]
40001548:	1e c2                   	ld_s       r2,[sp,120]
4000154a:	84 72                   	add_s      r4,r4,2
4000154c:	44 71                   	add_s      r2,r2,1
4000154e:	96 c3                   	add_s      r3,sp,88
40001550:	04 18 81 10             	st         2,[r8,4]
40001554:	00 18 c0 10             	st         r3,[r8]
40001558:	7c 1c 00 31             	st         r4,[sp,124]
4000155c:	87 e2                   	cmp_s      r2,7
4000155e:	80 04 29 00             	bgt.d      400019dc <_vfprintf_r+0xca8>

40001562:	5e c2                   	st_s       r2,[sp,120]
40001564:	40 20 08 12             	add        r8,r8,8
40001568:	28 14 05 30             	ld         r5,[sp,40]
4000156c:	52 25 fe 81             	bxor.f     0,r5,7
40001570:	80 02 21 00             	bz.d       400017f0 <_vfprintf_r+0xabc>

40001574:	14 14 06 30             	ld         r6,[sp,20]
40001578:	07 c2                   	ld_s       r2,[sp,28]
4000157a:	02 23 93 20             	sub        r19,r19,r2
4000157e:	7f 0b 52 20             	brlt       r19,1,400015fa <_vfprintf_r+0x8c6>

40001582:	1d 0b 7b 24             	brge.t.d   r19,17,4000159c <_vfprintf_r+0x868>

40001586:	1e c2                   	ld_s       r2,[sp,120]
40001588:	53 00 20 00             	b.d        400015da <_vfprintf_r+0x8a6>

4000158c:	44 71                   	add_s      r2,r2,1
4000158e:	e0 78                   	nop_s      
40001590:	42 23 13 24             	sub        r19,r19,16
40001594:	45 0b 72 24             	brlt.d     r19,17,400015d8 <_vfprintf_r+0x8a4>

40001598:	40 20 08 12             	add        r8,r8,8
4000159c:	44 71                   	add_s      r2,r2,1
4000159e:	40 24 04 04             	add        r4,r4,16
400015a2:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
400015aa:	04 18 01 14             	st         16,[r8,4]
400015ae:	5e c2                   	st_s       r2,[sp,120]
400015b0:	e1 0a 32 82             	brlt.d     r2,8,40001590 <_vfprintf_r+0x85c>

400015b4:	7c 1c 00 31             	st         r4,[sp,124]
400015b8:	e1 40                   	mov_s      r0,r15
400015ba:	a1 41                   	mov_s      r1,r13
400015bc:	2a 0a 20 02             	bl.d       400057e4 <__sprint_r>

400015c0:	03 42                   	mov_s      r2,r24
400015c2:	0b 78                   	tst_s      r0,r0
400015c4:	6c 03 e2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400015c8:	42 23 13 24             	sub        r19,r19,16
400015cc:	7c 14 04 30             	ld         r4,[sp,124]
400015d0:	1e c2                   	ld_s       r2,[sp,120]
400015d2:	cd 0b 73 a4             	brge.d     r19,17,4000159c <_vfprintf_r+0x868>

400015d6:	ea 40                   	mov_s      r8,r23
400015d8:	44 71                   	add_s      r2,r2,1
400015da:	00 24 c4 04             	add        r4,r4,r19
400015de:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
400015e6:	04 18 c0 14             	st         r19,[r8,4]
400015ea:	7c 1c 00 31             	st         r4,[sp,124]
400015ee:	87 e2                   	cmp_s      r2,7
400015f0:	b4 03 29 00             	bgt.d      400019a4 <_vfprintf_r+0xc70>

400015f4:	5e c2                   	st_s       r2,[sp,120]
400015f6:	40 20 08 12             	add        r8,r8,8
400015fa:	ed 0e 3f 12             	bbit1.d    r14,8,400016e4 <_vfprintf_r+0x9b0>

400015fe:	8c 21 41 a9             	cmp        r17,101
40001602:	07 c3                   	ld_s       r3,[sp,28]
40001604:	1e c2                   	ld_s       r2,[sp,120]
40001606:	00 24 c4 00             	add        r4,r4,r3
4000160a:	44 71                   	add_s      r2,r2,1
4000160c:	00 18 00 14             	st         r16,[r8]
40001610:	04 18 c0 10             	st         r3,[r8,4]
40001614:	7c 1c 00 31             	st         r4,[sp,124]
40001618:	87 e2                   	cmp_s      r2,7
4000161a:	70 03 29 00             	bgt.d      40001988 <_vfprintf_r+0xc54>

4000161e:	5e c2                   	st_s       r2,[sp,120]
40001620:	40 20 08 12             	add        r8,r8,8
40001624:	9d 0e be 10             	bbit0.d    r14,2,400016c0 <_vfprintf_r+0x98c>

40001628:	20 14 06 30             	ld         r6,[sp,32]
4000162c:	14 14 06 30             	ld         r6,[sp,20]
40001630:	02 26 8e 21             	sub        r14,r22,r6
40001634:	89 0e 52 10             	brlt       r14,1,400016bc <_vfprintf_r+0x988>

40001638:	19 0e 7b 14             	brge.t.d   r14,17,40001650 <_vfprintf_r+0x91c>

4000163c:	1e c2                   	ld_s       r2,[sp,120]
4000163e:	53 00 20 00             	b.d        4000168e <_vfprintf_r+0x95a>

40001642:	44 71                   	add_s      r2,r2,1
40001644:	42 26 0e 14             	sub        r14,r14,16
40001648:	45 0e 72 14             	brlt.d     r14,17,4000168c <_vfprintf_r+0x958>

4000164c:	40 20 08 12             	add        r8,r8,8
40001650:	44 71                   	add_s      r2,r2,1
40001652:	40 24 04 04             	add        r4,r4,16
40001656:	00 18 80 1f 00 40 d0 d4 	st         0x4000d4d0,[r8]
4000165e:	04 18 01 14             	st         16,[r8,4]
40001662:	5e c2                   	st_s       r2,[sp,120]
40001664:	e1 0a 32 82             	brlt.d     r2,8,40001644 <_vfprintf_r+0x910>

40001668:	7c 1c 00 31             	st         r4,[sp,124]
4000166c:	e1 40                   	mov_s      r0,r15
4000166e:	a1 41                   	mov_s      r1,r13
40001670:	76 09 20 02             	bl.d       400057e4 <__sprint_r>

40001674:	03 42                   	mov_s      r2,r24
40001676:	0b 78                   	tst_s      r0,r0
40001678:	b8 02 e2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

4000167c:	42 26 0e 14             	sub        r14,r14,16
40001680:	7c 14 04 30             	ld         r4,[sp,124]
40001684:	1e c2                   	ld_s       r2,[sp,120]
40001686:	cd 0e 73 94             	brge.d     r14,17,40001650 <_vfprintf_r+0x91c>

4000168a:	ea 40                   	mov_s      r8,r23
4000168c:	44 71                   	add_s      r2,r2,1
4000168e:	00 24 84 03             	add        r4,r4,r14
40001692:	00 18 80 1f 00 40 d0 d4 	st         0x4000d4d0,[r8]
4000169a:	04 18 80 13             	st         r14,[r8,4]
4000169e:	7c 1c 00 31             	st         r4,[sp,124]
400016a2:	1d 0a 3a 02             	brlt.t.d   r2,8,400016bc <_vfprintf_r+0x988>

400016a6:	5e c2                   	st_s       r2,[sp,120]
400016a8:	e1 40                   	mov_s      r0,r15
400016aa:	a1 41                   	mov_s      r1,r13
400016ac:	3a 09 20 02             	bl.d       400057e4 <__sprint_r>

400016b0:	03 42                   	mov_s      r2,r24
400016b2:	0b 78                   	tst_s      r0,r0
400016b4:	7c 02 e2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400016b8:	7c 14 04 30             	ld         r4,[sp,124]
400016bc:	20 14 06 30             	ld         r6,[sp,32]
400016c0:	14 14 05 30             	ld         r5,[sp,20]
400016c4:	0b 24 00 81             	tst        r4,r4
400016c8:	08 26 56 21             	max        r22,r22,r5
400016cc:	00 26 96 21             	add        r22,r22,r6
400016d0:	68 02 22 00             	bnz.d      40001938 <_vfprintf_r+0xc04>

400016d4:	20 1c 80 35             	st         r22,[sp,32]
400016d8:	78 1c 01 30             	st         0,[sp,120]
400016dc:	29 07 af ff             	b.d        40000e04 <_vfprintf_r+0xd0>

400016e0:	ea 40                   	mov_s      r8,r23
400016e2:	e0 78                   	nop_s      
400016e4:	98 01 2c 00             	ble.d      4000187c <_vfprintf_r+0xb48>

400016e8:	30 14 05 30             	ld         r5,[sp,48]
400016ec:	0e c0                   	ld_s       r0,[sp,56]
400016ee:	10 c1                   	ld_s       r1,[sp,64]
400016f0:	08 1c 00 31             	st         r4,[sp,8]
400016f4:	00 1c 00 32             	st         r8,[sp]
400016f8:	4c 70                   	mov_s      r2,0
400016fa:	2a 0a e0 03             	bl.d       40009120 <__eqdf2>

400016fe:	6c 70                   	mov_s      r3,0
40001700:	08 14 04 30             	ld         r4,[sp,8]
40001704:	0b 78                   	tst_s      r0,r0
40001706:	f4 02 22 00             	bnz.d      400019f8 <_vfprintf_r+0xcc4>

4000170a:	00 14 08 30             	ld         r8,[sp,0]
4000170e:	1e c2                   	ld_s       r2,[sp,120]
40001710:	84 71                   	add_s      r4,r4,1
40001712:	44 71                   	add_s      r2,r2,1
40001714:	00 18 80 1f 00 40 00 d9 	st         0x4000d900,[r8]
4000171c:	04 18 41 10             	st         1,[r8,4]
40001720:	7c 1c 00 31             	st         r4,[sp,124]
40001724:	87 e2                   	cmp_s      r2,7
40001726:	b4 00 69 00             	bgt.d      40001fd8 <_vfprintf_r+0x12a4>

4000172a:	5e c2                   	st_s       r2,[sp,120]
4000172c:	40 20 08 12             	add        r8,r8,8
40001730:	17 c2                   	ld_s       r2,[sp,92]
40001732:	30 14 05 30             	ld         r5,[sp,48]
40001736:	11 0a 62 01             	brlt.d     r2,r5,40001744 <_vfprintf_r+0xa10>

4000173a:	3c 14 06 30             	ld         r6,[sp,60]
4000173e:	e0 be                   	btst_s     r14,0
40001740:	e4 06 c1 ff             	bz         40001624 <_vfprintf_r+0x8f0>

40001744:	1e c2                   	ld_s       r2,[sp,120]
40001746:	0d c3                   	ld_s       r3,[sp,52]
40001748:	44 71                   	add_s      r2,r2,1
4000174a:	00 24 84 01             	add        r4,r4,r6
4000174e:	00 18 c0 10             	st         r3,[r8]
40001752:	04 18 80 11             	st         r6,[r8,4]
40001756:	7c 1c 00 31             	st         r4,[sp,124]
4000175a:	87 e2                   	cmp_s      r2,7
4000175c:	e0 01 69 00             	bgt.d      4000213c <_vfprintf_r+0x1408>

40001760:	5e c2                   	st_s       r2,[sp,120]
40001762:	40 20 08 12             	add        r8,r8,8
40001766:	30 14 10 30             	ld         r16,[sp,48]
4000176a:	06 77                   	add_s      r16,r16,-1
4000176c:	16 70                   	cmp_s      r16,0
4000176e:	b8 06 cc ff             	ble        40001624 <_vfprintf_r+0x8f0>

40001772:	1d 08 7b 24             	brge.t.d   r16,17,4000178c <_vfprintf_r+0xa58>

40001776:	1e c2                   	ld_s       r2,[sp,120]
40001778:	25 04 00 00             	b          40001b9c <_vfprintf_r+0xe68>

4000177c:	40 20 08 12             	add        r8,r8,8
40001780:	42 20 10 24             	sub        r16,r16,16
40001784:	4c 20 00 a4             	cmp        r16,16
40001788:	14 04 0c 00             	ble        40001b9c <_vfprintf_r+0xe68>

4000178c:	44 71                   	add_s      r2,r2,1
4000178e:	40 24 04 04             	add        r4,r4,16
40001792:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
4000179a:	04 18 01 14             	st         16,[r8,4]
4000179e:	5e c2                   	st_s       r2,[sp,120]
400017a0:	dd 0a 32 82             	brlt.d     r2,8,4000177c <_vfprintf_r+0xa48>

400017a4:	7c 1c 00 31             	st         r4,[sp,124]
400017a8:	e1 40                   	mov_s      r0,r15
400017aa:	a1 41                   	mov_s      r1,r13
400017ac:	3a 08 20 02             	bl.d       400057e4 <__sprint_r>

400017b0:	03 42                   	mov_s      r2,r24
400017b2:	0b 78                   	tst_s      r0,r0
400017b4:	7c 01 e2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400017b8:	7c 14 04 30             	ld         r4,[sp,124]
400017bc:	1e c2                   	ld_s       r2,[sp,120]
400017be:	c5 07 ef ff             	b.d        40001780 <_vfprintf_r+0xa4c>

400017c2:	ea 40                   	mov_s      r8,r23
400017c4:	90 ea                   	brne_s     r2,0,400017e4 <_vfprintf_r+0xab0>

400017c6:	21 0e 3e 10             	bbit0.d    r14,0,400017e4 <_vfprintf_r+0xab0>

400017ca:	50 14 04 30             	ld         r4,[sp,80]
400017ce:	30 da                   	mov_s      r2,48
400017d0:	93 40                   	mov_s      r16,sp
400017d2:	1c 1c 00 31             	st         r4,[sp,28]
400017d6:	a7 1c 82 30             	stb        r2,[sp,167]
400017da:	cf 07 af ff             	b.d        40000fa6 <_vfprintf_r+0x272>

400017de:	80 20 c2 29             	add        r16,r16,167
400017e2:	e0 78                   	nop_s      
400017e4:	1c 1c 01 30             	st         0,[sp,28]
400017e8:	bf 07 af ff             	b.d        40000fa6 <_vfprintf_r+0x272>

400017ec:	f2 40                   	mov_s      r16,r23
400017ee:	e0 78                   	nop_s      
400017f0:	02 26 83 21             	sub        r3,r22,r6
400017f4:	74 70                   	cmp_s      r3,0
400017f6:	84 05 cc ff             	ble        40001578 <_vfprintf_r+0x844>

400017fa:	5d 0b 72 04             	brlt.d     r3,17,40001854 <_vfprintf_r+0xb20>

400017fe:	1e c2                   	ld_s       r2,[sp,120]
40001800:	49 c6                   	st_s       r14,[sp,36]
40001802:	15 00 20 00             	b.d        40001814 <_vfprintf_r+0xae0>

40001806:	68 46                   	mov_s      r14,r3
40001808:	42 26 0e 14             	sub        r14,r14,16
4000180c:	45 0e 72 14             	brlt.d     r14,17,40001850 <_vfprintf_r+0xb1c>

40001810:	40 20 08 12             	add        r8,r8,8
40001814:	44 71                   	add_s      r2,r2,1
40001816:	40 24 04 04             	add        r4,r4,16
4000181a:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40001822:	04 18 01 14             	st         16,[r8,4]
40001826:	5e c2                   	st_s       r2,[sp,120]
40001828:	e1 0a 32 82             	brlt.d     r2,8,40001808 <_vfprintf_r+0xad4>

4000182c:	7c 1c 00 31             	st         r4,[sp,124]
40001830:	e1 40                   	mov_s      r0,r15
40001832:	a1 41                   	mov_s      r1,r13
40001834:	b2 0f e0 01             	bl.d       400057e4 <__sprint_r>

40001838:	03 42                   	mov_s      r2,r24
4000183a:	0b 78                   	tst_s      r0,r0
4000183c:	f4 00 e2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001840:	42 26 0e 14             	sub        r14,r14,16
40001844:	7c 14 04 30             	ld         r4,[sp,124]
40001848:	1e c2                   	ld_s       r2,[sp,120]
4000184a:	cd 0e 73 94             	brge.d     r14,17,40001814 <_vfprintf_r+0xae0>

4000184e:	ea 40                   	mov_s      r8,r23
40001850:	c1 43                   	mov_s      r3,r14
40001852:	09 c6                   	ld_s       r14,[sp,36]
40001854:	44 71                   	add_s      r2,r2,1
40001856:	00 24 c4 00             	add        r4,r4,r3
4000185a:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40001862:	04 18 c0 10             	st         r3,[r8,4]
40001866:	7c 1c 00 31             	st         r4,[sp,124]
4000186a:	87 e2                   	cmp_s      r2,7
4000186c:	d8 04 29 00             	bgt.d      40001d44 <_vfprintf_r+0x1010>

40001870:	5e c2                   	st_s       r2,[sp,120]
40001872:	09 05 ef ff             	b.d        40001578 <_vfprintf_r+0x844>

40001876:	40 20 08 12             	add        r8,r8,8
4000187a:	e0 78                   	nop_s      
4000187c:	78 14 11 30             	ld         r17,[sp,120]
40001880:	84 71                   	add_s      r4,r4,1
40001882:	26 71                   	add_s      r17,r17,1
40001884:	00 18 00 14             	st         r16,[r8]
40001888:	04 18 41 10             	st         1,[r8,4]
4000188c:	7c 1c 00 31             	st         r4,[sp,124]
40001890:	b4 71                   	cmp_s      r5,1
40001892:	1c 04 2c 00             	ble.d      40001cac <_vfprintf_r+0xf78>

40001896:	78 1c 40 34             	st         r17,[sp,120]
4000189a:	4c 21 c0 a1             	cmp        r17,7
4000189e:	68 04 29 00             	bgt.d      40001d04 <_vfprintf_r+0xfd0>

400018a2:	40 20 08 12             	add        r8,r8,8
400018a6:	3c 14 06 30             	ld         r6,[sp,60]
400018aa:	0d c2                   	ld_s       r2,[sp,52]
400018ac:	26 71                   	add_s      r17,r17,1
400018ae:	00 24 84 01             	add        r4,r4,r6
400018b2:	00 18 80 10             	st         r2,[r8]
400018b6:	04 18 80 11             	st         r6,[r8,4]
400018ba:	7c 1c 00 31             	st         r4,[sp,124]
400018be:	4c 21 c0 a1             	cmp        r17,7
400018c2:	64 04 29 00             	bgt.d      40001d24 <_vfprintf_r+0xff0>

400018c6:	78 1c 40 34             	st         r17,[sp,120]
400018ca:	40 20 13 12             	add        r19,r8,8
400018ce:	0e c0                   	ld_s       r0,[sp,56]
400018d0:	10 c1                   	ld_s       r1,[sp,64]
400018d2:	08 1c 00 31             	st         r4,[sp,8]
400018d6:	4c 70                   	mov_s      r2,0
400018d8:	8a 08 e0 03             	bl.d       40009160 <__nedf2>

400018dc:	6c 70                   	mov_s      r3,0
400018de:	0b 78                   	tst_s      r0,r0
400018e0:	5c 02 21 00             	bz.d       40001b3c <_vfprintf_r+0xe08>

400018e4:	08 14 04 30             	ld         r4,[sp,8]
400018e8:	0c c2                   	ld_s       r2,[sp,48]
400018ea:	26 71                   	add_s      r17,r17,1
400018ec:	49 6a                   	sub_s      r2,r2,1
400018ee:	06 71                   	add_s      r16,r16,1
400018f0:	00 24 84 00             	add        r4,r4,r2
400018f4:	00 1b 00 24             	st         r16,[r19]
400018f8:	04 1b 80 20             	st         r2,[r19,4]
400018fc:	7c 1c 00 31             	st         r4,[sp,124]
40001900:	4c 21 c0 a1             	cmp        r17,7
40001904:	e0 03 29 00             	bgt.d      40001ce4 <_vfprintf_r+0xfb0>

40001908:	78 1c 40 34             	st         r17,[sp,120]
4000190c:	40 23 13 22             	add        r19,r19,8
40001910:	11 c3                   	ld_s       r3,[sp,68]
40001912:	26 71                   	add_s      r17,r17,1
40001914:	00 24 c4 00             	add        r4,r4,r3
40001918:	55 24 45 36             	add2       r5,sp,25
4000191c:	04 1b c0 20             	st         r3,[r19,4]
40001920:	00 1b 40 21             	st         r5,[r19]
40001924:	7c 1c 00 31             	st         r4,[sp,124]
40001928:	61 09 33 22             	brge.d     r17,8,40001988 <_vfprintf_r+0xc54>

4000192c:	78 1c 40 34             	st         r17,[sp,120]
40001930:	f5 04 ef ff             	b.d        40001624 <_vfprintf_r+0x8f0>

40001934:	40 23 08 22             	add        r8,r19,8
40001938:	e1 40                   	mov_s      r0,r15
4000193a:	a1 41                   	mov_s      r1,r13
4000193c:	aa 0e e0 01             	bl.d       400057e4 <__sprint_r>

40001940:	03 42                   	mov_s      r2,r24
40001942:	0b 78                   	tst_s      r0,r0
40001944:	94 05 c1 ff             	bz         400016d8 <_vfprintf_r+0x9a4>

40001948:	0c 15 02 11             	ldh        r2,[r13,12]
4000194c:	e9 07 8f ff             	b          40001134 <_vfprintf_r+0x400>

40001950:	e1 40                   	mov_s      r0,r15
40001952:	a1 41                   	mov_s      r1,r13
40001954:	92 0e e0 01             	bl.d       400057e4 <__sprint_r>

40001958:	03 42                   	mov_s      r2,r24
4000195a:	0b 78                   	tst_s      r0,r0
4000195c:	d4 07 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001960:	7c 14 04 30             	ld         r4,[sp,124]
40001964:	1e c2                   	ld_s       r2,[sp,120]
40001966:	ea 40                   	mov_s      r8,r23
40001968:	30 14 05 30             	ld         r5,[sp,48]
4000196c:	44 71                   	add_s      r2,r2,1
4000196e:	00 24 44 01             	add        r4,r4,r5
40001972:	00 18 00 14             	st         r16,[r8]
40001976:	04 18 40 11             	st         r5,[r8,4]
4000197a:	7c 1c 00 31             	st         r4,[sp,124]
4000197e:	87 e2                   	cmp_s      r2,7
40001980:	a0 04 ec ff             	ble.d      40001620 <_vfprintf_r+0x8ec>

40001984:	78 1c 80 30             	st         r2,[sp,120]
40001988:	e1 40                   	mov_s      r0,r15
4000198a:	a1 41                   	mov_s      r1,r13
4000198c:	5a 0e e0 01             	bl.d       400057e4 <__sprint_r>

40001990:	03 42                   	mov_s      r2,r24
40001992:	0b 78                   	tst_s      r0,r0
40001994:	9c 07 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001998:	7c 14 04 30             	ld         r4,[sp,124]
4000199c:	89 04 ef ff             	b.d        40001624 <_vfprintf_r+0x8f0>

400019a0:	ea 40                   	mov_s      r8,r23
400019a2:	e0 78                   	nop_s      
400019a4:	e1 40                   	mov_s      r0,r15
400019a6:	a1 41                   	mov_s      r1,r13
400019a8:	3e 0e e0 01             	bl.d       400057e4 <__sprint_r>

400019ac:	03 42                   	mov_s      r2,r24
400019ae:	0b 78                   	tst_s      r0,r0
400019b0:	80 07 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400019b4:	7c 14 04 30             	ld         r4,[sp,124]
400019b8:	43 04 ef ff             	b.d        400015fa <_vfprintf_r+0x8c6>

400019bc:	ea 40                   	mov_s      r8,r23
400019be:	e0 78                   	nop_s      
400019c0:	e1 40                   	mov_s      r0,r15
400019c2:	a1 41                   	mov_s      r1,r13
400019c4:	22 0e e0 01             	bl.d       400057e4 <__sprint_r>

400019c8:	03 42                   	mov_s      r2,r24
400019ca:	0b 78                   	tst_s      r0,r0
400019cc:	64 07 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400019d0:	7c 14 04 30             	ld         r4,[sp,124]
400019d4:	69 03 ef ff             	b.d        4000153c <_vfprintf_r+0x808>

400019d8:	ea 40                   	mov_s      r8,r23
400019da:	e0 78                   	nop_s      
400019dc:	e1 40                   	mov_s      r0,r15
400019de:	a1 41                   	mov_s      r1,r13
400019e0:	06 0e e0 01             	bl.d       400057e4 <__sprint_r>

400019e4:	03 42                   	mov_s      r2,r24
400019e6:	0b 78                   	tst_s      r0,r0
400019e8:	48 07 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400019ec:	7c 14 04 30             	ld         r4,[sp,124]
400019f0:	79 03 ef ff             	b.d        40001568 <_vfprintf_r+0x834>

400019f4:	ea 40                   	mov_s      r8,r23
400019f6:	e0 78                   	nop_s      
400019f8:	5c 14 11 30             	ld         r17,[sp,92]
400019fc:	36 70                   	cmp_s      r17,0
400019fe:	f8 05 2c 00             	ble.d      40001ff4 <_vfprintf_r+0x12c0>

40001a02:	30 14 06 30             	ld         r6,[sp,48]
40001a06:	2c 14 05 30             	ld         r5,[sp,44]
40001a0a:	09 26 53 01             	min        r19,r6,r5
40001a0e:	2b 0b 72 20             	brlt.d     r19,1,40001a36 <_vfprintf_r+0xd02>

40001a12:	00 20 91 21             	add        r17,r16,r6
40001a16:	1e c2                   	ld_s       r2,[sp,120]
40001a18:	00 24 c4 04             	add        r4,r4,r19
40001a1c:	44 71                   	add_s      r2,r2,1
40001a1e:	00 18 00 14             	st         r16,[r8]
40001a22:	04 18 c0 14             	st         r19,[r8,4]
40001a26:	7c 1c 00 31             	st         r4,[sp,124]
40001a2a:	87 e2                   	cmp_s      r2,7
40001a2c:	54 07 29 00             	bgt.d      40002180 <_vfprintf_r+0x144c>

40001a30:	5e c2                   	st_s       r2,[sp,120]
40001a32:	40 20 08 12             	add        r8,r8,8
40001a36:	2c 14 06 30             	ld         r6,[sp,44]
40001a3a:	48 23 13 20             	max        r19,r19,0
40001a3e:	0e 23 93 21             	rsub       r19,r19,r6
40001a42:	76 70                   	cmp_s      r19,0
40001a44:	92 01 0c 00             	ble        40001bd6 <_vfprintf_r+0xea2>

40001a48:	21 0b 7b 24             	brge.t.d   r19,17,40001a68 <_vfprintf_r+0xd34>

40001a4c:	1e c2                   	ld_s       r2,[sp,120]
40001a4e:	69 05 20 00             	b.d        40001fb4 <_vfprintf_r+0x1280>

40001a52:	44 71                   	add_s      r2,r2,1
40001a54:	40 20 08 12             	add        r8,r8,8
40001a58:	42 23 13 24             	sub        r19,r19,16
40001a5c:	4c 23 00 a4             	cmp        r19,16
40001a60:	54 05 2c 00             	ble.d      40001fb4 <_vfprintf_r+0x1280>

40001a64:	c0 22 6c 00             	add.le     r2,r2,1
40001a68:	44 71                   	add_s      r2,r2,1
40001a6a:	40 24 04 04             	add        r4,r4,16
40001a6e:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40001a76:	04 18 01 14             	st         16,[r8,4]
40001a7a:	5e c2                   	st_s       r2,[sp,120]
40001a7c:	d9 0a 32 82             	brlt.d     r2,8,40001a54 <_vfprintf_r+0xd20>

40001a80:	7c 1c 00 31             	st         r4,[sp,124]
40001a84:	e1 40                   	mov_s      r0,r15
40001a86:	a1 41                   	mov_s      r1,r13
40001a88:	5e 0d e0 01             	bl.d       400057e4 <__sprint_r>

40001a8c:	03 42                   	mov_s      r2,r24
40001a8e:	0b 78                   	tst_s      r0,r0
40001a90:	a0 06 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001a94:	7c 14 04 30             	ld         r4,[sp,124]
40001a98:	1e c2                   	ld_s       r2,[sp,120]
40001a9a:	c1 07 ef ff             	b.d        40001a58 <_vfprintf_r+0xd24>

40001a9e:	ea 40                   	mov_s      r8,r23
40001aa0:	0b 0d 11 20             	brne       r21,0,40001aaa <_vfprintf_r+0xd76>

40001aa4:	65 0c b4 22             	brlo.d     r20,10,40001b08 <_vfprintf_r+0xdd4>

40001aa8:	82 42                   	mov_s      r2,r20
40001aaa:	14 1c 00 32             	st         r8,[sp,20]
40001aae:	1c 1c 40 31             	st         r5,[sp,28]
40001ab2:	a7 da                   	mov_s      r2,167
40001ab4:	24 1c 80 34             	st         r18,[sp,36]
40001ab8:	83 72                   	add_s      r2,r2,sp
40001aba:	b1 42                   	mov_s      r18,r13
40001abc:	50 40                   	mov_s      r16,r2
40001abe:	82 40                   	mov_s      r0,r20
40001ac0:	a2 41                   	mov_s      r1,r21
40001ac2:	0a da                   	mov_s      r2,10
40001ac4:	5a 0b 20 03             	bl.d       40007e1c <__umoddi3>

40001ac8:	6c 70                   	mov_s      r3,0
40001aca:	30 e0                   	add_s      r0,r0,48
40001acc:	00 18 02 20             	stb        r0,[r16]
40001ad0:	a2 41                   	mov_s      r1,r21
40001ad2:	82 40                   	mov_s      r0,r20
40001ad4:	0a da                   	mov_s      r2,10
40001ad6:	16 0c e0 02             	bl.d       400076e8 <__udivdi3>

40001ada:	6c 70                   	mov_s      r3,0
40001adc:	42 20 42 20             	sub        r2,r16,1
40001ae0:	10 44                   	mov_s      r20,r0
40001ae2:	05 20 7e 80             	or.f       0,r0,r1
40001ae6:	d8 07 e2 ff             	bnz.d      40001abc <_vfprintf_r+0xd88>

40001aea:	30 45                   	mov_s      r21,r1
40001aec:	4a 45                   	mov_s      r13,r18
40001aee:	14 14 08 30             	ld         r8,[sp,20]
40001af2:	1c 14 05 30             	ld         r5,[sp,28]
40001af6:	24 14 12 30             	ld         r18,[sp,36]
40001afa:	02 27 04 24             	sub        r4,r23,r16
40001afe:	ab 04 af ff             	b.d        40000fa6 <_vfprintf_r+0x272>

40001b02:	1c 1c 00 31             	st         r4,[sp,28]
40001b06:	e0 78                   	nop_s      
40001b08:	14 c3                   	ld_s       r3,[sp,80]
40001b0a:	93 40                   	mov_s      r16,sp
40001b0c:	30 e2                   	add_s      r2,r2,48
40001b0e:	47 c3                   	st_s       r3,[sp,28]
40001b10:	80 20 c2 29             	add        r16,r16,167
40001b14:	93 04 af ff             	b.d        40000fa6 <_vfprintf_r+0x272>

40001b18:	a7 1c 82 30             	stb        r2,[sp,167]
40001b1c:	e1 40                   	mov_s      r0,r15
40001b1e:	a1 41                   	mov_s      r1,r13
40001b20:	c6 0c e0 01             	bl.d       400057e4 <__sprint_r>

40001b24:	03 42                   	mov_s      r2,r24
40001b26:	0b 78                   	tst_s      r0,r0
40001b28:	08 06 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001b2c:	57 14 85 30             	ldb        r5,[sp,87]
40001b30:	7c 14 04 30             	ld         r4,[sp,124]
40001b34:	dd 01 ef ff             	b.d        40001510 <_vfprintf_r+0x7dc>

40001b38:	ea 40                   	mov_s      r8,r23
40001b3a:	e0 78                   	nop_s      
40001b3c:	30 14 10 30             	ld         r16,[sp,48]
40001b40:	06 77                   	add_s      r16,r16,-1
40001b42:	1d 08 7b 20             	brge.t.d   r16,1,40001b5c <_vfprintf_r+0xe28>

40001b46:	4c 20 00 a4             	cmp        r16,16
40001b4a:	cb 05 ef ff             	b.d        40001912 <_vfprintf_r+0xbde>

40001b4e:	11 c3                   	ld_s       r3,[sp,68]
40001b50:	40 23 13 22             	add        r19,r19,8
40001b54:	42 20 10 24             	sub        r16,r16,16
40001b58:	4c 20 00 a4             	cmp        r16,16
40001b5c:	68 01 2c 00             	ble.d      40001cc4 <_vfprintf_r+0xf90>

40001b60:	26 71                   	add_s      r17,r17,1
40001b62:	40 24 04 04             	add        r4,r4,16
40001b66:	00 1b 80 2f 00 40 c0 d4 	st         0x4000d4c0,[r19]
40001b6e:	04 1b 01 24             	st         16,[r19,4]
40001b72:	7c 1c 00 31             	st         r4,[sp,124]
40001b76:	dd 09 32 a2             	brlt.d     r17,8,40001b50 <_vfprintf_r+0xe1c>

40001b7a:	78 1c 40 34             	st         r17,[sp,120]
40001b7e:	e1 40                   	mov_s      r0,r15
40001b80:	a1 41                   	mov_s      r1,r13
40001b82:	66 0c e0 01             	bl.d       400057e4 <__sprint_r>

40001b86:	03 42                   	mov_s      r2,r24
40001b88:	0b 78                   	tst_s      r0,r0
40001b8a:	a8 05 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001b8e:	7c 14 04 30             	ld         r4,[sp,124]
40001b92:	78 14 11 30             	ld         r17,[sp,120]
40001b96:	c1 07 ef ff             	b.d        40001b54 <_vfprintf_r+0xe20>

40001b9a:	f2 43                   	mov_s      r19,r23
40001b9c:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40001ba4:	04 18 00 14             	st         r16,[r8,4]
40001ba8:	44 71                   	add_s      r2,r2,1
40001baa:	00 24 04 04             	add        r4,r4,r16
40001bae:	5e c2                   	st_s       r2,[sp,120]
40001bb0:	87 e2                   	cmp_s      r2,7
40001bb2:	70 02 ec ff             	ble.d      40001620 <_vfprintf_r+0x8ec>

40001bb6:	7c 1c 00 31             	st         r4,[sp,124]
40001bba:	d3 05 ef ff             	b.d        4000198a <_vfprintf_r+0xc56>

40001bbe:	e1 40                   	mov_s      r0,r15
40001bc0:	e1 40                   	mov_s      r0,r15
40001bc2:	a1 41                   	mov_s      r1,r13
40001bc4:	22 0c e0 01             	bl.d       400057e4 <__sprint_r>

40001bc8:	03 42                   	mov_s      r2,r24
40001bca:	0b 78                   	tst_s      r0,r0
40001bcc:	64 05 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001bd0:	7c 14 04 30             	ld         r4,[sp,124]
40001bd4:	ea 40                   	mov_s      r8,r23
40001bd6:	17 c2                   	ld_s       r2,[sp,92]
40001bd8:	2c 14 05 30             	ld         r5,[sp,44]
40001bdc:	30 14 06 30             	ld         r6,[sp,48]
40001be0:	9d 0a a2 01             	brlt.d     r2,r6,40001c7c <_vfprintf_r+0xf48>

40001be4:	00 20 53 21             	add        r19,r16,r5
40001be8:	97 0e 3f 10             	bbit1.d    r14,0,40001c7e <_vfprintf_r+0xf4a>

40001bec:	0f c3                   	ld_s       r3,[sp,60]
40001bee:	30 14 05 30             	ld         r5,[sp,48]
40001bf2:	02 21 d1 24             	sub        r17,r17,r19
40001bf6:	02 25 90 00             	sub        r16,r5,r2
40001bfa:	09 21 11 24             	min        r17,r17,r16
40001bfe:	27 09 52 20             	brlt       r17,1,40001c22 <_vfprintf_r+0xeee>

40001c02:	1e c2                   	ld_s       r2,[sp,120]
40001c04:	00 24 44 04             	add        r4,r4,r17
40001c08:	44 71                   	add_s      r2,r2,1
40001c0a:	00 18 c0 14             	st         r19,[r8]
40001c0e:	04 18 40 14             	st         r17,[r8,4]
40001c12:	7c 1c 00 31             	st         r4,[sp,124]
40001c16:	87 e2                   	cmp_s      r2,7
40001c18:	a0 05 29 00             	bgt.d      400021b8 <_vfprintf_r+0x1484>

40001c1c:	5e c2                   	st_s       r2,[sp,120]
40001c1e:	40 20 08 12             	add        r8,r8,8
40001c22:	48 21 11 20             	max        r17,r17,0
40001c26:	02 20 50 24             	sub        r16,r16,r17
40001c2a:	16 70                   	cmp_s      r16,0
40001c2c:	f8 01 cc ff             	ble        40001624 <_vfprintf_r+0x8f0>

40001c30:	15 08 7b 24             	brge.t.d   r16,17,40001c44 <_vfprintf_r+0xf10>

40001c34:	1e c2                   	ld_s       r2,[sp,120]
40001c36:	b4 f1                   	b_s        40001b9c <_vfprintf_r+0xe68>

40001c38:	40 20 08 12             	add        r8,r8,8
40001c3c:	42 20 10 24             	sub        r16,r16,16
40001c40:	5d 08 52 a4             	brlt       r16,17,40001b9c <_vfprintf_r+0xe68>

40001c44:	44 71                   	add_s      r2,r2,1
40001c46:	40 24 04 04             	add        r4,r4,16
40001c4a:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40001c52:	04 18 01 14             	st         16,[r8,4]
40001c56:	5e c2                   	st_s       r2,[sp,120]
40001c58:	e1 0a 32 82             	brlt.d     r2,8,40001c38 <_vfprintf_r+0xf04>

40001c5c:	7c 1c 00 31             	st         r4,[sp,124]
40001c60:	e1 40                   	mov_s      r0,r15
40001c62:	a1 41                   	mov_s      r1,r13
40001c64:	82 0b e0 01             	bl.d       400057e4 <__sprint_r>

40001c68:	03 42                   	mov_s      r2,r24
40001c6a:	0b 78                   	tst_s      r0,r0
40001c6c:	c4 04 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001c70:	7c 14 04 30             	ld         r4,[sp,124]
40001c74:	1e c2                   	ld_s       r2,[sp,120]
40001c76:	c9 07 ef ff             	b.d        40001c3c <_vfprintf_r+0xf08>

40001c7a:	ea 40                   	mov_s      r8,r23
40001c7c:	0f c3                   	ld_s       r3,[sp,60]
40001c7e:	34 14 05 30             	ld         r5,[sp,52]
40001c82:	00 24 c4 00             	add        r4,r4,r3
40001c86:	3c 14 06 30             	ld         r6,[sp,60]
40001c8a:	1e c3                   	ld_s       r3,[sp,120]
40001c8c:	00 18 40 11             	st         r5,[r8]
40001c90:	64 71                   	add_s      r3,r3,1
40001c92:	04 18 80 11             	st         r6,[r8,4]
40001c96:	7c 1c 00 31             	st         r4,[sp,124]
40001c9a:	87 e3                   	cmp_s      r3,7
40001c9c:	00 05 29 00             	bgt.d      4000219c <_vfprintf_r+0x1468>

40001ca0:	5e c3                   	st_s       r3,[sp,120]
40001ca2:	4f 07 ef ff             	b.d        40001bee <_vfprintf_r+0xeba>

40001ca6:	40 20 08 12             	add        r8,r8,8
40001caa:	e0 78                   	nop_s      
40001cac:	e0 be                   	btst_s     r14,0
40001cae:	f2 03 e2 ff             	bnz.d      4000189e <_vfprintf_r+0xb6a>

40001cb2:	4c 21 c0 a1             	cmp        r17,7
40001cb6:	31 09 13 22             	brge       r17,8,40001ce4 <_vfprintf_r+0xfb0>

40001cba:	40 20 13 12             	add        r19,r8,8
40001cbe:	57 04 ef ff             	b.d        40001912 <_vfprintf_r+0xbde>

40001cc2:	11 c3                   	ld_s       r3,[sp,68]
40001cc4:	00 24 04 04             	add        r4,r4,r16
40001cc8:	00 1b 80 2f 00 40 c0 d4 	st         0x4000d4c0,[r19]
40001cd0:	04 1b 00 24             	st         r16,[r19,4]
40001cd4:	7c 1c 00 31             	st         r4,[sp,124]
40001cd8:	4c 21 c0 a1             	cmp        r17,7
40001cdc:	30 04 ec ff             	ble.d      4000190c <_vfprintf_r+0xbd8>

40001ce0:	78 1c 40 34             	st         r17,[sp,120]
40001ce4:	e1 40                   	mov_s      r0,r15
40001ce6:	a1 41                   	mov_s      r1,r13
40001ce8:	fe 0a e0 01             	bl.d       400057e4 <__sprint_r>

40001cec:	03 42                   	mov_s      r2,r24
40001cee:	0b 78                   	tst_s      r0,r0
40001cf0:	40 04 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001cf4:	7c 14 04 30             	ld         r4,[sp,124]
40001cf8:	78 14 11 30             	ld         r17,[sp,120]
40001cfc:	15 04 ef ff             	b.d        40001910 <_vfprintf_r+0xbdc>

40001d00:	f2 43                   	mov_s      r19,r23
40001d02:	e0 78                   	nop_s      
40001d04:	e1 40                   	mov_s      r0,r15
40001d06:	a1 41                   	mov_s      r1,r13
40001d08:	de 0a e0 01             	bl.d       400057e4 <__sprint_r>

40001d0c:	03 42                   	mov_s      r2,r24
40001d0e:	0b 78                   	tst_s      r0,r0
40001d10:	20 04 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001d14:	7c 14 04 30             	ld         r4,[sp,124]
40001d18:	78 14 11 30             	ld         r17,[sp,120]
40001d1c:	8b 03 ef ff             	b.d        400018a6 <_vfprintf_r+0xb72>

40001d20:	ea 40                   	mov_s      r8,r23
40001d22:	e0 78                   	nop_s      
40001d24:	e1 40                   	mov_s      r0,r15
40001d26:	a1 41                   	mov_s      r1,r13
40001d28:	be 0a e0 01             	bl.d       400057e4 <__sprint_r>

40001d2c:	03 42                   	mov_s      r2,r24
40001d2e:	0b 78                   	tst_s      r0,r0
40001d30:	00 04 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001d34:	7c 14 04 30             	ld         r4,[sp,124]
40001d38:	78 14 11 30             	ld         r17,[sp,120]
40001d3c:	93 03 ef ff             	b.d        400018ce <_vfprintf_r+0xb9a>

40001d40:	f2 43                   	mov_s      r19,r23
40001d42:	e0 78                   	nop_s      
40001d44:	e1 40                   	mov_s      r0,r15
40001d46:	a1 41                   	mov_s      r1,r13
40001d48:	9e 0a e0 01             	bl.d       400057e4 <__sprint_r>

40001d4c:	03 42                   	mov_s      r2,r24
40001d4e:	0b 78                   	tst_s      r0,r0
40001d50:	e0 03 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001d54:	7c 14 04 30             	ld         r4,[sp,124]
40001d58:	21 00 ef ff             	b.d        40001578 <_vfprintf_r+0x844>

40001d5c:	ea 40                   	mov_s      r8,r23
40001d5e:	e0 78                   	nop_s      
40001d60:	2d da                   	mov_s      r2,45
40001d62:	4e 24 14 a0             	rsub.f     r20,r20,0
40001d66:	57 1c 82 30             	stb        r2,[sp,87]
40001d6a:	03 26 55 75 00 00 00 00 	sbc        r21,0,r21
40001d72:	4a 25 40 0b             	mov        r5,45
40001d76:	ad 01 af ff             	b.d        40000f20 <_vfprintf_r+0x1ec>

40001d7a:	4c 71                   	mov_s      r2,1
40001d7c:	0e c0                   	ld_s       r0,[sp,56]
40001d7e:	10 c1                   	ld_s       r1,[sp,64]
40001d80:	e6 0f a0 01             	bl.d       40005564 <__fpclassifyd>

40001d84:	00 1c 00 32             	st         r8,[sp]
40001d88:	0b 78                   	tst_s      r0,r0
40001d8a:	68 03 21 00             	bz.d       400020f0 <_vfprintf_r+0x13bc>

40001d8e:	00 14 08 30             	ld         r8,[sp,0]
40001d92:	76 77                   	cmp_s      r19,-1
40001d94:	2c 06 21 00             	bz.d       400023c0 <_vfprintf_r+0x168c>

40001d98:	50 21 42 21             	bclr       r2,r17,5
40001d9c:	45 c2                   	st_s       r2,[sp,20]
40001d9e:	17 0a 81 0f 00 00 47 00 	brne       r2,71,40001db2 <_vfprintf_r+0x107e>

40001da6:	0b 23 c0 a4             	tst        r19,r19
40001daa:	4c 71                   	mov_s      r2,1
40001dac:	ca 22 c2 04             	mov.nz     r2,r19
40001db0:	50 43                   	mov_s      r19,r2
40001db2:	10 c2                   	ld_s       r2,[sp,64]
40001db4:	4f 26 03 12             	bset       r3,r14,8
40001db8:	54 70                   	cmp_s      r2,0
40001dba:	e0 05 2b 00             	blt.d      40002398 <_vfprintf_r+0x1664>

40001dbe:	49 c3                   	st_s       r3,[sp,36]
40001dc0:	40 14 09 30             	ld         r9,[sp,64]
40001dc4:	28 1c 01 30             	st         0,[sp,40]
40001dc8:	14 14 06 30             	ld         r6,[sp,20]
40001dcc:	4d 71                   	mov_s      r10,1
40001dce:	8c 26 81 81             	cmp        r6,70
40001dd2:	58 04 21 00             	bz.d       40002228 <_vfprintf_r+0x14f4>

40001dd6:	ca 22 22 10             	mov.nz     r10,0
40001dda:	8c 26 41 81             	cmp        r6,69
40001dde:	4e 04 22 00             	bnz.d      4000222a <_vfprintf_r+0x14f6>

40001de2:	6c 72                   	mov_s      r3,2
40001de4:	0e c1                   	ld_s       r1,[sp,56]
40001de6:	40 23 4a 20             	add        r10,r19,1
40001dea:	21 42                   	mov_s      r2,r9
40001dec:	41 44                   	mov_s      r4,r10
40001dee:	00 1c 00 32             	st         r8,[sp]
40001df2:	04 1c 40 32             	st         r9,[sp,4]
40001df6:	08 1c 80 32             	st         r10,[sp,8]
40001dfa:	e1 40                   	mov_s      r0,r15
40001dfc:	55 24 c5 35             	add2       r5,sp,23
40001e00:	56 24 06 33             	add3       r6,sp,12
40001e04:	1e 0b 60 00             	bl.d       40002920 <_dtoa_r>

40001e08:	55 24 c7 36             	add2       r7,sp,27
40001e0c:	08 14 0a 30             	ld         r10,[sp,8]
40001e10:	00 14 08 30             	ld         r8,[sp,0]
40001e14:	04 14 09 30             	ld         r9,[sp,4]
40001e18:	10 40                   	mov_s      r16,r0
40001e1a:	00 20 84 02             	add        r4,r0,r10
40001e1e:	0e c0                   	ld_s       r0,[sp,56]
40001e20:	4c 70                   	mov_s      r2,0
40001e22:	08 1c 00 31             	st         r4,[sp,8]
40001e26:	00 1c 00 32             	st         r8,[sp]
40001e2a:	6c 70                   	mov_s      r3,0
40001e2c:	f6 0a a0 03             	bl.d       40009120 <__eqdf2>

40001e30:	21 41                   	mov_s      r1,r9
40001e32:	08 14 04 30             	ld         r4,[sp,8]
40001e36:	0b 78                   	tst_s      r0,r0
40001e38:	00 14 08 30             	ld         r8,[sp,0]
40001e3c:	22 00 21 00             	bz.d       40001e5e <_vfprintf_r+0x112a>

40001e40:	ca 22 01 01             	mov.z      r2,r4
40001e44:	1b c2                   	ld_s       r2,[sp,108]
40001e46:	1b 0a 05 01             	brhs.t     r2,r4,40001e5e <_vfprintf_r+0x112a>

40001e4a:	4a 25 00 0c             	mov        r5,48
40001e4e:	61 6a                   	add_s      r3,r2,1
40001e50:	5b c3                   	st_s       r3,[sp,108]
40001e52:	00 1a 42 01             	stb        r5,[r2]
40001e56:	1b c2                   	ld_s       r2,[sp,108]
40001e58:	f9 0a 24 81             	brlo.d     r2,r4,40001e50 <_vfprintf_r+0x111c>

40001e5c:	61 6a                   	add_s      r3,r2,1
40001e5e:	05 c3                   	ld_s       r3,[sp,20]
40001e60:	02 22 02 04             	sub        r2,r2,r16
40001e64:	c7 e3                   	cmp_s      r3,71
40001e66:	7c 04 21 00             	bz.d       400022e0 <_vfprintf_r+0x15ac>

40001e6a:	4c c2                   	st_s       r2,[sp,48]
40001e6c:	8c 21 41 a9             	cmp        r17,101
40001e70:	9c 06 2c 00             	ble.d      4000250c <_vfprintf_r+0x17d8>

40001e74:	8c 21 81 a9             	cmp        r17,102
40001e78:	58 05 21 00             	bz.d       400023d0 <_vfprintf_r+0x169c>

40001e7c:	5c 14 04 30             	ld         r4,[sp,92]
40001e80:	2c 1c 00 31             	st         r4,[sp,44]
40001e84:	2c 14 04 30             	ld         r4,[sp,44]
40001e88:	30 14 05 30             	ld         r5,[sp,48]
40001e8c:	0c 24 40 81             	cmp        r4,r5
40001e90:	18 05 2b 00             	blt.d      400023a8 <_vfprintf_r+0x1674>

40001e94:	94 70                   	cmp_s      r4,0
40001e96:	e0 be                   	btst_s     r14,0
40001e98:	08 06 22 00             	bnz.d      400024a0 <_vfprintf_r+0x176c>

40001e9c:	2c 14 06 30             	ld         r6,[sp,44]
40001ea0:	1c 1c 00 31             	st         r4,[sp,28]
40001ea4:	48 24 02 00             	max        r2,r4,0
40001ea8:	8a 21 c1 29             	mov        r17,103
40001eac:	28 14 06 30             	ld         r6,[sp,40]
40001eb0:	0b 26 80 81             	tst        r6,r6
40001eb4:	18 04 22 00             	bnz.d      400022cc <_vfprintf_r+0x1598>

40001eb8:	ca 25 62 0b             	mov.nz     r5,45
40001ebc:	57 14 85 30             	ldb        r5,[sp,87]
40001ec0:	45 c2                   	st_s       r2,[sp,20]
40001ec2:	09 c6                   	ld_s       r14,[sp,36]
40001ec4:	f3 00 af ff             	b.d        40000fb6 <_vfprintf_r+0x282>

40001ec8:	6e 70                   	mov_s      r19,0
40001eca:	e0 78                   	nop_s      
40001ecc:	06 c3                   	ld_s       r3,[sp,24]
40001ece:	18 14 04 30             	ld         r4,[sp,24]
40001ed2:	18 14 05 30             	ld         r5,[sp,24]
40001ed6:	60 83                   	ld_s       r3,[r3,0]
40001ed8:	04 14 04 00             	ld         r4,[r4,4]
40001edc:	40 25 05 02             	add        r5,r5,8
40001ee0:	4e c3                   	st_s       r3,[sp,56]
40001ee2:	40 1c 00 31             	st         r4,[sp,64]
40001ee6:	5d 03 af ff             	b.d        40001240 <_vfprintf_r+0x50c>

40001eea:	18 1c 40 31             	st         r5,[sp,24]
40001eee:	e0 78                   	nop_s      
40001ef0:	e6 be                   	btst_s     r14,6
40001ef2:	ec 01 21 00             	bz.d       400020dc <_vfprintf_r+0x13a8>

40001ef6:	18 14 05 30             	ld         r5,[sp,24]
40001efa:	18 14 04 30             	ld         r4,[sp,24]
40001efe:	4c 70                   	mov_s      r2,0
40001f00:	00 14 14 01             	ldh        r20,[r4,0]
40001f04:	ae 70                   	mov_s      r21,0
40001f06:	84 74                   	add_s      r4,r4,4
40001f08:	11 00 af ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

40001f0c:	18 1c 00 31             	st         r4,[sp,24]
40001f10:	e6 be                   	btst_s     r14,6
40001f12:	c0 01 21 00             	bz.d       400020d0 <_vfprintf_r+0x139c>

40001f16:	18 14 05 30             	ld         r5,[sp,24]
40001f1a:	00 15 42 01             	ldh.x      r2,[r5,0]
40001f1e:	a4 74                   	add_s      r5,r5,4
40001f20:	40 43                   	mov_s      r3,r2
40001f22:	50 44                   	mov_s      r20,r2
40001f24:	00 23 fe 80             	add.f      0,r3,r3
40001f28:	03 23 c3 00             	sbc        r3,r3,r3
40001f2c:	18 1c 40 31             	st         r5,[sp,24]
40001f30:	60 42                   	mov_s      r2,r3
40001f32:	d7 02 af ff             	b.d        40001206 <_vfprintf_r+0x4d2>

40001f36:	70 45                   	mov_s      r21,r3
40001f38:	29 0e 3f 11             	bbit1.d    r14,4,40001f60 <_vfprintf_r+0x122c>

40001f3c:	06 c3                   	ld_s       r3,[sp,24]
40001f3e:	29 0e be 11             	bbit0.d    r14,6,40001f64 <_vfprintf_r+0x1230>

40001f42:	20 14 04 30             	ld         r4,[sp,32]
40001f46:	18 14 05 30             	ld         r5,[sp,24]
40001f4a:	20 14 06 30             	ld         r6,[sp,32]
40001f4e:	00 15 02 00             	ld         r2,[r5,0]
40001f52:	a4 74                   	add_s      r5,r5,4
40001f54:	00 1a 84 01             	sth        r6,[r2]
40001f58:	ad 06 6f ff             	b.d        40000e04 <_vfprintf_r+0xd0>

40001f5c:	18 1c 40 31             	st         r5,[sp,24]
40001f60:	20 14 04 30             	ld         r4,[sp,32]
40001f64:	40 83                   	ld_s       r2,[r3,0]
40001f66:	64 74                   	add_s      r3,r3,4
40001f68:	46 c3                   	st_s       r3,[sp,24]
40001f6a:	9d 06 6f ff             	b.d        40000e04 <_vfprintf_r+0xd0>

40001f6e:	00 1a 00 01             	st         r4,[r2]
40001f72:	e0 78                   	nop_s      
40001f74:	e6 be                   	btst_s     r14,6
40001f76:	4c 01 21 00             	bz.d       400020c0 <_vfprintf_r+0x138c>

40001f7a:	18 14 05 30             	ld         r5,[sp,24]
40001f7e:	18 14 04 30             	ld         r4,[sp,24]
40001f82:	ae 70                   	mov_s      r21,0
40001f84:	00 14 14 01             	ldh        r20,[r4,0]
40001f88:	84 74                   	add_s      r4,r4,4
40001f8a:	41 03 af ff             	b.d        400012c8 <_vfprintf_r+0x594>

40001f8e:	18 1c 00 31             	st         r4,[sp,24]
40001f92:	e0 78                   	nop_s      
40001f94:	e6 be                   	btst_s     r14,6
40001f96:	18 01 21 00             	bz.d       400020ac <_vfprintf_r+0x1378>

40001f9a:	18 14 05 30             	ld         r5,[sp,24]
40001f9e:	18 14 04 30             	ld         r4,[sp,24]
40001fa2:	4c 71                   	mov_s      r2,1
40001fa4:	00 14 14 01             	ldh        r20,[r4,0]
40001fa8:	ae 70                   	mov_s      r21,0
40001faa:	84 74                   	add_s      r4,r4,4
40001fac:	6d 07 6f ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

40001fb0:	18 1c 00 31             	st         r4,[sp,24]
40001fb4:	00 24 c4 04             	add        r4,r4,r19
40001fb8:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40001fc0:	04 18 c0 14             	st         r19,[r8,4]
40001fc4:	7c 1c 00 31             	st         r4,[sp,124]
40001fc8:	87 e2                   	cmp_s      r2,7
40001fca:	f8 03 e9 ff             	bgt.d      40001bc0 <_vfprintf_r+0xe8c>

40001fce:	5e c2                   	st_s       r2,[sp,120]
40001fd0:	07 04 ef ff             	b.d        40001bd6 <_vfprintf_r+0xea2>

40001fd4:	40 20 08 12             	add        r8,r8,8
40001fd8:	e1 40                   	mov_s      r0,r15
40001fda:	a1 41                   	mov_s      r1,r13
40001fdc:	0a 08 e0 01             	bl.d       400057e4 <__sprint_r>

40001fe0:	03 42                   	mov_s      r2,r24
40001fe2:	0b 78                   	tst_s      r0,r0
40001fe4:	4c 01 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40001fe8:	7c 14 04 30             	ld         r4,[sp,124]
40001fec:	45 07 af ff             	b.d        40001730 <_vfprintf_r+0x9fc>

40001ff0:	ea 40                   	mov_s      r8,r23
40001ff2:	e0 78                   	nop_s      
40001ff4:	1e c2                   	ld_s       r2,[sp,120]
40001ff6:	84 71                   	add_s      r4,r4,1
40001ff8:	44 71                   	add_s      r2,r2,1
40001ffa:	00 18 80 1f 00 40 00 d9 	st         0x4000d900,[r8]
40002002:	04 18 41 10             	st         1,[r8,4]
40002006:	7c 1c 00 31             	st         r4,[sp,124]
4000200a:	87 e2                   	cmp_s      r2,7
4000200c:	10 01 29 00             	bgt.d      4000211c <_vfprintf_r+0x13e8>

40002010:	5e c2                   	st_s       r2,[sp,120]
40002012:	40 20 08 12             	add        r8,r8,8
40002016:	19 09 31 20             	brne.d     r17,0,4000202c <_vfprintf_r+0x12f8>

4000201a:	3c 14 06 30             	ld         r6,[sp,60]
4000201e:	30 14 05 30             	ld         r5,[sp,48]
40002022:	0d 0d 11 00             	brne       r5,0,4000202c <_vfprintf_r+0x12f8>

40002026:	e0 be                   	btst_s     r14,0
40002028:	fc 05 81 ff             	bz         40001624 <_vfprintf_r+0x8f0>

4000202c:	1e c2                   	ld_s       r2,[sp,120]
4000202e:	0d c3                   	ld_s       r3,[sp,52]
40002030:	44 71                   	add_s      r2,r2,1
40002032:	00 24 84 01             	add        r4,r4,r6
40002036:	00 18 c0 10             	st         r3,[r8]
4000203a:	04 18 80 11             	st         r6,[r8,4]
4000203e:	7c 1c 00 31             	st         r4,[sp,124]
40002042:	87 e2                   	cmp_s      r2,7
40002044:	34 03 29 00             	bgt.d      40002378 <_vfprintf_r+0x1644>

40002048:	5e c2                   	st_s       r2,[sp,120]
4000204a:	40 20 08 12             	add        r8,r8,8
4000204e:	4e 21 11 20             	rsub       r17,r17,0
40002052:	21 09 7b 20             	brge.t.d   r17,1,40002070 <_vfprintf_r+0x133c>

40002056:	4c 21 00 a4             	cmp        r17,16
4000205a:	15 01 ef ff             	b.d        4000196c <_vfprintf_r+0xc38>

4000205e:	30 14 05 30             	ld         r5,[sp,48]
40002062:	e0 78                   	nop_s      
40002064:	40 20 08 12             	add        r8,r8,8
40002068:	42 21 11 24             	sub        r17,r17,16
4000206c:	4c 21 00 a4             	cmp        r17,16
40002070:	6c 01 2c 00             	ble.d      400021dc <_vfprintf_r+0x14a8>

40002074:	44 71                   	add_s      r2,r2,1
40002076:	40 24 04 04             	add        r4,r4,16
4000207a:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
40002082:	04 18 01 14             	st         16,[r8,4]
40002086:	5e c2                   	st_s       r2,[sp,120]
40002088:	dd 0a 32 82             	brlt.d     r2,8,40002064 <_vfprintf_r+0x1330>

4000208c:	7c 1c 00 31             	st         r4,[sp,124]
40002090:	e1 40                   	mov_s      r0,r15
40002092:	a1 41                   	mov_s      r1,r13
40002094:	52 0f a0 01             	bl.d       400057e4 <__sprint_r>

40002098:	03 42                   	mov_s      r2,r24
4000209a:	0b 78                   	tst_s      r0,r0
4000209c:	94 00 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400020a0:	7c 14 04 30             	ld         r4,[sp,124]
400020a4:	1e c2                   	ld_s       r2,[sp,120]
400020a6:	c5 07 ef ff             	b.d        40002068 <_vfprintf_r+0x1334>

400020aa:	ea 40                   	mov_s      r8,r23
400020ac:	4c 71                   	mov_s      r2,1
400020ae:	00 15 14 00             	ld         r20,[r5,0]
400020b2:	ae 70                   	mov_s      r21,0
400020b4:	a4 74                   	add_s      r5,r5,4
400020b6:	65 06 6f ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

400020ba:	18 1c 40 31             	st         r5,[sp,24]
400020be:	e0 78                   	nop_s      
400020c0:	ae 70                   	mov_s      r21,0
400020c2:	00 15 14 00             	ld         r20,[r5,0]
400020c6:	a4 74                   	add_s      r5,r5,4
400020c8:	01 02 af ff             	b.d        400012c8 <_vfprintf_r+0x594>

400020cc:	18 1c 40 31             	st         r5,[sp,24]
400020d0:	06 c3                   	ld_s       r3,[sp,24]
400020d2:	40 83                   	ld_s       r2,[r3,0]
400020d4:	64 74                   	add_s      r3,r3,4
400020d6:	4b 02 af ff             	b.d        4000131e <_vfprintf_r+0x5ea>

400020da:	46 c3                   	st_s       r3,[sp,24]
400020dc:	4c 70                   	mov_s      r2,0
400020de:	00 15 14 00             	ld         r20,[r5,0]
400020e2:	ae 70                   	mov_s      r21,0
400020e4:	a4 74                   	add_s      r5,r5,4
400020e6:	35 06 6f ff             	b.d        40000f18 <_vfprintf_r+0x1e4>

400020ea:	18 1c 40 31             	st         r5,[sp,24]
400020ee:	e0 78                   	nop_s      
400020f0:	0a 20 80 2f 00 40 c0 df 	mov        r16,0x4000dfc0
400020f8:	8c 21 c1 a1             	cmp        r17,71
400020fc:	a7 be                   	bclr_s     r14,r14,7
400020fe:	ca 20 89 2f 00 40 c4 df 	mov.gt     r16,0x4000dfc4
40002106:	57 14 85 30             	ldb        r5,[sp,87]
4000210a:	14 1c c1 30             	st         3,[sp,20]
4000210e:	1c 1c c1 30             	st         3,[sp,28]
40002112:	6e 70                   	mov_s      r19,0
40002114:	a3 06 6f ff             	b.d        40000fb6 <_vfprintf_r+0x282>

40002118:	2c 1c 01 30             	st         0,[sp,44]
4000211c:	e1 40                   	mov_s      r0,r15
4000211e:	a1 41                   	mov_s      r1,r13
40002120:	c6 0e a0 01             	bl.d       400057e4 <__sprint_r>

40002124:	03 42                   	mov_s      r2,r24
40002126:	0b 78                   	tst_s      r0,r0
40002128:	08 00 a2 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

4000212c:	5c 14 11 30             	ld         r17,[sp,92]
40002130:	7c 14 04 30             	ld         r4,[sp,124]
40002134:	e3 06 ef ff             	b.d        40002016 <_vfprintf_r+0x12e2>

40002138:	ea 40                   	mov_s      r8,r23
4000213a:	e0 78                   	nop_s      
4000213c:	e1 40                   	mov_s      r0,r15
4000213e:	a1 41                   	mov_s      r1,r13
40002140:	a6 0e a0 01             	bl.d       400057e4 <__sprint_r>

40002144:	03 42                   	mov_s      r2,r24
40002146:	0b 78                   	tst_s      r0,r0
40002148:	e8 07 62 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

4000214c:	7c 14 04 30             	ld         r4,[sp,124]
40002150:	17 06 af ff             	b.d        40001766 <_vfprintf_r+0xa32>

40002154:	ea 40                   	mov_s      r8,r23
40002156:	e0 78                   	nop_s      
40002158:	00 1c 00 32             	st         r8,[sp]
4000215c:	32 0d a0 01             	bl.d       4000568c <strlen>

40002160:	46 c3                   	st_s       r3,[sp,24]
40002162:	6e 70                   	mov_s      r19,0
40002164:	48 20 04 00             	max        r4,r0,0
40002168:	47 c0                   	st_s       r0,[sp,28]
4000216a:	57 14 85 30             	ldb        r5,[sp,87]
4000216e:	14 1c 00 31             	st         r4,[sp,20]
40002172:	2c 1c 01 30             	st         0,[sp,44]
40002176:	43 06 6f ff             	b.d        40000fb6 <_vfprintf_r+0x282>

4000217a:	00 14 08 30             	ld         r8,[sp,0]
4000217e:	e0 78                   	nop_s      
40002180:	e1 40                   	mov_s      r0,r15
40002182:	a1 41                   	mov_s      r1,r13
40002184:	62 0e a0 01             	bl.d       400057e4 <__sprint_r>

40002188:	03 42                   	mov_s      r2,r24
4000218a:	0b 78                   	tst_s      r0,r0
4000218c:	a4 07 62 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40002190:	7c 14 04 30             	ld         r4,[sp,124]
40002194:	a3 00 ef ff             	b.d        40001a36 <_vfprintf_r+0xd02>

40002198:	ea 40                   	mov_s      r8,r23
4000219a:	e0 78                   	nop_s      
4000219c:	e1 40                   	mov_s      r0,r15
4000219e:	a1 41                   	mov_s      r1,r13
400021a0:	46 0e a0 01             	bl.d       400057e4 <__sprint_r>

400021a4:	03 42                   	mov_s      r2,r24
400021a6:	0b 78                   	tst_s      r0,r0
400021a8:	88 07 62 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400021ac:	17 c2                   	ld_s       r2,[sp,92]
400021ae:	7c 14 04 30             	ld         r4,[sp,124]
400021b2:	3f 02 ef ff             	b.d        40001bee <_vfprintf_r+0xeba>

400021b6:	ea 40                   	mov_s      r8,r23
400021b8:	e1 40                   	mov_s      r0,r15
400021ba:	a1 41                   	mov_s      r1,r13
400021bc:	2a 0e a0 01             	bl.d       400057e4 <__sprint_r>

400021c0:	03 42                   	mov_s      r2,r24
400021c2:	0b 78                   	tst_s      r0,r0
400021c4:	6c 07 62 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

400021c8:	17 c2                   	ld_s       r2,[sp,92]
400021ca:	30 14 06 30             	ld         r6,[sp,48]
400021ce:	7c 14 04 30             	ld         r4,[sp,124]
400021d2:	02 26 90 00             	sub        r16,r6,r2
400021d6:	4f 02 ef ff             	b.d        40001c22 <_vfprintf_r+0xeee>

400021da:	ea 40                   	mov_s      r8,r23
400021dc:	00 24 44 04             	add        r4,r4,r17
400021e0:	00 18 80 1f 00 40 c0 d4 	st         0x4000d4c0,[r8]
400021e8:	04 18 40 14             	st         r17,[r8,4]
400021ec:	7c 1c 00 31             	st         r4,[sp,124]
400021f0:	87 e2                   	cmp_s      r2,7
400021f2:	60 07 a9 ff             	bgt.d      40001950 <_vfprintf_r+0xc1c>

400021f6:	5e c2                   	st_s       r2,[sp,120]
400021f8:	71 07 af ff             	b.d        40001968 <_vfprintf_r+0xc34>

400021fc:	40 20 08 12             	add        r8,r8,8
40002200:	76 76                   	cmp_s      r19,6
40002202:	46 c3                   	st_s       r3,[sp,24]
40002204:	ac 70                   	mov_s      r5,0
40002206:	6c 76                   	mov_s      r3,6
40002208:	2c 1c 01 30             	st         0,[sp,44]
4000220c:	ca 23 ce 04             	mov.ls     r3,r19
40002210:	0a 20 80 2f 00 40 f0 df 	mov        r16,0x4000dff0
40002218:	48 23 04 00             	max        r4,r3,0
4000221c:	47 c3                   	st_s       r3,[sp,28]
4000221e:	14 1c 00 31             	st         r4,[sp,20]
40002222:	a9 05 6f ff             	b.d        40000fc8 <_vfprintf_r+0x294>

40002226:	6e 70                   	mov_s      r19,0
40002228:	6c 73                   	mov_s      r3,3
4000222a:	0e c1                   	ld_s       r1,[sp,56]
4000222c:	21 42                   	mov_s      r2,r9
4000222e:	00 1c 00 32             	st         r8,[sp]
40002232:	04 1c 40 32             	st         r9,[sp,4]
40002236:	08 1c 80 32             	st         r10,[sp,8]
4000223a:	e1 40                   	mov_s      r0,r15
4000223c:	62 44                   	mov_s      r4,r19
4000223e:	55 24 c5 35             	add2       r5,sp,23
40002242:	56 24 06 33             	add3       r6,sp,12
40002246:	de 0e 20 00             	bl.d       40002920 <_dtoa_r>

4000224a:	55 24 c7 36             	add2       r7,sp,27
4000224e:	05 c2                   	ld_s       r2,[sp,20]
40002250:	10 40                   	mov_s      r16,r0
40002252:	c7 e2                   	cmp_s      r2,71
40002254:	00 14 08 30             	ld         r8,[sp,0]
40002258:	04 14 09 30             	ld         r9,[sp,4]
4000225c:	0e 00 22 00             	bnz.d      4000226a <_vfprintf_r+0x1536>

40002260:	08 14 0a 30             	ld         r10,[sp,8]
40002264:	79 0e 3e 10             	bbit0.d    r14,0,400022dc <_vfprintf_r+0x15a8>

40002268:	1b c2                   	ld_s       r2,[sp,108]
4000226a:	0b 22 80 92             	tst        r10,r10
4000226e:	b2 03 e1 ff             	bz.d       40001e1e <_vfprintf_r+0x10ea>

40002272:	00 20 c4 24             	add        r4,r16,r19
40002276:	00 10 82 20             	ldb        r2,[r16,0]
4000227a:	15 0a 30 0c             	breq.d     r2,48,4000228c <_vfprintf_r+0x1558>

4000227e:	0e c0                   	ld_s       r0,[sp,56]
40002280:	17 c2                   	ld_s       r2,[sp,92]
40002282:	9f 03 ef ff             	b.d        40001e1e <_vfprintf_r+0x10ea>

40002286:	00 24 84 00             	add        r4,r4,r2
4000228a:	e0 78                   	nop_s      
4000228c:	21 41                   	mov_s      r1,r9
4000228e:	08 1c 00 31             	st         r4,[sp,8]
40002292:	00 1c 00 32             	st         r8,[sp]
40002296:	04 1c 40 32             	st         r9,[sp,4]
4000229a:	4c 70                   	mov_s      r2,0
4000229c:	c6 0e 60 03             	bl.d       40009160 <__nedf2>

400022a0:	6c 70                   	mov_s      r3,0
400022a2:	08 14 04 30             	ld         r4,[sp,8]
400022a6:	00 14 08 30             	ld         r8,[sp,0]
400022aa:	d9 08 38 80             	breq.nt.d  r0,0,40002280 <_vfprintf_r+0x154c>

400022ae:	04 14 09 30             	ld         r9,[sp,4]
400022b2:	4e 23 42 20             	rsub       r2,r19,1
400022b6:	cf 07 ef ff             	b.d        40002282 <_vfprintf_r+0x154e>

400022ba:	57 c2                   	st_s       r2,[sp,92]
400022bc:	2d da                   	mov_s      r2,45
400022be:	4a 25 40 0b             	mov        r5,45
400022c2:	b1 07 6f ff             	b.d        40001270 <_vfprintf_r+0x53c>

400022c6:	57 1c 82 30             	stb        r2,[sp,87]
400022ca:	e0 78                   	nop_s      
400022cc:	45 c2                   	st_s       r2,[sp,20]
400022ce:	09 c6                   	ld_s       r14,[sp,36]
400022d0:	2d da                   	mov_s      r2,45
400022d2:	57 1c 82 30             	stb        r2,[sp,87]
400022d6:	eb 04 6f ff             	b.d        40000fbe <_vfprintf_r+0x28a>

400022da:	6e 70                   	mov_s      r19,0
400022dc:	02 7a                   	sub_s      r2,r2,r0
400022de:	4c c2                   	st_s       r2,[sp,48]
400022e0:	17 c2                   	ld_s       r2,[sp,92]
400022e2:	35 0a 82 0f ff ff fd ff 	brlt       r2,-3,40002314 <_vfprintf_r+0x15e0>

400022ea:	2d 0b 82 20             	brlt       r19,r2,40002314 <_vfprintf_r+0x15e0>

400022ee:	4b c2                   	st_s       r2,[sp,44]
400022f0:	99 03 ef ff             	b.d        40001e88 <_vfprintf_r+0x1154>

400022f4:	2c 14 04 30             	ld         r4,[sp,44]
400022f8:	48 23 05 20             	max        r5,r19,0
400022fc:	1c 1c c0 34             	st         r19,[sp,28]
40002300:	14 1c 40 31             	st         r5,[sp,20]
40002304:	46 c3                   	st_s       r3,[sp,24]
40002306:	57 14 85 30             	ldb        r5,[sp,87]
4000230a:	6e 70                   	mov_s      r19,0
4000230c:	ab 04 6f ff             	b.d        40000fb6 <_vfprintf_r+0x282>

40002310:	2c 1c 01 30             	st         0,[sp,44]
40002314:	42 21 91 20             	sub        r17,r17,2
40002318:	42 22 53 00             	sub        r19,r2,1
4000231c:	64 1c 42 34             	stb        r17,[sp,100]
40002320:	76 70                   	cmp_s      r19,0
40002322:	5c 1c c0 34             	st         r19,[sp,92]
40002326:	ca 22 6b 0b             	mov.lt     r2,45
4000232a:	ca 22 ea 0a             	mov.ge     r2,43
4000232e:	ce 23 2b 20             	rsub.lt    r19,r19,0
40002332:	c5 0b b3 22             	brge.d     r19,10,400023f4 <_vfprintf_r+0x16c0>

40002336:	65 1c 82 30             	stb        r2,[sp,101]
4000233a:	30 da                   	mov_s      r2,48
4000233c:	40 23 03 2c             	add        r3,r19,48
40002340:	67 1c c2 30             	stb        r3,[sp,103]
40002344:	66 1c 82 30             	stb        r2,[sp,102]
40002348:	9a c2                   	add_s      r2,sp,104
4000234a:	30 14 05 30             	ld         r5,[sp,48]
4000234e:	10 14 04 30             	ld         r4,[sp,16]
40002352:	b4 71                   	cmp_s      r5,1
40002354:	02 22 02 01             	sub        r2,r2,r4
40002358:	00 25 86 00             	add        r6,r5,r2
4000235c:	51 c2                   	st_s       r2,[sp,68]
4000235e:	8c 01 2c 00             	ble.d      400024e8 <_vfprintf_r+0x17b4>

40002362:	1c 1c 80 31             	st         r6,[sp,28]
40002366:	07 c2                   	ld_s       r2,[sp,28]
40002368:	2c 1c 01 30             	st         0,[sp,44]
4000236c:	44 71                   	add_s      r2,r2,1
4000236e:	47 c2                   	st_s       r2,[sp,28]
40002370:	3d 03 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

40002374:	48 22 02 00             	max        r2,r2,0
40002378:	e1 40                   	mov_s      r0,r15
4000237a:	a1 41                   	mov_s      r1,r13
4000237c:	6a 0c a0 01             	bl.d       400057e4 <__sprint_r>

40002380:	03 42                   	mov_s      r2,r24
40002382:	0b 78                   	tst_s      r0,r0
40002384:	ac 05 62 ff             	bnz.d      40001130 <_vfprintf_r+0x3fc>

40002388:	5c 14 11 30             	ld         r17,[sp,92]
4000238c:	7c 14 04 30             	ld         r4,[sp,124]
40002390:	1e c2                   	ld_s       r2,[sp,120]
40002392:	bf 04 ef ff             	b.d        4000204e <_vfprintf_r+0x131a>

40002396:	ea 40                   	mov_s      r8,r23
40002398:	4a 25 40 0b             	mov        r5,45
4000239c:	52 22 c9 07             	bxor       r9,r2,31
400023a0:	29 02 ef ff             	b.d        40001dc8 <_vfprintf_r+0x1094>

400023a4:	28 1c 40 31             	st         r5,[sp,40]
400023a8:	4e 24 82 00             	rsub       r2,r4,2
400023ac:	8a 21 c1 29             	mov        r17,103
400023b0:	ca 22 69 00             	mov.gt     r2,1
400023b4:	a0 72                   	add_s      r2,r2,r5
400023b6:	47 c2                   	st_s       r2,[sp,28]
400023b8:	f5 02 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

400023bc:	48 22 02 00             	max        r2,r2,0
400023c0:	50 21 46 21             	bclr       r6,r17,5
400023c4:	6e 76                   	mov_s      r19,6
400023c6:	ef 01 ef ff             	b.d        40001db2 <_vfprintf_r+0x107e>

400023ca:	14 1c 80 31             	st         r6,[sp,20]
400023ce:	e0 78                   	nop_s      
400023d0:	5c 14 05 30             	ld         r5,[sp,92]
400023d4:	e1 0d 72 00             	brlt.d     r5,1,400024b4 <_vfprintf_r+0x1780>

400023d8:	2c 1c 40 31             	st         r5,[sp,44]
400023dc:	b1 0b 31 20             	brne.d     r19,0,4000248c <_vfprintf_r+0x1758>

400023e0:	2c 14 06 30             	ld         r6,[sp,44]
400023e4:	a9 0e 1f 10             	bbit1      r14,0,4000248c <_vfprintf_r+0x1758>

400023e8:	48 25 02 00             	max        r2,r5,0
400023ec:	c1 02 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

400023f0:	1c 1c 40 31             	st         r5,[sp,28]
400023f4:	54 24 44 3e             	add1       r4,sp,57
400023f8:	45 c6                   	st_s       r14,[sp,20]
400023fa:	2c 1c 00 31             	st         r4,[sp,44]
400023fe:	1c 1c 00 32             	st         r8,[sp,28]
40002402:	42 42                   	mov_s      r2,r18
40002404:	80 43                   	mov_s      r3,r4
40002406:	b1 42                   	mov_s      r18,r13
40002408:	6a 45                   	mov_s      r13,r19
4000240a:	50 43                   	mov_s      r19,r2
4000240c:	68 46                   	mov_s      r14,r3
4000240e:	a1 40                   	mov_s      r0,r13
40002410:	a6 09 a0 02             	bl.d       400075b4 <__modsi3>

40002414:	0a d9                   	mov_s      r1,10
40002416:	30 e0                   	add_s      r0,r0,48
40002418:	00 ae                   	stb_s      r0,[r14,0]
4000241a:	0a d9                   	mov_s      r1,10
4000241c:	6e 09 a0 02             	bl.d       40007588 <__divsi3>

40002420:	a1 40                   	mov_s      r0,r13
40002422:	08 45                   	mov_s      r13,r0
40002424:	e9 0d b3 92             	brge.d     r13,10,4000240c <_vfprintf_r+0x16d8>

40002428:	42 26 43 10             	sub        r3,r14,1
4000242c:	62 42                   	mov_s      r2,r19
4000242e:	c1 45                   	mov_s      r5,r14
40002430:	4a 45                   	mov_s      r13,r18
40002432:	50 42                   	mov_s      r18,r2
40002434:	40 20 02 0c             	add        r2,r0,48
40002438:	4f 7a                   	exth_s     r2,r2
4000243a:	ff 1d 82 80             	stb        r2,[r5,-1]
4000243e:	83 44                   	mov_s      r4,sp
40002440:	1c 14 08 30             	ld         r8,[sp,28]
40002444:	80 24 c1 0c             	add        r4,r4,115
40002448:	cd 0b 25 01             	brhs.t.d   r3,r4,40002514 <_vfprintf_r+0x17e0>

4000244c:	05 c6                   	ld_s       r14,[sp,20]
4000244e:	2c 14 06 30             	ld         r6,[sp,44]
40002452:	83 44                   	mov_s      r4,sp
40002454:	02 26 d3 00             	sub        r19,r6,r3
40002458:	80 24 41 09             	add        r4,r4,101
4000245c:	66 71                   	add_s      r19,r19,1
4000245e:	0a 24 c0 74             	mov        lp_count,r19
40002462:	e0 78                   	nop_s      
40002464:	a8 20 00 02             	lp         40002474 <_vfprintf_r+0x1740>

40002468:	6b 26 80 70 00 40 84 24 	sr         0x40002484,[0x2]
40002470:	01 1c 8a 00             	stb.a      r2,[r4,1]
40002474:	02 20 42 31             	sub        r2,r24,r5
40002478:	54 24 c3 3c             	add1       r3,sp,51
4000247c:	cf 06 ef ff             	b.d        4000234a <_vfprintf_r+0x1616>

40002480:	7a 62                   	add_s      r2,r2,r3
40002482:	e0 78                   	nop_s      
40002484:	ed 07 ef ff             	b.d        40002470 <_vfprintf_r+0x173c>

40002488:	01 13 82 02             	ldb.a      r2,[r3,1]
4000248c:	66 71                   	add_s      r19,r19,1
4000248e:	00 23 93 21             	add        r19,r19,r6
40002492:	1c 1c c0 34             	st         r19,[sp,28]
40002496:	19 02 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

4000249a:	48 23 02 20             	max        r2,r19,0
4000249e:	e0 78                   	nop_s      
400024a0:	8a 21 c1 29             	mov        r17,103
400024a4:	c4 71                   	add_s      r6,r6,1
400024a6:	1c 1c 80 31             	st         r6,[sp,28]
400024aa:	05 02 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

400024ae:	48 26 02 00             	max        r2,r6,0
400024b2:	e0 78                   	nop_s      
400024b4:	49 0b 11 20             	brne       r19,0,400024fc <_vfprintf_r+0x17c8>

400024b8:	45 0e 1f 10             	bbit1      r14,0,400024fc <_vfprintf_r+0x17c8>

400024bc:	4c 71                   	mov_s      r2,1
400024be:	f1 01 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

400024c2:	1c 1c 41 30             	st         1,[sp,28]
400024c6:	e0 78                   	nop_s      
400024c8:	06 c2                   	ld_s       r2,[sp,24]
400024ca:	01 12 91 20             	ldb        r17,[r18,1]
400024ce:	00 12 13 00             	ld         r19,[r2,0]
400024d2:	90 42                   	mov_s      r18,r4
400024d4:	44 74                   	add_s      r2,r2,4
400024d6:	76 70                   	cmp_s      r19,0
400024d8:	ca 23 8b 2f ff ff ff ff 	mov.lt     r19,-1
400024e0:	a5 01 6f ff             	b.d        40000e84 <_vfprintf_r+0x150>

400024e4:	46 c2                   	st_s       r2,[sp,24]
400024e6:	e0 78                   	nop_s      
400024e8:	e0 be                   	btst_s     r14,0
400024ea:	7e 06 c2 ff             	bnz        40002366 <_vfprintf_r+0x1632>

400024ee:	48 26 02 00             	max        r2,r6,0
400024f2:	bd 01 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

400024f6:	2c 1c 01 30             	st         0,[sp,44]
400024fa:	e0 78                   	nop_s      
400024fc:	66 72                   	add_s      r19,r19,2
400024fe:	1c 1c c0 34             	st         r19,[sp,28]
40002502:	ad 01 ef ff             	b.d        40001eac <_vfprintf_r+0x1178>

40002506:	48 23 02 20             	max        r2,r19,0
4000250a:	e0 78                   	nop_s      
4000250c:	0d 06 ef ff             	b.d        40002318 <_vfprintf_r+0x15e4>

40002510:	17 c2                   	ld_s       r2,[sp,92]
40002512:	e0 78                   	nop_s      
40002514:	37 06 ef ff             	b.d        4000234a <_vfprintf_r+0x1616>

40002518:	54 24 c2 3c             	add1       r2,sp,51

4000251c <vfprintf>:
4000251c:	00 45                   	mov_s      r5,r0
4000251e:	20 44                   	mov_s      r4,r1
40002520:	40 43                   	mov_s      r3,r2
40002522:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
4000252a:	a0 41                   	mov_s      r1,r5
4000252c:	80 42                   	mov_s      r2,r4
4000252e:	09 00 4f ff             	b          40000d34 <_vfprintf_r>

40002532:	e0 78                   	nop_s      

40002534 <__sbprintf>:
40002534:	f1 c0                   	push_s     blink
40002536:	f4 1c 48 b3             	st.a       r13,[sp,-12]
4000253a:	0c 11 09 01             	ldh        r9,[r1,12]
4000253e:	42 c7                   	st_s       r15,[sp,8]
40002540:	41 c6                   	st_s       r14,[sp,4]
40002542:	64 11 08 00             	ld         r8,[r1,100]
40002546:	82 24 11 3a             	sub        sp,sp,0x468
4000254a:	0e 11 07 01             	ldh        r7,[r1,14]
4000254e:	1c 11 06 00             	ld         r6,[r1,28]
40002552:	24 11 05 00             	ld         r5,[r1,36]
40002556:	56 24 44 33             	add3       r4,sp,13
4000255a:	50 21 49 10             	bclr       r9,r9,1
4000255e:	00 1c 00 31             	st         r4,[sp]
40002562:	10 1c 00 31             	st         r4,[sp,16]
40002566:	8a 24 10 00             	mov        r4,0x400
4000256a:	28 45                   	mov_s      r13,r1
4000256c:	08 47                   	mov_s      r15,r0
4000256e:	0c 1c 44 32             	sth        r9,[sp,12]
40002572:	64 1c 00 32             	st         r8,[sp,100]
40002576:	0e 1c c4 31             	sth        r7,[sp,14]
4000257a:	1c 1c 80 31             	st         r6,[sp,28]
4000257e:	24 1c 40 31             	st         r5,[sp,36]
40002582:	08 1c 00 31             	st         r4,[sp,8]
40002586:	14 1c 00 31             	st         r4,[sp,20]
4000258a:	18 1c 01 30             	st         0,[sp,24]
4000258e:	aa 0f 2f ff             	bl.d       40000d34 <_vfprintf_r>

40002592:	83 41                   	mov_s      r1,sp
40002594:	08 46                   	mov_s      r14,r0
40002596:	19 0e 32 10             	brlt.d     r14,0,400025ac <__sbprintf+0x78>

4000259a:	e1 40                   	mov_s      r0,r15
4000259c:	5a 0e a0 00             	bl.d       40003bf4 <_fflush_r>

400025a0:	83 41                   	mov_s      r1,sp
400025a2:	4c 77                   	mov_s      r2,-1
400025a4:	0b 78                   	tst_s      r0,r0
400025a6:	ca 22 81 03             	mov.z      r2,r14
400025aa:	48 46                   	mov_s      r14,r2
400025ac:	0c 14 02 31             	ldh        r2,[sp,12]
400025b0:	0d 0a 9e 01             	bbit0      r2,6,400025bc <__sbprintf+0x88>

400025b4:	0c 15 02 11             	ldh        r2,[r13,12]
400025b8:	86 ba                   	bset_s     r2,r2,6
400025ba:	46 b5                   	sth_s      r2,[r13,12]
400025bc:	c1 40                   	mov_s      r0,r14
400025be:	80 24 11 3a             	add        sp,sp,0x468
400025c2:	0c 14 1f 30             	ld         blink,[sp,12]
400025c6:	00 c5                   	ld_s       r13,[sp,0]
400025c8:	01 c6                   	ld_s       r14,[sp,4]
400025ca:	02 c7                   	ld_s       r15,[sp,8]
400025cc:	e0 7f                   	j_s.d      [blink]
400025ce:	a4 c0                   	add_s      sp,sp,16

400025d0 <__swsetup_r>:
400025d0:	f1 c0                   	push_s     blink
400025d2:	f8 1c 48 b3             	st.a       r13,[sp,-8]
400025d6:	00 16 02 70 00 a8 10 08 	ld         r2,[0xa8000810]
400025de:	41 c6                   	st_s       r14,[sp,4]
400025e0:	28 45                   	mov_s      r13,r1
400025e2:	15 0a 30 00             	breq.d     r2,0,400025f4 <__swsetup_r+0x24>

400025e6:	08 46                   	mov_s      r14,r0
400025e8:	6e 82                   	ld_s       r3,[r2,56]
400025ea:	6b 7b                   	tst_s      r3,r3
400025ec:	f4 0e a1 00             	blz.d      40003ce0 <__sinit>

400025f0:	ca 20 81 00             	mov.z      r0,r2
400025f4:	0c 15 44 11             	ldh.x      r4,[r13,12]
400025f8:	2f 22 08 01             	exth       r2,r4
400025fc:	29 0a de 00             	bbit0      r2,3,40002624 <__swsetup_r+0x54>

40002600:	64 85                   	ld_s       r3,[r13,16]
40002602:	1e eb                   	breq_s     r3,0,4000263c <__swsetup_r+0x6c>

40002604:	5d 0a 1e 00             	bbit0      r2,0,40002660 <__swsetup_r+0x90>

40002608:	45 85                   	ld_s       r2,[r13,20]
4000260a:	08 1d 01 10             	st         0,[r13,8]
4000260e:	53 7a                   	neg_s      r2,r2
40002610:	61 0b 30 00             	breq.d     r3,0,40002670 <__swsetup_r+0xa0>

40002614:	46 a5                   	st_s       r2,[r13,24]
40002616:	0c 70                   	mov_s      r0,0
40002618:	08 14 1f 30             	ld         blink,[sp,8]
4000261c:	00 c5                   	ld_s       r13,[sp,0]
4000261e:	01 c6                   	ld_s       r14,[sp,4]
40002620:	e0 7f                   	j_s.d      [blink]
40002622:	a3 c0                   	add_s      sp,sp,12
40002624:	91 0a 3e 01             	bbit0.d    r2,4,400026b4 <__swsetup_r+0xe4>

40002628:	0c 77                   	mov_s      r0,-1
4000262a:	61 0a 9f 00             	bbit1      r2,2,40002688 <__swsetup_r+0xb8>

4000262e:	64 85                   	ld_s       r3,[r13,16]
40002630:	45 24 02 02             	or         r2,r4,8
40002634:	46 b5                   	sth_s      r2,[r13,12]
40002636:	d1 0b 31 80             	brne.d     r3,0,40002604 <__swsetup_r+0x34>

4000263a:	50 7a                   	exth_s     r2,r2
4000263c:	04 22 84 0f 00 00 80 02 	and        r4,r2,0x280
40002644:	c1 0c 80 8f 00 00 00 02 	breq       r4,0x200,40002604 <__swsetup_r+0x34>

4000264c:	c1 40                   	mov_s      r0,r14
4000264e:	56 0e e0 00             	bl.d       400044a0 <__smakebuf_r>

40002652:	a1 41                   	mov_s      r1,r13
40002654:	0c 15 02 11             	ldh        r2,[r13,12]
40002658:	ad 07 ef ff             	b.d        40002604 <__swsetup_r+0x34>

4000265c:	64 85                   	ld_s       r3,[r13,16]
4000265e:	e0 78                   	nop_s      
40002660:	21 0a 7f 00             	bbit1.d    r2,1,40002680 <__swsetup_r+0xb0>

40002664:	4c 70                   	mov_s      r2,0
40002666:	45 85                   	ld_s       r2,[r13,20]
40002668:	42 a5                   	st_s       r2,[r13,8]
4000266a:	b1 0b 31 80             	brne.d     r3,0,40002618 <__swsetup_r+0x48>

4000266e:	0c 70                   	mov_s      r0,0
40002670:	46 9d                   	ldh_s.x    r2,[r13,12]
40002672:	a7 0a de 81             	bbit0      r2,7,40002616 <__swsetup_r+0x46>

40002676:	86 ba                   	bset_s     r2,r2,6
40002678:	0c 77                   	mov_s      r0,-1
4000267a:	a1 07 ef ff             	b.d        40002618 <__swsetup_r+0x48>

4000267e:	46 b5                   	sth_s      r2,[r13,12]
40002680:	eb 07 ef ff             	b.d        4000266a <__swsetup_r+0x9a>

40002684:	42 a5                   	st_s       r2,[r13,8]
40002686:	e0 78                   	nop_s      
40002688:	2c 85                   	ld_s       r1,[r13,48]
4000268a:	0d e9                   	breq_s     r1,0,400026a2 <__swsetup_r+0xd2>

4000268c:	56 25 02 12             	add3       r2,r13,8
40002690:	0f 09 80 00             	breq       r1,r2,4000269e <__swsetup_r+0xce>

40002694:	7a 09 e0 00             	bl.d       4000400c <_free_r>

40002698:	c1 40                   	mov_s      r0,r14
4000269a:	0c 15 44 11             	ldh.x      r4,[r13,12]
4000269e:	30 1d 01 10             	st         0,[r13,48]
400026a2:	64 85                   	ld_s       r3,[r13,16]
400026a4:	04 1d 01 10             	st         0,[r13,4]
400026a8:	60 a5                   	st_s       r3,[r13,0]
400026aa:	89 07 ef ff             	b.d        40002630 <__swsetup_r+0x60>

400026ae:	46 24 04 09             	bic        r4,r4,36
400026b2:	e0 78                   	nop_s      
400026b4:	00 1e 41 12             	st         9,[r14]
400026b8:	4f 24 84 01             	bset       r4,r4,6
400026bc:	5d 07 ef ff             	b.d        40002618 <__swsetup_r+0x48>

400026c0:	0c 1d 04 11             	sth        r4,[r13,12]

400026c4 <quorem>:
400026c4:	f1 c0                   	push_s     blink
400026c6:	e0 1c 48 b3             	st.a       r13,[sp,-32]
400026ca:	44 80                   	ld_s       r2,[r0,16]
400026cc:	a4 81                   	ld_s       r13,[r1,16]
400026ce:	14 1c 80 34             	st         r18,[sp,20]
400026d2:	18 1c c0 34             	st         r19,[sp,24]
400026d6:	41 c6                   	st_s       r14,[sp,4]
400026d8:	42 c7                   	st_s       r15,[sp,8]
400026da:	0c 1c 00 34             	st         r16,[sp,12]
400026de:	10 1c 40 34             	st         r17,[sp,16]
400026e2:	1c 1c 00 35             	st         r20,[sp,28]
400026e6:	10 42                   	mov_s      r18,r0
400026e8:	50 75                   	cmp_s      r13,r2
400026ea:	30 43                   	mov_s      r19,r1
400026ec:	12 02 29 00             	bgt.d      400028fe <quorem+0x23a>

400026f0:	ca 20 29 00             	mov.gt     r0,0
400026f4:	40 21 10 05             	add        r16,r1,20
400026f8:	a9 6d                   	sub_s      r13,r13,1
400026fa:	40 22 11 25             	add        r17,r18,20
400026fe:	b1 44                   	mov_s      r20,r13
40002700:	00 24 14 25             	add        r20,r20,r20
40002704:	00 24 14 25             	add        r20,r20,r20
40002708:	00 20 0e 25             	add        r14,r16,r20
4000270c:	00 24 54 24             	add        r20,r20,r17
40002710:	20 86                   	ld_s       r1,[r14,0]
40002712:	00 14 00 20             	ld         r0,[r20,0]
40002716:	72 0e 60 02             	bl.d       40007584 <__udivsi3>

4000271a:	24 71                   	add_s      r1,r1,1
4000271c:	0a 27 00 90             	mov.f      r15,r0
40002720:	08 01 21 00             	bz.d       40002828 <quorem+0x164>

40002724:	ca 20 81 04             	mov.z      r0,r18
40002728:	02 45                   	mov_s      r5,r16
4000272a:	22 44                   	mov_s      r4,r17
4000272c:	cc 70                   	mov_s      r6,0
4000272e:	2d 70                   	mov_s      r9,0
40002730:	04 15 08 04             	ld.ab      r8,[r5,4]
40002734:	e1 41                   	mov_s      r1,r15
40002736:	22 0e 60 02             	bl.d       40007554 <__mulsi3>

4000273a:	2f 20 08 02             	exth       r0,r8
4000273e:	00 14 07 00             	ld         r7,[r4,0]
40002742:	00 26 06 00             	add        r6,r6,r0
40002746:	01 40                   	mov_s      r0,r8
40002748:	4a 24 00 f4             	mov.f      lp_count,16
4000274c:	e8 20 a2 01             	lpnz       40002758 <quorem+0x94>

40002750:	2f 20 02 00             	lsr        r0,r0
40002754:	4a 26 00 70             	nop        
40002758:	fe 0d 60 02             	bl.d       40007554 <__mulsi3>

4000275c:	e1 41                   	mov_s      r1,r15
4000275e:	53 26 c3 03             	bmsk       r3,r6,15
40002762:	e8 42                   	mov_s      r10,r7
40002764:	53 27 c7 03             	bmsk       r7,r7,15
40002768:	00 27 42 02             	add        r2,r7,r9
4000276c:	62 7a                   	sub_s      r2,r2,r3
4000276e:	40 43                   	mov_s      r3,r2
40002770:	4a 24 00 f4             	mov.f      lp_count,16
40002774:	e8 20 a2 01             	lpnz       40002780 <quorem+0xbc>

40002778:	2f 23 c1 00             	asr        r3,r3
4000277c:	4a 26 00 70             	nop        
40002780:	4a 24 00 f4             	mov.f      lp_count,16
40002784:	e8 20 a2 01             	lpnz       40002790 <quorem+0xcc>

40002788:	2f 22 82 12             	lsr        r10,r10
4000278c:	4a 26 00 70             	nop        
40002790:	c8 43                   	mov_s      r11,r6
40002792:	cf ba                   	bmsk_s     r2,r2,15
40002794:	4a 24 00 f4             	mov.f      lp_count,16
40002798:	e8 20 a2 01             	lpnz       400027a4 <quorem+0xe0>

4000279c:	2f 23 c2 12             	lsr        r11,r11
400027a0:	4a 26 00 70             	nop        
400027a4:	61 70                   	add_s      r0,r0,r11
400027a6:	00 46                   	mov_s      r6,r0
400027a8:	53 20 c8 03             	bmsk       r8,r0,15
400027ac:	4a 24 00 f4             	mov.f      lp_count,16
400027b0:	e8 20 a2 01             	lpnz       400027bc <quorem+0xf8>

400027b4:	2f 26 82 01             	lsr        r6,r6
400027b8:	4a 26 00 70             	nop        
400027bc:	02 22 0a 12             	sub        r10,r10,r8
400027c0:	00 22 c7 10             	add        r7,r10,r3
400027c4:	e0 43                   	mov_s      r3,r7
400027c6:	e8 41                   	mov_s      r9,r7
400027c8:	4a 24 00 f4             	mov.f      lp_count,16
400027cc:	e8 20 a2 01             	lpnz       400027d8 <quorem+0x114>

400027d0:	00 23 c3 00             	add        r3,r3,r3
400027d4:	4a 26 00 70             	nop        
400027d8:	4a 24 00 f4             	mov.f      lp_count,16
400027dc:	e8 20 a2 01             	lpnz       400027e8 <quorem+0x124>

400027e0:	2f 21 41 12             	asr        r9,r9
400027e4:	4a 26 00 70             	nop        
400027e8:	65 7a                   	or_s       r2,r2,r3
400027ea:	49 0e 65 91             	brhs.nt.d  r14,r5,40002730 <quorem+0x6c>

400027ee:	04 1c 90 00             	st.ab      r2,[r4,4]
400027f2:	00 14 02 20             	ld         r2,[r20,0]
400027f6:	33 0a 31 00             	brne.d     r2,0,40002826 <quorem+0x162>

400027fa:	42 24 02 21             	sub        r2,r20,4
400027fe:	27 09 85 20             	brhs.t     r17,r2,40002822 <quorem+0x15e>

40002802:	fc 14 02 a0             	ld         r2,[r20,-4]
40002806:	8f ea                   	brne_s     r2,0,40002822 <quorem+0x15e>

40002808:	42 24 14 22             	sub        r20,r20,8
4000280c:	08 f0                   	b_s        4000281c <quorem+0x158>

4000280e:	e0 78                   	nop_s      
40002810:	00 14 02 20             	ld         r2,[r20,0]
40002814:	0f 0a 31 00             	brne.d     r2,0,40002822 <quorem+0x15e>

40002818:	42 24 14 21             	sub        r20,r20,4
4000281c:	f5 09 24 a5             	brlo.d     r17,r20,40002810 <quorem+0x14c>

40002820:	a9 6d                   	sub_s      r13,r13,1
40002822:	10 1a 40 23             	st         r13,[r18,16]
40002826:	42 40                   	mov_s      r0,r18
40002828:	82 0e 20 01             	bl.d       40004ea8 <__mcmp>

4000282c:	0a 21 c0 04             	mov        r1,r19
40002830:	cd 08 12 00             	brlt       r0,0,400028fc <quorem+0x238>

40002834:	e5 71                   	add_s      r15,r15,1
40002836:	02 43                   	mov_s      r3,r16
40002838:	22 42                   	mov_s      r2,r17
4000283a:	0d 70                   	mov_s      r8,0
4000283c:	04 13 06 04             	ld.ab      r6,[r3,4]
40002840:	00 12 07 00             	ld         r7,[r2,0]
40002844:	c8 41                   	mov_s      r9,r6
40002846:	53 26 c6 03             	bmsk       r6,r6,15
4000284a:	53 27 c5 03             	bmsk       r5,r7,15
4000284e:	00 25 05 02             	add        r5,r5,r8
40002852:	02 25 85 01             	sub        r5,r5,r6
40002856:	a0 46                   	mov_s      r6,r5
40002858:	4a 24 00 f4             	mov.f      lp_count,16
4000285c:	e8 20 a2 01             	lpnz       40002868 <quorem+0x1a4>

40002860:	2f 26 81 01             	asr        r6,r6
40002864:	4a 26 00 70             	nop        
40002868:	4a 24 00 f4             	mov.f      lp_count,16
4000286c:	e8 20 a2 01             	lpnz       40002878 <quorem+0x1b4>

40002870:	2f 21 42 12             	lsr        r9,r9
40002874:	4a 26 00 70             	nop        
40002878:	e0 44                   	mov_s      r4,r7
4000287a:	53 25 c5 03             	bmsk       r5,r5,15
4000287e:	4a 24 00 f4             	mov.f      lp_count,16
40002882:	e8 20 e2 01             	lpnz       4000288e <quorem+0x1ca>

40002886:	2f 24 02 01             	lsr        r4,r4
4000288a:	4a 26 00 70             	nop        
4000288e:	02 24 44 02             	sub        r4,r4,r9
40002892:	00 24 84 01             	add        r4,r4,r6
40002896:	80 46                   	mov_s      r6,r4
40002898:	88 40                   	mov_s      r8,r4
4000289a:	4a 24 00 f4             	mov.f      lp_count,16
4000289e:	e8 20 e2 01             	lpnz       400028aa <quorem+0x1e6>

400028a2:	00 26 86 01             	add        r6,r6,r6
400028a6:	4a 26 00 70             	nop        
400028aa:	4a 24 00 f4             	mov.f      lp_count,16
400028ae:	e8 20 e2 01             	lpnz       400028ba <quorem+0x1f6>

400028b2:	2f 20 01 12             	asr        r8,r8
400028b6:	4a 26 00 70             	nop        
400028ba:	05 25 85 01             	or         r5,r5,r6
400028be:	81 0e e5 90             	brhs.nt.d  r14,r3,4000283c <quorem+0x178>

400028c2:	04 1a 50 01             	st.ab      r5,[r2,4]
400028c6:	15 21 42 23             	add2       r2,r17,r13
400028ca:	60 82                   	ld_s       r3,[r2,0]
400028cc:	33 0b 31 00             	brne.d     r3,0,400028fe <quorem+0x23a>

400028d0:	e1 40                   	mov_s      r0,r15
400028d2:	42 22 03 01             	sub        r3,r2,4
400028d6:	25 09 c5 20             	brhs.t     r17,r3,400028f8 <quorem+0x234>

400028da:	fc 12 03 80             	ld         r3,[r2,-4]
400028de:	8e eb                   	brne_s     r3,0,400028f8 <quorem+0x234>

400028e0:	42 22 02 02             	sub        r2,r2,8
400028e4:	07 f0                   	b_s        400028f2 <quorem+0x22e>

400028e6:	e0 78                   	nop_s      
400028e8:	60 82                   	ld_s       r3,[r2,0]
400028ea:	11 0b 31 00             	brne.d     r3,0,400028f8 <quorem+0x234>

400028ee:	42 22 02 01             	sub        r2,r2,4
400028f2:	f9 09 a4 a0             	brlo.d     r17,r2,400028e8 <quorem+0x224>

400028f6:	a9 6d                   	sub_s      r13,r13,1
400028f8:	10 1a 40 23             	st         r13,[r18,16]
400028fc:	e1 40                   	mov_s      r0,r15
400028fe:	20 14 1f 30             	ld         blink,[sp,32]
40002902:	00 c5                   	ld_s       r13,[sp,0]
40002904:	01 c6                   	ld_s       r14,[sp,4]
40002906:	02 c7                   	ld_s       r15,[sp,8]
40002908:	0c 14 10 30             	ld         r16,[sp,12]
4000290c:	10 14 11 30             	ld         r17,[sp,16]
40002910:	14 14 12 30             	ld         r18,[sp,20]
40002914:	18 14 13 30             	ld         r19,[sp,24]
40002918:	1c 14 14 30             	ld         r20,[sp,28]
4000291c:	e0 7f                   	j_s.d      [blink]
4000291e:	a9 c0                   	add_s      sp,sp,36

40002920 <_dtoa_r>:
40002920:	f1 c0                   	push_s     blink
40002922:	d0 1c 48 b3             	st.a       r13,[sp,-48]
40002926:	0c 1c 00 34             	st         r16,[sp,12]
4000292a:	41 c6                   	st_s       r14,[sp,4]
4000292c:	10 1c 40 34             	st         r17,[sp,16]
40002930:	28 46                   	mov_s      r14,r1
40002932:	30 80                   	ld_s       r1,[r0,64]
40002934:	42 c7                   	st_s       r15,[sp,8]
40002936:	20 1c 40 35             	st         r21,[sp,32]
4000293a:	28 1c c0 35             	st         r23,[sp,40]
4000293e:	14 1c 80 34             	st         r18,[sp,20]
40002942:	18 1c c0 34             	st         r19,[sp,24]
40002946:	1c 1c 00 35             	st         r20,[sp,28]
4000294a:	24 1c 80 35             	st         r22,[sp,36]
4000294e:	2c 1c 00 36             	st         r24,[sp,44]
40002952:	b7 c1                   	sub_s      sp,sp,92
40002954:	0c 1c 00 31             	st         r4,[sp,12]
40002958:	10 1c 40 31             	st         r5,[sp,16]
4000295c:	48 47                   	mov_s      r15,r2
4000295e:	08 45                   	mov_s      r13,r0
40002960:	70 45                   	mov_s      r21,r3
40002962:	d0 40                   	mov_s      r16,r6
40002964:	27 09 30 00             	breq.d     r1,0,4000298a <_dtoa_r+0x6a>

40002968:	f0 47                   	mov_s      r23,r7
4000296a:	71 80                   	ld_s       r3,[r0,68]
4000296c:	4c 71                   	mov_s      r2,1
4000296e:	61 a1                   	st_s       r3,[r1,4]
40002970:	44 23 fc 87             	and.f      lp_count,r3,31
40002974:	e8 20 a2 01             	lpnz       40002980 <_dtoa_r+0x60>

40002978:	00 22 82 00             	add        r2,r2,r2
4000297c:	4a 26 00 70             	nop        
40002980:	ca 0d e0 00             	bl.d       40004748 <_Bfree>

40002984:	42 a1                   	st_s       r2,[r1,8]
40002986:	40 1d 01 10             	st         0,[r13,64]
4000298a:	e1 42                   	mov_s      r2,r15
4000298c:	b5 0a 12 00             	brlt       r2,0,40002a40 <_dtoa_r+0x120>

40002990:	00 18 01 20             	st         0,[r16]
40002994:	f1 46                   	mov_s      r22,r15
40002996:	04 26 82 2f f0 7f 00 00 	and        r2,r22,0x7ff00000
4000299e:	6d 0a 80 0f f0 7f 00 00 	breq       r2,0x7ff00000,40002a08 <_dtoa_r+0xe8>

400029a6:	c1 40                   	mov_s      r0,r14
400029a8:	e1 41                   	mov_s      r1,r15
400029aa:	4c 70                   	mov_s      r2,0
400029ac:	76 0f 20 03             	bl.d       40009120 <__eqdf2>

400029b0:	4a 23 00 00             	mov        r3,0
400029b4:	9d 08 31 00             	brne.d     r0,0,40002a50 <_dtoa_r+0x130>

400029b8:	04 c3                   	ld_s       r3,[sp,16]
400029ba:	0b 27 c0 a5             	tst        r23,r23
400029be:	28 02 21 00             	bz.d       40002be4 <_dtoa_r+0x2c4>

400029c2:	00 1b 41 00             	st         1,[r3]
400029c6:	00 1f 80 2f 00 40 01 d9 	st         0x4000d901,[r23]
400029ce:	c3 40 00 40 00 d9       	mov_s      r0,0x4000d900
400029d4:	8c 14 1f 30             	ld         blink,[sp,140]
400029d8:	5c 14 0d 32             	ld.a       r13,[sp,92]
400029dc:	01 c6                   	ld_s       r14,[sp,4]
400029de:	02 c7                   	ld_s       r15,[sp,8]
400029e0:	0c 14 10 30             	ld         r16,[sp,12]
400029e4:	10 14 11 30             	ld         r17,[sp,16]
400029e8:	14 14 12 30             	ld         r18,[sp,20]
400029ec:	18 14 13 30             	ld         r19,[sp,24]
400029f0:	1c 14 14 30             	ld         r20,[sp,28]
400029f4:	20 14 15 30             	ld         r21,[sp,32]
400029f8:	24 14 16 30             	ld         r22,[sp,36]
400029fc:	28 14 17 30             	ld         r23,[sp,40]
40002a00:	2c 14 18 30             	ld         r24,[sp,44]
40002a04:	e0 7f                   	j_s.d      [blink]
40002a06:	ad c0                   	add_s      sp,sp,52
40002a08:	04 c2                   	ld_s       r2,[sp,16]
40002a0a:	cb 7e                   	tst_s      r14,r14
40002a0c:	00 1a 80 0f 00 00 0f 27 	st         0x270f,[r2]
40002a14:	ca 20 82 0f 00 40 04 e0 	mov.nz     r0,0x4000e004
40002a1c:	94 01 21 00             	bz.d       40002bb0 <_dtoa_r+0x290>

40002a20:	d3 26 e1 24             	bmsk.z     r22,r22,19
40002a24:	b1 0f 18 a0             	breq.nt    r23,0,400029d4 <_dtoa_r+0xb4>

40002a28:	43 88                   	ldb_s      r2,[r0,3]
40002a2a:	4b 7a                   	tst_s      r2,r2
40002a2c:	0a 00 22 00             	bnz.d      40002a36 <_dtoa_r+0x116>

40002a30:	40 20 02 02             	add        r2,r0,8
40002a34:	43 68                   	add_s      r2,r0,3
40002a36:	a1 07 ef ff             	b.d        400029d4 <_dtoa_r+0xb4>

40002a3a:	00 1f 80 20             	st         r2,[r23]
40002a3e:	e0 78                   	nop_s      
40002a40:	53 27 96 17             	bmsk       r22,r15,30
40002a44:	00 18 41 20             	st         1,[r16]
40002a48:	4f 07 ef ff             	b.d        40002996 <_dtoa_r+0x76>

40002a4c:	ca 47                   	mov_s      r15,r22
40002a4e:	e0 78                   	nop_s      
40002a50:	c1 41                   	mov_s      r1,r14
40002a52:	e1 42                   	mov_s      r2,r15
40002a54:	a1 40                   	mov_s      r0,r13
40002a56:	96 c3                   	add_s      r3,sp,88
40002a58:	ea 0f 20 01             	bl.d       40005240 <__d2b>

40002a5c:	55 24 44 35             	add2       r4,sp,21
40002a60:	d2 41                   	mov_s      r17,r22
40002a62:	4a 24 00 f5             	mov.f      lp_count,20
40002a66:	e8 20 e2 01             	lpnz       40002a72 <_dtoa_r+0x152>

40002a6a:	2f 21 42 24             	lsr        r17,r17
40002a6e:	4a 26 00 70             	nop        
40002a72:	0b 21 40 a4             	tst        r17,r17
40002a76:	50 01 22 00             	bnz.d      40002bc4 <_dtoa_r+0x2a4>

40002a7a:	10 40                   	mov_s      r16,r0
40002a7c:	54 14 14 30             	ld         r20,[sp,84]
40002a80:	58 14 11 30             	ld         r17,[sp,88]
40002a84:	00 21 11 25             	add        r17,r17,r20
40002a88:	8c 21 ef ab             	cmp        r17,0xfffffbef
40002a8c:	f4 04 2b 00             	blt.d      40002f80 <_dtoa_r+0x660>

40002a90:	22 42                   	mov_s      r2,r17
40002a92:	22 43                   	mov_s      r3,r17
40002a94:	8e 23 b0 03             	rsub       r3,r3,0xfffffc0e
40002a98:	44 23 fc 87             	and.f      lp_count,r3,31
40002a9c:	e8 20 a2 01             	lpnz       40002aa8 <_dtoa_r+0x188>

40002aa0:	00 26 96 25             	add        r22,r22,r22
40002aa4:	4a 26 00 70             	nop        
40002aa8:	80 22 90 04             	add        r2,r2,0x412
40002aac:	c1 43                   	mov_s      r3,r14
40002aae:	44 22 fc 87             	and.f      lp_count,r2,31
40002ab2:	e8 20 e2 01             	lpnz       40002abe <_dtoa_r+0x19e>

40002ab6:	2f 23 c2 00             	lsr        r3,r3
40002aba:	4a 26 00 70             	nop        
40002abe:	05 26 c0 20             	or         r0,r22,r3
40002ac2:	ea 08 60 03             	bl.d       400093a8 <__floatunsidf>

40002ac6:	26 77                   	add_s      r17,r17,-1
40002ac8:	40 1c 41 30             	st         1,[sp,64]
40002acc:	c3 71 10 fe 00 00       	add_s      r1,r1,0xfe100000
40002ad2:	c3 43 f8 3f 00 00       	mov_s      r3,0x3ff80000
40002ad8:	36 09 20 03             	bl.d       40008c0c <__subdf3>

40002adc:	4c 70                   	mov_s      r2,0
40002ade:	c3 42 6f 63 61 43       	mov_s      r2,0x636f4361
40002ae4:	c3 43 d2 3f a7 87       	mov_s      r3,0x3fd287a7
40002aea:	62 09 00 03             	bl         40008c48 <__muldf3>

40002aee:	c3 42 60 8b b3 c8       	mov_s      r2,0x8b60c8b3
40002af4:	c3 43 c6 3f 28 8a       	mov_s      r3,0x3fc68a28
40002afa:	e2 08 00 03             	bl         40008bd8 <__adddf3>

40002afe:	10 42                   	mov_s      r18,r0
40002b00:	30 43                   	mov_s      r19,r1
40002b02:	de 0f 20 03             	bl.d       400092dc <__floatsidf>

40002b06:	22 40                   	mov_s      r0,r17
40002b08:	c3 42 9f 50 fb 79       	mov_s      r2,0x509f79fb
40002b0e:	c3 43 d3 3f 13 44       	mov_s      r3,0x3fd34413
40002b14:	36 09 00 03             	bl         40008c48 <__muldf3>

40002b18:	00 42                   	mov_s      r2,r0
40002b1a:	20 43                   	mov_s      r3,r1
40002b1c:	42 40                   	mov_s      r0,r18
40002b1e:	be 08 20 03             	bl.d       40008bd8 <__adddf3>

40002b22:	62 41                   	mov_s      r1,r19
40002b24:	10 42                   	mov_s      r18,r0
40002b26:	7a 09 60 03             	bl.d       4000949c <__fixdfsi>

40002b2a:	30 43                   	mov_s      r19,r1
40002b2c:	62 41                   	mov_s      r1,r19
40002b2e:	18 40                   	mov_s      r24,r0
40002b30:	4c 70                   	mov_s      r2,0
40002b32:	42 40                   	mov_s      r0,r18
40002b34:	ee 0e 20 03             	bl.d       40009220 <__ltdf2>

40002b38:	6c 70                   	mov_s      r3,0
40002b3a:	14 70                   	cmp_s      r0,0
40002b3c:	20 04 0b 00             	blt        40002f5c <_dtoa_r+0x63c>

40002b40:	4c 20 80 b5             	cmp        r24,22
40002b44:	f0 03 0d 00             	bhi        40002f34 <_dtoa_r+0x614>

40002b48:	16 26 02 76 00 40 50 d5 	add3       r2,0x4000d550,r24
40002b50:	00 82                   	ld_s       r0,[r2,0]
40002b52:	21 82                   	ld_s       r1,[r2,4]
40002b54:	e1 43                   	mov_s      r3,r15
40002b56:	4e 0e 20 03             	bl.d       400091a0 <__gtdf2>

40002b5a:	c1 42                   	mov_s      r2,r14
40002b5c:	14 70                   	cmp_s      r0,0
40002b5e:	1c 04 2c 00             	ble.d      40002f78 <_dtoa_r+0x658>

40002b62:	28 1c 01 30             	st         0,[sp,40]
40002b66:	07 77                   	add_s      r24,r24,-1
40002b68:	02 24 54 24             	sub        r20,r20,r17
40002b6c:	42 24 56 20             	sub        r22,r20,1
40002b70:	d6 70                   	cmp_s      r22,0
40002b72:	e0 03 2b 00             	blt.d      40002f50 <_dtoa_r+0x630>

40002b76:	ca 24 2a 20             	mov.ge     r20,0
40002b7a:	17 70                   	cmp_s      r24,0
40002b7c:	c0 03 0b 00             	blt        40002f3c <_dtoa_r+0x61c>

40002b80:	24 1c 00 36             	st         r24,[sp,36]
40002b84:	1c 1c 01 30             	st         0,[sp,28]
40002b88:	00 26 16 26             	add        r22,r22,r24
40002b8c:	65 0d b5 22             	brhs.t.d   r21,10,40002bf0 <_dtoa_r+0x2d0>

40002b90:	b6 75                   	cmp_s      r21,5
40002b92:	c2 25 29 21             	sub.gt     r21,r21,4
40002b96:	ca 23 29 00             	mov.gt     r3,0
40002b9a:	ca 23 6c 00             	mov.le     r3,1
40002b9e:	42 25 82 20             	sub        r2,r21,2
40002ba2:	53 0a 15 01             	brhs.t     r2,4,40002bf2 <_dtoa_r+0x2d2>

40002ba6:	f0 26 82 70 00 40 e0 d4 	ld.as      r2,[0x4000d4e0,r2]
40002bae:	00 7a                   	j_s        [r2]
40002bb0:	c3 40 00 40 04 e0       	mov_s      r0,0x4000e004
40002bb6:	0b 26 80 a5             	tst        r22,r22
40002bba:	ca 20 81 0f 00 40 f8 df 	mov.z      r0,0x4000dff8
40002bc2:	32 f1                   	b_s        40002a24 <_dtoa_r+0x104>

40002bc4:	e1 42                   	mov_s      r2,r15
40002bc6:	c1 40                   	mov_s      r0,r14
40002bc8:	d3 ba                   	bmsk_s     r2,r2,19
40002bca:	82 21 cf 2f             	sub        r17,r17,0x3ff
40002bce:	54 14 14 30             	ld         r20,[sp,84]
40002bd2:	05 22 81 0f f0 3f 00 00 	or         r1,r2,0x3ff00000
40002bda:	fb 06 ef ff             	b.d        40002ad2 <_dtoa_r+0x1b2>

40002bde:	40 1c 01 30             	st         0,[sp,64]
40002be2:	e0 78                   	nop_s      
40002be4:	c3 40 00 40 00 d9       	mov_s      r0,0x4000d900
40002bea:	ed 05 cf ff             	b          400029d4 <_dtoa_r+0xb4>

40002bee:	e0 78                   	nop_s      
40002bf0:	ae 70                   	mov_s      r21,0
40002bf2:	44 1d 01 10             	st         0,[r13,68]
40002bf6:	a1 40                   	mov_s      r0,r13
40002bf8:	2c 70                   	mov_s      r1,0
40002bfa:	ce 0a e0 00             	bl.d       400046c4 <_Balloc>

40002bfe:	2c 1c c1 3f             	st         -1,[sp,44]
40002c02:	20 1c 41 30             	st         1,[sp,32]
40002c06:	45 c0                   	st_s       r0,[sp,20]
40002c08:	10 a5                   	st_s       r0,[r13,64]
40002c0a:	18 1c c1 3f             	st         -1,[sp,24]
40002c0e:	0c 1c 01 30             	st         0,[sp,12]
40002c12:	16 c2                   	ld_s       r2,[sp,88]
40002c14:	54 70                   	cmp_s      r2,0
40002c16:	78 01 2b 00             	blt.d      40002d8c <_dtoa_r+0x46c>

40002c1a:	4c 20 80 b3             	cmp        r24,14
40002c1e:	74 01 29 00             	bgt.d      40002d90 <_dtoa_r+0x470>

40002c22:	20 14 04 30             	ld         r4,[sp,32]
40002c26:	18 14 04 30             	ld         r4,[sp,24]
40002c2a:	16 26 02 76 00 40 50 d5 	add3       r2,0x4000d550,r24
40002c32:	00 12 12 00             	ld         r18,[r2,0]
40002c36:	17 0c 73 00             	brge.d     r4,1,40002c4a <_dtoa_r+0x32a>

40002c3a:	04 12 13 00             	ld         r19,[r2,4]
40002c3e:	03 c2                   	ld_s       r2,[sp,12]
40002c40:	54 70                   	cmp_s      r2,0
40002c42:	d8 01 6b 00             	blt.d      40003618 <_dtoa_r+0xcf8>

40002c46:	0b 24 00 81             	tst        r4,r4
40002c4a:	42 42                   	mov_s      r2,r18
40002c4c:	62 43                   	mov_s      r3,r19
40002c4e:	0a 20 80 03             	mov        r0,r14
40002c52:	62 0a 20 03             	bl.d       40008eb0 <__divdf3>

40002c56:	e1 41                   	mov_s      r1,r15
40002c58:	46 08 40 03             	bl         4000949c <__fixdfsi>

40002c5c:	82 0e 20 03             	bl.d       400092dc <__floatsidf>

40002c60:	10 44                   	mov_s      r20,r0
40002c62:	42 42                   	mov_s      r2,r18
40002c64:	e6 0f e0 02             	bl.d       40008c48 <__muldf3>

40002c68:	62 43                   	mov_s      r3,r19
40002c6a:	00 42                   	mov_s      r2,r0
40002c6c:	20 43                   	mov_s      r3,r1
40002c6e:	c1 40                   	mov_s      r0,r14
40002c70:	9e 0f e0 02             	bl.d       40008c0c <__subdf3>

40002c74:	e1 41                   	mov_s      r1,r15
40002c76:	05 c3                   	ld_s       r3,[sp,20]
40002c78:	40 24 02 2c             	add        r2,r20,48
40002c7c:	40 ab                   	stb_s      r2,[r3,0]
40002c7e:	06 c2                   	ld_s       r2,[sp,24]
40002c80:	70 45                   	mov_s      r21,r3
40002c82:	00 44                   	mov_s      r4,r0
40002c84:	20 45                   	mov_s      r5,r1
40002c86:	9b 0a 70 00             	breq.d     r2,1,40002d1e <_dtoa_r+0x3fe>

40002c8a:	a6 71                   	add_s      r21,r21,1
40002c8c:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
40002c92:	ba 0f e0 02             	bl.d       40008c48 <__muldf3>

40002c96:	4c 70                   	mov_s      r2,0
40002c98:	4c 70                   	mov_s      r2,0
40002c9a:	08 46                   	mov_s      r14,r0
40002c9c:	28 47                   	mov_s      r15,r1
40002c9e:	86 0c 20 03             	bl.d       40009120 <__eqdf2>

40002ca2:	6c 70                   	mov_s      r3,0
40002ca4:	0b 78                   	tst_s      r0,r0
40002ca6:	5c 03 61 00             	bz.d       40003800 <_dtoa_r+0xee0>

40002caa:	14 14 11 30             	ld         r17,[sp,20]
40002cae:	05 c2                   	ld_s       r2,[sp,20]
40002cb0:	18 14 04 30             	ld         r4,[sp,24]
40002cb4:	26 72                   	add_s      r17,r17,2
40002cb6:	25 00 20 00             	b.d        40002cd8 <_dtoa_r+0x3b8>

40002cba:	00 22 16 01             	add        r22,r2,r4
40002cbe:	e0 78                   	nop_s      
40002cc0:	8a 0f e0 02             	bl.d       40008c48 <__muldf3>

40002cc4:	26 71                   	add_s      r17,r17,1
40002cc6:	4c 70                   	mov_s      r2,0
40002cc8:	08 46                   	mov_s      r14,r0
40002cca:	28 47                   	mov_s      r15,r1
40002ccc:	56 0c 20 03             	bl.d       40009120 <__eqdf2>

40002cd0:	6c 70                   	mov_s      r3,0
40002cd2:	0b 78                   	tst_s      r0,r0
40002cd4:	2c 03 41 00             	bz         40003800 <_dtoa_r+0xee0>

40002cd8:	42 42                   	mov_s      r2,r18
40002cda:	62 43                   	mov_s      r3,r19
40002cdc:	c1 40                   	mov_s      r0,r14
40002cde:	d6 09 20 03             	bl.d       40008eb0 <__divdf3>

40002ce2:	e1 41                   	mov_s      r1,r15
40002ce4:	ba 0f 20 03             	bl.d       4000949c <__fixdfsi>

40002ce8:	0a 25 40 24             	mov        r21,r17
40002cec:	f2 0d 20 03             	bl.d       400092dc <__floatsidf>

40002cf0:	10 44                   	mov_s      r20,r0
40002cf2:	42 42                   	mov_s      r2,r18
40002cf4:	56 0f e0 02             	bl.d       40008c48 <__muldf3>

40002cf8:	62 43                   	mov_s      r3,r19
40002cfa:	00 42                   	mov_s      r2,r0
40002cfc:	20 43                   	mov_s      r3,r1
40002cfe:	c1 40                   	mov_s      r0,r14
40002d00:	0e 0f e0 02             	bl.d       40008c0c <__subdf3>

40002d04:	e1 41                   	mov_s      r1,r15
40002d06:	40 24 02 2c             	add        r2,r20,48
40002d0a:	ff 19 82 a0             	stb        r2,[r17,-1]
40002d0e:	00 44                   	mov_s      r4,r0
40002d10:	20 45                   	mov_s      r5,r1
40002d12:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
40002d18:	a9 09 a1 a5             	brne.d     r17,r22,40002cc0 <_dtoa_r+0x3a0>

40002d1c:	4c 70                   	mov_s      r2,0
40002d1e:	80 42                   	mov_s      r2,r4
40002d20:	a0 43                   	mov_s      r3,r5
40002d22:	80 40                   	mov_s      r0,r4
40002d24:	b6 0e e0 02             	bl.d       40008bd8 <__adddf3>

40002d28:	a0 41                   	mov_s      r1,r5
40002d2a:	08 46                   	mov_s      r14,r0
40002d2c:	28 47                   	mov_s      r15,r1
40002d2e:	42 40                   	mov_s      r0,r18
40002d30:	62 41                   	mov_s      r1,r19
40002d32:	c1 42                   	mov_s      r2,r14
40002d34:	ee 0c 20 03             	bl.d       40009220 <__ltdf2>

40002d38:	e1 43                   	mov_s      r3,r15
40002d3a:	14 70                   	cmp_s      r0,0
40002d3c:	84 04 6a 00             	bge.d      400039c0 <_dtoa_r+0x10a0>

40002d40:	42 40                   	mov_s      r0,r18
40002d42:	ff 15 8e a0             	ldb        r14,[r21,-1]
40002d46:	05 c7                   	ld_s       r15,[sp,20]
40002d48:	48 1c 00 36             	st         r24,[sp,72]
40002d4c:	14 1c 40 35             	st         r21,[sp,20]
40002d50:	05 c2                   	ld_s       r2,[sp,20]
40002d52:	14 14 04 30             	ld         r4,[sp,20]
40002d56:	49 6a                   	sub_s      r2,r2,1
40002d58:	02 22 c5 03             	sub        r5,r2,r15
40002d5c:	40 43                   	mov_s      r3,r2
40002d5e:	a4 71                   	add_s      r5,r5,1
40002d60:	0a 24 40 71             	mov        lp_count,r5
40002d64:	a8 20 40 02             	lp         40002d76 <_dtoa_r+0x456>

40002d68:	6b 26 80 70 00 40 d8 32 	sr         0x400032d8,[0x2]
40002d70:	b9 e6                   	cmp_s      r14,57
40002d72:	9c 02 42 00             	bnz        4000380c <_dtoa_r+0xeec>

40002d76:	48 14 18 30             	ld         r24,[sp,72]
40002d7a:	30 db                   	mov_s      r3,48
40002d7c:	60 af                   	stb_s      r3,[r15,0]
40002d7e:	14 1c 00 31             	st         r4,[sp,20]
40002d82:	31 db                   	mov_s      r3,49
40002d84:	07 71                   	add_s      r24,r24,1
40002d86:	85 01 20 00             	b.d        40002f08 <_dtoa_r+0x5e8>

40002d8a:	60 aa                   	stb_s      r3,[r2,0]
40002d8c:	20 14 04 30             	ld         r4,[sp,32]
40002d90:	0b 24 00 81             	tst        r4,r4
40002d94:	08 02 22 00             	bnz.d      40002f9c <_dtoa_r+0x67c>

40002d98:	b6 71                   	cmp_s      r21,1
40002d9a:	1c 14 12 30             	ld         r18,[sp,28]
40002d9e:	92 43                   	mov_s      r19,r20
40002da0:	2e 70                   	mov_s      r17,0
40002da2:	23 0e 72 20             	brlt.d     r22,1,40002dc2 <_dtoa_r+0x4a2>

40002da6:	1c 14 04 30             	ld         r4,[sp,28]
40002daa:	1b 0b 72 20             	brlt.d     r19,1,40002dc2 <_dtoa_r+0x4a2>

40002dae:	09 26 c2 24             	min        r2,r22,r19
40002db2:	02 24 94 20             	sub        r20,r20,r2
40002db6:	02 23 93 20             	sub        r19,r19,r2
40002dba:	02 26 96 20             	sub        r22,r22,r2
40002dbe:	1c 14 04 30             	ld         r4,[sp,28]
40002dc2:	49 0c 72 00             	brlt.d     r4,1,40002e08 <_dtoa_r+0x4e8>

40002dc6:	20 14 04 30             	ld         r4,[sp,32]
40002dca:	0b 24 00 81             	tst        r4,r4
40002dce:	24 02 61 00             	bz.d       400037f0 <_dtoa_r+0xed0>

40002dd2:	07 c2                   	ld_s       r2,[sp,28]
40002dd4:	27 0a 72 20             	brlt.d     r18,1,40002dfa <_dtoa_r+0x4da>

40002dd8:	22 41                   	mov_s      r1,r17
40002dda:	42 42                   	mov_s      r2,r18
40002ddc:	e6 0e e0 00             	bl.d       40004cc0 <__pow5mult>

40002de0:	a1 40                   	mov_s      r0,r13
40002de2:	02 42                   	mov_s      r2,r16
40002de4:	10 41                   	mov_s      r17,r0
40002de6:	a1 40                   	mov_s      r0,r13
40002de8:	9a 0c e0 00             	bl.d       40004a80 <__multiply>

40002dec:	22 41                   	mov_s      r1,r17
40002dee:	00 42                   	mov_s      r2,r0
40002df0:	02 41                   	mov_s      r1,r16
40002df2:	a1 40                   	mov_s      r0,r13
40002df4:	56 09 e0 00             	bl.d       40004748 <_Bfree>

40002df8:	50 40                   	mov_s      r16,r2
40002dfa:	1c 14 04 30             	ld         r4,[sp,28]
40002dfe:	02 24 82 84             	sub.f      r2,r4,r18
40002e02:	d8 02 62 00             	bnz.d      400038d8 <_dtoa_r+0xfb8>

40002e06:	02 41                   	mov_s      r1,r16
40002e08:	a1 40                   	mov_s      r0,r13
40002e0a:	5a 0c e0 00             	bl.d       40004a60 <__i2b>

40002e0e:	2c 71                   	mov_s      r1,1
40002e10:	24 14 04 30             	ld         r4,[sp,36]
40002e14:	13 0c 72 00             	brlt.d     r4,1,40002e26 <_dtoa_r+0x506>

40002e18:	10 42                   	mov_s      r18,r0
40002e1a:	42 41                   	mov_s      r1,r18
40002e1c:	a1 40                   	mov_s      r0,r13
40002e1e:	a6 0e e0 00             	bl.d       40004cc0 <__pow5mult>

40002e22:	80 42                   	mov_s      r2,r4
40002e24:	10 42                   	mov_s      r18,r0
40002e26:	b6 71                   	cmp_s      r21,1
40002e28:	1c 00 6c 00             	ble.d      40003644 <_dtoa_r+0xd24>

40002e2c:	c1 42                   	mov_s      r2,r14
40002e2e:	1c 1c 01 30             	st         0,[sp,28]
40002e32:	24 14 04 30             	ld         r4,[sp,36]
40002e36:	0b 24 00 81             	tst        r4,r4
40002e3a:	c8 07 22 00             	bnz.d      40003600 <_dtoa_r+0xce0>

40002e3e:	ca 20 61 00             	mov.z      r0,1
40002e42:	00 20 82 05             	add        r2,r0,r22
40002e46:	44 22 c2 87             	and.f      r2,r2,31
40002e4a:	bc 05 21 00             	bz.d       40003404 <_dtoa_r+0xae4>

40002e4e:	ca 22 21 07             	mov.z      r2,28
40002e52:	4e 22 03 08             	rsub       r3,r2,32
40002e56:	74 74                   	cmp_s      r3,4
40002e58:	14 04 4c 00             	ble        40003a6c <_dtoa_r+0x114c>

40002e5c:	4e 22 02 07             	rsub       r2,r2,28
40002e60:	00 24 94 20             	add        r20,r20,r2
40002e64:	00 23 93 20             	add        r19,r19,r2
40002e68:	00 26 96 20             	add        r22,r22,r2
40002e6c:	11 0c 72 20             	brlt.d     r20,1,40002e7c <_dtoa_r+0x55c>

40002e70:	02 41                   	mov_s      r1,r16
40002e72:	a1 40                   	mov_s      r0,r13
40002e74:	1e 0f e0 00             	bl.d       40004d90 <__lshift>

40002e78:	82 42                   	mov_s      r2,r20
40002e7a:	10 40                   	mov_s      r16,r0
40002e7c:	11 0e 72 20             	brlt.d     r22,1,40002e8c <_dtoa_r+0x56c>

40002e80:	42 41                   	mov_s      r1,r18
40002e82:	a1 40                   	mov_s      r0,r13
40002e84:	0e 0f e0 00             	bl.d       40004d90 <__lshift>

40002e88:	c2 42                   	mov_s      r2,r22
40002e8a:	10 42                   	mov_s      r18,r0
40002e8c:	28 14 04 30             	ld         r4,[sp,40]
40002e90:	0b 24 00 81             	tst        r4,r4
40002e94:	24 07 22 00             	bnz.d      400035b8 <_dtoa_r+0xc98>

40002e98:	02 40                   	mov_s      r0,r16
40002e9a:	b6 72                   	cmp_s      r21,2
40002e9c:	bc 04 2c 00             	ble.d      40003358 <_dtoa_r+0xa38>

40002ea0:	20 14 04 30             	ld         r4,[sp,32]
40002ea4:	18 14 04 30             	ld         r4,[sp,24]
40002ea8:	94 70                   	cmp_s      r4,0
40002eaa:	b0 04 29 00             	bgt.d      40003358 <_dtoa_r+0xa38>

40002eae:	20 14 04 30             	ld         r4,[sp,32]
40002eb2:	18 14 04 30             	ld         r4,[sp,24]
40002eb6:	0b 24 00 81             	tst        r4,r4
40002eba:	92 04 22 00             	bnz.d      4000334a <_dtoa_r+0xa2a>

40002ebe:	42 41                   	mov_s      r1,r18
40002ec0:	4c 75                   	mov_s      r2,5
40002ec2:	6c 70                   	mov_s      r3,0
40002ec4:	96 08 e0 00             	bl.d       40004758 <__multadd>

40002ec8:	a1 40                   	mov_s      r0,r13
40002eca:	10 42                   	mov_s      r18,r0
40002ecc:	02 40                   	mov_s      r0,r16
40002ece:	de 0f e0 00             	bl.d       40004ea8 <__mcmp>

40002ed2:	42 41                   	mov_s      r1,r18
40002ed4:	14 70                   	cmp_s      r0,0
40002ed6:	78 04 2c 00             	ble.d      4000334c <_dtoa_r+0xa2c>

40002eda:	03 c2                   	ld_s       r2,[sp,12]
40002edc:	05 c7                   	ld_s       r15,[sp,20]
40002ede:	31 da                   	mov_s      r2,49
40002ee0:	e1 43                   	mov_s      r3,r15
40002ee2:	40 af                   	stb_s      r2,[r15,0]
40002ee4:	64 71                   	add_s      r3,r3,1
40002ee6:	45 c3                   	st_s       r3,[sp,20]
40002ee8:	07 71                   	add_s      r24,r24,1
40002eea:	8e 70                   	mov_s      r20,0
40002eec:	a1 40                   	mov_s      r0,r13
40002eee:	5e 08 e0 00             	bl.d       40004748 <_Bfree>

40002ef2:	42 41                   	mov_s      r1,r18
40002ef4:	15 09 30 20             	breq.d     r17,0,40002f08 <_dtoa_r+0x5e8>

40002ef8:	0c 24 40 a4             	cmp        r20,r17
40002efc:	28 05 02 00             	bnz        40003424 <_dtoa_r+0xb04>

40002f00:	a1 40                   	mov_s      r0,r13
40002f02:	4a 08 e0 00             	bl.d       40004748 <_Bfree>

40002f06:	22 41                   	mov_s      r1,r17
40002f08:	a1 40                   	mov_s      r0,r13
40002f0a:	42 08 e0 00             	bl.d       40004748 <_Bfree>

40002f0e:	02 41                   	mov_s      r1,r16
40002f10:	05 c3                   	ld_s       r3,[sp,20]
40002f12:	10 14 04 30             	ld         r4,[sp,16]
40002f16:	4c 70                   	mov_s      r2,0
40002f18:	40 ab                   	stb_s      r2,[r3,0]
40002f1a:	40 20 42 30             	add        r2,r24,1
40002f1e:	0b 27 c0 a5             	tst        r23,r23
40002f22:	1c 05 21 00             	bz.d       4000343c <_dtoa_r+0xb1c>

40002f26:	00 1c 80 00             	st         r2,[r4]
40002f2a:	00 1f c0 20             	st         r3,[r23]
40002f2e:	a9 02 ef ff             	b.d        400029d4 <_dtoa_r+0xb4>

40002f32:	e1 40                   	mov_s      r0,r15
40002f34:	35 04 ef ff             	b.d        40002b68 <_dtoa_r+0x248>

40002f38:	28 1c 41 30             	st         1,[sp,40]
40002f3c:	4e 20 04 30             	rsub       r4,r24,0
40002f40:	02 24 14 26             	sub        r20,r20,r24
40002f44:	1c 1c 00 31             	st         r4,[sp,28]
40002f48:	45 04 ef ff             	b.d        40002b8c <_dtoa_r+0x26c>

40002f4c:	24 1c 01 30             	st         0,[sp,36]
40002f50:	4e 26 14 20             	rsub       r20,r22,0
40002f54:	27 04 ef ff             	b.d        40002b7a <_dtoa_r+0x25a>

40002f58:	ce 70                   	mov_s      r22,0
40002f5a:	e0 78                   	nop_s      
40002f5c:	82 0b 20 03             	bl.d       400092dc <__floatsidf>

40002f60:	03 40                   	mov_s      r0,r24
40002f62:	42 42                   	mov_s      r2,r18
40002f64:	fe 09 20 03             	bl.d       40009160 <__nedf2>

40002f68:	62 43                   	mov_s      r3,r19
40002f6a:	0b 78                   	tst_s      r0,r0
40002f6c:	c2 20 62 30             	sub.nz     r24,r24,1
40002f70:	d5 03 ef ff             	b.d        40002b44 <_dtoa_r+0x224>

40002f74:	4c 20 80 b5             	cmp        r24,22
40002f78:	f5 03 ef ff             	b.d        40002b6c <_dtoa_r+0x24c>

40002f7c:	02 24 54 24             	sub        r20,r20,r17
40002f80:	c1 40                   	mov_s      r0,r14
40002f82:	8e 22 af 0b             	rsub       r2,r2,0xfffffbee
40002f86:	44 22 fc 87             	and.f      lp_count,r2,31
40002f8a:	e8 20 e2 01             	lpnz       40002f96 <_dtoa_r+0x676>

40002f8e:	00 20 00 00             	add        r0,r0,r0
40002f92:	4a 26 00 70             	nop        
40002f96:	2f 03 cf ff             	b          40002ac2 <_dtoa_r+0x1a2>

40002f9a:	e0 78                   	nop_s      
40002f9c:	58 01 6c 00             	ble.d      400038f4 <_dtoa_r+0xfd4>

40002fa0:	1c 14 04 30             	ld         r4,[sp,28]
40002fa4:	06 c2                   	ld_s       r2,[sp,24]
40002fa6:	49 6a                   	sub_s      r2,r2,1
40002fa8:	1d 0c a3 00             	brge.d     r4,r2,40002fc4 <_dtoa_r+0x6a4>

40002fac:	02 24 92 00             	sub        r18,r4,r2
40002fb0:	1c 14 04 30             	ld         r4,[sp,28]
40002fb4:	47 c2                   	st_s       r2,[sp,28]
40002fb6:	02 22 03 01             	sub        r3,r2,r4
40002fba:	24 14 04 30             	ld         r4,[sp,36]
40002fbe:	4e 70                   	mov_s      r18,0
40002fc0:	80 73                   	add_s      r3,r3,r4
40002fc2:	49 c3                   	st_s       r3,[sp,36]
40002fc4:	18 14 04 30             	ld         r4,[sp,24]
40002fc8:	94 70                   	cmp_s      r4,0
40002fca:	44 01 4b 00             	blt        4000390c <_dtoa_r+0xfec>

40002fce:	06 c2                   	ld_s       r2,[sp,24]
40002fd0:	92 43                   	mov_s      r19,r20
40002fd2:	00 24 94 20             	add        r20,r20,r2
40002fd6:	00 26 96 20             	add        r22,r22,r2
40002fda:	a1 40                   	mov_s      r0,r13
40002fdc:	86 0a e0 00             	bl.d       40004a60 <__i2b>

40002fe0:	4a 21 40 00             	mov        r1,1
40002fe4:	bf 05 ef ff             	b.d        40002da2 <_dtoa_r+0x482>

40002fe8:	10 41                   	mov_s      r17,r0
40002fea:	e0 78                   	nop_s      
40002fec:	20 1c 01 30             	st         0,[sp,32]
40002ff0:	0c 14 04 30             	ld         r4,[sp,12]
40002ff4:	00 24 04 06             	add        r4,r4,r24
40002ff8:	2c 1c 00 31             	st         r4,[sp,44]
40002ffc:	84 71                   	add_s      r4,r4,1
40002ffe:	94 70                   	cmp_s      r4,0
40003000:	e0 07 2c 00             	ble.d      400037e0 <_dtoa_r+0xec0>

40003004:	18 1c 00 31             	st         r4,[sp,24]
40003008:	18 14 04 30             	ld         r4,[sp,24]
4000300c:	2e 71                   	mov_s      r17,1
4000300e:	4c 24 80 83             	cmp        r4,14
40003012:	80 45                   	mov_s      r5,r4
40003014:	ca 21 2d 20             	mov.hi     r17,0
40003018:	04 21 d1 20             	and        r17,r17,r3
4000301c:	44 1d 01 10             	st         0,[r13,68]
40003020:	4c 25 c0 85             	cmp        r5,23
40003024:	1e 00 2e 00             	bls.d      40003042 <_dtoa_r+0x722>

40003028:	ca 21 2e 00             	mov.ls     r1,0
4000302c:	6c 71                   	mov_s      r3,1
4000302e:	4c 74                   	mov_s      r2,4
40003030:	00 22 82 00             	add        r2,r2,r2
40003034:	60 41                   	mov_s      r1,r3
40003036:	40 22 04 05             	add        r4,r2,20
4000303a:	f9 0d 25 81             	brhs.nt.d  r5,r4,40003030 <_dtoa_r+0x710>

4000303e:	61 69                   	add_s      r3,r1,1
40003040:	31 a5                   	st_s       r1,[r13,68]
40003042:	86 0e a0 00             	bl.d       400046c4 <_Balloc>

40003046:	a1 40                   	mov_s      r0,r13
40003048:	45 c0                   	st_s       r0,[sp,20]
4000304a:	0b 21 40 a4             	tst        r17,r17
4000304e:	c6 03 e1 ff             	bz.d       40002c12 <_dtoa_r+0x2f2>

40003052:	10 a5                   	st_s       r0,[r13,64]
40003054:	4e c6                   	st_s       r14,[sp,56]
40003056:	17 70                   	cmp_s      r24,0
40003058:	fc 03 2c 00             	ble.d      40003454 <_dtoa_r+0xb34>

4000305c:	4f c7                   	st_s       r15,[sp,60]
4000305e:	44 20 c2 33             	and        r2,r24,15
40003062:	0b 47                   	mov_s      r15,r24
40003064:	16 26 82 70 00 40 50 d5 	add3       r2,0x4000d550,r2
4000306c:	2f 27 c1 13             	asr        r15,r15
40003070:	2f 27 c1 13             	asr        r15,r15
40003074:	2f 27 c1 13             	asr        r15,r15
40003078:	2f 27 c1 13             	asr        r15,r15
4000307c:	00 12 12 00             	ld         r18,[r2,0]
40003080:	e4 bf                   	btst_s     r15,4
40003082:	94 03 21 00             	bz.d       40003414 <_dtoa_r+0xaf4>

40003086:	04 12 13 00             	ld         r19,[r2,4]
4000308a:	0e c0                   	ld_s       r0,[sp,56]
4000308c:	0f c1                   	ld_s       r1,[sp,60]
4000308e:	00 16 02 70 00 40 48 d5 	ld         r2,[0x4000d548]
40003096:	00 16 03 70 00 40 4c d5 	ld         r3,[0x4000d54c]
4000309e:	16 0e e0 02             	bl.d       40008eb0 <__divdf3>

400030a2:	c3 bf                   	bmsk_s     r15,r15,3
400030a4:	4c c0                   	st_s       r0,[sp,48]
400030a6:	4d c1                   	st_s       r1,[sp,52]
400030a8:	2e 73                   	mov_s      r17,3
400030aa:	33 0f 30 10             	breq.d     r15,0,400030da <_dtoa_r+0x7ba>

400030ae:	0c c0                   	ld_s       r0,[sp,48]
400030b0:	0a 26 80 1f 00 40 28 d5 	mov        r14,0x4000d528
400030b8:	42 40                   	mov_s      r0,r18
400030ba:	17 0f 3e 10             	bbit0.d    r15,0,400030ce <_dtoa_r+0x7ae>

400030be:	62 41                   	mov_s      r1,r19
400030c0:	40 86                   	ld_s       r2,[r14,0]
400030c2:	61 86                   	ld_s       r3,[r14,4]
400030c4:	86 0b e0 02             	bl.d       40008c48 <__muldf3>

400030c8:	26 71                   	add_s      r17,r17,1
400030ca:	10 42                   	mov_s      r18,r0
400030cc:	30 43                   	mov_s      r19,r1
400030ce:	2f 27 c1 13             	asr        r15,r15
400030d2:	e9 0f 31 90             	brne.d     r15,0,400030b8 <_dtoa_r+0x798>

400030d6:	08 e6                   	add_s      r14,r14,8
400030d8:	0c c0                   	ld_s       r0,[sp,48]
400030da:	0d c1                   	ld_s       r1,[sp,52]
400030dc:	42 42                   	mov_s      r2,r18
400030de:	d6 0d e0 02             	bl.d       40008eb0 <__divdf3>

400030e2:	62 43                   	mov_s      r3,r19
400030e4:	08 46                   	mov_s      r14,r0
400030e6:	28 47                   	mov_s      r15,r1
400030e8:	28 14 04 30             	ld         r4,[sp,40]
400030ec:	1f 0c 30 00             	breq.d     r4,0,4000310a <_dtoa_r+0x7ea>

400030f0:	c1 40                   	mov_s      r0,r14
400030f2:	e1 41                   	mov_s      r1,r15
400030f4:	c3 43 f0 3f 00 00       	mov_s      r3,0x3ff00000
400030fa:	2a 09 20 03             	bl.d       40009220 <__ltdf2>

400030fe:	4c 70                   	mov_s      r2,0
40003100:	14 70                   	cmp_s      r0,0
40003102:	28 07 2b 00             	blt.d      40003828 <_dtoa_r+0xf08>

40003106:	18 14 04 30             	ld         r4,[sp,24]
4000310a:	d6 09 20 03             	bl.d       400092dc <__floatsidf>

4000310e:	22 40                   	mov_s      r0,r17
40003110:	c1 42                   	mov_s      r2,r14
40003112:	3a 0b e0 02             	bl.d       40008c48 <__muldf3>

40003116:	e1 43                   	mov_s      r3,r15
40003118:	c3 43 1c 40 00 00       	mov_s      r3,0x401c0000
4000311e:	be 0a e0 02             	bl.d       40008bd8 <__adddf3>

40003122:	4c 70                   	mov_s      r2,0
40003124:	18 14 04 30             	ld         r4,[sp,24]
40003128:	30 43                   	mov_s      r19,r1
4000312a:	0b 24 00 81             	tst        r4,r4
4000312e:	02 23 93 2f 40 03 00 00 	sub        r19,r19,0x03400000
40003136:	dc 01 21 00             	bz.d       40003310 <_dtoa_r+0x9f0>

4000313a:	10 42                   	mov_s      r18,r0
4000313c:	18 14 06 30             	ld         r6,[sp,24]
40003140:	48 1c 00 36             	st         r24,[sp,72]
40003144:	20 14 04 30             	ld         r4,[sp,32]
40003148:	0b 24 00 81             	tst        r4,r4
4000314c:	80 03 21 00             	bz.d       400034cc <_dtoa_r+0xbac>

40003150:	42 26 44 00             	sub        r4,r6,1
40003154:	16 26 82 71 00 40 48 d5 	add3       r2,0x4000d548,r6
4000315c:	61 82                   	ld_s       r3,[r2,4]
4000315e:	40 82                   	ld_s       r2,[r2,0]
40003160:	00 1c 80 31             	st         r6,[sp]
40003164:	c3 41 e0 3f 00 00       	mov_s      r1,0x3fe00000
4000316a:	4a 0d e0 02             	bl.d       40008eb0 <__divdf3>

4000316e:	0c 70                   	mov_s      r0,0
40003170:	42 42                   	mov_s      r2,r18
40003172:	9e 0a e0 02             	bl.d       40008c0c <__subdf3>

40003176:	62 43                   	mov_s      r3,r19
40003178:	30 43                   	mov_s      r19,r1
4000317a:	e1 41                   	mov_s      r1,r15
4000317c:	10 42                   	mov_s      r18,r0
4000317e:	22 0b 20 03             	bl.d       4000949c <__fixdfsi>

40003182:	c1 40                   	mov_s      r0,r14
40003184:	5a 09 20 03             	bl.d       400092dc <__floatsidf>

40003188:	10 41                   	mov_s      r17,r0
4000318a:	00 42                   	mov_s      r2,r0
4000318c:	20 43                   	mov_s      r3,r1
4000318e:	c1 40                   	mov_s      r0,r14
40003190:	7e 0a e0 02             	bl.d       40008c0c <__subdf3>

40003194:	e1 41                   	mov_s      r1,r15
40003196:	40 21 04 2c             	add        r4,r17,48
4000319a:	2f 26 07 11             	extb       r14,r4
4000319e:	14 14 04 30             	ld         r4,[sp,20]
400031a2:	08 40                   	mov_s      r8,r0
400031a4:	28 41                   	mov_s      r9,r1
400031a6:	00 1c 82 03             	stb        r14,[r4]
400031aa:	00 42                   	mov_s      r2,r0
400031ac:	20 43                   	mov_s      r3,r1
400031ae:	08 1c 00 32             	st         r8,[sp,8]
400031b2:	04 1c 40 32             	st         r9,[sp,4]
400031b6:	42 40                   	mov_s      r0,r18
400031b8:	ea 0f e0 02             	bl.d       400091a0 <__gtdf2>

400031bc:	62 41                   	mov_s      r1,r19
400031be:	14 14 11 30             	ld         r17,[sp,20]
400031c2:	26 71                   	add_s      r17,r17,1
400031c4:	08 14 08 30             	ld         r8,[sp,8]
400031c8:	d5 08 73 00             	brge.d     r0,1,4000329c <_dtoa_r+0x97c>

400031cc:	04 14 09 30             	ld         r9,[sp,4]
400031d0:	01 42                   	mov_s      r2,r8
400031d2:	21 43                   	mov_s      r3,r9
400031d4:	c3 41 f0 3f 00 00       	mov_s      r1,0x3ff00000
400031da:	36 0a e0 02             	bl.d       40008c0c <__subdf3>

400031de:	0c 70                   	mov_s      r0,0
400031e0:	00 42                   	mov_s      r2,r0
400031e2:	20 43                   	mov_s      r3,r1
400031e4:	42 40                   	mov_s      r0,r18
400031e6:	be 0f e0 02             	bl.d       400091a0 <__gtdf2>

400031ea:	62 41                   	mov_s      r1,r19
400031ec:	00 14 06 30             	ld         r6,[sp,0]
400031f0:	14 70                   	cmp_s      r0,0
400031f2:	08 14 08 30             	ld         r8,[sp,8]
400031f6:	6c 07 29 00             	bgt.d      40003960 <_dtoa_r+0x1040>

400031fa:	04 14 09 30             	ld         r9,[sp,4]
400031fe:	d4 71                   	cmp_s      r6,1
40003200:	4c 02 2c 00             	ble.d      4000344c <_dtoa_r+0xb2c>

40003204:	05 c2                   	ld_s       r2,[sp,20]
40003206:	30 1c 00 35             	st         r20,[sp,48]
4000320a:	44 1c 40 35             	st         r21,[sp,68]
4000320e:	00 22 8f 01             	add        r15,r2,r6
40003212:	11 44                   	mov_s      r20,r8
40003214:	23 00 20 00             	b.d        40003236 <_dtoa_r+0x916>

40003218:	31 45                   	mov_s      r21,r9
4000321a:	e0 78                   	nop_s      
4000321c:	f2 09 c0 02             	bl         40008c0c <__subdf3>

40003220:	42 42                   	mov_s      r2,r18
40003222:	02 08 20 03             	bl.d       40009220 <__ltdf2>

40003226:	62 43                   	mov_s      r3,r19
40003228:	14 70                   	cmp_s      r0,0
4000322a:	38 07 2b 00             	blt.d      40003960 <_dtoa_r+0x1040>

4000322e:	0c 21 c0 a3             	cmp        r17,r15
40003232:	14 02 01 00             	bz         40003444 <_dtoa_r+0xb24>

40003236:	42 40                   	mov_s      r0,r18
40003238:	62 41                   	mov_s      r1,r19
4000323a:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
40003240:	0a 0a e0 02             	bl.d       40008c48 <__muldf3>

40003244:	4c 70                   	mov_s      r2,0
40003246:	4c 70                   	mov_s      r2,0
40003248:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
4000324e:	10 42                   	mov_s      r18,r0
40003250:	30 43                   	mov_s      r19,r1
40003252:	82 40                   	mov_s      r0,r20
40003254:	f6 09 e0 02             	bl.d       40008c48 <__muldf3>

40003258:	a2 41                   	mov_s      r1,r21
4000325a:	30 45                   	mov_s      r21,r1
4000325c:	42 0a 20 03             	bl.d       4000949c <__fixdfsi>

40003260:	0a 24 00 20             	mov        r20,r0
40003264:	7a 08 20 03             	bl.d       400092dc <__floatsidf>

40003268:	08 46                   	mov_s      r14,r0
4000326a:	30 e6                   	add_s      r14,r14,48
4000326c:	00 42                   	mov_s      r2,r0
4000326e:	20 43                   	mov_s      r3,r1
40003270:	82 40                   	mov_s      r0,r20
40003272:	a2 41                   	mov_s      r1,r21
40003274:	9a 09 e0 02             	bl.d       40008c0c <__subdf3>

40003278:	cf 7e                   	exth_s     r14,r14
4000327a:	01 19 92 23             	stb.ab     r14,[r17,1]
4000327e:	30 45                   	mov_s      r21,r1
40003280:	10 44                   	mov_s      r20,r0
40003282:	42 42                   	mov_s      r2,r18
40003284:	9e 0f e0 02             	bl.d       40009220 <__ltdf2>

40003288:	62 43                   	mov_s      r3,r19
4000328a:	82 42                   	mov_s      r2,r20
4000328c:	14 70                   	cmp_s      r0,0
4000328e:	a2 43                   	mov_s      r3,r21
40003290:	c3 41 f0 3f 00 00       	mov_s      r1,0x3ff00000
40003296:	88 07 ea ff             	bge.d      4000321c <_dtoa_r+0x8fc>

4000329a:	0c 70                   	mov_s      r0,0
4000329c:	05 c7                   	ld_s       r15,[sp,20]
4000329e:	48 14 18 30             	ld         r24,[sp,72]
400032a2:	69 04 ef ff             	b.d        40002f08 <_dtoa_r+0x5e8>

400032a6:	14 1c 40 34             	st         r17,[sp,20]
400032aa:	e0 78                   	nop_s      
400032ac:	20 1c 01 30             	st         0,[sp,32]
400032b0:	03 c2                   	ld_s       r2,[sp,12]
400032b2:	54 70                   	cmp_s      r2,0
400032b4:	10 05 2c 00             	ble.d      400037c4 <_dtoa_r+0xea4>

400032b8:	2e 71                   	mov_s      r17,1
400032ba:	8e e2                   	cmp_s      r2,14
400032bc:	40 45                   	mov_s      r5,r2
400032be:	ca 21 2d 20             	mov.hi     r17,0
400032c2:	4b c2                   	st_s       r2,[sp,44]
400032c4:	04 21 d1 20             	and        r17,r17,r3
400032c8:	55 05 ef ff             	b.d        4000301c <_dtoa_r+0x6fc>

400032cc:	46 c2                   	st_s       r2,[sp,24]
400032ce:	e0 78                   	nop_s      
400032d0:	e1 07 ef ff             	b.d        400032b0 <_dtoa_r+0x990>

400032d4:	20 1c 41 30             	st         1,[sp,32]
400032d8:	40 44                   	mov_s      r4,r2
400032da:	ff 13 8e 82             	ldb.a      r14,[r3,-1]
400032de:	95 02 ef ff             	b.d        40002d70 <_dtoa_r+0x450>

400032e2:	49 6a                   	sub_s      r2,r2,1
400032e4:	fa 0f e0 02             	bl.d       400092dc <__floatsidf>

400032e8:	22 40                   	mov_s      r0,r17
400032ea:	00 42                   	mov_s      r2,r0
400032ec:	20 43                   	mov_s      r3,r1
400032ee:	c1 40                   	mov_s      r0,r14
400032f0:	5a 09 e0 02             	bl.d       40008c48 <__muldf3>

400032f4:	e1 41                   	mov_s      r1,r15
400032f6:	c3 43 1c 40 00 00       	mov_s      r3,0x401c0000
400032fc:	de 08 e0 02             	bl.d       40008bd8 <__adddf3>

40003300:	4c 70                   	mov_s      r2,0
40003302:	30 43                   	mov_s      r19,r1
40003304:	0a 22 00 20             	mov        r18,r0
40003308:	02 23 93 2f 40 03 00 00 	sub        r19,r19,0x03400000
40003310:	c1 40                   	mov_s      r0,r14
40003312:	e1 41                   	mov_s      r1,r15
40003314:	c3 43 14 40 00 00       	mov_s      r3,0x40140000
4000331a:	f6 08 e0 02             	bl.d       40008c0c <__subdf3>

4000331e:	4c 70                   	mov_s      r2,0
40003320:	42 42                   	mov_s      r2,r18
40003322:	08 46                   	mov_s      r14,r0
40003324:	28 47                   	mov_s      r15,r1
40003326:	7e 0e e0 02             	bl.d       400091a0 <__gtdf2>

4000332a:	62 43                   	mov_s      r3,r19
4000332c:	14 70                   	cmp_s      r0,0
4000332e:	84 02 29 00             	bgt.d      400035b0 <_dtoa_r+0xc90>

40003332:	c1 40                   	mov_s      r0,r14
40003334:	e1 41                   	mov_s      r1,r15
40003336:	42 42                   	mov_s      r2,r18
40003338:	ea 0e e0 02             	bl.d       40009220 <__ltdf2>

4000333c:	52 23 c3 27             	bxor       r3,r19,31
40003340:	14 70                   	cmp_s      r0,0
40003342:	0c 01 0a 00             	bge        4000344c <_dtoa_r+0xb2c>

40003346:	4e 70                   	mov_s      r18,0
40003348:	2e 70                   	mov_s      r17,0
4000334a:	03 c2                   	ld_s       r2,[sp,12]
4000334c:	05 c7                   	ld_s       r15,[sp,20]
4000334e:	2f 20 8a 30             	not        r24,r2
40003352:	9d 03 ef ff             	b.d        40002eec <_dtoa_r+0x5cc>

40003356:	8e 70                   	mov_s      r20,0
40003358:	0b 24 00 81             	tst        r4,r4
4000335c:	3c 03 02 00             	bnz        40003698 <_dtoa_r+0xd78>

40003360:	05 c7                   	ld_s       r15,[sp,20]
40003362:	18 14 13 30             	ld         r19,[sp,24]
40003366:	15 00 20 00             	b.d        40003378 <_dtoa_r+0xa58>

4000336a:	f1 44                   	mov_s      r20,r15
4000336c:	a1 40                   	mov_s      r0,r13
4000336e:	0a da                   	mov_s      r2,10
40003370:	ea 0b a0 00             	bl.d       40004758 <__multadd>

40003374:	6c 70                   	mov_s      r3,0
40003376:	10 40                   	mov_s      r16,r0
40003378:	42 41                   	mov_s      r1,r18
4000337a:	4e 0b af ff             	bl.d       400026c4 <quorem>

4000337e:	02 40                   	mov_s      r0,r16
40003380:	30 e0                   	add_s      r0,r0,48
40003382:	01 1f 12 10             	stb.ab     r0,[r15,1]
40003386:	02 27 02 15             	sub        r2,r15,r20
4000338a:	e5 0a e2 84             	brlt.d     r2,r19,4000336c <_dtoa_r+0xa4c>

4000338e:	02 41                   	mov_s      r1,r16
40003390:	18 14 04 30             	ld         r4,[sp,24]
40003394:	05 c2                   	ld_s       r2,[sp,20]
40003396:	48 24 56 00             	max        r22,r4,1
4000339a:	08 46                   	mov_s      r14,r0
4000339c:	8e 70                   	mov_s      r20,0
4000339e:	00 26 96 20             	add        r22,r22,r2
400033a2:	02 41                   	mov_s      r1,r16
400033a4:	4c 71                   	mov_s      r2,1
400033a6:	ee 09 e0 00             	bl.d       40004d90 <__lshift>

400033aa:	a1 40                   	mov_s      r0,r13
400033ac:	42 41                   	mov_s      r1,r18
400033ae:	fe 0a e0 00             	bl.d       40004ea8 <__mcmp>

400033b2:	10 40                   	mov_s      r16,r0
400033b4:	14 70                   	cmp_s      r0,0
400033b6:	b8 05 0c 00             	ble        4000396c <_dtoa_r+0x104c>

400033ba:	ff 16 83 a0             	ldb        r3,[r22,-1]
400033be:	14 14 04 30             	ld         r4,[sp,20]
400033c2:	42 26 42 20             	sub        r2,r22,1
400033c6:	02 22 05 01             	sub        r5,r2,r4
400033ca:	40 44                   	mov_s      r4,r2
400033cc:	a4 71                   	add_s      r5,r5,1
400033ce:	0a 24 40 71             	mov        lp_count,r5
400033d2:	e0 78                   	nop_s      
400033d4:	a8 20 80 02             	lp         400033e8 <_dtoa_r+0xac8>

400033d8:	6b 26 80 70 00 40 f8 33 	sr         0x400033f8,[0x2]
400033e0:	b9 e3                   	cmp_s      r3,57
400033e2:	08 05 22 00             	bnz.d      400038e8 <_dtoa_r+0xfc8>

400033e6:	64 71                   	add_s      r3,r3,1
400033e8:	05 c7                   	ld_s       r15,[sp,20]
400033ea:	31 da                   	mov_s      r2,49
400033ec:	07 71                   	add_s      r24,r24,1
400033ee:	40 af                   	stb_s      r2,[r15,0]
400033f0:	fd 02 ef ff             	b.d        40002eec <_dtoa_r+0x5cc>

400033f4:	14 1c 80 35             	st         r22,[sp,20]
400033f8:	50 46                   	mov_s      r22,r2
400033fa:	ff 14 83 82             	ldb.a      r3,[r4,-1]
400033fe:	e5 07 ef ff             	b.d        400033e0 <_dtoa_r+0xac0>

40003402:	49 6a                   	sub_s      r2,r2,1
40003404:	00 24 94 20             	add        r20,r20,r2
40003408:	00 23 93 20             	add        r19,r19,r2
4000340c:	61 02 ef ff             	b.d        40002e6c <_dtoa_r+0x54c>

40003410:	00 26 96 20             	add        r22,r22,r2
40003414:	0e c2                   	ld_s       r2,[sp,56]
40003416:	0f c3                   	ld_s       r3,[sp,60]
40003418:	4c c2                   	st_s       r2,[sp,48]
4000341a:	4d c3                   	st_s       r3,[sp,52]
4000341c:	8f 04 ef ff             	b.d        400030aa <_dtoa_r+0x78a>

40003420:	2e 72                   	mov_s      r17,2
40003422:	e0 78                   	nop_s      
40003424:	0b 24 00 a5             	tst        r20,r20
40003428:	ca 20 42 03             	mov.nz     r0,r13
4000342c:	1c 0b a2 00             	blnz.d     40004748 <_Bfree>

40003430:	ca 21 02 05             	mov.nz     r1,r20
40003434:	cf 02 ef ff             	b.d        40002f02 <_dtoa_r+0x5e2>

40003438:	a1 40                   	mov_s      r0,r13
4000343a:	e0 78                   	nop_s      
4000343c:	99 05 af ff             	b.d        400029d4 <_dtoa_r+0xb4>

40003440:	e1 40                   	mov_s      r0,r15
40003442:	e0 78                   	nop_s      
40003444:	30 14 14 30             	ld         r20,[sp,48]
40003448:	44 14 15 30             	ld         r21,[sp,68]
4000344c:	0e c6                   	ld_s       r14,[sp,56]
4000344e:	c7 07 af ff             	b.d        40002c12 <_dtoa_r+0x2f2>

40003452:	0f c7                   	ld_s       r15,[sp,60]
40003454:	4e 20 12 b0             	rsub.f     r18,r24,0
40003458:	c8 03 21 00             	bz.d       40003820 <_dtoa_r+0xf00>

4000345c:	0e c6                   	ld_s       r14,[sp,56]
4000345e:	44 22 c2 23             	and        r2,r18,15
40003462:	0e c0                   	ld_s       r0,[sp,56]
40003464:	16 26 82 70 00 40 50 d5 	add3       r2,0x4000d550,r2
4000346c:	0f c1                   	ld_s       r1,[sp,60]
4000346e:	61 82                   	ld_s       r3,[r2,4]
40003470:	2f 22 81 24             	asr        r18,r18
40003474:	2f 22 81 24             	asr        r18,r18
40003478:	2f 22 81 24             	asr        r18,r18
4000347c:	2f 22 81 24             	asr        r18,r18
40003480:	ca 0f a0 02             	bl.d       40008c48 <__muldf3>

40003484:	40 82                   	ld_s       r2,[r2,0]
40003486:	0b 22 80 a4             	tst        r18,r18
4000348a:	08 46                   	mov_s      r14,r0
4000348c:	c4 05 21 00             	bz.d       40003a50 <_dtoa_r+0x1130>

40003490:	28 47                   	mov_s      r15,r1
40003492:	0a 23 80 2f 00 40 28 d5 	mov        r19,0x4000d528
4000349a:	2e 72                   	mov_s      r17,2
4000349c:	c1 40                   	mov_s      r0,r14
4000349e:	1b 0a 3e 20             	bbit0.d    r18,0,400034b6 <_dtoa_r+0xb96>

400034a2:	e1 41                   	mov_s      r1,r15
400034a4:	00 13 02 20             	ld         r2,[r19,0]
400034a8:	04 13 03 20             	ld         r3,[r19,4]
400034ac:	9e 0f a0 02             	bl.d       40008c48 <__muldf3>

400034b0:	26 71                   	add_s      r17,r17,1
400034b2:	08 46                   	mov_s      r14,r0
400034b4:	28 47                   	mov_s      r15,r1
400034b6:	2f 22 81 24             	asr        r18,r18
400034ba:	e5 0a 31 a0             	brne.d     r18,0,4000349c <_dtoa_r+0xb7c>

400034be:	40 23 13 22             	add        r19,r19,8
400034c2:	2d 04 ef ff             	b.d        400030ec <_dtoa_r+0x7cc>

400034c6:	28 14 04 30             	ld         r4,[sp,40]
400034ca:	e0 78                   	nop_s      
400034cc:	16 26 02 71 00 40 50 d5 	add3       r2,0x4000d550,r4
400034d4:	00 82                   	ld_s       r0,[r2,0]
400034d6:	21 82                   	ld_s       r1,[r2,4]
400034d8:	44 1c 00 31             	st         r4,[sp,68]
400034dc:	00 1c 80 31             	st         r6,[sp]
400034e0:	42 42                   	mov_s      r2,r18
400034e2:	6a 0f a0 02             	bl.d       40008c48 <__muldf3>

400034e6:	62 43                   	mov_s      r3,r19
400034e8:	54 c1                   	st_s       r1,[sp,80]
400034ea:	e1 41                   	mov_s      r1,r15
400034ec:	53 c0                   	st_s       r0,[sp,76]
400034ee:	b2 0f e0 02             	bl.d       4000949c <__fixdfsi>

400034f2:	c1 40                   	mov_s      r0,r14
400034f4:	ea 0d e0 02             	bl.d       400092dc <__floatsidf>

400034f8:	10 41                   	mov_s      r17,r0
400034fa:	00 42                   	mov_s      r2,r0
400034fc:	20 43                   	mov_s      r3,r1
400034fe:	c1 40                   	mov_s      r0,r14
40003500:	0e 0f a0 02             	bl.d       40008c0c <__subdf3>

40003504:	e1 41                   	mov_s      r1,r15
40003506:	05 c2                   	ld_s       r2,[sp,20]
40003508:	40 21 11 2c             	add        r17,r17,48
4000350c:	00 1a 42 04             	stb        r17,[r2]
40003510:	00 14 06 30             	ld         r6,[sp,0]
40003514:	44 71                   	add_s      r2,r2,1
40003516:	4c c2                   	st_s       r2,[sp,48]
40003518:	00 44                   	mov_s      r4,r0
4000351a:	4f 0e 70 00             	breq.d     r6,1,40003566 <_dtoa_r+0xc46>

4000351e:	20 45                   	mov_s      r5,r1
40003520:	05 c2                   	ld_s       r2,[sp,20]
40003522:	0c c7                   	ld_s       r15,[sp,48]
40003524:	00 22 8e 01             	add        r14,r2,r6
40003528:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
4000352e:	1e 0f a0 02             	bl.d       40008c48 <__muldf3>

40003532:	4c 70                   	mov_s      r2,0
40003534:	30 43                   	mov_s      r19,r1
40003536:	6a 0f e0 02             	bl.d       4000949c <__fixdfsi>

4000353a:	10 42                   	mov_s      r18,r0
4000353c:	a2 0d e0 02             	bl.d       400092dc <__floatsidf>

40003540:	10 41                   	mov_s      r17,r0
40003542:	40 21 11 2c             	add        r17,r17,48
40003546:	00 42                   	mov_s      r2,r0
40003548:	20 43                   	mov_s      r3,r1
4000354a:	42 40                   	mov_s      r0,r18
4000354c:	c2 0e a0 02             	bl.d       40008c0c <__subdf3>

40003550:	62 41                   	mov_s      r1,r19
40003552:	01 1f 52 14             	stb.ab     r17,[r15,1]
40003556:	d5 0f a1 93             	brne.d     r15,r14,40003528 <_dtoa_r+0xc08>

4000355a:	0c c3                   	ld_s       r3,[sp,48]
4000355c:	11 c2                   	ld_s       r2,[sp,68]
4000355e:	00 44                   	mov_s      r4,r0
40003560:	5b 63                   	add_s      r3,r3,r2
40003562:	4c c3                   	st_s       r3,[sp,48]
40003564:	20 45                   	mov_s      r5,r1
40003566:	13 c0                   	ld_s       r0,[sp,76]
40003568:	14 c1                   	ld_s       r1,[sp,80]
4000356a:	4c 70                   	mov_s      r2,0
4000356c:	c3 43 e0 3f 00 00       	mov_s      r3,0x3fe00000
40003572:	08 1c 00 31             	st         r4,[sp,8]
40003576:	66 0e a0 02             	bl.d       40008bd8 <__adddf3>

4000357a:	04 1c 40 31             	st         r5,[sp,4]
4000357e:	08 14 04 30             	ld         r4,[sp,8]
40003582:	04 14 05 30             	ld         r5,[sp,4]
40003586:	80 42                   	mov_s      r2,r4
40003588:	9a 0c e0 02             	bl.d       40009220 <__ltdf2>

4000358c:	a0 43                   	mov_s      r3,r5
4000358e:	08 14 04 30             	ld         r4,[sp,8]
40003592:	14 70                   	cmp_s      r0,0
40003594:	f8 02 2a 00             	bge.d      4000388c <_dtoa_r+0xf6c>

40003598:	04 14 05 30             	ld         r5,[sp,4]
4000359c:	30 14 04 30             	ld         r4,[sp,48]
400035a0:	05 c7                   	ld_s       r15,[sp,20]
400035a2:	ff 14 8e 80             	ldb        r14,[r4,-1]
400035a6:	ad 07 af ff             	b.d        40002d50 <_dtoa_r+0x430>

400035aa:	14 1c 00 31             	st         r4,[sp,20]
400035ae:	e0 78                   	nop_s      
400035b0:	4e 70                   	mov_s      r18,0
400035b2:	2d 01 ef ff             	b.d        40002edc <_dtoa_r+0x5bc>

400035b6:	2e 70                   	mov_s      r17,0
400035b8:	f2 08 e0 00             	bl.d       40004ea8 <__mcmp>

400035bc:	42 41                   	mov_s      r1,r18
400035be:	14 70                   	cmp_s      r0,0
400035c0:	dc 00 ea ff             	bge.d      40002e9c <_dtoa_r+0x57c>

400035c4:	b6 72                   	cmp_s      r21,2
400035c6:	02 41                   	mov_s      r1,r16
400035c8:	a1 40                   	mov_s      r0,r13
400035ca:	0a da                   	mov_s      r2,10
400035cc:	8e 09 a0 00             	bl.d       40004758 <__multadd>

400035d0:	6c 70                   	mov_s      r3,0
400035d2:	20 14 04 30             	ld         r4,[sp,32]
400035d6:	10 40                   	mov_s      r16,r0
400035d8:	95 0c 31 00             	brne.d     r4,0,4000366c <_dtoa_r+0xd4c>

400035dc:	07 77                   	add_s      r24,r24,-1
400035de:	2c 14 04 30             	ld         r4,[sp,44]
400035e2:	94 70                   	cmp_s      r4,0
400035e4:	2c 14 04 30             	ld         r4,[sp,44]
400035e8:	78 05 e9 ff             	bgt.d      40003360 <_dtoa_r+0xa40>

400035ec:	18 1c 00 31             	st         r4,[sp,24]
400035f0:	b6 72                   	cmp_s      r21,2
400035f2:	c6 00 e9 ff             	bgt.d      40002eb6 <_dtoa_r+0x596>

400035f6:	18 14 04 30             	ld         r4,[sp,24]
400035fa:	6b 05 ef ff             	b.d        40003362 <_dtoa_r+0xa42>

400035fe:	05 c7                   	ld_s       r15,[sp,20]
40003600:	10 12 02 20             	ld         r2,[r18,16]
40003604:	40 22 02 01             	add        r2,r2,4
40003608:	26 0b a0 00             	bl.d       4000492c <__hi0bits>

4000360c:	f0 22 80 20             	ld.as      r0,[r18,r2]
40003610:	33 00 ef ff             	b.d        40002e42 <_dtoa_r+0x522>

40003614:	4e 20 00 08             	rsub       r0,r0,32
40003618:	2e 05 e2 ff             	bnz.d      40003346 <_dtoa_r+0xa26>

4000361c:	42 40                   	mov_s      r0,r18
4000361e:	4c 70                   	mov_s      r2,0
40003620:	c3 43 14 40 00 00       	mov_s      r3,0x40140000
40003626:	26 0e a0 02             	bl.d       40008c48 <__muldf3>

4000362a:	62 41                   	mov_s      r1,r19
4000362c:	c1 42                   	mov_s      r2,r14
4000362e:	e1 43                   	mov_s      r3,r15
40003630:	b2 0b e0 02             	bl.d       400091e0 <__gedf2>

40003634:	4e 70                   	mov_s      r18,0
40003636:	14 70                   	cmp_s      r0,0
40003638:	12 05 ea ff             	bge.d      4000334a <_dtoa_r+0xa2a>

4000363c:	2e 70                   	mov_s      r17,0
4000363e:	a3 00 ef ff             	b.d        40002ede <_dtoa_r+0x5be>

40003642:	05 c7                   	ld_s       r15,[sp,20]
40003644:	4b 7a                   	tst_s      r2,r2
40003646:	ea 07 a2 ff             	bnz.d      40002e2e <_dtoa_r+0x50e>

4000364a:	53 27 c3 14             	bmsk       r3,r15,19
4000364e:	6b 7b                   	tst_s      r3,r3
40003650:	de 07 82 ff             	bnz        40002e2e <_dtoa_r+0x50e>

40003654:	0b 27 80 9f f0 7f 00 00 	tst        r15,0x7ff00000
4000365c:	d2 07 81 ff             	bz         40002e2e <_dtoa_r+0x50e>

40003660:	86 71                   	add_s      r20,r20,1
40003662:	c6 71                   	add_s      r22,r22,1
40003664:	cf 07 af ff             	b.d        40002e32 <_dtoa_r+0x512>

40003668:	1c 1c 41 30             	st         1,[sp,28]
4000366c:	22 41                   	mov_s      r1,r17
4000366e:	a1 40                   	mov_s      r0,r13
40003670:	0a da                   	mov_s      r2,10
40003672:	ea 08 a0 00             	bl.d       40004758 <__multadd>

40003676:	6c 70                   	mov_s      r3,0
40003678:	2c 14 04 30             	ld         r4,[sp,44]
4000367c:	10 41                   	mov_s      r17,r0
4000367e:	94 70                   	cmp_s      r4,0
40003680:	2c 14 04 30             	ld         r4,[sp,44]
40003684:	14 00 29 00             	bgt.d      40003698 <_dtoa_r+0xd78>

40003688:	18 1c 00 31             	st         r4,[sp,24]
4000368c:	4c 25 80 a0             	cmp        r21,2
40003690:	26 00 e9 ff             	bgt.d      40002eb6 <_dtoa_r+0x596>

40003694:	18 14 04 30             	ld         r4,[sp,24]
40003698:	11 0b 72 20             	brlt.d     r19,1,400036a8 <_dtoa_r+0xd88>

4000369c:	22 41                   	mov_s      r1,r17
4000369e:	a1 40                   	mov_s      r0,r13
400036a0:	f2 0e a0 00             	bl.d       40004d90 <__lshift>

400036a4:	62 42                   	mov_s      r2,r19
400036a6:	10 41                   	mov_s      r17,r0
400036a8:	1c 14 04 30             	ld         r4,[sp,28]
400036ac:	0b 24 00 81             	tst        r4,r4
400036b0:	dc 02 22 00             	bnz.d      4000398c <_dtoa_r+0x106c>

400036b4:	ca 23 41 24             	mov.z      r19,r17
400036b8:	05 c2                   	ld_s       r2,[sp,20]
400036ba:	18 14 04 30             	ld         r4,[sp,24]
400036be:	05 c7                   	ld_s       r15,[sp,20]
400036c0:	00 24 84 00             	add        r4,r4,r2
400036c4:	c0 be                   	bmsk_s     r14,r14,0
400036c6:	43 c2                   	st_s       r2,[sp,12]
400036c8:	1c 1c 00 31             	st         r4,[sp,28]
400036cc:	46 c6                   	st_s       r14,[sp,24]
400036ce:	20 1c 00 36             	st         r24,[sp,32]
400036d2:	24 1c c0 35             	st         r23,[sp,36]
400036d6:	e5 71                   	add_s      r15,r15,1
400036d8:	42 41                   	mov_s      r1,r18
400036da:	ee 0f 6f ff             	bl.d       400026c4 <quorem>

400036de:	02 40                   	mov_s      r0,r16
400036e0:	22 41                   	mov_s      r1,r17
400036e2:	10 46                   	mov_s      r22,r0
400036e4:	c6 0f a0 00             	bl.d       40004ea8 <__mcmp>

400036e8:	02 40                   	mov_s      r0,r16
400036ea:	42 41                   	mov_s      r1,r18
400036ec:	10 44                   	mov_s      r20,r0
400036ee:	62 42                   	mov_s      r2,r19
400036f0:	02 08 e0 00             	bl.d       40004ef0 <__mdiff>

400036f4:	a1 40                   	mov_s      r0,r13
400036f6:	63 80                   	ld_s       r3,[r0,12]
400036f8:	10 47                   	mov_s      r23,r0
400036fa:	bd 0b 31 00             	brne.d     r3,0,400037b4 <_dtoa_r+0xe94>

400036fe:	40 26 0e 2c             	add        r14,r22,48
40003702:	02 40                   	mov_s      r0,r16
40003704:	a6 0f a0 00             	bl.d       40004ea8 <__mcmp>

40003708:	e2 41                   	mov_s      r1,r23
4000370a:	18 40                   	mov_s      r24,r0
4000370c:	a1 40                   	mov_s      r0,r13
4000370e:	3e 08 a0 00             	bl.d       40004748 <_Bfree>

40003712:	e2 41                   	mov_s      r1,r23
40003714:	05 20 7e b5             	or.f       0,r24,r21
40003718:	14 00 22 00             	bnz.d      4000372c <_dtoa_r+0xe0c>

4000371c:	96 70                   	cmp_s      r20,0
4000371e:	18 14 04 30             	ld         r4,[sp,24]
40003722:	0b 24 00 81             	tst        r4,r4
40003726:	10 03 21 00             	bz.d       40003a34 <_dtoa_r+0x1114>

4000372a:	96 70                   	cmp_s      r20,0
4000372c:	ec 01 2b 00             	blt.d      40003918 <_dtoa_r+0xff8>

40003730:	05 24 7e a5             	or.f       0,r20,r21
40003734:	14 00 22 00             	bnz.d      40003748 <_dtoa_r+0xe28>

40003738:	17 70                   	cmp_s      r24,0
4000373a:	18 14 04 30             	ld         r4,[sp,24]
4000373e:	0b 24 00 81             	tst        r4,r4
40003742:	d8 01 21 00             	bz.d       40003918 <_dtoa_r+0xff8>

40003746:	17 70                   	cmp_s      r24,0
40003748:	b0 02 29 00             	bgt.d      400039f8 <_dtoa_r+0x10d8>

4000374c:	0c 14 04 30             	ld         r4,[sp,12]
40003750:	01 1c 92 03             	stb.ab     r14,[r4,1]
40003754:	0c 1c 00 31             	st         r4,[sp,12]
40003758:	1c 14 04 30             	ld         r4,[sp,28]
4000375c:	90 77                   	cmp_s      r15,r4
4000375e:	c8 02 21 00             	bz.d       40003a24 <_dtoa_r+0x1104>

40003762:	f1 46                   	mov_s      r22,r15
40003764:	02 41                   	mov_s      r1,r16
40003766:	a1 40                   	mov_s      r0,r13
40003768:	0a da                   	mov_s      r2,10
4000376a:	f2 0f 60 00             	bl.d       40004758 <__multadd>

4000376e:	6c 70                   	mov_s      r3,0
40003770:	2d 09 e0 24             	breq.d     r17,r19,4000379c <_dtoa_r+0xe7c>

40003774:	10 40                   	mov_s      r16,r0
40003776:	22 41                   	mov_s      r1,r17
40003778:	0a da                   	mov_s      r2,10
4000377a:	6c 70                   	mov_s      r3,0
4000377c:	de 0f 60 00             	bl.d       40004758 <__multadd>

40003780:	a1 40                   	mov_s      r0,r13
40003782:	62 41                   	mov_s      r1,r19
40003784:	10 41                   	mov_s      r17,r0
40003786:	0a da                   	mov_s      r2,10
40003788:	a1 40                   	mov_s      r0,r13
4000378a:	6c 70                   	mov_s      r3,0
4000378c:	ce 0f 60 00             	bl.d       40004758 <__multadd>

40003790:	40 27 4f 10             	add        r15,r15,1
40003794:	45 07 ef ff             	b.d        400036d8 <_dtoa_r+0xdb8>

40003798:	10 43                   	mov_s      r19,r0
4000379a:	e0 78                   	nop_s      
4000379c:	22 41                   	mov_s      r1,r17
4000379e:	a1 40                   	mov_s      r0,r13
400037a0:	0a da                   	mov_s      r2,10
400037a2:	6c 70                   	mov_s      r3,0
400037a4:	b6 0f 60 00             	bl.d       40004758 <__multadd>

400037a8:	e5 71                   	add_s      r15,r15,1
400037aa:	10 41                   	mov_s      r17,r0
400037ac:	2d 07 ef ff             	b.d        400036d8 <_dtoa_r+0xdb8>

400037b0:	10 43                   	mov_s      r19,r0
400037b2:	e0 78                   	nop_s      
400037b4:	59 07 ef ff             	b.d        4000370c <_dtoa_r+0xdec>

400037b8:	0f 71                   	mov_s      r24,1
400037ba:	e0 78                   	nop_s      
400037bc:	35 00 ef ff             	b.d        40002ff0 <_dtoa_r+0x6d0>

400037c0:	20 1c 41 30             	st         1,[sp,32]
400037c4:	2c 1c 41 30             	st         1,[sp,44]
400037c8:	18 1c 41 30             	st         1,[sp,24]
400037cc:	0c 1c 41 30             	st         1,[sp,12]
400037d0:	44 1d 01 10             	st         0,[r13,68]
400037d4:	04 21 d1 20             	and        r17,r17,r3
400037d8:	6b 00 ef ff             	b.d        40003042 <_dtoa_r+0x722>

400037dc:	2c 70                   	mov_s      r1,0
400037de:	e0 78                   	nop_s      
400037e0:	2e 71                   	mov_s      r17,1
400037e2:	4c 24 80 83             	cmp        r4,14
400037e6:	ed 07 ef ff             	b.d        400037d0 <_dtoa_r+0xeb0>

400037ea:	ca 21 2d 20             	mov.hi     r17,0
400037ee:	e0 78                   	nop_s      
400037f0:	02 41                   	mov_s      r1,r16
400037f2:	d2 0c a0 00             	bl.d       40004cc0 <__pow5mult>

400037f6:	a1 40                   	mov_s      r0,r13
400037f8:	11 06 af ff             	b.d        40002e08 <_dtoa_r+0x4e8>

400037fc:	10 40                   	mov_s      r16,r0
400037fe:	e0 78                   	nop_s      
40003800:	05 c7                   	ld_s       r15,[sp,20]
40003802:	09 07 af ff             	b.d        40002f08 <_dtoa_r+0x5e8>

40003806:	14 1c 40 35             	st         r21,[sp,20]
4000380a:	e0 78                   	nop_s      
4000380c:	61 6e                   	add_s      r3,r14,1
4000380e:	14 1c 00 31             	st         r4,[sp,20]
40003812:	6f 7b                   	exth_s     r3,r3
40003814:	48 14 18 30             	ld         r24,[sp,72]
40003818:	f1 06 af ff             	b.d        40002f08 <_dtoa_r+0x5e8>

4000381c:	60 aa                   	stb_s      r3,[r2,0]
4000381e:	e0 78                   	nop_s      
40003820:	0f c7                   	ld_s       r15,[sp,60]
40003822:	c9 00 ef ff             	b.d        400030e8 <_dtoa_r+0x7c8>

40003826:	2e 72                   	mov_s      r17,2
40003828:	0b 24 00 81             	tst        r4,r4
4000382c:	b8 02 e1 ff             	bz.d       400032e4 <_dtoa_r+0x9c4>

40003830:	2c 14 04 30             	ld         r4,[sp,44]
40003834:	94 70                   	cmp_s      r4,0
40003836:	18 04 ec ff             	ble.d      4000344c <_dtoa_r+0xb2c>

4000383a:	4c 70                   	mov_s      r2,0
4000383c:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
40003842:	c1 40                   	mov_s      r0,r14
40003844:	06 0c a0 02             	bl.d       40008c48 <__muldf3>

40003848:	e1 41                   	mov_s      r1,r15
4000384a:	08 46                   	mov_s      r14,r0
4000384c:	28 47                   	mov_s      r15,r1
4000384e:	92 0a e0 02             	bl.d       400092dc <__floatsidf>

40003852:	40 21 40 20             	add        r0,r17,1
40003856:	00 42                   	mov_s      r2,r0
40003858:	20 43                   	mov_s      r3,r1
4000385a:	c1 40                   	mov_s      r0,r14
4000385c:	ee 0b a0 02             	bl.d       40008c48 <__muldf3>

40003860:	e1 41                   	mov_s      r1,r15
40003862:	42 20 44 30             	sub        r4,r24,1
40003866:	4c 70                   	mov_s      r2,0
40003868:	c3 43 1c 40 00 00       	mov_s      r3,0x401c0000
4000386e:	6e 0b a0 02             	bl.d       40008bd8 <__adddf3>

40003872:	48 1c 00 31             	st         r4,[sp,72]
40003876:	2c 14 06 30             	ld         r6,[sp,44]
4000387a:	30 43                   	mov_s      r19,r1
4000387c:	02 23 93 2f 40 03 00 00 	sub        r19,r19,0x03400000
40003884:	c1 00 ef ff             	b.d        40003144 <_dtoa_r+0x824>

40003888:	10 42                   	mov_s      r18,r0
4000388a:	e0 78                   	nop_s      
4000388c:	13 c2                   	ld_s       r2,[sp,76]
4000388e:	14 c3                   	ld_s       r3,[sp,80]
40003890:	08 1c 00 31             	st         r4,[sp,8]
40003894:	04 1c 40 31             	st         r5,[sp,4]
40003898:	c3 41 e0 3f 00 00       	mov_s      r1,0x3fe00000
4000389e:	72 0b a0 02             	bl.d       40008c0c <__subdf3>

400038a2:	0c 70                   	mov_s      r0,0
400038a4:	08 14 04 30             	ld         r4,[sp,8]
400038a8:	04 14 05 30             	ld         r5,[sp,4]
400038ac:	80 42                   	mov_s      r2,r4
400038ae:	f6 08 e0 02             	bl.d       400091a0 <__gtdf2>

400038b2:	a0 43                   	mov_s      r3,r5
400038b4:	14 70                   	cmp_s      r0,0
400038b6:	9a 03 ec ff             	ble.d      4000344e <_dtoa_r+0xb2e>

400038ba:	0e c6                   	ld_s       r14,[sp,56]
400038bc:	30 14 11 30             	ld         r17,[sp,48]
400038c0:	22 43                   	mov_s      r3,r17
400038c2:	ff 11 82 a2             	ldb.a      r2,[r17,-1]
400038c6:	fd 0a 30 8c             	breq.d     r2,48,400038c0 <_dtoa_r+0xfa0>

400038ca:	05 c7                   	ld_s       r15,[sp,20]
400038cc:	48 14 18 30             	ld         r24,[sp,72]
400038d0:	39 06 af ff             	b.d        40002f08 <_dtoa_r+0x5e8>

400038d4:	45 c3                   	st_s       r3,[sp,20]
400038d6:	e0 78                   	nop_s      
400038d8:	ea 0b a0 00             	bl.d       40004cc0 <__pow5mult>

400038dc:	0a 20 40 03             	mov        r0,r13
400038e0:	29 05 af ff             	b.d        40002e08 <_dtoa_r+0x4e8>

400038e4:	10 40                   	mov_s      r16,r0
400038e6:	e0 78                   	nop_s      
400038e8:	05 c7                   	ld_s       r15,[sp,20]
400038ea:	60 aa                   	stb_s      r3,[r2,0]
400038ec:	01 06 af ff             	b.d        40002eec <_dtoa_r+0x5cc>

400038f0:	14 1c 80 35             	st         r22,[sp,20]
400038f4:	40 14 04 30             	ld         r4,[sp,64]
400038f8:	f1 0c 10 00             	breq       r4,0,400039e8 <_dtoa_r+0x10c8>

400038fc:	80 22 d0 0c             	add        r2,r2,0x433
40003900:	1c 14 12 30             	ld         r18,[sp,28]
40003904:	cf 06 af ff             	b.d        40002fd2 <_dtoa_r+0x6b2>

40003908:	92 43                   	mov_s      r19,r20
4000390a:	e0 78                   	nop_s      
4000390c:	02 24 13 21             	sub        r19,r20,r4
40003910:	c3 06 af ff             	b.d        40002fd2 <_dtoa_r+0x6b2>

40003914:	4c 70                   	mov_s      r2,0
40003916:	e0 78                   	nop_s      
40003918:	03 43                   	mov_s      r3,r24
4000391a:	24 14 17 30             	ld         r23,[sp,36]
4000391e:	2d 0b 72 00             	brlt.d     r3,1,40003948 <_dtoa_r+0x1028>

40003922:	20 14 18 30             	ld         r24,[sp,32]
40003926:	02 41                   	mov_s      r1,r16
40003928:	4c 71                   	mov_s      r2,1
4000392a:	6a 0c a0 00             	bl.d       40004d90 <__lshift>

4000392e:	a1 40                   	mov_s      r0,r13
40003930:	42 41                   	mov_s      r1,r18
40003932:	7a 0d a0 00             	bl.d       40004ea8 <__mcmp>

40003936:	10 40                   	mov_s      r16,r0
40003938:	14 70                   	cmp_s      r0,0
4000393a:	20 01 2c 00             	ble.d      40003a58 <_dtoa_r+0x1138>

4000393e:	0b 78                   	tst_s      r0,r0
40003940:	cb 0e 50 1e             	breq       r14,57,40003a0a <_dtoa_r+0x10ea>

40003944:	40 26 4e 2c             	add        r14,r22,49
40003948:	0c 14 04 30             	ld         r4,[sp,12]
4000394c:	05 c7                   	ld_s       r15,[sp,20]
4000394e:	00 1c 82 03             	stb        r14,[r4]
40003952:	32 44                   	mov_s      r20,r17
40003954:	84 71                   	add_s      r4,r4,1
40003956:	72 41                   	mov_s      r17,r19
40003958:	95 05 af ff             	b.d        40002eec <_dtoa_r+0x5cc>

4000395c:	14 1c 00 31             	st         r4,[sp,20]
40003960:	05 c7                   	ld_s       r15,[sp,20]
40003962:	f1 03 af ff             	b.d        40002d50 <_dtoa_r+0x430>

40003966:	14 1c 40 34             	st         r17,[sp,20]
4000396a:	e0 78                   	nop_s      
4000396c:	0f 08 31 00             	brne.d     r0,0,4000397a <_dtoa_r+0x105a>

40003970:	c2 43                   	mov_s      r3,r22
40003972:	e0 be                   	btst_s     r14,0
40003974:	46 02 c2 ff             	bnz        400033ba <_dtoa_r+0xa9a>

40003978:	c2 43                   	mov_s      r3,r22
4000397a:	ff 16 82 a2             	ldb.a      r2,[r22,-1]
4000397e:	fd 0a 30 8c             	breq.d     r2,48,40003978 <_dtoa_r+0x1058>

40003982:	05 c7                   	ld_s       r15,[sp,20]
40003984:	69 05 af ff             	b.d        40002eec <_dtoa_r+0x5cc>

40003988:	45 c3                   	st_s       r3,[sp,20]
4000398a:	e0 78                   	nop_s      
4000398c:	04 11 01 20             	ld         r1,[r17,4]
40003990:	36 0d 60 00             	bl.d       400046c4 <_Balloc>

40003994:	a1 40                   	mov_s      r0,r13
40003996:	10 11 02 20             	ld         r2,[r17,16]
4000399a:	10 43                   	mov_s      r19,r0
4000399c:	15 26 82 70 00 00 08 00 	add2       r2,8,r2
400039a4:	40 21 01 23             	add        r1,r17,12
400039a8:	3e 09 af fe             	bl.d       40000ae4 <memcpy>

400039ac:	0c e0                   	add_s      r0,r0,12
400039ae:	62 41                   	mov_s      r1,r19
400039b0:	a1 40                   	mov_s      r0,r13
400039b2:	e2 0b a0 00             	bl.d       40004d90 <__lshift>

400039b6:	4c 71                   	mov_s      r2,1
400039b8:	01 05 ef ff             	b.d        400036b8 <_dtoa_r+0xd98>

400039bc:	10 43                   	mov_s      r19,r0
400039be:	e0 78                   	nop_s      
400039c0:	62 41                   	mov_s      r1,r19
400039c2:	c1 42                   	mov_s      r2,r14
400039c4:	5e 0f a0 02             	bl.d       40009120 <__eqdf2>

400039c8:	e1 43                   	mov_s      r3,r15
400039ca:	0b 78                   	tst_s      r0,r0
400039cc:	1a f5                   	bne_s      40003800 <_dtoa_r+0xee0>

400039ce:	51 24 00 a0             	btst       r20,0
400039d2:	32 06 e1 ff             	bz.d       40003802 <_dtoa_r+0xee2>

400039d6:	05 c7                   	ld_s       r15,[sp,20]
400039d8:	ff 15 8e a0             	ldb        r14,[r21,-1]
400039dc:	14 1c 40 35             	st         r21,[sp,20]
400039e0:	71 03 af ff             	b.d        40002d50 <_dtoa_r+0x430>

400039e4:	48 1c 00 36             	st         r24,[sp,72]
400039e8:	15 c2                   	ld_s       r2,[sp,84]
400039ea:	1c 14 12 30             	ld         r18,[sp,28]
400039ee:	4e 22 82 0d             	rsub       r2,r2,54
400039f2:	e3 05 af ff             	b.d        40002fd2 <_dtoa_r+0x6b2>

400039f6:	92 43                   	mov_s      r19,r20
400039f8:	b9 e6                   	cmp_s      r14,57
400039fa:	20 14 18 30             	ld         r24,[sp,32]
400039fe:	24 14 17 30             	ld         r23,[sp,36]
40003a02:	48 07 e2 ff             	bnz.d      40003948 <_dtoa_r+0x1028>

40003a06:	c0 26 62 10             	add.nz     r14,r14,1
40003a0a:	0c 14 16 30             	ld         r22,[sp,12]
40003a0e:	0c 14 04 30             	ld         r4,[sp,12]
40003a12:	32 44                   	mov_s      r20,r17
40003a14:	39 da                   	mov_s      r2,57
40003a16:	c6 71                   	add_s      r22,r22,1
40003a18:	00 1c 82 00             	stb        r2,[r4]
40003a1c:	72 41                   	mov_s      r17,r19
40003a1e:	a3 01 ef ff             	b.d        400033be <_dtoa_r+0xa9e>

40003a22:	39 db                   	mov_s      r3,57
40003a24:	32 44                   	mov_s      r20,r17
40003a26:	20 14 18 30             	ld         r24,[sp,32]
40003a2a:	24 14 17 30             	ld         r23,[sp,36]
40003a2e:	77 01 ef ff             	b.d        400033a2 <_dtoa_r+0xa82>

40003a32:	72 41                   	mov_s      r17,r19
40003a34:	20 14 18 30             	ld         r24,[sp,32]
40003a38:	d3 0e 78 9e             	breq.nt.d  r14,57,40003a0a <_dtoa_r+0x10ea>

40003a3c:	24 14 17 30             	ld         r23,[sp,36]
40003a40:	96 70                   	cmp_s      r20,0
40003a42:	04 07 e9 ff             	bgt.d      40003944 <_dtoa_r+0x1024>

40003a46:	0c 14 04 30             	ld         r4,[sp,12]
40003a4a:	07 07 ef ff             	b.d        4000394e <_dtoa_r+0x102e>

40003a4e:	05 c7                   	ld_s       r15,[sp,20]
40003a50:	99 06 af ff             	b.d        400030e8 <_dtoa_r+0x7c8>

40003a54:	2e 72                   	mov_s      r17,2
40003a56:	e0 78                   	nop_s      
40003a58:	f4 06 e2 ff             	bnz.d      4000394c <_dtoa_r+0x102c>

40003a5c:	0c 14 04 30             	ld         r4,[sp,12]
40003a60:	e0 be                   	btst_s     r14,0
40003a62:	ee 06 e1 ff             	bz.d       4000394e <_dtoa_r+0x102e>

40003a66:	05 c7                   	ld_s       r15,[sp,20]
40003a68:	6c f1                   	b_s        40003940 <_dtoa_r+0x1020>

40003a6a:	e0 78                   	nop_s      
40003a6c:	74 74                   	cmp_s      r3,4
40003a6e:	00 04 a1 ff             	bz.d       40002e6c <_dtoa_r+0x54c>

40003a72:	ce 22 22 0f             	rsub.nz    r2,r2,60
40003a76:	95 01 ef ff             	b.d        40003408 <_dtoa_r+0xae8>

40003a7a:	00 24 94 20             	add        r20,r20,r2
40003a7e:	e0 78                   	nop_s      

40003a80 <__sflush_r>:
40003a80:	f1 c0                   	push_s     blink
40003a82:	f0 1c 48 b3             	st.a       r13,[sp,-16]
40003a86:	46 99                   	ldh_s.x    r2,[r1,12]
40003a88:	41 c6                   	st_s       r14,[sp,4]
40003a8a:	0c 1c 00 34             	st         r16,[sp,12]
40003a8e:	42 c7                   	st_s       r15,[sp,8]
40003a90:	28 46                   	mov_s      r14,r1
40003a92:	2f 23 88 00             	exth       r3,r2
40003a96:	99 0b ff 00             	bbit1.d    r3,3,40003b2c <__sflush_r+0xac>

40003a9a:	10 40                   	mov_s      r16,r0
40003a9c:	61 81                   	ld_s       r3,[r1,4]
40003a9e:	8b ba                   	bset_s     r2,r2,11
40003aa0:	e1 0b 72 00             	brlt.d     r3,1,40003b80 <__sflush_r+0x100>

40003aa4:	46 b1                   	sth_s      r2,[r1,12]
40003aa6:	28 16 04 10             	ld         r4,[r14,40]
40003aaa:	6f 0c 10 00             	breq       r4,0,40003b16 <__sflush_r+0x96>

40003aae:	00 10 0d 20             	ld         r13,[r16,0]
40003ab2:	2f 23 88 00             	exth       r3,r2
40003ab6:	d9 0b 3e 03             	bbit0.d    r3,12,40003b8c <__sflush_r+0x10c>

40003aba:	00 18 01 20             	st         0,[r16]
40003abe:	54 86                   	ld_s       r2,[r14,80]
40003ac0:	17 0b 9e 00             	bbit0      r3,2,40003ad6 <__sflush_r+0x56>

40003ac4:	04 16 05 10             	ld         r5,[r14,4]
40003ac8:	6c 86                   	ld_s       r3,[r14,48]
40003aca:	0f 0b 30 00             	breq.d     r3,0,40003ad6 <__sflush_r+0x56>

40003ace:	02 22 42 01             	sub        r2,r2,r5
40003ad2:	6f 86                   	ld_s       r3,[r14,60]
40003ad4:	62 7a                   	sub_s      r2,r2,r3
40003ad6:	27 86                   	ld_s       r1,[r14,28]
40003ad8:	02 40                   	mov_s      r0,r16
40003ada:	23 20 00 01             	jl.d       [r4]
40003ade:	6c 70                   	mov_s      r3,0
40003ae0:	d1 08 80 0f ff ff ff ff 	breq       r0,-1,40003bb0 <__sflush_r+0x130>

40003ae8:	46 9e                   	ldh_s.x    r2,[r14,12]
40003aea:	64 86                   	ld_s       r3,[r14,16]
40003aec:	ab ba                   	bclr_s     r2,r2,11
40003aee:	04 1e 01 10             	st         0,[r14,4]
40003af2:	46 b6                   	sth_s      r2,[r14,12]
40003af4:	f9 0a 3f 03             	bbit1.d    r2,12,40003bec <__sflush_r+0x16c>

40003af8:	60 a6                   	st_s       r3,[r14,0]
40003afa:	2c 86                   	ld_s       r1,[r14,48]
40003afc:	1b 09 30 00             	breq.d     r1,0,40003b16 <__sflush_r+0x96>

40003b00:	00 18 40 23             	st         r13,[r16]
40003b04:	56 26 02 12             	add3       r2,r14,8
40003b08:	50 71                   	cmp_s      r1,r2
40003b0a:	04 0d 22 00             	blnz.d     4000400c <_free_r>

40003b0e:	ca 20 02 04             	mov.nz     r0,r16
40003b12:	30 1e 01 10             	st         0,[r14,48]
40003b16:	0c 70                   	mov_s      r0,0
40003b18:	10 14 1f 30             	ld         blink,[sp,16]
40003b1c:	00 c5                   	ld_s       r13,[sp,0]
40003b1e:	01 c6                   	ld_s       r14,[sp,4]
40003b20:	02 c7                   	ld_s       r15,[sp,8]
40003b22:	0c 14 10 30             	ld         r16,[sp,12]
40003b26:	e0 7f                   	j_s.d      [blink]
40003b28:	a5 c0                   	add_s      sp,sp,20
40003b2a:	e0 78                   	nop_s      
40003b2c:	e4 81                   	ld_s       r15,[r1,16]
40003b2e:	75 ef                   	breq_s     r15,0,40003b16 <__sflush_r+0x96>

40003b30:	a0 81                   	ld_s       r13,[r1,0]
40003b32:	e0 a1                   	st_s       r15,[r1,0]
40003b34:	c1 bb                   	bmsk_s     r3,r3,1
40003b36:	e2 7d                   	sub_s      r13,r13,r15
40003b38:	6b 7b                   	tst_s      r3,r3
40003b3a:	0a 00 22 00             	bnz.d      40003b42 <__sflush_r+0xc2>

40003b3e:	c0 7a                   	sub_s.ne   r2,r2,r2
40003b40:	45 81                   	ld_s       r2,[r1,20]
40003b42:	17 0d 7b 10             	brge.t.d   r13,1,40003b56 <__sflush_r+0xd6>

40003b46:	42 a6                   	st_s       r2,[r14,8]
40003b48:	d1 07 ef ff             	b.d        40003b18 <__sflush_r+0x98>

40003b4c:	0c 70                   	mov_s      r0,0
40003b4e:	e0 78                   	nop_s      
40003b50:	c7 0d 7a 90             	brlt.nt.d  r13,1,40003b16 <__sflush_r+0x96>

40003b54:	1f 67                   	add_s      r15,r15,r0
40003b56:	24 16 04 10             	ld         r4,[r14,36]
40003b5a:	27 86                   	ld_s       r1,[r14,28]
40003b5c:	e1 42                   	mov_s      r2,r15
40003b5e:	a1 43                   	mov_s      r3,r13
40003b60:	23 20 00 01             	jl.d       [r4]
40003b64:	0a 20 00 04             	mov        r0,r16
40003b68:	e9 08 73 80             	brge.d     r0,1,40003b50 <__sflush_r+0xd0>

40003b6c:	02 7d                   	sub_s      r13,r13,r0
40003b6e:	1d 65                   	add_s      r13,r13,r0
40003b70:	0c 16 02 11             	ldh        r2,[r14,12]
40003b74:	0c 77                   	mov_s      r0,-1
40003b76:	86 ba                   	bset_s     r2,r2,6
40003b78:	a1 07 ef ff             	b.d        40003b18 <__sflush_r+0x98>

40003b7c:	46 b6                   	sth_s      r2,[r14,12]
40003b7e:	e0 78                   	nop_s      
40003b80:	6f 81                   	ld_s       r3,[r1,60]
40003b82:	27 0b 53 80             	brge       r3,1,40003aa6 <__sflush_r+0x26>

40003b86:	0c 70                   	mov_s      r0,0
40003b88:	c8 f1                   	b_s        40003b18 <__sflush_r+0x98>

40003b8a:	e0 78                   	nop_s      
40003b8c:	27 86                   	ld_s       r1,[r14,28]
40003b8e:	4c 70                   	mov_s      r2,0
40003b90:	02 40                   	mov_s      r0,r16
40003b92:	23 20 00 01             	jl.d       [r4]
40003b96:	6c 71                   	mov_s      r3,1
40003b98:	00 42                   	mov_s      r2,r0
40003b9a:	3d 08 80 0f ff ff ff ff 	breq       r0,-1,40003bd4 <__sflush_r+0x154>

40003ba2:	0c 16 03 11             	ldh        r3,[r14,12]
40003ba6:	1d 07 ef ff             	b.d        40003ac0 <__sflush_r+0x40>

40003baa:	28 16 04 10             	ld         r4,[r14,40]
40003bae:	e0 78                   	nop_s      
40003bb0:	00 10 02 20             	ld         r2,[r16,0]
40003bb4:	35 0a 10 80             	breq       r2,0,40003ae8 <__sflush_r+0x68>

40003bb8:	09 0a 50 07             	breq       r2,29,40003bc0 <__sflush_r+0x140>

40003bbc:	b5 0a 91 85             	brne       r2,22,40003b70 <__sflush_r+0xf0>

40003bc0:	0c 16 03 11             	ldh        r3,[r14,12]
40003bc4:	44 86                   	ld_s       r2,[r14,16]
40003bc6:	ab bb                   	bclr_s     r3,r3,11
40003bc8:	04 1e 01 10             	st         0,[r14,4]
40003bcc:	66 b6                   	sth_s      r3,[r14,12]
40003bce:	2f 07 ef ff             	b.d        40003afa <__sflush_r+0x7a>

40003bd2:	40 a6                   	st_s       r2,[r14,0]
40003bd4:	00 10 03 20             	ld         r3,[r16,0]
40003bd8:	65 eb                   	breq_s     r3,0,40003ba2 <__sflush_r+0x122>

40003bda:	0b 0b 90 05             	breq       r3,22,40003be2 <__sflush_r+0x162>

40003bde:	95 0b 51 87             	brne       r3,29,40003b70 <__sflush_r+0xf0>

40003be2:	00 18 40 23             	st         r13,[r16]
40003be6:	35 07 ef ff             	b.d        40003b18 <__sflush_r+0x98>

40003bea:	0c 70                   	mov_s      r0,0
40003bec:	0f 07 ef ff             	b.d        40003afa <__sflush_r+0x7a>

40003bf0:	14 a6                   	st_s       r0,[r14,80]
40003bf2:	e0 78                   	nop_s      

40003bf4 <_fflush_r>:
40003bf4:	f1 c0                   	push_s     blink
40003bf6:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40003bfa:	0a 25 00 90             	mov.f      r13,r0
40003bfe:	0c 00 21 00             	bz.d       40003c08 <_fflush_r+0x14>

40003c02:	a1 c1                   	sub_s      sp,sp,4
40003c04:	4e 85                   	ld_s       r2,[r13,56]
40003c06:	14 ea                   	breq_s     r2,0,40003c2c <_fflush_r+0x38>

40003c08:	46 99                   	ldh_s.x    r2,[r1,12]
40003c0a:	15 0a 31 00             	brne.d     r2,0,40003c1c <_fflush_r+0x28>

40003c0e:	0c 70                   	mov_s      r0,0
40003c10:	08 14 1f 30             	ld         blink,[sp,8]
40003c14:	04 14 0d 32             	ld.a       r13,[sp,4]
40003c18:	e0 7f                   	j_s.d      [blink]
40003c1a:	a2 c0                   	add_s      sp,sp,8
40003c1c:	a1 40                   	mov_s      r0,r13
40003c1e:	08 14 1f 30             	ld         blink,[sp,8]
40003c22:	04 14 0d 32             	ld.a       r13,[sp,4]
40003c26:	5d 06 ef ff             	b.d        40003a80 <__sflush_r>

40003c2a:	a2 c0                   	add_s      sp,sp,8
40003c2c:	b6 08 20 00             	bl.d       40003ce0 <__sinit>

40003c30:	00 1c 40 30             	st         r1,[sp]
40003c34:	d5 07 ef ff             	b.d        40003c08 <_fflush_r+0x14>

40003c38:	00 c1                   	ld_s       r1,[sp,0]
40003c3a:	e0 78                   	nop_s      

40003c3c <fflush>:
40003c3c:	0a 21 00 80             	mov.f      r1,r0
40003c40:	08 f2                   	beq_s      40003c50 <fflush+0x14>

40003c42:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
40003c4a:	ad 07 cf ff             	b          40003bf4 <_fflush_r>

40003c4e:	e0 78                   	nop_s      
40003c50:	00 16 00 70 00 40 f0 d4 	ld         r0,[0x4000d4f0]
40003c58:	c3 41 00 40 f4 3b       	mov_s      r1,0x40003bf4
40003c5e:	15 07 00 00             	b          40004370 <_fwalk_reent>

40003c62:	e0 78                   	nop_s      

40003c64 <__fp_lock>:
40003c64:	0c 70                   	mov_s      r0,0
40003c66:	e0 7e                   	j_s        [blink]

40003c68 <__fp_unlock>:
40003c68:	0c 70                   	mov_s      r0,0
40003c6a:	e0 7e                   	j_s        [blink]

40003c6c <_cleanup_r>:
40003c6c:	c3 41 00 40 f8 66       	mov_s      r1,0x400066f8
40003c72:	01 07 00 00             	b          40004370 <_fwalk_reent>

40003c76:	e0 78                   	nop_s      

40003c78 <__sfmoreglue>:
40003c78:	f1 c0                   	push_s     blink
40003c7a:	42 21 42 00             	sub        r2,r1,1
40003c7e:	f4 1c 48 b3             	st.a       r13,[sp,-12]
40003c82:	41 c6                   	st_s       r14,[sp,4]
40003c84:	14 22 8e 00             	add1       r14,r2,r2
40003c88:	15 22 8e 03             	add2       r14,r2,r14
40003c8c:	4a 22 00 00             	mov        r2,0
40003c90:	16 22 8e 03             	add3       r14,r2,r14
40003c94:	42 c7                   	st_s       r15,[sp,8]
40003c96:	28 47                   	mov_s      r15,r1
40003c98:	3a 0e 2f fe             	bl.d       400002d0 <_malloc_r>

40003c9c:	55 26 41 17             	add2       r1,r14,29
40003ca0:	0a 25 00 90             	mov.f      r13,r0
40003ca4:	0c f2                   	beq_s      40003cbc <__sfmoreglue+0x44>

40003ca6:	40 25 00 13             	add        r0,r13,12
40003caa:	00 1d 01 10             	st         0,[r13]
40003cae:	e1 a5                   	st_s       r15,[r13,4]
40003cb0:	02 a5                   	st_s       r0,[r13,8]
40003cb2:	2c 70                   	mov_s      r1,0
40003cb4:	be 0e 6f fe             	bl.d       40000b70 <memset>

40003cb8:	56 26 42 13             	add3       r2,r14,13
40003cbc:	a1 40                   	mov_s      r0,r13
40003cbe:	0c 14 1f 30             	ld         blink,[sp,12]
40003cc2:	00 c5                   	ld_s       r13,[sp,0]
40003cc4:	01 c6                   	ld_s       r14,[sp,4]
40003cc6:	02 c7                   	ld_s       r15,[sp,8]
40003cc8:	e0 7f                   	j_s.d      [blink]
40003cca:	a4 c0                   	add_s      sp,sp,16

40003ccc <_cleanup>:
40003ccc:	00 16 00 70 00 40 f0 d4 	ld         r0,[0x4000d4f0]
40003cd4:	c3 41 00 40 f8 66       	mov_s      r1,0x400066f8
40003cda:	99 06 00 00             	b          40004370 <_fwalk_reent>

40003cde:	e0 78                   	nop_s      

40003ce0 <__sinit>:
40003ce0:	f1 c0                   	push_s     blink
40003ce2:	f4 1c 48 b3             	st.a       r13,[sp,-12]
40003ce6:	4e 80                   	ld_s       r2,[r0,56]
40003ce8:	42 c7                   	st_s       r15,[sp,8]
40003cea:	41 c6                   	st_s       r14,[sp,4]
40003cec:	4b 7a                   	tst_s      r2,r2
40003cee:	22 01 22 00             	bnz.d      40003e0e <__sinit+0x12e>

40003cf2:	08 47                   	mov_s      r15,r0
40003cf4:	a1 80                   	ld_s       r13,[r0,4]
40003cf6:	3c 18 80 0f 00 40 6c 3c 	st         0x40003c6c,[r0,60]
40003cfe:	b8 18 19 00             	st.as      0,[r0,184]
40003d02:	b9 18 d9 00             	st.as      3,[r0,185]
40003d06:	00 42                   	mov_s      r2,r0
40003d08:	80 22 0b 0b             	add        r2,r2,0x2ec
40003d0c:	ba 18 98 00             	st.as      r2,[r0,186]
40003d10:	00 1d 01 10             	st         0,[r13]
40003d14:	04 1d 01 10             	st         0,[r13,4]
40003d18:	08 1d 01 10             	st         0,[r13,8]
40003d1c:	0c 1d 05 11             	sth        4,[r13,12]
40003d20:	64 1d 01 10             	st         0,[r13,100]
40003d24:	0e 1d 05 10             	sth        0,[r13,14]
40003d28:	10 1d 01 10             	st         0,[r13,16]
40003d2c:	14 1d 01 10             	st         0,[r13,20]
40003d30:	18 1d 01 10             	st         0,[r13,24]
40003d34:	2c 70                   	mov_s      r1,0
40003d36:	08 da                   	mov_s      r2,8
40003d38:	3a 0e 6f fe             	bl.d       40000b70 <memset>

40003d3c:	55 25 c0 15             	add2       r0,r13,23
40003d40:	c2 87                   	ld_s       r14,[r15,8]
40003d42:	a7 a5                   	st_s       r13,[r13,28]
40003d44:	20 1d 80 1f 00 40 bc 55 	st         0x400055bc,[r13,32]
40003d4c:	24 1d 80 1f 00 40 f8 55 	st         0x400055f8,[r13,36]
40003d54:	28 1d 80 1f 00 40 48 56 	st         0x40005648,[r13,40]
40003d5c:	2c 1d 80 1f 00 40 84 56 	st         0x40005684,[r13,44]
40003d64:	00 1e 01 10             	st         0,[r14]
40003d68:	04 1e 01 10             	st         0,[r14,4]
40003d6c:	08 1e 01 10             	st         0,[r14,8]
40003d70:	0c 1e 45 12             	sth        9,[r14,12]
40003d74:	64 1e 01 10             	st         0,[r14,100]
40003d78:	0e 1e 45 10             	sth        1,[r14,14]
40003d7c:	10 1e 01 10             	st         0,[r14,16]
40003d80:	14 1e 01 10             	st         0,[r14,20]
40003d84:	18 1e 01 10             	st         0,[r14,24]
40003d88:	2c 70                   	mov_s      r1,0
40003d8a:	08 da                   	mov_s      r2,8
40003d8c:	e6 0d 6f fe             	bl.d       40000b70 <memset>

40003d90:	55 26 c0 15             	add2       r0,r14,23
40003d94:	a3 87                   	ld_s       r13,[r15,12]
40003d96:	c7 a6                   	st_s       r14,[r14,28]
40003d98:	20 1e 80 1f 00 40 bc 55 	st         0x400055bc,[r14,32]
40003da0:	24 1e 80 1f 00 40 f8 55 	st         0x400055f8,[r14,36]
40003da8:	28 1e 80 1f 00 40 48 56 	st         0x40005648,[r14,40]
40003db0:	2c 1e 80 1f 00 40 84 56 	st         0x40005684,[r14,44]
40003db8:	00 1d 01 10             	st         0,[r13]
40003dbc:	04 1d 01 10             	st         0,[r13,4]
40003dc0:	08 1d 01 10             	st         0,[r13,8]
40003dc4:	0c 1d 85 14             	sth        18,[r13,12]
40003dc8:	64 1d 01 10             	st         0,[r13,100]
40003dcc:	0e 1d 85 10             	sth        2,[r13,14]
40003dd0:	10 1d 01 10             	st         0,[r13,16]
40003dd4:	14 1d 01 10             	st         0,[r13,20]
40003dd8:	18 1d 01 10             	st         0,[r13,24]
40003ddc:	55 25 c0 15             	add2       r0,r13,23
40003de0:	2c 70                   	mov_s      r1,0
40003de2:	92 0d 6f fe             	bl.d       40000b70 <memset>

40003de6:	08 da                   	mov_s      r2,8
40003de8:	a7 a5                   	st_s       r13,[r13,28]
40003dea:	20 1d 80 1f 00 40 bc 55 	st         0x400055bc,[r13,32]
40003df2:	24 1d 80 1f 00 40 f8 55 	st         0x400055f8,[r13,36]
40003dfa:	28 1d 80 1f 00 40 48 56 	st         0x40005648,[r13,40]
40003e02:	2c 1d 80 1f 00 40 84 56 	st         0x40005684,[r13,44]
40003e0a:	38 1f 41 10             	st         1,[r15,56]
40003e0e:	0c 14 1f 30             	ld         blink,[sp,12]
40003e12:	00 c5                   	ld_s       r13,[sp,0]
40003e14:	01 c6                   	ld_s       r14,[sp,4]
40003e16:	02 c7                   	ld_s       r15,[sp,8]
40003e18:	e0 7f                   	j_s.d      [blink]
40003e1a:	a4 c0                   	add_s      sp,sp,16

40003e1c <__sfp>:
40003e1c:	f1 c0                   	push_s     blink
40003e1e:	f4 1c 48 b3             	st.a       r13,[sp,-12]
40003e22:	41 c6                   	st_s       r14,[sp,4]
40003e24:	00 16 0e 70 00 40 f0 d4 	ld         r14,[0x4000d4f0]
40003e2c:	42 c7                   	st_s       r15,[sp,8]
40003e2e:	4e 86                   	ld_s       r2,[r14,56]
40003e30:	08 47                   	mov_s      r15,r0
40003e32:	4b 7a                   	tst_s      r2,r2
40003e34:	ca 20 81 03             	mov.z      r0,r14
40003e38:	a8 0e e1 ff             	blz.d      40003ce0 <__sinit>

40003e3c:	80 26 0b 18             	add        r14,r14,0x2e0
40003e40:	41 86                   	ld_s       r2,[r14,4]
40003e42:	42 22 43 00             	sub        r3,r2,1
40003e46:	25 0b 32 00             	brlt.d     r3,0,40003e68 <__sfp+0x4c>

40003e4a:	a2 86                   	ld_s       r13,[r14,8]
40003e4c:	66 9d                   	ldh_s.x    r3,[r13,12]
40003e4e:	24 eb                   	breq_s     r3,0,40003e94 <__sfp+0x78>

40003e50:	68 e5                   	add_s      r13,r13,104
40003e52:	0a 24 80 70             	mov        lp_count,r2
40003e56:	e0 78                   	nop_s      
40003e58:	a8 20 00 02             	lp         40003e68 <__sfp+0x4c>

40003e5c:	6b 26 80 70 00 40 88 3e 	sr         0x40003e88,[0x2]
40003e64:	4a 26 00 70             	nop        
40003e68:	40 86                   	ld_s       r2,[r14,0]
40003e6a:	4b 7a                   	tst_s      r2,r2
40003e6c:	d4 07 e2 ff             	bnz.d      40003e40 <__sfp+0x24>

40003e70:	ca 26 82 10             	mov.nz     r14,r2
40003e74:	e1 40                   	mov_s      r0,r15
40003e76:	06 0e ef ff             	bl.d       40003c78 <__sfmoreglue>

40003e7a:	2c 74                   	mov_s      r1,4
40003e7c:	69 08 30 00             	breq.d     r0,0,40003ee4 <__sfp+0xc8>

40003e80:	00 a6                   	st_s       r0,[r14,0]
40003e82:	c1 07 ef ff             	b.d        40003e40 <__sfp+0x24>

40003e86:	08 46                   	mov_s      r14,r0
40003e88:	46 9d                   	ldh_s.x    r2,[r13,12]
40003e8a:	dd 0a 31 80             	brne.d     r2,0,40003e64 <__sfp+0x48>

40003e8e:	68 e5                   	add_s      r13,r13,104
40003e90:	82 25 01 1a             	sub        r13,r13,104
40003e94:	0e 1d c5 1f             	sth        -1,[r13,14]
40003e98:	0c 1d 45 10             	sth        1,[r13,12]
40003e9c:	64 1d 01 10             	st         0,[r13,100]
40003ea0:	00 1d 01 10             	st         0,[r13]
40003ea4:	08 1d 01 10             	st         0,[r13,8]
40003ea8:	04 1d 01 10             	st         0,[r13,4]
40003eac:	10 1d 01 10             	st         0,[r13,16]
40003eb0:	14 1d 01 10             	st         0,[r13,20]
40003eb4:	18 1d 01 10             	st         0,[r13,24]
40003eb8:	55 25 c0 15             	add2       r0,r13,23
40003ebc:	2c 70                   	mov_s      r1,0
40003ebe:	b6 0c 6f fe             	bl.d       40000b70 <memset>

40003ec2:	08 da                   	mov_s      r2,8
40003ec4:	30 1d 01 10             	st         0,[r13,48]
40003ec8:	34 1d 01 10             	st         0,[r13,52]
40003ecc:	44 1d 01 10             	st         0,[r13,68]
40003ed0:	48 1d 01 10             	st         0,[r13,72]
40003ed4:	a1 40                   	mov_s      r0,r13
40003ed6:	0c 14 1f 30             	ld         blink,[sp,12]
40003eda:	00 c5                   	ld_s       r13,[sp,0]
40003edc:	01 c6                   	ld_s       r14,[sp,4]
40003ede:	02 c7                   	ld_s       r15,[sp,8]
40003ee0:	e0 7f                   	j_s.d      [blink]
40003ee2:	a4 c0                   	add_s      sp,sp,16
40003ee4:	00 1f 01 13             	st         12,[r15]
40003ee8:	ef 07 ef ff             	b.d        40003ed6 <__sfp+0xba>

40003eec:	0c 70                   	mov_s      r0,0
40003eee:	e0 78                   	nop_s      

40003ef0 <__sfp_lock_acquire>:
40003ef0:	e0 7e                   	j_s        [blink]
40003ef2:	e0 78                   	nop_s      

40003ef4 <__sfp_lock_release>:
40003ef4:	e0 7e                   	j_s        [blink]
40003ef6:	e0 78                   	nop_s      

40003ef8 <__sinit_lock_acquire>:
40003ef8:	e0 7e                   	j_s        [blink]
40003efa:	e0 78                   	nop_s      

40003efc <__sinit_lock_release>:
40003efc:	e0 7e                   	j_s        [blink]
40003efe:	e0 78                   	nop_s      

40003f00 <__fp_lock_all>:
40003f00:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
40003f08:	c3 41 00 40 64 3c       	mov_s      r1,0x40003c64
40003f0e:	e1 03 00 00             	b          400042ec <_fwalk>

40003f12:	e0 78                   	nop_s      

40003f14 <__fp_unlock_all>:
40003f14:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
40003f1c:	c3 41 00 40 68 3c       	mov_s      r1,0x40003c68
40003f22:	cd 03 00 00             	b          400042ec <_fwalk>

40003f26:	e0 78                   	nop_s      

40003f28 <_malloc_trim_r>:
40003f28:	f1 c0                   	push_s     blink
40003f2a:	f4 1c 48 b3             	st.a       r13,[sp,-12]
40003f2e:	41 c6                   	st_s       r14,[sp,4]
40003f30:	42 c7                   	st_s       r15,[sp,8]
40003f32:	08 45                   	mov_s      r13,r0
40003f34:	c6 0c 6f fe             	bl.d       40000bf8 <__malloc_lock>

40003f38:	28 47                   	mov_s      r15,r1
40003f3a:	00 16 02 70 00 a8 10 04 	ld         r2,[0xa8000410]
40003f42:	c1 82                   	ld_s       r14,[r2,4]
40003f44:	6c 26 4e 10             	bmskn      r14,r14,1
40003f48:	0e 27 8f 13             	rsub       r15,r15,r14
40003f4c:	c3 77 00 00 ef 0f       	add_s      r15,r15,0xfef
40003f52:	6c 27 cf 12             	bmskn      r15,r15,11
40003f56:	99 27 08 10             	sub3       r15,r15,0x200
40003f5a:	21 0e c3 73 00 00 ff 0f 	brge       0xfff,r15,40003f78 <_malloc_trim_r+0x50>

40003f62:	a1 40                   	mov_s      r0,r13
40003f64:	fe 0c 6f fe             	bl.d       40000c60 <_sbrk_r>

40003f68:	2c 70                   	mov_s      r1,0
40003f6a:	00 16 02 70 00 a8 10 04 	ld         r2,[0xa8000410]
40003f72:	da 62                   	add_s      r2,r2,r14
40003f74:	1d 08 80 00             	breq       r0,r2,40003f90 <_malloc_trim_r+0x68>

40003f78:	86 0c 6f fe             	bl.d       40000bfc <__malloc_unlock>

40003f7c:	a1 40                   	mov_s      r0,r13
40003f7e:	0c 70                   	mov_s      r0,0
40003f80:	0c 14 1f 30             	ld         blink,[sp,12]
40003f84:	00 c5                   	ld_s       r13,[sp,0]
40003f86:	01 c6                   	ld_s       r14,[sp,4]
40003f88:	02 c7                   	ld_s       r15,[sp,8]
40003f8a:	e0 7f                   	j_s.d      [blink]
40003f8c:	a4 c0                   	add_s      sp,sp,16
40003f8e:	e0 78                   	nop_s      
40003f90:	a1 40                   	mov_s      r0,r13
40003f92:	d2 0c 6f fe             	bl.d       40000c60 <_sbrk_r>

40003f96:	f3 79                   	neg_s      r1,r15
40003f98:	41 08 80 0f ff ff ff ff 	breq       r0,-1,40003fd8 <_malloc_trim_r+0xb0>

40003fa0:	00 16 02 70 00 a8 10 04 	ld         r2,[0xa8000410]
40003fa8:	e2 7e                   	sub_s      r14,r14,r15
40003faa:	80 be                   	bset_s     r14,r14,0
40003fac:	c1 a2                   	st_s       r14,[r2,4]
40003fae:	00 16 02 70 00 a8 a0 0d 	ld         r2,[0xa8000da0]
40003fb6:	e2 7a                   	sub_s      r2,r2,r15
40003fb8:	00 1e 80 70 00 a8 a0 0d 	st         r2,[0xa8000da0]
40003fc0:	3e 0c 6f fe             	bl.d       40000bfc <__malloc_unlock>

40003fc4:	a1 40                   	mov_s      r0,r13
40003fc6:	0c 71                   	mov_s      r0,1
40003fc8:	0c 14 1f 30             	ld         blink,[sp,12]
40003fcc:	00 c5                   	ld_s       r13,[sp,0]
40003fce:	01 c6                   	ld_s       r14,[sp,4]
40003fd0:	02 c7                   	ld_s       r15,[sp,8]
40003fd2:	e0 7f                   	j_s.d      [blink]
40003fd4:	a4 c0                   	add_s      sp,sp,16
40003fd6:	e0 78                   	nop_s      
40003fd8:	a1 40                   	mov_s      r0,r13
40003fda:	8a 0c 6f fe             	bl.d       40000c60 <_sbrk_r>

40003fde:	2c 70                   	mov_s      r1,0
40003fe0:	00 16 02 70 00 a8 10 04 	ld         r2,[0xa8000410]
40003fe8:	02 20 83 00             	sub        r3,r0,r2
40003fec:	8d 0b 3a 84             	brlt.nt.d  r3,16,40003f78 <_malloc_trim_r+0x50>

40003ff0:	80 bb                   	bset_s     r3,r3,0
40003ff2:	00 16 04 70 00 a8 00 04 	ld         r4,[0xa8000400]
40003ffa:	02 20 00 01             	sub        r0,r0,r4
40003ffe:	61 a2                   	st_s       r3,[r2,4]
40004000:	00 1e 00 70 00 a8 a0 0d 	st         r0,[0xa8000da0]
40004008:	b8 f1                   	b_s        40003f78 <_malloc_trim_r+0x50>

4000400a:	e0 78                   	nop_s      

4000400c <_free_r>:
4000400c:	f1 c0                   	push_s     blink
4000400e:	f8 1c 48 b3             	st.a       r13,[sp,-8]
40004012:	0a 25 40 90             	mov.f      r13,r1
40004016:	24 01 21 00             	bz.d       40004138 <_free_r+0x12c>

4000401a:	41 c6                   	st_s       r14,[sp,4]
4000401c:	de 0b 6f fe             	bl.d       40000bf8 <__malloc_lock>

40004020:	08 46                   	mov_s      r14,r0
40004022:	fc 15 06 90             	ld         r6,[r13,-4]
40004026:	42 25 04 12             	sub        r4,r13,8
4000402a:	6c 26 02 00             	bmskn      r2,r6,0
4000402e:	00 16 07 70 00 a8 10 04 	ld         r7,[0xa8000410]
40004036:	00 24 83 00             	add        r3,r4,r2
4000403a:	04 13 05 00             	ld         r5,[r3,4]
4000403e:	0c 27 c0 80             	cmp        r7,r3
40004042:	90 01 21 00             	bz.d       400041d0 <_free_r+0x1c4>

40004046:	6c 25 45 00             	bmskn      r5,r5,1
4000404a:	c5 0e 3e 00             	bbit0.d    r6,0,4000410c <_free_r+0x100>

4000404e:	04 1b 40 01             	st         r5,[r3,4]
40004052:	cc 70                   	mov_s      r6,0
40004054:	00 23 47 01             	add        r7,r3,r5
40004058:	04 17 07 00             	ld         r7,[r7,4]
4000405c:	1d 0f 1f 00             	bbit1      r7,0,40004078 <_free_r+0x6c>

40004060:	a0 72                   	add_s      r2,r2,r5
40004062:	0b 26 80 81             	tst        r6,r6
40004066:	34 01 21 00             	bz.d       40004198 <_free_r+0x18c>

4000406a:	08 13 05 00             	ld         r5,[r3,8]
4000406e:	63 83                   	ld_s       r3,[r3,12]
40004070:	0c 1d c0 00             	st         r3,[r5,12]
40004074:	08 1b 40 01             	st         r5,[r3,8]
40004078:	45 22 43 00             	or         r3,r2,1
4000407c:	04 1c c0 00             	st         r3,[r4,4]
40004080:	00 24 83 00             	add        r3,r4,r2
40004084:	79 0e 31 00             	brne.d     r6,0,400040fc <_free_r+0xf0>

40004088:	40 a3                   	st_s       r2,[r3,0]
4000408a:	bd 0e 85 70 00 00 ff 01 	brhs.t     0x1ff,r2,40004144 <_free_r+0x138>

40004092:	40 43                   	mov_s      r3,r2
40004094:	4a 24 40 f2             	mov.f      lp_count,9
40004098:	e8 20 a2 01             	lpnz       400040a4 <_free_r+0x98>

4000409c:	2f 23 c2 00             	lsr        r3,r3
400040a0:	4a 26 00 70             	nop        
400040a4:	74 74                   	cmp_s      r3,4
400040a6:	8c 01 2d 00             	bhi.d      40004230 <_free_r+0x224>

400040aa:	40 45                   	mov_s      r5,r2
400040ac:	4a 24 80 f1             	mov.f      lp_count,6
400040b0:	e8 20 a2 01             	lpnz       400040bc <_free_r+0xb0>

400040b4:	2f 25 42 01             	lsr        r5,r5
400040b8:	4a 26 00 70             	nop        
400040bc:	40 25 05 0e             	add        r5,r5,56
400040c0:	a0 46                   	mov_s      r6,r5
400040c2:	00 26 86 01             	add        r6,r6,r6
400040c6:	15 26 86 71 00 a8 08 04 	add2       r6,0xa8000408,r6
400040ce:	08 16 03 00             	ld         r3,[r6,8]
400040d2:	d0 73                   	cmp_s      r3,r6
400040d4:	70 01 01 00             	bz         40004244 <_free_r+0x238>

400040d8:	04 13 05 00             	ld         r5,[r3,4]
400040dc:	6c 25 45 00             	bmskn      r5,r5,1
400040e0:	0b 0a 45 01             	brhs.t     r2,r5,400040ea <_free_r+0xde>

400040e4:	62 83                   	ld_s       r3,[r3,8]
400040e6:	f5 0e c1 80             	brne       r6,r3,400040d8 <_free_r+0xcc>

400040ea:	43 83                   	ld_s       r2,[r3,12]
400040ec:	0c 1c 80 00             	st         r2,[r4,12]
400040f0:	08 1c c0 00             	st         r3,[r4,8]
400040f4:	08 1a 00 01             	st         r4,[r2,8]
400040f8:	0c 1b 00 01             	st         r4,[r3,12]
400040fc:	c1 40                   	mov_s      r0,r14
400040fe:	08 14 1f 30             	ld         blink,[sp,8]
40004102:	00 c5                   	ld_s       r13,[sp,0]
40004104:	01 c6                   	ld_s       r14,[sp,4]
40004106:	f9 02 6f fe             	b.d        40000bfc <__malloc_unlock>

4000410a:	a3 c0                   	add_s      sp,sp,12
4000410c:	f8 15 06 90             	ld         r6,[r13,-8]
40004110:	02 24 84 01             	sub        r4,r4,r6
40004114:	08 14 07 00             	ld         r7,[r4,8]
40004118:	0c 27 80 8f 00 a8 10 04 	cmp        r7,0xa8000410
40004120:	08 01 21 00             	bz.d       40004228 <_free_r+0x21c>

40004124:	c0 72                   	add_s      r2,r2,r6
40004126:	0c 14 08 00             	ld         r8,[r4,12]
4000412a:	cc 70                   	mov_s      r6,0
4000412c:	0c 1f 00 02             	st         r8,[r7,12]
40004130:	25 07 ef ff             	b.d        40004054 <_free_r+0x48>

40004134:	08 18 c0 11             	st         r7,[r8,8]
40004138:	08 14 1f 30             	ld         blink,[sp,8]
4000413c:	00 c5                   	ld_s       r13,[sp,0]
4000413e:	01 c6                   	ld_s       r14,[sp,4]
40004140:	e0 7f                   	j_s.d      [blink]
40004142:	a3 c0                   	add_s      sp,sp,12
40004144:	2f 22 82 00             	lsr        r2,r2
40004148:	2f 22 82 00             	lsr        r2,r2
4000414c:	2f 22 82 00             	lsr        r2,r2
40004150:	16 26 83 70 00 a8 08 04 	add3       r3,0xa8000408,r2
40004158:	08 13 05 00             	ld         r5,[r3,8]
4000415c:	0c 1c c0 00             	st         r3,[r4,12]
40004160:	08 1c 40 01             	st         r5,[r4,8]
40004164:	08 1b 00 01             	st         r4,[r3,8]
40004168:	2f 22 81 00             	asr        r2,r2
4000416c:	2f 22 81 00             	asr        r2,r2
40004170:	00 16 03 70 00 a8 0c 04 	ld         r3,[0xa800040c]
40004178:	0c 1d 00 01             	st         r4,[r5,12]
4000417c:	0f 23 83 00             	bset       r3,r3,r2
40004180:	c1 40                   	mov_s      r0,r14
40004182:	00 1e c0 70 00 a8 0c 04 	st         r3,[0xa800040c]
4000418a:	08 14 1f 30             	ld         blink,[sp,8]
4000418e:	00 c5                   	ld_s       r13,[sp,0]
40004190:	01 c6                   	ld_s       r14,[sp,4]
40004192:	6d 02 6f fe             	b.d        40000bfc <__malloc_unlock>

40004196:	a3 c0                   	add_s      sp,sp,12
40004198:	0c 25 80 8f 00 a8 10 04 	cmp        r5,0xa8000410
400041a0:	67 f5                   	bne_s      4000406e <_free_r+0x62>

400041a2:	00 1e 00 71 00 a8 1c 04 	st         r4,[0xa800041c]
400041aa:	00 1e 00 71 00 a8 18 04 	st         r4,[0xa8000418]
400041b2:	0c 1c 40 01             	st         r5,[r4,12]
400041b6:	08 1c 40 01             	st         r5,[r4,8]
400041ba:	45 22 43 00             	or         r3,r2,1
400041be:	04 1c c0 00             	st         r3,[r4,4]
400041c2:	00 24 84 00             	add        r4,r4,r2
400041c6:	39 07 ef ff             	b.d        400040fc <_free_r+0xf0>

400041ca:	00 1c 80 00             	st         r2,[r4]
400041ce:	e0 78                   	nop_s      
400041d0:	21 0e 3f 00             	bbit1.d    r6,0,400041f0 <_free_r+0x1e4>

400041d4:	a0 72                   	add_s      r2,r2,r5
400041d6:	f8 15 06 90             	ld         r6,[r13,-8]
400041da:	02 24 84 01             	sub        r4,r4,r6
400041de:	0c 14 03 00             	ld         r3,[r4,12]
400041e2:	08 14 05 00             	ld         r5,[r4,8]
400041e6:	c0 72                   	add_s      r2,r2,r6
400041e8:	0c 1d c0 00             	st         r3,[r5,12]
400041ec:	08 1b 40 01             	st         r5,[r3,8]
400041f0:	45 22 43 00             	or         r3,r2,1
400041f4:	04 1c c0 00             	st         r3,[r4,4]
400041f8:	00 16 03 70 00 a8 04 04 	ld         r3,[0xa8000404]
40004200:	00 1e 00 71 00 a8 10 04 	st         r4,[0xa8000410]
40004208:	70 72                   	cmp_s      r2,r3
4000420a:	f6 06 e5 ff             	bc.d       400040fe <_free_r+0xf2>

4000420e:	ca 20 85 03             	mov.c      r0,r14
40004212:	00 16 01 70 00 a8 d0 0d 	ld         r1,[0xa8000dd0]
4000421a:	12 0d ef ff             	bl.d       40003f28 <_malloc_trim_r>

4000421e:	c1 40                   	mov_s      r0,r14
40004220:	df 06 ef ff             	b.d        400040fe <_free_r+0xf2>

40004224:	c1 40                   	mov_s      r0,r14
40004226:	e0 78                   	nop_s      
40004228:	2d 06 ef ff             	b.d        40004054 <_free_r+0x48>

4000422c:	cc 71                   	mov_s      r6,1
4000422e:	e0 78                   	nop_s      
40004230:	39 0b 75 05             	brhs.t.d   r3,21,40004268 <_free_r+0x25c>

40004234:	60 45                   	mov_s      r5,r3
40004236:	80 25 c1 06             	add        r5,r5,91
4000423a:	a0 46                   	mov_s      r6,r5
4000423c:	00 26 86 01             	add        r6,r6,r6
40004240:	43 f1                   	b_s        400040c6 <_free_r+0xba>

40004242:	e0 78                   	nop_s      
40004244:	00 16 06 70 00 a8 0c 04 	ld         r6,[0xa800040c]
4000424c:	2f 25 41 01             	asr        r5,r5
40004250:	2f 25 41 01             	asr        r5,r5
40004254:	0f 26 46 01             	bset       r6,r6,r5
40004258:	00 1e 80 71 00 a8 0c 04 	st         r6,[0xa800040c]
40004260:	8d 06 ef ff             	b.d        400040ec <_free_r+0xe0>

40004264:	60 42                   	mov_s      r2,r3
40004266:	e0 78                   	nop_s      
40004268:	29 0e c4 70 00 00 54 00 	brlo       84,r3,40004290 <_free_r+0x284>

40004270:	40 45                   	mov_s      r5,r2
40004272:	4a 24 00 f3             	mov.f      lp_count,12
40004276:	e8 20 e2 01             	lpnz       40004282 <_free_r+0x276>

4000427a:	2f 25 42 01             	lsr        r5,r5
4000427e:	4a 26 00 70             	nop        
40004282:	80 25 81 0b             	add        r5,r5,110
40004286:	a0 46                   	mov_s      r6,r5
40004288:	00 26 86 01             	add        r6,r6,r6
4000428c:	1d f1                   	b_s        400040c6 <_free_r+0xba>

4000428e:	e0 78                   	nop_s      
40004290:	29 0e c4 70 00 00 54 01 	brlo       0x154,r3,400042b8 <_free_r+0x2ac>

40004298:	40 45                   	mov_s      r5,r2
4000429a:	4a 24 c0 f3             	mov.f      lp_count,15
4000429e:	e8 20 e2 01             	lpnz       400042aa <_free_r+0x29e>

400042a2:	2f 25 42 01             	lsr        r5,r5
400042a6:	4a 26 00 70             	nop        
400042aa:	80 25 c1 0d             	add        r5,r5,119
400042ae:	a0 46                   	mov_s      r6,r5
400042b0:	00 26 86 01             	add        r6,r6,r6
400042b4:	13 06 cf ff             	b          400040c6 <_free_r+0xba>

400042b8:	29 0e c4 70 00 00 54 05 	brlo       0x554,r3,400042e0 <_free_r+0x2d4>

400042c0:	40 45                   	mov_s      r5,r2
400042c2:	4a 24 80 f4             	mov.f      lp_count,18
400042c6:	e8 20 e2 01             	lpnz       400042d2 <_free_r+0x2c6>

400042ca:	2f 25 42 01             	lsr        r5,r5
400042ce:	4a 26 00 70             	nop        
400042d2:	80 25 01 0f             	add        r5,r5,124
400042d6:	a0 46                   	mov_s      r6,r5
400042d8:	00 26 86 01             	add        r6,r6,r6
400042dc:	eb 05 cf ff             	b          400040c6 <_free_r+0xba>

400042e0:	8a 26 03 0f             	mov        r6,252
400042e4:	e3 05 ef ff             	b.d        400040c6 <_free_r+0xba>

400042e8:	8a 25 81 0f             	mov        r5,126

400042ec <_fwalk>:
400042ec:	f1 c0                   	push_s     blink
400042ee:	ec 1c 48 b3             	st.a       r13,[sp,-20]
400042f2:	0c 1c 00 34             	st         r16,[sp,12]
400042f6:	41 c6                   	st_s       r14,[sp,4]
400042f8:	42 c7                   	st_s       r15,[sp,8]
400042fa:	00 20 90 8f 00 00 e0 02 	add.f      r16,r0,0x2e0
40004302:	68 00 21 00             	bz.d       40004368 <_fwalk+0x7c>

40004306:	10 1c 40 34             	st         r17,[sp,16]
4000430a:	30 41                   	mov_s      r17,r1
4000430c:	4a 27 00 10             	mov        r15,0
40004310:	04 10 0e 20             	ld         r14,[r16,4]
40004314:	42 26 4e 10             	sub        r14,r14,1
40004318:	2f 0e 32 10             	brlt.d     r14,0,40004346 <_fwalk+0x5a>

4000431c:	08 10 0d 20             	ld         r13,[r16,8]
40004320:	0c 15 02 11             	ldh        r2,[r13,12]
40004324:	19 0a b4 00             	brlo.d     r2,2,4000433c <_fwalk+0x50>

40004328:	c9 6e                   	sub_s      r14,r14,1
4000432a:	47 9d                   	ldh_s.x    r2,[r13,14]
4000432c:	a1 40                   	mov_s      r0,r13
4000432e:	11 0a 80 0f ff ff ff ff 	breq       r2,-1,4000433c <_fwalk+0x50>

40004336:	22 20 40 04             	jl         [r17]
4000433a:	05 7f                   	or_s       r15,r15,r0
4000433c:	68 e5                   	add_s      r13,r13,104
4000433e:	e5 0e 81 9f ff ff ff ff 	brne       r14,-1,40004320 <_fwalk+0x34>

40004346:	00 10 10 20             	ld         r16,[r16,0]
4000434a:	c9 08 11 a0             	brne       r16,0,40004310 <_fwalk+0x24>

4000434e:	e1 40                   	mov_s      r0,r15
40004350:	14 14 1f 30             	ld         blink,[sp,20]
40004354:	00 c5                   	ld_s       r13,[sp,0]
40004356:	01 c6                   	ld_s       r14,[sp,4]
40004358:	02 c7                   	ld_s       r15,[sp,8]
4000435a:	0c 14 10 30             	ld         r16,[sp,12]
4000435e:	10 14 11 30             	ld         r17,[sp,16]
40004362:	e0 7f                   	j_s.d      [blink]
40004364:	a6 c0                   	add_s      sp,sp,24
40004366:	e0 78                   	nop_s      
40004368:	e7 07 ef ff             	b.d        4000434e <_fwalk+0x62>

4000436c:	ed 70                   	mov_s      r15,0
4000436e:	e0 78                   	nop_s      

40004370 <_fwalk_reent>:
40004370:	f1 c0                   	push_s     blink
40004372:	e8 1c 48 b3             	st.a       r13,[sp,-24]
40004376:	0c 1c 00 34             	st         r16,[sp,12]
4000437a:	10 1c 40 34             	st         r17,[sp,16]
4000437e:	41 c6                   	st_s       r14,[sp,4]
40004380:	42 c7                   	st_s       r15,[sp,8]
40004382:	10 41                   	mov_s      r17,r0
40004384:	00 21 90 af 00 00 e0 02 	add.f      r16,r17,0x2e0
4000438c:	68 00 21 00             	bz.d       400043f4 <_fwalk_reent+0x84>

40004390:	14 1c 80 34             	st         r18,[sp,20]
40004394:	30 42                   	mov_s      r18,r1
40004396:	ed 70                   	mov_s      r15,0
40004398:	04 10 0e 20             	ld         r14,[r16,4]
4000439c:	42 26 4e 10             	sub        r14,r14,1
400043a0:	31 0e 32 10             	brlt.d     r14,0,400043d0 <_fwalk_reent+0x60>

400043a4:	08 10 0d 20             	ld         r13,[r16,8]
400043a8:	0c 15 02 11             	ldh        r2,[r13,12]
400043ac:	1b 0a b4 00             	brlo.d     r2,2,400043c6 <_fwalk_reent+0x56>

400043b0:	c9 6e                   	sub_s      r14,r14,1
400043b2:	47 9d                   	ldh_s.x    r2,[r13,14]
400043b4:	a1 41                   	mov_s      r1,r13
400043b6:	13 0a 80 0f ff ff ff ff 	breq       r2,-1,400043c6 <_fwalk_reent+0x56>

400043be:	23 20 80 04             	jl.d       [r18]
400043c2:	22 40                   	mov_s      r0,r17
400043c4:	05 7f                   	or_s       r15,r15,r0
400043c6:	68 e5                   	add_s      r13,r13,104
400043c8:	e1 0e 81 9f ff ff ff ff 	brne       r14,-1,400043a8 <_fwalk_reent+0x38>

400043d0:	00 10 10 20             	ld         r16,[r16,0]
400043d4:	c5 08 11 a0             	brne       r16,0,40004398 <_fwalk_reent+0x28>

400043d8:	e1 40                   	mov_s      r0,r15
400043da:	18 14 1f 30             	ld         blink,[sp,24]
400043de:	00 c5                   	ld_s       r13,[sp,0]
400043e0:	01 c6                   	ld_s       r14,[sp,4]
400043e2:	02 c7                   	ld_s       r15,[sp,8]
400043e4:	0c 14 10 30             	ld         r16,[sp,12]
400043e8:	10 14 11 30             	ld         r17,[sp,16]
400043ec:	14 14 12 30             	ld         r18,[sp,20]
400043f0:	e0 7f                   	j_s.d      [blink]
400043f2:	a7 c0                   	add_s      sp,sp,28
400043f4:	e5 07 ef ff             	b.d        400043d8 <_fwalk_reent+0x68>

400043f8:	ed 70                   	mov_s      r15,0
400043fa:	e0 78                   	nop_s      

400043fc <_setlocale_r>:
400043fc:	f1 c0                   	push_s     blink
400043fe:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40004402:	0a 25 80 90             	mov.f      r13,r2
40004406:	09 f2                   	beq_s      40004416 <_setlocale_r+0x1a>

40004408:	c3 41 00 40 0c e0       	mov_s      r1,0x4000e00c
4000440e:	9a 08 6f fe             	bl.d       40000ca4 <strcmp>

40004412:	a1 40                   	mov_s      r0,r13
40004414:	8a e8                   	brne_s     r0,0,40004428 <_setlocale_r+0x2c>

40004416:	c3 42 00 40 08 e0       	mov_s      r2,0x4000e008
4000441c:	40 40                   	mov_s      r0,r2
4000441e:	04 14 1f 30             	ld         blink,[sp,4]
40004422:	00 c5                   	ld_s       r13,[sp,0]
40004424:	e0 7f                   	j_s.d      [blink]
40004426:	a2 c0                   	add_s      sp,sp,8
40004428:	c3 41 00 40 08 e0       	mov_s      r1,0x4000e008
4000442e:	7a 08 6f fe             	bl.d       40000ca4 <strcmp>

40004432:	a1 40                   	mov_s      r0,r13
40004434:	71 e8                   	breq_s     r0,0,40004416 <_setlocale_r+0x1a>

40004436:	c3 41 00 40 7c df       	mov_s      r1,0x4000df7c
4000443c:	6a 08 6f fe             	bl.d       40000ca4 <strcmp>

40004440:	a1 40                   	mov_s      r0,r13
40004442:	4c 70                   	mov_s      r2,0
40004444:	0b 78                   	tst_s      r0,r0
40004446:	ca 22 81 0f 00 40 08 e0 	mov.z      r2,0x4000e008
4000444e:	40 40                   	mov_s      r0,r2
40004450:	04 14 1f 30             	ld         blink,[sp,4]
40004454:	00 c5                   	ld_s       r13,[sp,0]
40004456:	e0 7f                   	j_s.d      [blink]
40004458:	a2 c0                   	add_s      sp,sp,8
4000445a:	e0 78                   	nop_s      

4000445c <__locale_charset>:
4000445c:	c3 40 00 a8 58 0c       	mov_s      r0,0xa8000c58
40004462:	e0 7e                   	j_s        [blink]

40004464 <__locale_mb_cur_max>:
40004464:	00 16 00 70 00 a8 b0 0c 	ld         r0,[0xa8000cb0]
4000446c:	e0 7e                   	j_s        [blink]
4000446e:	e0 78                   	nop_s      

40004470 <__locale_msgcharset>:
40004470:	c3 40 00 a8 38 0c       	mov_s      r0,0xa8000c38
40004476:	e0 7e                   	j_s        [blink]

40004478 <__locale_cjk_lang>:
40004478:	0c 70                   	mov_s      r0,0
4000447a:	e0 7e                   	j_s        [blink]

4000447c <_localeconv_r>:
4000447c:	c3 40 00 a8 78 0c       	mov_s      r0,0xa8000c78
40004482:	e0 7e                   	j_s        [blink]

40004484 <setlocale>:
40004484:	00 43                   	mov_s      r3,r0
40004486:	20 42                   	mov_s      r2,r1
40004488:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
40004490:	60 41                   	mov_s      r1,r3
40004492:	6d 07 cf ff             	b          400043fc <_setlocale_r>

40004496:	e0 78                   	nop_s      

40004498 <localeconv>:
40004498:	c3 40 00 a8 78 0c       	mov_s      r0,0xa8000c78
4000449e:	e0 7e                   	j_s        [blink]

400044a0 <__smakebuf_r>:
400044a0:	f1 c0                   	push_s     blink
400044a2:	f0 1c 48 b3             	st.a       r13,[sp,-16]
400044a6:	46 99                   	ldh_s.x    r2,[r1,12]
400044a8:	41 c6                   	st_s       r14,[sp,4]
400044aa:	42 c7                   	st_s       r15,[sp,8]
400044ac:	0c 1c 00 34             	st         r16,[sp,12]
400044b0:	28 45                   	mov_s      r13,r1
400044b2:	2f 23 88 00             	exth       r3,r2
400044b6:	9d 0b 7f 00             	bbit1.d    r3,1,40004550 <__smakebuf_r+0xb0>

400044ba:	af c1                   	sub_s      sp,sp,60
400044bc:	27 99                   	ldh_s.x    r1,[r1,14]
400044be:	47 09 32 00             	brlt.d     r1,0,40004502 <__smakebuf_r+0x62>

400044c2:	08 47                   	mov_s      r15,r0
400044c4:	4a 0c 20 01             	bl.d       4000690c <_fstat_r>

400044c8:	0a 22 00 07             	mov        r2,sp
400044cc:	31 08 32 00             	brlt.d     r0,0,400044fc <__smakebuf_r+0x5c>

400044d0:	01 c2                   	ld_s       r2,[sp,4]
400044d2:	0e 71                   	mov_s      r16,1
400044d4:	04 22 82 0f 00 00 00 f0 	and        r2,r2,0xf000
400044dc:	52 22 7e 83             	bxor.f     0,r2,13
400044e0:	ca 20 22 20             	mov.nz     r16,0
400044e4:	7d 0a 80 0f 00 00 00 80 	breq       r2,0x8000,40004560 <__smakebuf_r+0xc0>

400044ec:	0c 15 02 11             	ldh        r2,[r13,12]
400044f0:	8a 26 10 10             	mov        r14,0x400
400044f4:	8b ba                   	bset_s     r2,r2,11
400044f6:	23 00 20 00             	b.d        40004516 <__smakebuf_r+0x76>

400044fa:	46 b5                   	sth_s      r2,[r13,12]
400044fc:	46 9d                   	ldh_s.x    r2,[r13,12]
400044fe:	2f 23 88 00             	exth       r3,r2
40004502:	8b ba                   	bset_s     r2,r2,11
40004504:	46 b5                   	sth_s      r2,[r13,12]
40004506:	8a 26 10 10             	mov        r14,0x400
4000450a:	e7 bb                   	btst_s     r3,7
4000450c:	0e 70                   	mov_s      r16,0
4000450e:	ca 26 82 1f 00 00 40 00 	mov.nz     r14,64
40004516:	e1 40                   	mov_s      r0,r15
40004518:	ba 0d ef fd             	bl.d       400002d0 <_malloc_r>

4000451c:	c1 41                   	mov_s      r1,r14
4000451e:	3e e8                   	breq_s     r0,0,40004598 <__smakebuf_r+0xf8>

40004520:	0c 15 02 11             	ldh        r2,[r13,12]
40004524:	3c 1f 80 1f 00 40 6c 3c 	st         0x40003c6c,[r15,60]
4000452c:	87 ba                   	bset_s     r2,r2,7
4000452e:	00 a5                   	st_s       r0,[r13,0]
40004530:	46 b5                   	sth_s      r2,[r13,12]
40004532:	04 a5                   	st_s       r0,[r13,16]
40004534:	4d 08 31 20             	brne.d     r16,0,40004580 <__smakebuf_r+0xe0>

40004538:	c5 a5                   	st_s       r14,[r13,20]
4000453a:	4c 14 1f 30             	ld         blink,[sp,76]
4000453e:	3c 14 0d 32             	ld.a       r13,[sp,60]
40004542:	01 c6                   	ld_s       r14,[sp,4]
40004544:	02 c7                   	ld_s       r15,[sp,8]
40004546:	0c 14 10 30             	ld         r16,[sp,12]
4000454a:	e0 7f                   	j_s.d      [blink]
4000454c:	a5 c0                   	add_s      sp,sp,20
4000454e:	e0 78                   	nop_s      
40004550:	20 42                   	mov_s      r2,r1
40004552:	14 19 41 00             	st         1,[r1,20]
40004556:	43 e2                   	add_s      r2,r2,67
40004558:	40 a1                   	st_s       r2,[r1,0]
4000455a:	e3 07 ef ff             	b.d        4000453a <__smakebuf_r+0x9a>

4000455e:	44 a1                   	st_s       r2,[r1,16]
40004560:	4a 85                   	ld_s       r2,[r13,40]
40004562:	8d 0a 81 8f 00 40 48 56 	brne       r2,0x40005648,400044ec <__smakebuf_r+0x4c>

4000456a:	0c 15 02 11             	ldh        r2,[r13,12]
4000456e:	8a 23 10 00             	mov        r3,0x400
40004572:	65 7a                   	or_s       r2,r2,r3
40004574:	73 a5                   	st_s       r3,[r13,76]
40004576:	68 46                   	mov_s      r14,r3
40004578:	9f 07 ef ff             	b.d        40004516 <__smakebuf_r+0x76>

4000457c:	46 b5                   	sth_s      r2,[r13,12]
4000457e:	e0 78                   	nop_s      
40004580:	27 9d                   	ldh_s.x    r1,[r13,14]
40004582:	76 0f 20 01             	bl.d       40006cf4 <_isatty_r>

40004586:	e1 40                   	mov_s      r0,r15
40004588:	59 e8                   	breq_s     r0,0,4000453a <__smakebuf_r+0x9a>

4000458a:	0c 15 02 11             	ldh        r2,[r13,12]
4000458e:	80 ba                   	bset_s     r2,r2,0
40004590:	ab 07 ef ff             	b.d        4000453a <__smakebuf_r+0x9a>

40004594:	46 b5                   	sth_s      r2,[r13,12]
40004596:	e0 78                   	nop_s      
40004598:	46 9d                   	ldh_s.x    r2,[r13,12]
4000459a:	a3 0a 77 82             	bbit1.nt.d r2,9,4000453a <__smakebuf_r+0x9a>

4000459e:	a1 43                   	mov_s      r3,r13
400045a0:	81 ba                   	bset_s     r2,r2,1
400045a2:	43 e3                   	add_s      r3,r3,67
400045a4:	46 b5                   	sth_s      r2,[r13,12]
400045a6:	60 a5                   	st_s       r3,[r13,0]
400045a8:	64 a5                   	st_s       r3,[r13,16]
400045aa:	93 07 ef ff             	b.d        4000453a <__smakebuf_r+0x9a>

400045ae:	14 1d 41 10             	st         1,[r13,20]
400045b2:	e0 78                   	nop_s      

400045b4 <memchr>:
400045b4:	44 20 c3 00             	and        r3,r0,3
400045b8:	6b 7b                   	tst_s      r3,r3
400045ba:	04 01 21 00             	bz.d       400046bc <memchr+0x108>

400045be:	2f 25 47 00             	extb       r5,r1
400045c2:	35 0a 30 00             	breq.d     r2,0,400045f4 <memchr+0x40>

400045c6:	42 22 44 00             	sub        r4,r2,1
400045ca:	60 88                   	ldb_s      r3,[r0,0]
400045cc:	2b 0b 40 01             	breq       r3,r5,400045f6 <memchr+0x42>

400045d0:	61 68                   	add_s      r3,r0,1
400045d2:	0a 24 80 70             	mov        lp_count,r2
400045d6:	e0 78                   	nop_s      
400045d8:	a8 20 80 03             	lp         400045f4 <memchr+0x40>

400045dc:	6b 26 80 70 00 40 f8 45 	sr         0x400045f8,[0x2]
400045e4:	44 23 c2 00             	and        r2,r3,3
400045e8:	25 0a 30 00             	breq.d     r2,0,4000460c <memchr+0x58>

400045ec:	0a 20 c0 00             	mov        r0,r3
400045f0:	4a 26 00 70             	nop        
400045f4:	0c 70                   	mov_s      r0,0
400045f6:	e0 7e                   	j_s        [blink]
400045f8:	40 88                   	ldb_s      r2,[r0,0]
400045fa:	84 77                   	add_s      r4,r4,-1
400045fc:	fb 0a 68 81             	breq.nt.d  r2,r5,400045f6 <memchr+0x42>

40004600:	64 71                   	add_s      r3,r3,1
40004602:	44 23 c2 00             	and        r2,r3,3
40004606:	ed 0a 31 80             	brne.d     r2,0,400045f0 <memchr+0x3c>

4000460a:	60 40                   	mov_s      r0,r3
4000460c:	77 0c 34 01             	brlo.d     r4,4,40004682 <memchr+0xce>

40004610:	c7 b9                   	bmsk_s     r1,r1,7
40004612:	42 24 03 01             	sub        r3,r4,4
40004616:	20 46                   	mov_s      r6,r1
40004618:	2f 23 c2 00             	lsr        r3,r3
4000461c:	2f 23 c2 00             	lsr        r3,r3
40004620:	4a 22 00 00             	mov        r2,0
40004624:	16 22 86 01             	add3       r6,r2,r6
40004628:	16 22 86 01             	add3       r6,r2,r6
4000462c:	15 22 86 01             	add2       r6,r2,r6
40004630:	64 71                   	add_s      r3,r3,1
40004632:	05 26 46 00             	or         r6,r6,r1
40004636:	00 42                   	mov_s      r2,r0
40004638:	0a 20 80 11             	mov        r8,r6
4000463c:	4a 24 00 f4             	mov.f      lp_count,16
40004640:	e8 20 a2 01             	lpnz       4000464c <memchr+0x98>

40004644:	00 20 08 12             	add        r8,r8,r8
40004648:	4a 26 00 70             	nop        
4000464c:	05 20 88 11             	or         r8,r8,r6
40004650:	00 12 06 00             	ld         r6,[r2,0]
40004654:	40 40                   	mov_s      r0,r2
40004656:	07 26 06 02             	xor        r6,r6,r8
4000465a:	02 26 87 0f 01 01 01 01 	sub        r7,r6,0x01010101
40004662:	06 27 86 01             	bic        r6,r7,r6
40004666:	0b 26 80 8f 80 80 80 80 	tst        r6,0x80808080
4000466e:	16 00 22 00             	bnz.d      40004682 <memchr+0xce>

40004672:	44 74                   	add_s      r2,r2,4
40004674:	42 24 04 01             	sub        r4,r4,4
40004678:	40 40                   	mov_s      r0,r2
4000467a:	d9 0b 71 80             	brne.d     r3,1,40004650 <memchr+0x9c>

4000467e:	42 23 43 00             	sub        r3,r3,1
40004682:	75 0c 18 80             	breq.nt    r4,0,400045f4 <memchr+0x40>

40004686:	40 88                   	ldb_s      r2,[r0,0]
40004688:	6f 0a 68 81             	breq.nt.d  r2,r5,400045f6 <memchr+0x42>

4000468c:	41 68                   	add_s      r2,r0,1
4000468e:	0a 24 00 71             	mov        lp_count,r4
40004692:	40 40                   	mov_s      r0,r2
40004694:	11 0c 71 70             	brne.d     lp_count,1,400046a4 <memchr+0xf0>

40004698:	42 24 7c 70             	sub        lp_count,lp_count,1
4000469c:	5b 07 ef ff             	b.d        400045f6 <memchr+0x42>

400046a0:	0c 70                   	mov_s      r0,0
400046a2:	e0 78                   	nop_s      
400046a4:	60 88                   	ldb_s      r3,[r0,0]
400046a6:	53 0b 68 81             	breq.nt.d  r3,r5,400045f6 <memchr+0x42>

400046aa:	44 71                   	add_s      r2,r2,1
400046ac:	40 40                   	mov_s      r0,r2
400046ae:	f9 0c 71 f0             	brne.d     lp_count,1,400046a4 <memchr+0xf0>

400046b2:	42 24 7c 70             	sub        lp_count,lp_count,1
400046b6:	43 07 ef ff             	b.d        400045f6 <memchr+0x42>

400046ba:	0c 70                   	mov_s      r0,0
400046bc:	51 07 ef ff             	b.d        4000460c <memchr+0x58>

400046c0:	40 44                   	mov_s      r4,r2
400046c2:	e0 78                   	nop_s      

400046c4 <_Balloc>:
400046c4:	f1 c0                   	push_s     blink
400046c6:	f4 1c 48 b3             	st.a       r13,[sp,-12]
400046ca:	53 80                   	ld_s       r2,[r0,76]
400046cc:	41 c6                   	st_s       r14,[sp,4]
400046ce:	42 c7                   	st_s       r15,[sp,8]
400046d0:	08 45                   	mov_s      r13,r0
400046d2:	31 0a 30 00             	breq.d     r2,0,40004700 <_Balloc+0x3c>

400046d6:	28 46                   	mov_s      r14,r1
400046d8:	15 22 83 03             	add2       r3,r2,r14
400046dc:	00 83                   	ld_s       r0,[r3,0]
400046de:	20 e8                   	breq_s     r0,0,4000471c <_Balloc+0x58>

400046e0:	00 10 04 00             	ld         r4,[r0,0]
400046e4:	00 1b 00 01             	st         r4,[r3]
400046e8:	10 18 01 00             	st         0,[r0,16]
400046ec:	0c 18 01 00             	st         0,[r0,12]
400046f0:	0c 14 1f 30             	ld         blink,[sp,12]
400046f4:	00 c5                   	ld_s       r13,[sp,0]
400046f6:	01 c6                   	ld_s       r14,[sp,4]
400046f8:	02 c7                   	ld_s       r15,[sp,8]
400046fa:	e0 7f                   	j_s.d      [blink]
400046fc:	a4 c0                   	add_s      sp,sp,16
400046fe:	e0 78                   	nop_s      
40004700:	21 da                   	mov_s      r2,33
40004702:	12 0f e0 00             	bl.d       40006610 <_calloc_r>

40004706:	2c 74                   	mov_s      r1,4
40004708:	13 a5                   	st_s       r0,[r13,76]
4000470a:	0b 78                   	tst_s      r0,r0
4000470c:	cc 07 e2 ff             	bnz.d      400046d8 <_Balloc+0x14>

40004710:	ca 22 02 00             	mov.nz     r2,r0
40004714:	dd 07 ef ff             	b.d        400046f0 <_Balloc+0x2c>

40004718:	0c 70                   	mov_s      r0,0
4000471a:	e0 78                   	nop_s      
4000471c:	ed 71                   	mov_s      r15,1
4000471e:	44 26 fc 97             	and.f      lp_count,r14,31
40004722:	e8 20 e2 01             	lpnz       4000472e <_Balloc+0x6a>

40004726:	00 27 cf 13             	add        r15,r15,r15
4000472a:	4a 26 00 70             	nop        
4000472e:	a1 40                   	mov_s      r0,r13
40004730:	15 26 c2 73 00 00 14 00 	add2       r2,20,r15
40004738:	da 0e e0 00             	bl.d       40006610 <_calloc_r>

4000473c:	2c 71                   	mov_s      r1,1
4000473e:	6c e8                   	breq_s     r0,0,40004714 <_Balloc+0x50>

40004740:	c1 a0                   	st_s       r14,[r0,4]
40004742:	a9 07 ef ff             	b.d        400046e8 <_Balloc+0x24>

40004746:	e2 a0                   	st_s       r15,[r0,8]

40004748 <_Bfree>:
40004748:	07 e9                   	breq_s     r1,0,40004756 <_Bfree+0xe>

4000474a:	53 80                   	ld_s       r2,[r0,76]
4000474c:	61 81                   	ld_s       r3,[r1,4]
4000474e:	75 7a                   	add2_s     r2,r2,r3
40004750:	60 82                   	ld_s       r3,[r2,0]
40004752:	60 a1                   	st_s       r3,[r1,0]
40004754:	20 a2                   	st_s       r1,[r2,0]
40004756:	e0 7e                   	j_s        [blink]

40004758 <__multadd>:
40004758:	f1 c0                   	push_s     blink
4000475a:	ec 1c 48 b3             	st.a       r13,[sp,-20]
4000475e:	41 c6                   	st_s       r14,[sp,4]
40004760:	c4 81                   	ld_s       r14,[r1,16]
40004762:	0c 1c 00 34             	st         r16,[sp,12]
40004766:	10 1c 40 34             	st         r17,[sp,16]
4000476a:	42 c7                   	st_s       r15,[sp,8]
4000476c:	48 26 44 10             	max        r4,r14,1
40004770:	28 45                   	mov_s      r13,r1
40004772:	08 47                   	mov_s      r15,r0
40004774:	48 40                   	mov_s      r8,r2
40004776:	60 46                   	mov_s      r6,r3
40004778:	40 21 05 05             	add        r5,r1,20
4000477c:	00 15 07 00             	ld         r7,[r5,0]
40004780:	01 41                   	mov_s      r1,r8
40004782:	d6 0d 60 01             	bl.d       40007554 <__mulsi3>

40004786:	2f 20 c8 01             	exth       r0,r7
4000478a:	00 26 06 00             	add        r6,r6,r0
4000478e:	e0 40                   	mov_s      r0,r7
40004790:	4a 24 00 f4             	mov.f      lp_count,16
40004794:	e8 20 a2 01             	lpnz       400047a0 <__multadd+0x48>

40004798:	2f 20 02 00             	lsr        r0,r0
4000479c:	4a 26 00 70             	nop        
400047a0:	b6 0d 60 01             	bl.d       40007554 <__mulsi3>

400047a4:	01 41                   	mov_s      r1,r8
400047a6:	c0 47                   	mov_s      r7,r6
400047a8:	53 26 c6 03             	bmsk       r6,r6,15
400047ac:	4a 24 00 f4             	mov.f      lp_count,16
400047b0:	e8 20 a2 01             	lpnz       400047bc <__multadd+0x64>

400047b4:	2f 27 c2 01             	lsr        r7,r7
400047b8:	4a 26 00 70             	nop        
400047bc:	e0 70                   	add_s      r0,r0,r7
400047be:	00 42                   	mov_s      r2,r0
400047c0:	4a 24 00 f4             	mov.f      lp_count,16
400047c4:	e8 20 a2 01             	lpnz       400047d0 <__multadd+0x78>

400047c8:	00 22 82 00             	add        r2,r2,r2
400047cc:	4a 26 00 70             	nop        
400047d0:	00 26 86 00             	add        r6,r6,r2
400047d4:	04 1d 90 01             	st.ab      r6,[r5,4]
400047d8:	10 41                   	mov_s      r17,r0
400047da:	4a 24 00 f4             	mov.f      lp_count,16
400047de:	e8 20 e2 01             	lpnz       400047ea <__multadd+0x92>

400047e2:	2f 21 42 24             	lsr        r17,r17
400047e6:	4a 26 00 70             	nop        
400047ea:	22 46                   	mov_s      r6,r17
400047ec:	91 0c 71 80             	brne.d     r4,1,4000477c <__multadd+0x24>

400047f0:	42 24 44 00             	sub        r4,r4,1
400047f4:	17 09 10 20             	breq       r17,0,4000480a <__multadd+0xb2>

400047f8:	42 85                   	ld_s       r2,[r13,8]
400047fa:	2d 0e 83 10             	brge       r14,r2,40004824 <__multadd+0xcc>

400047fe:	15 25 82 13             	add2       r2,r13,r14
40004802:	14 1a 40 04             	st         r17,[r2,20]
40004806:	c5 71                   	add_s      r14,r14,1
40004808:	c4 a5                   	st_s       r14,[r13,16]
4000480a:	a1 40                   	mov_s      r0,r13
4000480c:	14 14 1f 30             	ld         blink,[sp,20]
40004810:	00 c5                   	ld_s       r13,[sp,0]
40004812:	01 c6                   	ld_s       r14,[sp,4]
40004814:	02 c7                   	ld_s       r15,[sp,8]
40004816:	0c 14 10 30             	ld         r16,[sp,12]
4000481a:	10 14 11 30             	ld         r17,[sp,16]
4000481e:	e0 7f                   	j_s.d      [blink]
40004820:	a6 c0                   	add_s      sp,sp,24
40004822:	e0 78                   	nop_s      
40004824:	21 85                   	ld_s       r1,[r13,4]
40004826:	e1 40                   	mov_s      r0,r15
40004828:	9e 0e ef ff             	bl.d       400046c4 <_Balloc>

4000482c:	24 71                   	add_s      r1,r1,1
4000482e:	44 85                   	ld_s       r2,[r13,16]
40004830:	10 40                   	mov_s      r16,r0
40004832:	40 25 01 13             	add        r1,r13,12
40004836:	15 26 82 70 00 00 08 00 	add2       r2,8,r2
4000483e:	aa 0a 2f fe             	bl.d       40000ae4 <memcpy>

40004842:	0c e0                   	add_s      r0,r0,12
40004844:	04 15 04 10             	ld         r4,[r13,4]
40004848:	53 87                   	ld_s       r2,[r15,76]
4000484a:	15 22 02 01             	add2       r2,r2,r4
4000484e:	00 12 04 00             	ld         r4,[r2,0]
40004852:	00 1d 00 11             	st         r4,[r13]
40004856:	a0 a2                   	st_s       r13,[r2,0]
40004858:	a7 07 ef ff             	b.d        400047fe <__multadd+0xa6>

4000485c:	0a 45                   	mov_s      r13,r16
4000485e:	e0 78                   	nop_s      

40004860 <__s2b>:
40004860:	f1 c0                   	push_s     blink
40004862:	e8 1c 48 b3             	st.a       r13,[sp,-24]
40004866:	41 c6                   	st_s       r14,[sp,4]
40004868:	42 c7                   	st_s       r15,[sp,8]
4000486a:	0c 1c 00 34             	st         r16,[sp,12]
4000486e:	10 1c 40 34             	st         r17,[sp,16]
40004872:	14 1c 80 34             	st         r18,[sp,20]
40004876:	68 47                   	mov_s      r15,r3
40004878:	08 46                   	mov_s      r14,r0
4000487a:	28 45                   	mov_s      r13,r1
4000487c:	50 41                   	mov_s      r17,r2
4000487e:	90 40                   	mov_s      r16,r4
40004880:	40 23 00 02             	add        r0,r3,8
40004884:	06 0d 60 01             	bl.d       40007588 <__divsi3>

40004888:	4a 21 40 02             	mov        r1,9
4000488c:	99 08 b2 00             	brlt.d     r0,2,40004924 <__s2b+0xc4>

40004890:	ac 71                   	mov_s      r5,1
40004892:	2c 70                   	mov_s      r1,0
40004894:	00 25 45 01             	add        r5,r5,r5
40004898:	fd 0d 22 80             	brlt.d     r5,r0,40004894 <__s2b+0x34>

4000489c:	24 71                   	add_s      r1,r1,1
4000489e:	2a 0e ef ff             	bl.d       400046c4 <_Balloc>

400048a2:	c1 40                   	mov_s      r0,r14
400048a4:	14 18 00 04             	st         r16,[r0,20]
400048a8:	10 18 41 00             	st         1,[r0,16]
400048ac:	6d 09 b2 22             	brlt.d     r17,10,40004918 <__s2b+0xb8>

400048b0:	00 41                   	mov_s      r1,r0
400048b2:	40 25 52 12             	add        r18,r13,9
400048b6:	00 25 50 14             	add        r16,r13,r17
400048ba:	4a 45                   	mov_s      r13,r18
400048bc:	01 15 83 14             	ldb.ab     r3,[r13,1]
400048c0:	c1 40                   	mov_s      r0,r14
400048c2:	0a da                   	mov_s      r2,10
400048c4:	96 0e ef ff             	bl.d       40004758 <__multadd>

400048c8:	42 23 03 0c             	sub        r3,r3,48
400048cc:	f1 0d 21 94             	brne.d     r13,r16,400048bc <__s2b+0x5c>

400048d0:	00 41                   	mov_s      r1,r0
400048d2:	00 22 4d 24             	add        r13,r18,r17
400048d6:	42 25 0d 12             	sub        r13,r13,8
400048da:	23 09 c3 23             	brge       r17,r15,400048fa <__s2b+0x9a>

400048de:	bf 67                   	add_s      r15,r15,r13
400048e0:	02 27 4f 14             	sub        r15,r15,r17
400048e4:	01 15 83 14             	ldb.ab     r3,[r13,1]
400048e8:	c1 40                   	mov_s      r0,r14
400048ea:	0a da                   	mov_s      r2,10
400048ec:	6e 0e ef ff             	bl.d       40004758 <__multadd>

400048f0:	42 23 03 0c             	sub        r3,r3,48
400048f4:	f1 0d e1 93             	brne.d     r13,r15,400048e4 <__s2b+0x84>

400048f8:	00 41                   	mov_s      r1,r0
400048fa:	20 40                   	mov_s      r0,r1
400048fc:	18 14 1f 30             	ld         blink,[sp,24]
40004900:	00 c5                   	ld_s       r13,[sp,0]
40004902:	01 c6                   	ld_s       r14,[sp,4]
40004904:	02 c7                   	ld_s       r15,[sp,8]
40004906:	0c 14 10 30             	ld         r16,[sp,12]
4000490a:	10 14 11 30             	ld         r17,[sp,16]
4000490e:	14 14 12 30             	ld         r18,[sp,20]
40004912:	e0 7f                   	j_s.d      [blink]
40004914:	a7 c0                   	add_s      sp,sp,28
40004916:	e0 78                   	nop_s      
40004918:	0a e5                   	add_s      r13,r13,10
4000491a:	c3 07 ef ff             	b.d        400048da <__s2b+0x7a>

4000491e:	4a 21 40 22             	mov        r17,9
40004922:	e0 78                   	nop_s      
40004924:	7b 07 ef ff             	b.d        4000489e <__s2b+0x3e>

40004928:	2c 70                   	mov_s      r1,0
4000492a:	e0 78                   	nop_s      

4000492c <__hi0bits>:
4000492c:	0b 20 80 8f ff ff 00 00 	tst        r0,0xffff0000
40004934:	18 00 22 00             	bnz.d      4000494c <__hi0bits+0x20>

40004938:	c0 7a                   	sub_s.ne   r2,r2,r2
4000493a:	4a 24 00 f4             	mov.f      lp_count,16
4000493e:	e8 20 e2 01             	lpnz       4000494a <__hi0bits+0x1e>

40004942:	00 20 00 00             	add        r0,r0,r0
40004946:	4a 26 00 70             	nop        
4000494a:	10 da                   	mov_s      r2,16
4000494c:	0b 20 80 8f 00 ff 00 00 	tst        r0,0xff000000
40004954:	0a f4                   	bne_s      40004968 <__hi0bits+0x3c>

40004956:	08 e2                   	add_s      r2,r2,8
40004958:	4a 23 00 00             	mov        r3,0
4000495c:	16 23 00 00             	add3       r0,r3,r0
40004960:	16 23 00 00             	add3       r0,r3,r0
40004964:	15 23 00 00             	add2       r0,r3,r0
40004968:	0b 20 80 8f 00 f0 00 00 	tst        r0,0xf0000000
40004970:	08 f4                   	bne_s      40004980 <__hi0bits+0x54>

40004972:	44 74                   	add_s      r2,r2,4
40004974:	4a 23 00 00             	mov        r3,0
40004978:	16 23 00 00             	add3       r0,r3,r0
4000497c:	00 20 00 00             	add        r0,r0,r0
40004980:	0b 20 80 8f 00 c0 00 00 	tst        r0,0xc0000000
40004988:	06 f4                   	bne_s      40004994 <__hi0bits+0x68>

4000498a:	44 72                   	add_s      r2,r2,2
4000498c:	00 20 00 00             	add        r0,r0,r0
40004990:	00 20 00 00             	add        r0,r0,r0
40004994:	11 08 12 00             	brlt       r0,0,400049a4 <__hi0bits+0x78>

40004998:	09 08 9f 07             	bbit1      r0,30,400049a0 <__hi0bits+0x74>

4000499c:	20 d8                   	mov_s      r0,32
4000499e:	e0 7e                   	j_s        [blink]
400049a0:	01 6a                   	add_s      r0,r2,1
400049a2:	e0 7e                   	j_s        [blink]
400049a4:	40 40                   	mov_s      r0,r2
400049a6:	e0 7e                   	j_s        [blink]

400049a8 <__lo0bits>:
400049a8:	40 80                   	ld_s       r2,[r0,0]
400049aa:	44 22 c4 01             	and        r4,r2,7
400049ae:	21 0c 30 00             	breq.d     r4,0,400049cc <__lo0bits+0x24>

400049b2:	00 43                   	mov_s      r3,r0
400049b4:	17 0a 3f 00             	bbit1.d    r2,0,400049ca <__lo0bits+0x22>

400049b8:	0c 70                   	mov_s      r0,0
400049ba:	9d 0a 5f 00             	bbit1      r2,1,40004a54 <__lo0bits+0xac>

400049be:	0c 72                   	mov_s      r0,2
400049c0:	2f 22 82 00             	lsr        r2,r2
400049c4:	2f 22 82 00             	lsr        r2,r2
400049c8:	40 a3                   	st_s       r2,[r3,0]
400049ca:	e0 7e                   	j_s        [blink]
400049cc:	53 22 c4 03             	bmsk       r4,r2,15
400049d0:	0b 24 00 81             	tst        r4,r4
400049d4:	18 00 22 00             	bnz.d      400049ec <__lo0bits+0x44>

400049d8:	c0 78                   	sub_s.ne   r0,r0,r0
400049da:	4a 24 00 f4             	mov.f      lp_count,16
400049de:	e8 20 e2 01             	lpnz       400049ea <__lo0bits+0x42>

400049e2:	2f 22 82 00             	lsr        r2,r2
400049e6:	4a 26 00 70             	nop        
400049ea:	10 d8                   	mov_s      r0,16
400049ec:	53 22 c4 01             	bmsk       r4,r2,7
400049f0:	1f 0c 31 00             	brne.d     r4,0,40004a0e <__lo0bits+0x66>

400049f4:	44 22 c4 03             	and        r4,r2,15
400049f8:	08 e0                   	add_s      r0,r0,8
400049fa:	4a 24 00 f2             	mov.f      lp_count,8
400049fe:	e8 20 e2 01             	lpnz       40004a0a <__lo0bits+0x62>

40004a02:	2f 22 82 00             	lsr        r2,r2
40004a06:	4a 26 00 70             	nop        
40004a0a:	44 22 c4 03             	and        r4,r2,15
40004a0e:	21 0c 31 00             	brne.d     r4,0,40004a2c <__lo0bits+0x84>

40004a12:	44 22 c4 00             	and        r4,r2,3
40004a16:	04 74                   	add_s      r0,r0,4
40004a18:	2f 22 82 00             	lsr        r2,r2
40004a1c:	2f 22 82 00             	lsr        r2,r2
40004a20:	2f 22 82 00             	lsr        r2,r2
40004a24:	2f 22 82 00             	lsr        r2,r2
40004a28:	44 22 c4 00             	and        r4,r2,3
40004a2c:	0f 0c 11 00             	brne       r4,0,40004a3a <__lo0bits+0x92>

40004a30:	04 72                   	add_s      r0,r0,2
40004a32:	2f 22 82 00             	lsr        r2,r2
40004a36:	2f 22 82 00             	lsr        r2,r2
40004a3a:	17 0a 1f 00             	bbit1      r2,0,40004a4e <__lo0bits+0xa6>

40004a3e:	2f 22 82 00             	lsr        r2,r2
40004a42:	4b 7a                   	tst_s      r2,r2
40004a44:	86 07 e1 ff             	bz.d       400049ca <__lo0bits+0x22>

40004a48:	ca 20 21 08             	mov.z      r0,32
40004a4c:	04 71                   	add_s      r0,r0,1
40004a4e:	40 a3                   	st_s       r2,[r3,0]
40004a50:	e0 7e                   	j_s        [blink]
40004a52:	e0 78                   	nop_s      
40004a54:	2f 22 82 00             	lsr        r2,r2
40004a58:	0c 71                   	mov_s      r0,1
40004a5a:	40 a3                   	st_s       r2,[r3,0]
40004a5c:	e0 7e                   	j_s        [blink]
40004a5e:	e0 78                   	nop_s      

40004a60 <__i2b>:
40004a60:	f1 c0                   	push_s     blink
40004a62:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40004a66:	28 45                   	mov_s      r13,r1
40004a68:	5e 0c ef ff             	bl.d       400046c4 <_Balloc>

40004a6c:	2c 71                   	mov_s      r1,1
40004a6e:	a5 a0                   	st_s       r13,[r0,20]
40004a70:	10 18 41 00             	st         1,[r0,16]
40004a74:	04 14 1f 30             	ld         blink,[sp,4]
40004a78:	00 c5                   	ld_s       r13,[sp,0]
40004a7a:	e0 7f                   	j_s.d      [blink]
40004a7c:	a2 c0                   	add_s      sp,sp,8
40004a7e:	e0 78                   	nop_s      

40004a80 <__multiply>:
40004a80:	f1 c0                   	push_s     blink
40004a82:	e4 1c 48 b3             	st.a       r13,[sp,-28]
40004a86:	0c 1c 00 34             	st         r16,[sp,12]
40004a8a:	14 1c 80 34             	st         r18,[sp,20]
40004a8e:	10 12 10 00             	ld         r16,[r2,16]
40004a92:	10 11 12 00             	ld         r18,[r1,16]
40004a96:	42 c7                   	st_s       r15,[sp,8]
40004a98:	18 1c c0 34             	st         r19,[sp,24]
40004a9c:	41 c6                   	st_s       r14,[sp,4]
40004a9e:	10 1c 40 34             	st         r17,[sp,16]
40004aa2:	28 47                   	mov_s      r15,r1
40004aa4:	11 0a 23 24             	brge.d     r18,r16,40004ab4 <__multiply+0x34>

40004aa8:	50 43                   	mov_s      r19,r2
40004aaa:	42 43                   	mov_s      r3,r18
40004aac:	6a 47                   	mov_s      r15,r19
40004aae:	12 42                   	mov_s      r18,r16
40004ab0:	30 43                   	mov_s      r19,r1
40004ab2:	70 40                   	mov_s      r16,r3
40004ab4:	42 87                   	ld_s       r2,[r15,8]
40004ab6:	21 87                   	ld_s       r1,[r15,4]
40004ab8:	00 22 0d 24             	add        r13,r18,r16
40004abc:	50 75                   	cmp_s      r13,r2
40004abe:	0a 0c ef ff             	bl.d       400046c4 <_Balloc>

40004ac2:	c0 21 69 00             	add.gt     r1,r1,1
40004ac6:	40 20 0b 05             	add        r11,r0,20
40004aca:	10 41                   	mov_s      r17,r0
40004acc:	15 23 4e 13             	add2       r14,r11,r13
40004ad0:	0c 23 80 93             	cmp        r11,r14
40004ad4:	10 00 26 00             	bnc.d      40004ae4 <__multiply+0x64>

40004ad8:	ca 23 c5 02             	mov.c      r3,r11
40004adc:	04 1b 11 00             	st.ab      0,[r3,4]
40004ae0:	fd 0b 84 83             	brlo       r3,r14,40004adc <__multiply+0x5c>

40004ae4:	40 23 0c 25             	add        r12,r19,20
40004ae8:	14 e7                   	add_s      r15,r15,20
40004aea:	15 24 10 14             	add2       r16,r12,r16
40004aee:	12 74                   	cmp_s      r12,r16
40004af0:	74 01 26 00             	bnc.d      40004c64 <__multiply+0x1e4>

40004af4:	15 27 8a 14             	add2       r10,r15,r18
40004af8:	04 14 07 14             	ld.ab      r7,[r12,4]
40004afc:	04 27 92 8f 00 00 ff ff 	and.f      r18,r7,0xffff
40004b04:	54 f2                   	beq_s      40004bac <__multiply+0x12c>

40004b06:	e1 46                   	mov_s      r6,r15
40004b08:	61 45                   	mov_s      r5,r11
40004b0a:	0b 00 20 00             	b.d        40004b12 <__multiply+0x92>

40004b0e:	ec 70                   	mov_s      r7,0
40004b10:	80 45                   	mov_s      r5,r4
40004b12:	04 16 08 04             	ld.ab      r8,[r6,4]
40004b16:	00 15 09 00             	ld         r9,[r5,0]
40004b1a:	42 41                   	mov_s      r1,r18
40004b1c:	3a 0a 60 01             	bl.d       40007554 <__mulsi3>

40004b20:	2f 20 08 02             	exth       r0,r8
40004b24:	31 43                   	mov_s      r19,r9
40004b26:	53 21 c9 13             	bmsk       r9,r9,15
40004b2a:	00 21 09 10             	add        r9,r9,r0
40004b2e:	01 40                   	mov_s      r0,r8
40004b30:	4a 24 00 f4             	mov.f      lp_count,16
40004b34:	e8 20 a2 01             	lpnz       40004b40 <__multiply+0xc0>

40004b38:	2f 20 02 00             	lsr        r0,r0
40004b3c:	4a 26 00 70             	nop        
40004b40:	16 0a 60 01             	bl.d       40007554 <__mulsi3>

40004b44:	42 41                   	mov_s      r1,r18
40004b46:	00 27 47 02             	add        r7,r7,r9
40004b4a:	e0 42                   	mov_s      r2,r7
40004b4c:	4a 24 00 f4             	mov.f      lp_count,16
40004b50:	e8 20 a2 01             	lpnz       40004b5c <__multiply+0xdc>

40004b54:	2f 22 82 00             	lsr        r2,r2
40004b58:	4a 26 00 70             	nop        
40004b5c:	4a 24 00 f4             	mov.f      lp_count,16
40004b60:	e8 20 a2 01             	lpnz       40004b6c <__multiply+0xec>

40004b64:	2f 23 c2 24             	lsr        r19,r19
40004b68:	4a 26 00 70             	nop        
40004b6c:	53 27 c3 03             	bmsk       r3,r7,15
40004b70:	a0 44                   	mov_s      r4,r5
40004b72:	62 70                   	add_s      r0,r0,r19
40004b74:	00 20 87 00             	add        r7,r0,r2
40004b78:	e0 42                   	mov_s      r2,r7
40004b7a:	4a 24 00 f4             	mov.f      lp_count,16
40004b7e:	e8 20 e2 01             	lpnz       40004b8a <__multiply+0x10a>

40004b82:	2f 27 c2 01             	lsr        r7,r7
40004b86:	4a 26 00 70             	nop        
40004b8a:	4a 24 00 f4             	mov.f      lp_count,16
40004b8e:	e8 20 e2 01             	lpnz       40004b9a <__multiply+0x11a>

40004b92:	00 22 82 00             	add        r2,r2,r2
40004b96:	4a 26 00 70             	nop        
40004b9a:	45 7b                   	or_s       r3,r3,r2
40004b9c:	75 0e a4 82             	brlo.d     r6,r10,40004b10 <__multiply+0x90>

40004ba0:	04 1c d0 00             	st.ab      r3,[r4,4]
40004ba4:	04 1d c0 01             	st         r7,[r5,4]
40004ba8:	fc 14 07 90             	ld         r7,[r12,-4]
40004bac:	4a 24 00 f4             	mov.f      lp_count,16
40004bb0:	e8 20 a2 01             	lpnz       40004bbc <__multiply+0x13c>

40004bb4:	2f 27 c2 01             	lsr        r7,r7
40004bb8:	4a 26 00 70             	nop        
40004bbc:	a3 0f 30 00             	breq.d     r7,0,40004c5e <__multiply+0x1de>

40004bc0:	0c 20 00 a3             	cmp        r16,r12
40004bc4:	00 13 02 10             	ld         r2,[r11,0]
40004bc8:	61 45                   	mov_s      r5,r11
40004bca:	e1 44                   	mov_s      r4,r15
40004bcc:	40 46                   	mov_s      r6,r2
40004bce:	0d 70                   	mov_s      r8,0
40004bd0:	88 41                   	mov_s      r9,r4
40004bd2:	04 14 03 04             	ld.ab      r3,[r4,4]
40004bd6:	53 22 d2 03             	bmsk       r18,r2,15
40004bda:	e0 41                   	mov_s      r1,r7
40004bdc:	7a 09 60 01             	bl.d       40007554 <__mulsi3>

40004be0:	70 78                   	exth_s     r0,r3
40004be2:	4a 24 00 f4             	mov.f      lp_count,16
40004be6:	e8 20 e2 01             	lpnz       40004bf2 <__multiply+0x172>

40004bea:	2f 26 82 01             	lsr        r6,r6
40004bee:	4a 26 00 70             	nop        
40004bf2:	c0 70                   	add_s      r0,r0,r6
40004bf4:	00 20 02 02             	add        r2,r0,r8
40004bf8:	40 43                   	mov_s      r3,r2
40004bfa:	4a 24 00 f4             	mov.f      lp_count,16
40004bfe:	e8 20 e2 01             	lpnz       40004c0a <__multiply+0x18a>

40004c02:	00 23 c3 00             	add        r3,r3,r3
40004c06:	4a 26 00 70             	nop        
40004c0a:	05 22 d2 20             	or         r18,r18,r3
40004c0e:	00 1d 80 04             	st         r18,[r5]
40004c12:	02 11 00 11             	ldh        r0,[r9,2]
40004c16:	b0 42                   	mov_s      r18,r5
40004c18:	04 15 06 02             	ld.a       r6,[r5,4]
40004c1c:	48 40                   	mov_s      r8,r2
40004c1e:	4a 24 00 f4             	mov.f      lp_count,16
40004c22:	e8 20 e2 01             	lpnz       40004c2e <__multiply+0x1ae>

40004c26:	2f 20 02 12             	lsr        r8,r8
40004c2a:	4a 26 00 70             	nop        
40004c2e:	2a 09 60 01             	bl.d       40007554 <__mulsi3>

40004c32:	e0 41                   	mov_s      r1,r7
40004c34:	53 26 c9 03             	bmsk       r9,r6,15
40004c38:	21 70                   	add_s      r0,r0,r9
40004c3a:	00 20 02 02             	add        r2,r0,r8
40004c3e:	48 40                   	mov_s      r8,r2
40004c40:	4a 24 00 f4             	mov.f      lp_count,16
40004c44:	e8 20 a2 01             	lpnz       40004c50 <__multiply+0x1d0>

40004c48:	2f 20 02 12             	lsr        r8,r8
40004c4c:	4a 26 00 70             	nop        
40004c50:	83 0c a4 82             	brlo.d     r4,r10,40004bd2 <__multiply+0x152>

40004c54:	88 41                   	mov_s      r9,r4
40004c56:	04 1a 80 20             	st         r2,[r18,4]
40004c5a:	0c 20 00 a3             	cmp        r16,r12
40004c5e:	9c 06 ed ff             	bhi.d      40004af8 <__multiply+0x78>

40004c62:	65 74                   	add_s      r11,r11,4
40004c64:	21 0d 52 10             	brlt       r13,1,40004c84 <__multiply+0x204>

40004c68:	fc 16 02 90             	ld         r2,[r14,-4]
40004c6c:	19 0a 31 00             	brne.d     r2,0,40004c84 <__multiply+0x204>

40004c70:	42 26 0e 11             	sub        r14,r14,4
40004c74:	0a 24 40 73             	mov        lp_count,r13
40004c78:	42 25 4d 10             	sub        r13,r13,1
40004c7c:	2d 0c 71 70             	brne.d     lp_count,1,40004ca8 <__multiply+0x228>

40004c80:	42 24 7c 70             	sub        lp_count,lp_count,1
40004c84:	22 40                   	mov_s      r0,r17
40004c86:	10 19 40 23             	st         r13,[r17,16]
40004c8a:	1c 14 1f 30             	ld         blink,[sp,28]
40004c8e:	00 c5                   	ld_s       r13,[sp,0]
40004c90:	01 c6                   	ld_s       r14,[sp,4]
40004c92:	02 c7                   	ld_s       r15,[sp,8]
40004c94:	0c 14 10 30             	ld         r16,[sp,12]
40004c98:	10 14 11 30             	ld         r17,[sp,16]
40004c9c:	14 14 12 30             	ld         r18,[sp,20]
40004ca0:	18 14 13 30             	ld         r19,[sp,24]
40004ca4:	e0 7f                   	j_s.d      [blink]
40004ca6:	a8 c0                   	add_s      sp,sp,32
40004ca8:	fc 16 02 92             	ld.a       r2,[r14,-4]
40004cac:	ec ea                   	brne_s     r2,0,40004c84 <__multiply+0x204>

40004cae:	a9 6d                   	sub_s      r13,r13,1
40004cb0:	f9 0c 71 f0             	brne.d     lp_count,1,40004ca8 <__multiply+0x228>

40004cb4:	42 24 7c 70             	sub        lp_count,lp_count,1
40004cb8:	cf 07 ef ff             	b.d        40004c86 <__multiply+0x206>

40004cbc:	22 40                   	mov_s      r0,r17
40004cbe:	e0 78                   	nop_s      

40004cc0 <__pow5mult>:
40004cc0:	f1 c0                   	push_s     blink
40004cc2:	f0 1c 48 b3             	st.a       r13,[sp,-16]
40004cc6:	42 c7                   	st_s       r15,[sp,8]
40004cc8:	0c 1c 00 34             	st         r16,[sp,12]
40004ccc:	41 c6                   	st_s       r14,[sp,4]
40004cce:	48 45                   	mov_s      r13,r2
40004cd0:	10 40                   	mov_s      r16,r0
40004cd2:	44 25 c2 90             	and.f      r2,r13,3
40004cd6:	84 00 22 00             	bnz.d      40004d58 <__pow5mult+0x98>

40004cda:	28 47                   	mov_s      r15,r1
40004cdc:	2f 25 41 13             	asr        r13,r13
40004ce0:	2f 25 41 13             	asr        r13,r13
40004ce4:	41 0d 10 10             	breq       r13,0,40004d24 <__pow5mult+0x64>

40004ce8:	48 10 0e 20             	ld         r14,[r16,72]
40004cec:	85 0e 10 10             	breq       r14,0,40004d70 <__pow5mult+0xb0>

40004cf0:	15 0d 1f 10             	bbit1      r13,0,40004d04 <__pow5mult+0x44>

40004cf4:	2f 25 41 13             	asr        r13,r13
40004cf8:	16 ed                   	breq_s     r13,0,40004d24 <__pow5mult+0x64>

40004cfa:	00 86                   	ld_s       r0,[r14,0]
40004cfc:	1e e8                   	breq_s     r0,0,40004d38 <__pow5mult+0x78>

40004cfe:	08 46                   	mov_s      r14,r0
40004d00:	f5 0d 1e 90             	bbit0      r13,0,40004cf4 <__pow5mult+0x34>

40004d04:	e1 41                   	mov_s      r1,r15
40004d06:	c1 42                   	mov_s      r2,r14
40004d08:	7a 0d ef ff             	bl.d       40004a80 <__multiply>

40004d0c:	02 40                   	mov_s      r0,r16
40004d0e:	22 ef                   	breq_s     r15,0,40004d50 <__pow5mult+0x90>

40004d10:	61 87                   	ld_s       r3,[r15,4]
40004d12:	4c 10 02 20             	ld         r2,[r16,76]
40004d16:	75 7a                   	add2_s     r2,r2,r3
40004d18:	60 82                   	ld_s       r3,[r2,0]
40004d1a:	60 a7                   	st_s       r3,[r15,0]
40004d1c:	e0 a2                   	st_s       r15,[r2,0]
40004d1e:	d9 07 ef ff             	b.d        40004cf4 <__pow5mult+0x34>

40004d22:	08 47                   	mov_s      r15,r0
40004d24:	e1 40                   	mov_s      r0,r15
40004d26:	10 14 1f 30             	ld         blink,[sp,16]
40004d2a:	00 c5                   	ld_s       r13,[sp,0]
40004d2c:	01 c6                   	ld_s       r14,[sp,4]
40004d2e:	02 c7                   	ld_s       r15,[sp,8]
40004d30:	0c 14 10 30             	ld         r16,[sp,12]
40004d34:	e0 7f                   	j_s.d      [blink]
40004d36:	a5 c0                   	add_s      sp,sp,20
40004d38:	c1 41                   	mov_s      r1,r14
40004d3a:	c1 42                   	mov_s      r2,r14
40004d3c:	46 0d ef ff             	bl.d       40004a80 <__multiply>

40004d40:	02 40                   	mov_s      r0,r16
40004d42:	00 a6                   	st_s       r0,[r14,0]
40004d44:	00 18 01 00             	st         0,[r0]
40004d48:	b9 07 ef ff             	b.d        40004d00 <__pow5mult+0x40>

40004d4c:	08 46                   	mov_s      r14,r0
40004d4e:	e0 78                   	nop_s      
40004d50:	a5 07 ef ff             	b.d        40004cf4 <__pow5mult+0x34>

40004d54:	08 47                   	mov_s      r15,r0
40004d56:	e0 78                   	nop_s      
40004d58:	f0 26 82 70 00 40 f0 d4 	ld.as      r2,[0x4000d4f0,r2]
40004d60:	fa 09 ef ff             	bl.d       40004758 <__multadd>

40004d64:	4a 23 00 00             	mov        r3,0
40004d68:	75 07 ef ff             	b.d        40004cdc <__pow5mult+0x1c>

40004d6c:	08 47                   	mov_s      r15,r0
40004d6e:	e0 78                   	nop_s      
40004d70:	02 40                   	mov_s      r0,r16
40004d72:	56 09 ef ff             	bl.d       400046c4 <_Balloc>

40004d76:	2c 71                   	mov_s      r1,1
40004d78:	8a 22 49 0c             	mov        r2,0x271
40004d7c:	10 18 41 00             	st         1,[r0,16]
40004d80:	45 a0                   	st_s       r2,[r0,20]
40004d82:	48 18 00 20             	st         r0,[r16,72]
40004d86:	08 46                   	mov_s      r14,r0
40004d88:	69 07 ef ff             	b.d        40004cf0 <__pow5mult+0x30>

40004d8c:	00 18 01 00             	st         0,[r0]

40004d90 <__lshift>:
40004d90:	f1 c0                   	push_s     blink
40004d92:	e8 1c 48 b3             	st.a       r13,[sp,-24]
40004d96:	62 81                   	ld_s       r3,[r1,8]
40004d98:	14 1c 80 34             	st         r18,[sp,20]
40004d9c:	10 11 12 00             	ld         r18,[r1,16]
40004da0:	41 c6                   	st_s       r14,[sp,4]
40004da2:	42 c7                   	st_s       r15,[sp,8]
40004da4:	0c 1c 00 34             	st         r16,[sp,12]
40004da8:	10 1c 40 34             	st         r17,[sp,16]
40004dac:	50 41                   	mov_s      r17,r2
40004dae:	4a 24 40 f1             	mov.f      lp_count,5
40004db2:	e8 20 e2 01             	lpnz       40004dbe <__lshift+0x2e>

40004db6:	2f 21 41 24             	asr        r17,r17
40004dba:	4a 26 00 70             	nop        
40004dbe:	28 46                   	mov_s      r14,r1
40004dc0:	00 22 52 24             	add        r18,r18,r17
40004dc4:	48 47                   	mov_s      r15,r2
40004dc6:	40 22 4d 20             	add        r13,r18,1
40004dca:	10 40                   	mov_s      r16,r0
40004dcc:	13 0b 63 03             	brge.d     r3,r13,40004dde <__lshift+0x4e>

40004dd0:	04 11 01 00             	ld         r1,[r1,4]
40004dd4:	00 23 c3 00             	add        r3,r3,r3
40004dd8:	fd 0b 62 83             	brlt.d     r3,r13,40004dd4 <__lshift+0x44>

40004ddc:	24 71                   	add_s      r1,r1,1
40004dde:	ea 08 ef ff             	bl.d       400046c4 <_Balloc>

40004de2:	02 40                   	mov_s      r0,r16
40004de4:	23 09 72 20             	brlt.d     r17,1,40004e06 <__lshift+0x76>

40004de8:	40 20 06 05             	add        r6,r0,20
40004dec:	0a 24 40 74             	mov        lp_count,r17
40004df0:	40 20 04 04             	add        r4,r0,16
40004df4:	6c 70                   	mov_s      r3,0
40004df6:	e0 78                   	nop_s      
40004df8:	a8 20 40 01             	lp         40004e02 <__lshift+0x72>

40004dfc:	04 1c 09 00             	st.a       0,[r4,4]
40004e00:	64 71                   	add_s      r3,r3,1
40004e02:	15 26 c6 00             	add2       r6,r6,r3
40004e06:	10 16 07 10             	ld         r7,[r14,16]
40004e0a:	40 26 04 15             	add        r4,r14,20
40004e0e:	44 27 c2 97             	and.f      r2,r15,31
40004e12:	80 00 21 00             	bz.d       40004e90 <__lshift+0x100>

40004e16:	15 24 c7 01             	add2       r7,r4,r7
40004e1a:	4e 22 0a 08             	rsub       r10,r2,32
40004e1e:	6c 70                   	mov_s      r3,0
40004e20:	88 40                   	mov_s      r8,r4
40004e22:	04 14 05 04             	ld.ab      r5,[r4,4]
40004e26:	c8 41                   	mov_s      r9,r6
40004e28:	44 22 fc 87             	and.f      lp_count,r2,31
40004e2c:	e8 20 a2 01             	lpnz       40004e38 <__lshift+0xa8>

40004e30:	00 25 45 01             	add        r5,r5,r5
40004e34:	4a 26 00 70             	nop        
40004e38:	05 23 43 01             	or         r3,r3,r5
40004e3c:	04 1e d0 00             	st.ab      r3,[r6,4]
40004e40:	00 10 03 10             	ld         r3,[r8,0]
40004e44:	44 22 fc 97             	and.f      lp_count,r10,31
40004e48:	e8 20 a2 01             	lpnz       40004e54 <__lshift+0xc4>

40004e4c:	2f 23 c2 00             	lsr        r3,r3
40004e50:	4a 26 00 70             	nop        
40004e54:	cd 0c c4 81             	brlo       r4,r7,40004e20 <__lshift+0x90>

40004e58:	0d 0b 30 00             	breq.d     r3,0,40004e64 <__lshift+0xd4>

40004e5c:	04 19 c0 10             	st         r3,[r9,4]
40004e60:	40 22 8d 20             	add        r13,r18,2
40004e64:	4c 10 02 20             	ld         r2,[r16,76]
40004e68:	61 86                   	ld_s       r3,[r14,4]
40004e6a:	a9 6d                   	sub_s      r13,r13,1
40004e6c:	75 7a                   	add2_s     r2,r2,r3
40004e6e:	60 82                   	ld_s       r3,[r2,0]
40004e70:	a4 a0                   	st_s       r13,[r0,16]
40004e72:	60 a6                   	st_s       r3,[r14,0]
40004e74:	c0 a2                   	st_s       r14,[r2,0]
40004e76:	18 14 1f 30             	ld         blink,[sp,24]
40004e7a:	00 c5                   	ld_s       r13,[sp,0]
40004e7c:	01 c6                   	ld_s       r14,[sp,4]
40004e7e:	02 c7                   	ld_s       r15,[sp,8]
40004e80:	0c 14 10 30             	ld         r16,[sp,12]
40004e84:	10 14 11 30             	ld         r17,[sp,16]
40004e88:	14 14 12 30             	ld         r18,[sp,20]
40004e8c:	e0 7f                   	j_s.d      [blink]
40004e8e:	a7 c0                   	add_s      sp,sp,28
40004e90:	42 26 06 01             	sub        r6,r6,4
40004e94:	04 14 02 04             	ld.ab      r2,[r4,4]
40004e98:	fd 0c e4 81             	brlo.d     r4,r7,40004e94 <__lshift+0x104>

40004e9c:	04 1e 88 00             	st.a       r2,[r6,4]
40004ea0:	c9 07 ef ff             	b.d        40004e68 <__lshift+0xd8>

40004ea4:	4c 10 02 20             	ld         r2,[r16,76]

40004ea8 <__mcmp>:
40004ea8:	64 80                   	ld_s       r3,[r0,16]
40004eaa:	44 81                   	ld_s       r2,[r1,16]
40004eac:	02 23 83 80             	sub.f      r3,r3,r2
40004eb0:	3a 00 22 00             	bnz.d      40004eea <__mcmp+0x42>

40004eb4:	ca 20 c2 00             	mov.nz     r0,r3
40004eb8:	40 43                   	mov_s      r3,r2
40004eba:	14 e0                   	add_s      r0,r0,20
40004ebc:	00 23 c3 00             	add        r3,r3,r3
40004ec0:	00 23 c3 00             	add        r3,r3,r3
40004ec4:	14 e1                   	add_s      r1,r1,20
40004ec6:	7a 60                   	add_s      r2,r0,r3
40004ec8:	0d 00 20 00             	b.d        40004ed4 <__mcmp+0x2c>

40004ecc:	79 61                   	add_s      r1,r1,r3
40004ece:	e0 78                   	nop_s      
40004ed0:	1d 08 85 00             	brhs.t     r0,r2,40004eec <__mcmp+0x44>

40004ed4:	fc 12 03 82             	ld.a       r3,[r2,-4]
40004ed8:	fc 11 04 82             	ld.a       r4,[r1,-4]
40004edc:	f5 0b 00 81             	breq       r3,r4,40004ed0 <__mcmp+0x28>

40004ee0:	0c 77                   	mov_s      r0,-1
40004ee2:	0c 24 c0 80             	cmp        r4,r3
40004ee6:	ca 20 6e 00             	mov.ls     r0,1
40004eea:	e0 7e                   	j_s        [blink]
40004eec:	0c 70                   	mov_s      r0,0
40004eee:	e0 7e                   	j_s        [blink]

40004ef0 <__mdiff>:
40004ef0:	f1 c0                   	push_s     blink
40004ef2:	f0 1c 48 b3             	st.a       r13,[sp,-16]
40004ef6:	41 c6                   	st_s       r14,[sp,4]
40004ef8:	42 c7                   	st_s       r15,[sp,8]
40004efa:	28 45                   	mov_s      r13,r1
40004efc:	0c 1c 00 34             	st         r16,[sp,12]
40004f00:	48 46                   	mov_s      r14,r2
40004f02:	08 47                   	mov_s      r15,r0
40004f04:	40 41                   	mov_s      r1,r2
40004f06:	a6 0f ef ff             	bl.d       40004ea8 <__mcmp>

40004f0a:	a1 40                   	mov_s      r0,r13
40004f0c:	0b 78                   	tst_s      r0,r0
40004f0e:	78 01 21 00             	bz.d       40005084 <__mdiff+0x194>

40004f12:	14 70                   	cmp_s      r0,0
40004f14:	ca 22 4b 03             	mov.lt     r2,r13
40004f18:	ca 25 8b 13             	mov.lt     r13,r14
40004f1c:	21 85                   	ld_s       r1,[r13,4]
40004f1e:	ca 26 8b 10             	mov.lt     r14,r2
40004f22:	ca 20 2a 20             	mov.ge     r16,0
40004f26:	ca 20 6b 20             	mov.lt     r16,1
40004f2a:	9e 0f af ff             	bl.d       400046c4 <_Balloc>

40004f2e:	e1 40                   	mov_s      r0,r15
40004f30:	10 15 07 10             	ld         r7,[r13,16]
40004f34:	84 86                   	ld_s       r12,[r14,16]
40004f36:	0c 18 00 04             	st         r16,[r0,12]
40004f3a:	40 25 04 15             	add        r4,r13,20
40004f3e:	40 26 01 15             	add        r1,r14,20
40004f42:	15 24 cb 01             	add2       r11,r4,r7
40004f46:	15 21 0c 03             	add2       r12,r1,r12
40004f4a:	40 20 06 05             	add        r6,r0,20
40004f4e:	4c 70                   	mov_s      r2,0
40004f50:	04 11 05 04             	ld.ab      r5,[r1,4]
40004f54:	04 14 03 04             	ld.ab      r3,[r4,4]
40004f58:	a8 40                   	mov_s      r8,r5
40004f5a:	53 25 c5 03             	bmsk       r5,r5,15
40004f5e:	68 41                   	mov_s      r9,r3
40004f60:	cf bb                   	bmsk_s     r3,r3,15
40004f62:	5b 63                   	add_s      r3,r3,r2
40004f64:	02 23 43 01             	sub        r3,r3,r5
40004f68:	60 45                   	mov_s      r5,r3
40004f6a:	4a 24 00 f4             	mov.f      lp_count,16
40004f6e:	e8 20 e2 01             	lpnz       40004f7a <__mdiff+0x8a>

40004f72:	2f 25 41 01             	asr        r5,r5
40004f76:	4a 26 00 70             	nop        
40004f7a:	4a 24 00 f4             	mov.f      lp_count,16
40004f7e:	e8 20 e2 01             	lpnz       40004f8a <__mdiff+0x9a>

40004f82:	2f 21 42 12             	lsr        r9,r9
40004f86:	4a 26 00 70             	nop        
40004f8a:	4a 24 00 f4             	mov.f      lp_count,16
40004f8e:	e8 20 e2 01             	lpnz       40004f9a <__mdiff+0xaa>

40004f92:	2f 20 02 12             	lsr        r8,r8
40004f96:	4a 26 00 70             	nop        
40004f9a:	cf bb                   	bmsk_s     r3,r3,15
40004f9c:	02 21 02 12             	sub        r2,r9,r8
40004fa0:	a0 72                   	add_s      r2,r2,r5
40004fa2:	40 45                   	mov_s      r5,r2
40004fa4:	4a 24 00 f4             	mov.f      lp_count,16
40004fa8:	e8 20 a2 01             	lpnz       40004fb4 <__mdiff+0xc4>

40004fac:	2f 22 81 00             	asr        r2,r2
40004fb0:	4a 26 00 70             	nop        
40004fb4:	4a 24 00 f4             	mov.f      lp_count,16
40004fb8:	e8 20 a2 01             	lpnz       40004fc4 <__mdiff+0xd4>

40004fbc:	00 25 45 01             	add        r5,r5,r5
40004fc0:	4a 26 00 70             	nop        
40004fc4:	05 25 c5 00             	or         r5,r5,r3
40004fc8:	04 1e 50 01             	st.ab      r5,[r6,4]
40004fcc:	85 09 24 83             	brlo.d     r1,r12,40004f50 <__mdiff+0x60>

40004fd0:	0a 23 00 01             	mov        r3,r4
40004fd4:	89 0c c5 02             	brhs.t     r4,r11,4000505c <__mdiff+0x16c>

40004fd8:	42 26 08 01             	sub        r8,r6,4
40004fdc:	04 13 05 04             	ld.ab      r5,[r3,4]
40004fe0:	a8 41                   	mov_s      r9,r5
40004fe2:	4a 24 00 f4             	mov.f      lp_count,16
40004fe6:	e8 20 e2 01             	lpnz       40004ff2 <__mdiff+0x102>

40004fea:	2f 21 42 12             	lsr        r9,r9
40004fee:	4a 26 00 70             	nop        
40004ff2:	53 25 c5 03             	bmsk       r5,r5,15
40004ff6:	00 25 85 00             	add        r5,r5,r2
40004ffa:	a0 42                   	mov_s      r2,r5
40004ffc:	53 25 c5 03             	bmsk       r5,r5,15
40005000:	4a 24 00 f4             	mov.f      lp_count,16
40005004:	e8 20 a2 01             	lpnz       40005010 <__mdiff+0x120>

40005008:	2f 22 81 00             	asr        r2,r2
4000500c:	4a 26 00 70             	nop        
40005010:	21 72                   	add_s      r2,r2,r9
40005012:	48 41                   	mov_s      r9,r2
40005014:	4a 24 00 f4             	mov.f      lp_count,16
40005018:	e8 20 a2 01             	lpnz       40005024 <__mdiff+0x134>

4000501c:	2f 22 81 00             	asr        r2,r2
40005020:	4a 26 00 70             	nop        
40005024:	4a 24 00 f4             	mov.f      lp_count,16
40005028:	e8 20 a2 01             	lpnz       40005034 <__mdiff+0x144>

4000502c:	00 21 49 12             	add        r9,r9,r9
40005030:	4a 26 00 70             	nop        
40005034:	05 25 45 02             	or         r5,r5,r9
40005038:	a5 0b e4 82             	brlo.d     r3,r11,40004fdc <__mdiff+0xec>

4000503c:	04 18 48 11             	st.a       r5,[r8,4]
40005040:	2f 24 0a 01             	not        r4,r4
40005044:	00 23 0b 11             	add        r11,r11,r4
40005048:	2f 23 c2 12             	lsr        r11,r11
4000504c:	2f 23 c2 12             	lsr        r11,r11
40005050:	15 26 cb 72 00 00 04 00 	add2       r11,4,r11
40005058:	00 26 c6 02             	add        r6,r6,r11
4000505c:	13 0d 31 00             	brne.d     r5,0,4000506e <__mdiff+0x17e>

40005060:	42 26 06 01             	sub        r6,r6,4
40005064:	fc 16 02 82             	ld.a       r2,[r6,-4]
40005068:	fd 0a 30 80             	breq.d     r2,0,40005064 <__mdiff+0x174>

4000506c:	e4 77                   	add_s      r7,r7,-1
4000506e:	10 18 c0 01             	st         r7,[r0,16]
40005072:	10 14 1f 30             	ld         blink,[sp,16]
40005076:	00 c5                   	ld_s       r13,[sp,0]
40005078:	01 c6                   	ld_s       r14,[sp,4]
4000507a:	02 c7                   	ld_s       r15,[sp,8]
4000507c:	0c 14 10 30             	ld         r16,[sp,12]
40005080:	e0 7f                   	j_s.d      [blink]
40005082:	a5 c0                   	add_s      sp,sp,20
40005084:	e1 40                   	mov_s      r0,r15
40005086:	42 0e af ff             	bl.d       400046c4 <_Balloc>

4000508a:	2c 70                   	mov_s      r1,0
4000508c:	10 18 41 00             	st         1,[r0,16]
40005090:	e3 07 ef ff             	b.d        40005072 <__mdiff+0x182>

40005094:	14 18 01 00             	st         0,[r0,20]

40005098 <__ulp>:
40005098:	04 21 81 0f f0 7f 00 00 	and        r1,r1,0x7ff00000
400050a0:	02 21 82 0f 40 03 00 00 	sub        r2,r1,0x03400000
400050a8:	0d 0a 52 00             	brlt       r2,1,400050b4 <__ulp+0x1c>

400050ac:	40 41                   	mov_s      r1,r2
400050ae:	0c 70                   	mov_s      r0,0
400050b0:	e0 7e                   	j_s        [blink]
400050b2:	e0 78                   	nop_s      
400050b4:	53 7a                   	neg_s      r2,r2
400050b6:	4a 24 00 f5             	mov.f      lp_count,20
400050ba:	e8 20 e2 01             	lpnz       400050c6 <__ulp+0x2e>

400050be:	2f 22 81 00             	asr        r2,r2
400050c2:	4a 26 00 70             	nop        
400050c6:	2d 0a 32 05             	brlt.d     r2,20,400050f0 <__ulp+0x58>

400050ca:	2c 70                   	mov_s      r1,0
400050cc:	b2 e2                   	cmp_s      r2,50
400050ce:	20 00 29 00             	bgt.d      400050ec <__ulp+0x54>

400050d2:	ca 23 69 00             	mov.gt     r3,1
400050d6:	4e 22 c2 0c             	rsub       r2,r2,51
400050da:	6c 71                   	mov_s      r3,1
400050dc:	44 22 fc 87             	and.f      lp_count,r2,31
400050e0:	e8 20 a2 01             	lpnz       400050ec <__ulp+0x54>

400050e4:	00 23 c3 00             	add        r3,r3,r3
400050e8:	4a 26 00 70             	nop        
400050ec:	60 40                   	mov_s      r0,r3
400050ee:	e0 7e                   	j_s        [blink]
400050f0:	c3 43 08 00 00 00       	mov_s      r3,0x00080000
400050f6:	0c 70                   	mov_s      r0,0
400050f8:	60 41                   	mov_s      r1,r3
400050fa:	44 22 fc 87             	and.f      lp_count,r2,31
400050fe:	e8 20 e2 01             	lpnz       4000510a <__ulp+0x72>

40005102:	2f 21 41 00             	asr        r1,r1
40005106:	4a 26 00 70             	nop        
4000510a:	e0 7e                   	j_s        [blink]

4000510c <__b2d>:
4000510c:	f1 c0                   	push_s     blink
4000510e:	f0 1c 48 b3             	st.a       r13,[sp,-16]
40005112:	a4 80                   	ld_s       r13,[r0,16]
40005114:	41 c6                   	st_s       r14,[sp,4]
40005116:	42 c7                   	st_s       r15,[sp,8]
40005118:	40 20 0f 05             	add        r15,r0,20
4000511c:	15 27 4d 13             	add2       r13,r15,r13
40005120:	fc 15 0e 90             	ld         r14,[r13,-4]
40005124:	0c 1c 00 34             	st         r16,[sp,12]
40005128:	c1 40                   	mov_s      r0,r14
4000512a:	06 08 ef ff             	bl.d       4000492c <__hi0bits>

4000512e:	30 40                   	mov_s      r16,r1
40005130:	4e 20 02 08             	rsub       r2,r0,32
40005134:	00 18 80 20             	st         r2,[r16]
40005138:	71 08 f3 02             	brge.d     r0,11,400051a8 <__b2d+0x9c>

4000513c:	42 25 04 11             	sub        r4,r13,4
40005140:	4e 20 c5 02             	rsub       r5,r0,11
40005144:	c1 46                   	mov_s      r6,r14
40005146:	44 25 fc 87             	and.f      lp_count,r5,31
4000514a:	e8 20 e2 01             	lpnz       40005156 <__b2d+0x4a>

4000514e:	2f 26 82 01             	lsr        r6,r6
40005152:	4a 26 00 70             	nop        
40005156:	90 77                   	cmp_s      r15,r4
40005158:	05 26 83 0f f0 3f 00 00 	or         r3,r6,0x3ff00000
40005160:	1c 00 26 00             	bnc.d      4000517c <__b2d+0x70>

40005164:	ca 24 26 00             	mov.nc     r4,0
40005168:	f8 15 04 90             	ld         r4,[r13,-8]
4000516c:	44 25 fc 87             	and.f      lp_count,r5,31
40005170:	e8 20 a2 01             	lpnz       4000517c <__b2d+0x70>

40005174:	2f 24 02 01             	lsr        r4,r4
40005178:	4a 26 00 70             	nop        
4000517c:	15 e0                   	add_s      r0,r0,21
4000517e:	44 20 fc 87             	and.f      lp_count,r0,31
40005182:	e8 20 e2 01             	lpnz       4000518e <__b2d+0x82>

40005186:	00 26 8e 13             	add        r14,r14,r14
4000518a:	4a 26 00 70             	nop        
4000518e:	05 24 82 03             	or         r2,r4,r14
40005192:	40 40                   	mov_s      r0,r2
40005194:	60 41                   	mov_s      r1,r3
40005196:	10 14 1f 30             	ld         blink,[sp,16]
4000519a:	00 c5                   	ld_s       r13,[sp,0]
4000519c:	01 c6                   	ld_s       r14,[sp,4]
4000519e:	02 c7                   	ld_s       r15,[sp,8]
400051a0:	0c 14 10 30             	ld         r16,[sp,12]
400051a4:	e0 7f                   	j_s.d      [blink]
400051a6:	a5 c0                   	add_s      sp,sp,20
400051a8:	90 77                   	cmp_s      r15,r4
400051aa:	12 00 26 00             	bnc.d      400051ba <__b2d+0xae>

400051ae:	ca 25 26 00             	mov.nc     r5,0
400051b2:	f8 15 05 90             	ld         r5,[r13,-8]
400051b6:	42 25 04 12             	sub        r4,r13,8
400051ba:	00 20 86 8f ff ff f5 ff 	add.f      r6,r0,-11
400051c2:	38 f2                   	beq_s      40005230 <__b2d+0x124>

400051c4:	44 26 fc 87             	and.f      lp_count,r6,31
400051c8:	e8 20 a2 01             	lpnz       400051d4 <__b2d+0xc8>

400051cc:	00 26 8e 13             	add        r14,r14,r14
400051d0:	4a 26 00 70             	nop        
400051d4:	4e 20 c0 0a             	rsub       r0,r0,43
400051d8:	a0 47                   	mov_s      r7,r5
400051da:	44 20 fc 87             	and.f      lp_count,r0,31
400051de:	e8 20 e2 01             	lpnz       400051ea <__b2d+0xde>

400051e2:	2f 27 c2 01             	lsr        r7,r7
400051e6:	4a 26 00 70             	nop        
400051ea:	05 26 8e 1f f0 3f 00 00 	or         r14,r14,0x3ff00000
400051f2:	0c 24 c0 83             	cmp        r4,r15
400051f6:	05 26 c3 11             	or         r3,r14,r7
400051fa:	1e 00 2e 00             	bls.d      40005216 <__b2d+0x10a>

400051fe:	ca 24 2e 00             	mov.ls     r4,0
40005202:	fc 14 04 80             	ld         r4,[r4,-4]
40005206:	44 20 fc 87             	and.f      lp_count,r0,31
4000520a:	e8 20 e2 01             	lpnz       40005216 <__b2d+0x10a>

4000520e:	2f 24 02 01             	lsr        r4,r4
40005212:	4a 26 00 70             	nop        
40005216:	44 26 fc 87             	and.f      lp_count,r6,31
4000521a:	e8 20 e2 01             	lpnz       40005226 <__b2d+0x11a>

4000521e:	00 25 45 01             	add        r5,r5,r5
40005222:	4a 26 00 70             	nop        
40005226:	6f 07 ef ff             	b.d        40005192 <__b2d+0x86>

4000522a:	05 24 42 01             	or         r2,r4,r5
4000522e:	e0 78                   	nop_s      
40005230:	05 26 83 1f f0 3f 00 00 	or         r3,r14,0x3ff00000
40005238:	5b 07 ef ff             	b.d        40005192 <__b2d+0x86>

4000523c:	a0 42                   	mov_s      r2,r5
4000523e:	e0 78                   	nop_s      

40005240 <__d2b>:
40005240:	f1 c0                   	push_s     blink
40005242:	e8 1c 48 b3             	st.a       r13,[sp,-24]
40005246:	41 c6                   	st_s       r14,[sp,4]
40005248:	42 c7                   	st_s       r15,[sp,8]
4000524a:	0c 1c 00 34             	st         r16,[sp,12]
4000524e:	10 1c 40 34             	st         r17,[sp,16]
40005252:	14 1c 80 34             	st         r18,[sp,20]
40005256:	48 47                   	mov_s      r15,r2
40005258:	a2 c1                   	sub_s      sp,sp,8
4000525a:	28 46                   	mov_s      r14,r1
4000525c:	70 42                   	mov_s      r18,r3
4000525e:	90 41                   	mov_s      r17,r4
40005260:	66 0c af ff             	bl.d       400046c4 <_Balloc>

40005264:	2c 71                   	mov_s      r1,1
40005266:	e1 42                   	mov_s      r2,r15
40005268:	53 27 8d 17             	bmsk       r13,r15,30
4000526c:	d3 ba                   	bmsk_s     r2,r2,19
4000526e:	4a 24 00 f5             	mov.f      lp_count,20
40005272:	e8 20 e2 01             	lpnz       4000527e <__d2b+0x3e>

40005276:	2f 25 42 13             	lsr        r13,r13
4000527a:	4a 26 00 70             	nop        
4000527e:	ab 7d                   	tst_s      r13,r13
40005280:	cf 22 22 05             	bset.nz    r2,r2,20
40005284:	41 c2                   	st_s       r2,[sp,4]
40005286:	c1 42                   	mov_s      r2,r14
40005288:	55 0a 30 00             	breq.d     r2,0,400052dc <__d2b+0x9c>

4000528c:	10 40                   	mov_s      r16,r0
4000528e:	82 c0                   	add_s      r0,sp,8
40005290:	f8 18 88 83             	st.a       r14,[r0,-8]
40005294:	16 0f af ff             	bl.d       400049a8 <__lo0bits>

40005298:	83 40                   	mov_s      r0,sp
4000529a:	0a 22 00 80             	mov.f      r2,r0
4000529e:	9c 00 22 00             	bnz.d      40005338 <__d2b+0xf8>

400052a2:	04 14 04 30             	ld         r4,[sp,4]
400052a6:	00 14 04 30             	ld         r4,[sp,0]
400052aa:	01 c3                   	ld_s       r3,[sp,4]
400052ac:	14 18 00 21             	st         r4,[r16,20]
400052b0:	6b 7b                   	tst_s      r3,r3
400052b2:	cd 72                   	mov_s      r14,2
400052b4:	18 18 c0 20             	st         r3,[r16,24]
400052b8:	ca 26 61 10             	mov.z      r14,1
400052bc:	3b 0d 38 10             	breq.t.d   r13,0,400052f6 <__d2b+0xb6>

400052c0:	10 18 80 23             	st         r14,[r16,16]
400052c4:	82 25 d0 1c             	sub        r13,r13,0x433
400052c8:	5d 65                   	add_s      r13,r13,r2
400052ca:	00 1a 40 23             	st         r13,[r18]
400052ce:	4e 22 42 0d             	rsub       r2,r2,53
400052d2:	4b 00 20 00             	b.d        4000531a <__d2b+0xda>

400052d6:	00 19 80 20             	st         r2,[r17]
400052da:	e0 78                   	nop_s      
400052dc:	ce 0e af ff             	bl.d       400049a8 <__lo0bits>

400052e0:	81 c0                   	add_s      r0,sp,4
400052e2:	01 c2                   	ld_s       r2,[sp,4]
400052e4:	10 18 41 20             	st         1,[r16,16]
400052e8:	14 18 80 20             	st         r2,[r16,20]
400052ec:	cd 71                   	mov_s      r14,1
400052ee:	d9 0d 39 90             	brne.nt.d  r13,0,400052c4 <__d2b+0x84>

400052f2:	40 20 02 08             	add        r2,r0,32
400052f6:	15 20 83 23             	add2       r3,r16,r14
400052fa:	04 83                   	ld_s       r0,[r3,16]
400052fc:	82 22 90 0c             	sub        r2,r2,0x432
40005300:	2e 0e af ff             	bl.d       4000492c <__hi0bits>

40005304:	00 1a 80 20             	st         r2,[r18]
40005308:	4a 22 00 00             	mov        r2,0
4000530c:	16 22 8e 03             	add3       r14,r2,r14
40005310:	15 22 8e 03             	add2       r14,r2,r14
40005314:	02 7e                   	sub_s      r14,r14,r0
40005316:	00 19 80 23             	st         r14,[r17]
4000531a:	02 40                   	mov_s      r0,r16
4000531c:	20 14 1f 30             	ld         blink,[sp,32]
40005320:	08 14 0d 32             	ld.a       r13,[sp,8]
40005324:	01 c6                   	ld_s       r14,[sp,4]
40005326:	02 c7                   	ld_s       r15,[sp,8]
40005328:	0c 14 10 30             	ld         r16,[sp,12]
4000532c:	10 14 11 30             	ld         r17,[sp,16]
40005330:	14 14 12 30             	ld         r18,[sp,20]
40005334:	e0 7f                   	j_s.d      [blink]
40005336:	a7 c0                   	add_s      sp,sp,28
40005338:	4e 22 05 08             	rsub       r5,r2,32
4000533c:	80 43                   	mov_s      r3,r4
4000533e:	44 25 fc 87             	and.f      lp_count,r5,31
40005342:	e8 20 e2 01             	lpnz       4000534e <__d2b+0x10e>

40005346:	00 24 04 01             	add        r4,r4,r4
4000534a:	4a 26 00 70             	nop        
4000534e:	00 14 05 30             	ld         r5,[sp,0]
40005352:	44 22 fc 87             	and.f      lp_count,r2,31
40005356:	e8 20 e2 01             	lpnz       40005362 <__d2b+0x122>

4000535a:	2f 23 c2 00             	lsr        r3,r3
4000535e:	4a 26 00 70             	nop        
40005362:	05 24 44 01             	or         r4,r4,r5
40005366:	41 c3                   	st_s       r3,[sp,4]
40005368:	49 07 ef ff             	b.d        400052b0 <__d2b+0x70>

4000536c:	14 18 00 21             	st         r4,[r16,20]

40005370 <__ratio>:
40005370:	f1 c0                   	push_s     blink
40005372:	e8 1c 48 b3             	st.a       r13,[sp,-24]
40005376:	41 c6                   	st_s       r14,[sp,4]
40005378:	42 c7                   	st_s       r15,[sp,8]
4000537a:	14 1c 80 34             	st         r18,[sp,20]
4000537e:	28 45                   	mov_s      r13,r1
40005380:	0c 1c 00 34             	st         r16,[sp,12]
40005384:	10 1c 40 34             	st         r17,[sp,16]
40005388:	10 42                   	mov_s      r18,r0
4000538a:	a2 c1                   	sub_s      sp,sp,8
4000538c:	82 0d ef ff             	bl.d       4000510c <__b2d>

40005390:	83 41                   	mov_s      r1,sp
40005392:	08 46                   	mov_s      r14,r0
40005394:	28 47                   	mov_s      r15,r1
40005396:	a1 40                   	mov_s      r0,r13
40005398:	76 0d ef ff             	bl.d       4000510c <__b2d>

4000539c:	81 c1                   	add_s      r1,sp,4
4000539e:	10 15 07 10             	ld         r7,[r13,16]
400053a2:	10 12 06 20             	ld         r6,[r18,16]
400053a6:	00 14 08 30             	ld         r8,[sp,0]
400053aa:	02 26 c6 01             	sub        r6,r6,r7
400053ae:	4a 27 00 00             	mov        r7,0
400053b2:	16 27 86 01             	add3       r6,r7,r6
400053b6:	15 27 86 01             	add2       r6,r7,r6
400053ba:	04 14 07 30             	ld         r7,[sp,4]
400053be:	00 42                   	mov_s      r2,r0
400053c0:	02 20 c8 11             	sub        r8,r8,r7
400053c4:	00 26 06 02             	add        r6,r6,r8
400053c8:	45 0e 72 00             	brlt.d     r6,1,4000540c <__ratio+0x9c>

400053cc:	20 43                   	mov_s      r3,r1
400053ce:	f1 41                   	mov_s      r17,r15
400053d0:	4a 24 00 f5             	mov.f      lp_count,20
400053d4:	e8 20 a2 01             	lpnz       400053e0 <__ratio+0x70>

400053d8:	00 26 86 01             	add        r6,r6,r6
400053dc:	4a 26 00 70             	nop        
400053e0:	00 21 91 21             	add        r17,r17,r6
400053e4:	2a 47                   	mov_s      r15,r17
400053e6:	c1 40                   	mov_s      r0,r14
400053e8:	ca 0a e0 01             	bl.d       40008eb0 <__divdf3>

400053ec:	e1 41                   	mov_s      r1,r15
400053ee:	20 14 1f 30             	ld         blink,[sp,32]
400053f2:	08 14 0d 32             	ld.a       r13,[sp,8]
400053f6:	01 c6                   	ld_s       r14,[sp,4]
400053f8:	02 c7                   	ld_s       r15,[sp,8]
400053fa:	0c 14 10 30             	ld         r16,[sp,12]
400053fe:	10 14 11 30             	ld         r17,[sp,16]
40005402:	14 14 12 30             	ld         r18,[sp,20]
40005406:	e0 7f                   	j_s.d      [blink]
40005408:	a7 c0                   	add_s      sp,sp,28
4000540a:	e0 78                   	nop_s      
4000540c:	20 45                   	mov_s      r5,r1
4000540e:	4a 24 00 f5             	mov.f      lp_count,20
40005412:	e8 20 e2 01             	lpnz       4000541e <__ratio+0xae>

40005416:	00 26 86 01             	add        r6,r6,r6
4000541a:	4a 26 00 70             	nop        
4000541e:	00 42                   	mov_s      r2,r0
40005420:	02 25 85 01             	sub        r5,r5,r6
40005424:	c3 07 ef ff             	b.d        400053e6 <__ratio+0x76>

40005428:	a0 43                   	mov_s      r3,r5
4000542a:	e0 78                   	nop_s      

4000542c <_mprec_log10>:
4000542c:	f1 c0                   	push_s     blink
4000542e:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40005432:	08 45                   	mov_s      r13,r0
40005434:	29 0d 12 16             	brlt       r13,24,4000545c <_mprec_log10+0x30>

40005438:	0c 70                   	mov_s      r0,0
4000543a:	c3 41 f0 3f 00 00       	mov_s      r1,0x3ff00000
40005440:	c3 43 24 40 00 00       	mov_s      r3,0x40240000
40005446:	06 08 e0 01             	bl.d       40008c48 <__muldf3>

4000544a:	4c 70                   	mov_s      r2,0
4000544c:	80 25 ff 9f             	add.f      r13,r13,-1
40005450:	f8 f5                   	bne_s      40005440 <_mprec_log10+0x14>

40005452:	04 14 1f 30             	ld         blink,[sp,4]
40005456:	00 c5                   	ld_s       r13,[sp,0]
40005458:	e0 7f                   	j_s.d      [blink]
4000545a:	a2 c0                   	add_s      sp,sp,8
4000545c:	16 26 0d 70 00 40 50 d5 	add3       r13,0x4000d550,r0
40005464:	00 85                   	ld_s       r0,[r13,0]
40005466:	21 85                   	ld_s       r1,[r13,4]
40005468:	04 14 1f 30             	ld         blink,[sp,4]
4000546c:	00 c5                   	ld_s       r13,[sp,0]
4000546e:	e0 7f                   	j_s.d      [blink]
40005470:	a2 c0                   	add_s      sp,sp,8
40005472:	e0 78                   	nop_s      

40005474 <__copybits>:
40005474:	10 12 06 00             	ld         r6,[r2,16]
40005478:	42 21 41 00             	sub        r1,r1,1
4000547c:	4a 24 40 f1             	mov.f      lp_count,5
40005480:	e8 20 a2 01             	lpnz       4000548c <__copybits+0x18>

40005484:	2f 21 41 00             	asr        r1,r1
40005488:	4a 26 00 70             	nop        
4000548c:	40 22 03 05             	add        r3,r2,20
40005490:	15 26 47 70 00 00 04 00 	add2       r7,4,r1
40005498:	15 23 86 01             	add2       r6,r3,r6
4000549c:	3d 0b a5 01             	brhs.t.d   r3,r6,400054d8 <__copybits+0x64>

400054a0:	00 27 07 00             	add        r7,r7,r0
400054a4:	42 20 04 01             	sub        r4,r0,4
400054a8:	04 13 05 04             	ld.ab      r5,[r3,4]
400054ac:	fd 0b a4 81             	brlo.d     r3,r6,400054a8 <__copybits+0x34>

400054b0:	04 1c 48 01             	st.a       r5,[r4,4]
400054b4:	8e 22 ff 0a             	rsub       r2,r2,-21
400054b8:	00 26 86 00             	add        r6,r6,r2
400054bc:	2f 26 82 01             	lsr        r6,r6
400054c0:	2f 26 82 01             	lsr        r6,r6
400054c4:	15 26 86 71 00 00 04 00 	add2       r6,4,r6
400054cc:	00 20 80 01             	add        r0,r0,r6
400054d0:	0d 08 c5 01             	brhs.t     r0,r7,400054dc <__copybits+0x68>

400054d4:	04 18 11 00             	st.ab      0,[r0,4]
400054d8:	fd 08 c4 81             	brlo       r0,r7,400054d4 <__copybits+0x60>

400054dc:	e0 7e                   	j_s        [blink]
400054de:	e0 78                   	nop_s      

400054e0 <__any_on>:
400054e0:	44 80                   	ld_s       r2,[r0,16]
400054e2:	20 43                   	mov_s      r3,r1
400054e4:	4a 24 40 f1             	mov.f      lp_count,5
400054e8:	e8 20 a2 01             	lpnz       400054f4 <__any_on+0x14>

400054ec:	2f 23 c1 00             	asr        r3,r3
400054f0:	4a 26 00 70             	nop        
400054f4:	31 0a e3 00             	brge.d     r2,r3,40005524 <__any_on+0x44>

400054f8:	14 e0                   	add_s      r0,r0,20
400054fa:	15 20 82 00             	add2       r2,r0,r2
400054fe:	23 08 85 00             	brhs.t     r0,r2,4000551e <__any_on+0x3e>

40005502:	fc 12 03 80             	ld         r3,[r2,-4]
40005506:	17 0b 38 00             	breq.t.d   r3,0,4000551a <__any_on+0x3a>

4000550a:	42 22 02 01             	sub        r2,r2,4
4000550e:	57 00 20 00             	b.d        40005562 <__any_on+0x82>

40005512:	0c 71                   	mov_s      r0,1
40005514:	fc 12 03 82             	ld.a       r3,[r2,-4]
40005518:	a4 eb                   	brne_s     r3,0,40005560 <__any_on+0x80>

4000551a:	fd 08 84 80             	brlo       r0,r2,40005514 <__any_on+0x34>

4000551e:	0c 70                   	mov_s      r0,0
40005520:	e0 7e                   	j_s        [blink]
40005522:	e0 78                   	nop_s      
40005524:	70 72                   	cmp_s      r2,r3
40005526:	da 07 ec ff             	ble.d      400054fe <__any_on+0x1e>

4000552a:	15 20 c2 00             	add2       r2,r0,r3
4000552e:	44 21 c1 87             	and.f      r1,r1,31
40005532:	e7 f3                   	beq_s      400054fe <__any_on+0x1e>

40005534:	00 12 04 00             	ld         r4,[r2,0]
40005538:	0a 23 00 01             	mov        r3,r4
4000553c:	44 21 fc 87             	and.f      lp_count,r1,31
40005540:	e8 20 a2 01             	lpnz       4000554c <__any_on+0x6c>

40005544:	2f 23 c2 00             	lsr        r3,r3
40005548:	4a 26 00 70             	nop        
4000554c:	44 21 fc 87             	and.f      lp_count,r1,31
40005550:	e8 20 a2 01             	lpnz       4000555c <__any_on+0x7c>

40005554:	00 23 c3 00             	add        r3,r3,r3
40005558:	4a 26 00 70             	nop        
4000555c:	a3 0b 00 81             	breq       r3,r4,400054fe <__any_on+0x1e>

40005560:	0c 71                   	mov_s      r0,1
40005562:	e0 7e                   	j_s        [blink]

40005564 <__fpclassifyd>:
40005564:	05 20 7e 80             	or.f       0,r0,r1
40005568:	0c 00 22 00             	bnz.d      40005574 <__fpclassifyd+0x10>

4000556c:	20 42                   	mov_s      r2,r1
4000556e:	0c 72                   	mov_s      r0,2
40005570:	e0 7e                   	j_s        [blink]
40005572:	e0 78                   	nop_s      
40005574:	6c 71                   	mov_s      r3,1
40005576:	0b 78                   	tst_s      r0,r0
40005578:	0e 00 22 00             	bnz.d      40005586 <__fpclassifyd+0x22>

4000557c:	c0 7b                   	sub_s.ne   r3,r3,r3
4000557e:	f3 0a 80 8f 00 80 00 00 	breq       r2,0x80000000,4000556e <__fpclassifyd+0xa>

40005586:	de ba                   	bmsk_s     r2,r2,30
40005588:	02 22 84 0f 10 00 00 00 	sub        r4,r2,0x00100000
40005590:	0c 24 80 8f df 7f ff ff 	cmp        r4,0x7fdfffff
40005598:	d8 07 ee ff             	bls.d      40005570 <__fpclassifyd+0xc>

4000559c:	ca 20 2e 01             	mov.ls     r0,4
400055a0:	d3 72 0f 00 ff ff       	cmp_s      r2,0x000fffff
400055a6:	cc 07 ee ff             	bls.d      40005570 <__fpclassifyd+0xc>

400055aa:	ca 20 ee 00             	mov.ls     r0,3
400055ae:	0c 71                   	mov_s      r0,1
400055b0:	d3 72 f0 7f 00 00       	cmp_s      r2,0x7ff00000
400055b6:	c0 78                   	sub_s.ne   r0,r0,r0
400055b8:	64 78                   	and_s      r0,r0,r3
400055ba:	e0 7e                   	j_s        [blink]

400055bc <__sread>:
400055bc:	f1 c0                   	push_s     blink
400055be:	fc 1c 48 b3             	st.a       r13,[sp,-4]
400055c2:	28 45                   	mov_s      r13,r1
400055c4:	be 08 e0 00             	bl.d       40006e80 <_read_r>

400055c8:	0e 11 41 01             	ldh.x      r1,[r1,14]
400055cc:	15 08 12 00             	brlt       r0,0,400055e0 <__sread+0x24>

400055d0:	54 85                   	ld_s       r2,[r13,80]
400055d2:	1a 62                   	add_s      r2,r2,r0
400055d4:	54 a5                   	st_s       r2,[r13,80]
400055d6:	04 14 1f 30             	ld         blink,[sp,4]
400055da:	00 c5                   	ld_s       r13,[sp,0]
400055dc:	e0 7f                   	j_s.d      [blink]
400055de:	a2 c0                   	add_s      sp,sp,8
400055e0:	0c 15 02 11             	ldh        r2,[r13,12]
400055e4:	ac ba                   	bclr_s     r2,r2,12
400055e6:	46 b5                   	sth_s      r2,[r13,12]
400055e8:	04 14 1f 30             	ld         blink,[sp,4]
400055ec:	00 c5                   	ld_s       r13,[sp,0]
400055ee:	e0 7f                   	j_s.d      [blink]
400055f0:	a2 c0                   	add_s      sp,sp,8
400055f2:	e0 78                   	nop_s      

400055f4 <__seofread>:
400055f4:	0c 70                   	mov_s      r0,0
400055f6:	e0 7e                   	j_s        [blink]

400055f8 <__swrite>:
400055f8:	f1 c0                   	push_s     blink
400055fa:	f0 1c 48 b3             	st.a       r13,[sp,-16]
400055fe:	0c 11 44 01             	ldh.x      r4,[r1,12]
40005602:	41 c6                   	st_s       r14,[sp,4]
40005604:	42 c7                   	st_s       r15,[sp,8]
40005606:	0c 1c 00 34             	st         r16,[sp,12]
4000560a:	28 45                   	mov_s      r13,r1
4000560c:	10 40                   	mov_s      r16,r0
4000560e:	48 47                   	mov_s      r15,r2
40005610:	15 0c 36 02             	bbit0.t.d  r4,8,40005624 <__swrite+0x2c>

40005614:	68 46                   	mov_s      r14,r3
40005616:	27 99                   	ldh_s.x    r1,[r1,14]
40005618:	4c 70                   	mov_s      r2,0
4000561a:	22 0f a0 00             	bl.d       40006d38 <_lseek_r>

4000561e:	6c 72                   	mov_s      r3,2
40005620:	0c 15 44 11             	ldh.x      r4,[r13,12]
40005624:	50 24 04 03             	bclr       r4,r4,12
40005628:	27 9d                   	ldh_s.x    r1,[r13,14]
4000562a:	0c 1d 04 11             	sth        r4,[r13,12]
4000562e:	02 40                   	mov_s      r0,r16
40005630:	e1 42                   	mov_s      r2,r15
40005632:	c1 43                   	mov_s      r3,r14
40005634:	10 14 1f 30             	ld         blink,[sp,16]
40005638:	00 c5                   	ld_s       r13,[sp,0]
4000563a:	01 c6                   	ld_s       r14,[sp,4]
4000563c:	02 c7                   	ld_s       r15,[sp,8]
4000563e:	0c 14 10 30             	ld         r16,[sp,12]
40005642:	85 07 60 00             	b.d        400065c4 <_write_r>

40005646:	a5 c0                   	add_s      sp,sp,20

40005648 <__sseek>:
40005648:	f1 c0                   	push_s     blink
4000564a:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000564e:	28 45                   	mov_s      r13,r1
40005650:	ea 0e a0 00             	bl.d       40006d38 <_lseek_r>

40005654:	27 99                   	ldh_s.x    r1,[r1,14]
40005656:	0c 15 02 11             	ldh        r2,[r13,12]
4000565a:	1d 08 80 0f ff ff ff ff 	breq       r0,-1,40005674 <__sseek+0x2c>

40005662:	8c ba                   	bset_s     r2,r2,12
40005664:	14 a5                   	st_s       r0,[r13,80]
40005666:	46 b5                   	sth_s      r2,[r13,12]
40005668:	04 14 1f 30             	ld         blink,[sp,4]
4000566c:	00 c5                   	ld_s       r13,[sp,0]
4000566e:	e0 7f                   	j_s.d      [blink]
40005670:	a2 c0                   	add_s      sp,sp,8
40005672:	e0 78                   	nop_s      
40005674:	ac ba                   	bclr_s     r2,r2,12
40005676:	46 b5                   	sth_s      r2,[r13,12]
40005678:	04 14 1f 30             	ld         blink,[sp,4]
4000567c:	00 c5                   	ld_s       r13,[sp,0]
4000567e:	e0 7f                   	j_s.d      [blink]
40005680:	a2 c0                   	add_s      sp,sp,8
40005682:	e0 78                   	nop_s      

40005684 <__sclose>:
40005684:	27 99                   	ldh_s.x    r1,[r1,14]
40005686:	31 00 80 00             	b          400066b4 <_close_r>

4000568a:	e0 78                   	nop_s      

4000568c <strlen>:
4000568c:	45 20 c3 01             	or         r3,r0,7
40005690:	f9 13 02 80             	ld         r2,[r3,-7]
40005694:	fd 13 06 82             	ld.a       r6,[r3,-3]
40005698:	0a 24 80 0f 01 01 01 01 	mov        r4,0x01010101
400056a0:	53 20 7e 80             	bmsk.f     0,r0,1
400056a4:	1f d9                   	mov_s      r1,31
400056a6:	16 79                   	add3_s     r1,r1,r0
400056a8:	13 24 47 00             	bmsk       r7,r4,r1
400056ac:	c7 27 02 01             	xor.nz     r7,r7,r4
400056b0:	e2 b8                   	btst_s     r0,2
400056b2:	2f 25 03 01             	ror        r5,r4
400056b6:	02 22 c1 01             	sub        r1,r2,r7
400056ba:	46 79                   	bic_s      r1,r1,r2
400056bc:	ca 27 01 01             	mov.z      r7,r4
400056c0:	02 26 cc 01             	sub        r12,r6,r7
400056c4:	06 24 8c 11             	bic        r12,r12,r6
400056c8:	c5 24 41 10             	or.z       r12,r12,r1
400056cc:	04 24 4c 11             	and        r12,r12,r5
400056d0:	49 0c 11 10             	brne       r12,0,40005718 <strlen+0x8c>

400056d4:	41 83                   	ld_s       r2,[r3,4]
400056d6:	08 13 06 02             	ld.a       r6,[r3,8]
400056da:	02 22 01 01             	sub        r1,r2,r4
400056de:	46 79                   	bic_s      r1,r1,r2
400056e0:	02 26 0c 01             	sub        r12,r6,r4
400056e4:	06 24 8c 11             	bic        r12,r12,r6
400056e8:	25 7c                   	or_s       r12,r12,r1
400056ea:	04 24 4c 11             	and        r12,r12,r5
400056ee:	74 ec                   	breq_s     r12,0,400056d4 <strlen+0x48>

400056f0:	04 21 41 81             	and.f      r1,r1,r5
400056f4:	c2 23 22 01             	sub.nz     r3,r3,4
400056f8:	ca 21 01 03             	mov.z      r1,r12
400056fc:	e7 b9                   	btst_s     r1,7
400056fe:	02 23 00 00             	sub        r0,r3,r0
40005702:	c0 20 61 00             	add.z      r0,r0,1
40005706:	53 21 fe 83             	bmsk.f     0,r1,15
4000570a:	c0 20 61 00             	add.z      r0,r0,1
4000570e:	53 21 fe 85             	bmsk.f     0,r1,23
40005712:	e0 7f                   	j_s.d      [blink]
40005714:	c0 20 61 00             	add.z      r0,r0,1
40005718:	d9 07 ef ff             	b.d        400056f0 <strlen+0x64>

4000571c:	c0 79                   	sub_s.ne   r1,r1,r1
4000571e:	e0 78                   	nop_s      

40005720 <__sprint_r.part.0>:
40005720:	f1 c0                   	push_s     blink
40005722:	e4 1c 48 b3             	st.a       r13,[sp,-28]
40005726:	79 81                   	ld_s       r3,[r1,100]
40005728:	0c 1c 00 34             	st         r16,[sp,12]
4000572c:	14 1c 80 34             	st         r18,[sp,20]
40005730:	41 c6                   	st_s       r14,[sp,4]
40005732:	42 c7                   	st_s       r15,[sp,8]
40005734:	10 1c 40 34             	st         r17,[sp,16]
40005738:	18 1c c0 34             	st         r19,[sp,24]
4000573c:	30 40                   	mov_s      r16,r1
4000573e:	9d 0b 7e 03             	bbit0.d    r3,13,400057d8 <__sprint_r.part.0+0xb8>

40005742:	50 42                   	mov_s      r18,r2
40005744:	42 82                   	ld_s       r2,[r2,8]
40005746:	10 41                   	mov_s      r17,r0
40005748:	89 0a 30 00             	breq.d     r2,0,400057d0 <__sprint_r.part.0+0xb0>

4000574c:	00 12 13 20             	ld         r19,[r18,0]
40005750:	04 13 0f 20             	ld         r15,[r19,4]
40005754:	00 13 0e 20             	ld         r14,[r19,0]
40005758:	2f 27 c2 13             	lsr        r15,r15
4000575c:	2f 27 c2 13             	lsr        r15,r15
40005760:	f5 70                   	cmp_s      r15,0
40005762:	c2 26 29 11             	sub.gt     r14,r14,4
40005766:	1a 00 29 00             	bgt.d      4000577e <__sprint_r.part.0+0x5e>

4000576a:	ca 25 29 10             	mov.gt     r13,0
4000576e:	59 00 20 00             	b.d        400057c4 <__sprint_r.part.0+0xa4>

40005772:	18 22 c2 03             	sub2       r2,r2,r15
40005776:	e0 78                   	nop_s      
40005778:	a5 71                   	add_s      r13,r13,1
4000577a:	45 0f 40 13             	breq       r15,r13,400057bc <__sprint_r.part.0+0x9c>

4000577e:	04 16 01 12             	ld.a       r1,[r14,4]
40005782:	0a 20 40 04             	mov        r0,r17
40005786:	2e 09 a0 00             	bl.d       400068b0 <_fputwc_r>

4000578a:	02 42                   	mov_s      r2,r16
4000578c:	ed 08 81 8f ff ff ff ff 	brne       r0,-1,40005778 <__sprint_r.part.0+0x58>

40005794:	0c 77                   	mov_s      r0,-1
40005796:	08 1a 01 20             	st         0,[r18,8]
4000579a:	04 1a 01 20             	st         0,[r18,4]
4000579e:	1c 14 1f 30             	ld         blink,[sp,28]
400057a2:	00 c5                   	ld_s       r13,[sp,0]
400057a4:	01 c6                   	ld_s       r14,[sp,4]
400057a6:	02 c7                   	ld_s       r15,[sp,8]
400057a8:	0c 14 10 30             	ld         r16,[sp,12]
400057ac:	10 14 11 30             	ld         r17,[sp,16]
400057b0:	14 14 12 30             	ld         r18,[sp,20]
400057b4:	18 14 13 30             	ld         r19,[sp,24]
400057b8:	e0 7f                   	j_s.d      [blink]
400057ba:	a8 c0                   	add_s      sp,sp,32
400057bc:	08 12 02 20             	ld         r2,[r18,8]
400057c0:	18 22 c2 03             	sub2       r2,r2,r15
400057c4:	08 1a 80 20             	st         r2,[r18,8]
400057c8:	89 0a 31 80             	brne.d     r2,0,40005750 <__sprint_r.part.0+0x30>

400057cc:	40 23 13 22             	add        r19,r19,8
400057d0:	c7 07 ef ff             	b.d        40005796 <__sprint_r.part.0+0x76>

400057d4:	0c 70                   	mov_s      r0,0
400057d6:	e0 78                   	nop_s      
400057d8:	7e 09 80 00             	bl         40006954 <__sfvwrite_r>

400057dc:	bf 07 ef ff             	b.d        4000579a <__sprint_r.part.0+0x7a>

400057e0:	08 1a 01 20             	st         0,[r18,8]

400057e4 <__sprint_r>:
400057e4:	08 12 04 00             	ld         r4,[r2,8]
400057e8:	09 0c 10 00             	breq       r4,0,400057f0 <__sprint_r+0xc>

400057ec:	35 07 cf ff             	b          40005720 <__sprint_r.part.0>

400057f0:	0c 70                   	mov_s      r0,0
400057f2:	04 1a 01 00             	st         0,[r2,4]
400057f6:	e0 7e                   	j_s        [blink]

400057f8 <_vfiprintf_r>:
400057f8:	f1 c0                   	push_s     blink
400057fa:	d0 1c 48 b3             	st.a       r13,[sp,-48]
400057fe:	10 1c 40 34             	st         r17,[sp,16]
40005802:	28 1c c0 35             	st         r23,[sp,40]
40005806:	41 c6                   	st_s       r14,[sp,4]
40005808:	42 c7                   	st_s       r15,[sp,8]
4000580a:	0c 1c 00 34             	st         r16,[sp,12]
4000580e:	14 1c 80 34             	st         r18,[sp,20]
40005812:	18 1c c0 34             	st         r19,[sp,24]
40005816:	1c 1c 00 35             	st         r20,[sp,28]
4000581a:	20 1c 40 35             	st         r21,[sp,32]
4000581e:	24 1c 80 35             	st         r22,[sp,36]
40005822:	2c 1c 00 36             	st         r24,[sp,44]
40005826:	82 24 02 37             	sub        sp,sp,156
4000582a:	44 c3                   	st_s       r3,[sp,16]
4000582c:	28 45                   	mov_s      r13,r1
4000582e:	0a 21 00 a0             	mov.f      r17,r0
40005832:	12 00 21 00             	bz.d       40005842 <_vfiprintf_r+0x4a>

40005836:	50 47                   	mov_s      r23,r2
40005838:	38 11 02 20             	ld         r2,[r17,56]
4000583c:	4b 7a                   	tst_s      r2,r2
4000583e:	a4 0c 01 ff             	blz        40003ce0 <__sinit>

40005842:	66 9d                   	ldh_s.x    r3,[r13,12]
40005844:	2f 22 c8 00             	exth       r2,r3
40005848:	19 0a 7f 03             	bbit1.d    r2,13,40005860 <_vfiprintf_r+0x68>

4000584c:	64 15 04 10             	ld         r4,[r13,100]
40005850:	50 24 44 03             	bclr       r4,r4,13
40005854:	64 1d 00 11             	st         r4,[r13,100]
40005858:	4f 23 42 03             	bset       r2,r3,13
4000585c:	46 b5                   	sth_s      r2,[r13,12]
4000585e:	50 7a                   	exth_s     r2,r2
40005860:	e3 ba                   	btst_s     r2,3
40005862:	00 02 01 00             	bz         40005a60 <_vfiprintf_r+0x268>

40005866:	64 85                   	ld_s       r3,[r13,16]
40005868:	6b 7b                   	tst_s      r3,r3
4000586a:	f8 01 21 00             	bz.d       40005a60 <_vfiprintf_r+0x268>

4000586e:	44 22 82 06             	and        r2,r2,26
40005872:	8a e2                   	cmp_s      r2,10
40005874:	08 02 01 00             	bz         40005a7c <_vfiprintf_r+0x284>

40005878:	55 24 d8 35             	add2       r24,sp,23
4000587c:	83 45                   	mov_s      r5,sp
4000587e:	30 1c 01 30             	st         0,[sp,48]
40005882:	80 25 c1 06             	add        r5,r5,91
40005886:	28 1c 00 36             	st         r24,[sp,40]
4000588a:	02 20 46 31             	sub        r6,r24,r5
4000588e:	2c 1c 01 30             	st         0,[sp,44]
40005892:	0c 1c 40 31             	st         r5,[sp,12]
40005896:	18 1c 01 30             	st         0,[sp,24]
4000589a:	14 1c 01 30             	st         0,[sp,20]
4000589e:	1c 1c 80 31             	st         r6,[sp,28]
400058a2:	03 44                   	mov_s      r4,r24
400058a4:	00 17 82 20             	ldb        r2,[r23,0]
400058a8:	4b 7a                   	tst_s      r2,r2
400058aa:	5a 00 21 00             	bz.d       40005902 <_vfiprintf_r+0x10a>

400058ae:	f2 40                   	mov_s      r16,r23
400058b0:	a5 e2                   	cmp_s      r2,37
400058b2:	a0 00 41 00             	bz         40006150 <_vfiprintf_r+0x958>

400058b6:	40 27 43 20             	add        r3,r23,1
400058ba:	13 00 20 00             	b.d        400058ca <_vfiprintf_r+0xd2>

400058be:	70 40                   	mov_s      r16,r3
400058c0:	17 0d 30 00             	breq.d     r5,0,400058d6 <_vfiprintf_r+0xde>

400058c4:	02 20 d2 a5             	sub.f      r18,r16,r23
400058c8:	70 40                   	mov_s      r16,r3
400058ca:	01 13 85 04             	ldb.ab     r5,[r3,1]
400058ce:	f5 0d 71 89             	brne.d     r5,37,400058c0 <_vfiprintf_r+0xc8>

400058d2:	02 20 d2 a5             	sub.f      r18,r16,r23
400058d6:	17 f2                   	beq_s      40005902 <_vfiprintf_r+0x10a>

400058d8:	0c c3                   	ld_s       r3,[sp,48]
400058da:	0b c2                   	ld_s       r2,[sp,44]
400058dc:	42 73                   	add_s      r3,r3,r18
400058de:	44 71                   	add_s      r2,r2,1
400058e0:	00 1c c0 05             	st         r23,[r4]
400058e4:	04 1c 80 04             	st         r18,[r4,4]
400058e8:	4c c3                   	st_s       r3,[sp,48]
400058ea:	4b c2                   	st_s       r2,[sp,44]
400058ec:	87 e2                   	cmp_s      r2,7
400058ee:	70 00 29 00             	bgt.d      4000595c <_vfiprintf_r+0x164>

400058f2:	c0 24 2c 02             	add.le     r4,r4,8
400058f6:	14 14 05 30             	ld         r5,[sp,20]
400058fa:	00 22 52 21             	add        r18,r18,r5
400058fe:	14 1c 80 34             	st         r18,[sp,20]
40005902:	00 10 82 20             	ldb        r2,[r16,0]
40005906:	4b 7a                   	tst_s      r2,r2
40005908:	0c 07 21 00             	bz.d       40006014 <_vfiprintf_r+0x81c>

4000590c:	4c 70                   	mov_s      r2,0
4000590e:	40 20 57 20             	add        r23,r16,1
40005912:	23 1c 82 30             	stb        r2,[sp,35]
40005916:	4d 70                   	mov_s      r10,0
40005918:	01 10 82 20             	ldb        r2,[r16,1]
4000591c:	ce 77                   	mov_s      r22,-1
4000591e:	0e 70                   	mov_s      r16,0
40005920:	6e 70                   	mov_s      r19,0
40005922:	e6 71                   	add_s      r23,r23,1
40005924:	42 22 03 08             	sub        r3,r2,32
40005928:	29 0e c5 70 00 00 58 00 	brhs.t     88,r3,40005950 <_vfiprintf_r+0x158>

40005930:	4b 7a                   	tst_s      r2,r2
40005932:	e4 06 21 00             	bz.d       40006014 <_vfiprintf_r+0x81c>

40005936:	23 1c 82 32             	stb        r10,[sp,35]
4000593a:	6d c2                   	stb_s      r2,[sp,52]
4000593c:	4e 71                   	mov_s      r18,1
4000593e:	4c 70                   	mov_s      r2,0
40005940:	8e 71                   	mov_s      r20,1
40005942:	23 1c 82 30             	stb        r2,[sp,35]
40005946:	40 24 15 3d             	add        r21,sp,52
4000594a:	17 02 20 00             	b.d        40005b5e <_vfiprintf_r+0x366>

4000594e:	ce 70                   	mov_s      r22,0
40005950:	f0 26 c3 70 00 40 18 d6 	ld.as      r3,[0x4000d618,r3]
40005958:	00 7b                   	j_s        [r3]
4000595a:	e0 78                   	nop_s      
4000595c:	6b 7b                   	tst_s      r3,r3
4000595e:	0c 02 42 00             	bnz        40006368 <_vfiprintf_r+0xb70>

40005962:	2c 1c 01 30             	st         0,[sp,44]
40005966:	93 07 ef ff             	b.d        400058f6 <_vfiprintf_r+0xfe>

4000596a:	03 44                   	mov_s      r4,r24
4000596c:	45 23 13 24             	or         r19,r19,16
40005970:	51 23 40 a1             	btst       r19,5
40005974:	7c 02 22 00             	bnz.d      40005bf0 <_vfiprintf_r+0x3f8>

40005978:	10 14 05 30             	ld         r5,[sp,16]
4000597c:	51 23 00 a1             	btst       r19,4
40005980:	64 05 22 00             	bnz.d      40005ee4 <_vfiprintf_r+0x6ec>

40005984:	4c 71                   	mov_s      r2,1
40005986:	51 23 80 a1             	btst       r19,6
4000598a:	5c 05 21 00             	bz.d       40005ee4 <_vfiprintf_r+0x6ec>

4000598e:	10 14 06 30             	ld         r6,[sp,16]
40005992:	4c 71                   	mov_s      r2,1
40005994:	00 16 0e 01             	ldh        r14,[r6,0]
40005998:	ed 70                   	mov_s      r15,0
4000599a:	c4 74                   	add_s      r6,r6,4
4000599c:	2d 00 20 00             	b.d        400059c8 <_vfiprintf_r+0x1d0>

400059a0:	10 1c 80 31             	st         r6,[sp,16]
400059a4:	45 23 13 24             	or         r19,r19,16
400059a8:	51 23 40 a1             	btst       r19,5
400059ac:	20 01 21 00             	bz.d       40005acc <_vfiprintf_r+0x2d4>

400059b0:	10 14 06 30             	ld         r6,[sp,16]
400059b4:	4a 22 00 00             	mov        r2,0
400059b8:	00 16 0e 00             	ld         r14,[r6,0]
400059bc:	04 16 0f 00             	ld         r15,[r6,4]
400059c0:	40 26 05 02             	add        r5,r6,8
400059c4:	10 1c 40 31             	st         r5,[sp,16]
400059c8:	6c 70                   	mov_s      r3,0
400059ca:	23 1c c2 30             	stb        r3,[sp,35]
400059ce:	ac 70                   	mov_s      r5,0
400059d0:	d6 70                   	cmp_s      r22,0
400059d2:	d0 23 ea 21             	bclr.ge    r19,r19,7
400059d6:	13 0e 31 20             	brne.d     r22,0,400059e6 <_vfiprintf_r+0x1ee>

400059da:	54 71                   	cmp_s      r2,1
400059dc:	05 26 fe 93             	or.f       0,r14,r15
400059e0:	bc 07 21 00             	bz.d       4000619c <_vfiprintf_r+0x9a4>

400059e4:	54 71                   	cmp_s      r2,1
400059e6:	ec 00 61 00             	bz.d       400062d0 <_vfiprintf_r+0xad8>

400059ea:	54 72                   	cmp_s      r2,2
400059ec:	83 42                   	mov_s      r2,sp
400059ee:	08 01 21 00             	bz.d       40005af4 <_vfiprintf_r+0x2fc>

400059f2:	5b e2                   	add_s      r2,r2,91
400059f4:	e9 43                   	mov_s      r11,r15
400059f6:	2f 23 c2 12             	lsr        r11,r11
400059fa:	2f 23 c2 12             	lsr        r11,r11
400059fe:	2f 23 c2 12             	lsr        r11,r11
40005a02:	50 45                   	mov_s      r21,r2
40005a04:	c1 43                   	mov_s      r3,r14
40005a06:	e1 40                   	mov_s      r0,r15
40005a08:	c9 44                   	mov_s      r12,r14
40005a0a:	44 20 c0 01             	and        r0,r0,7
40005a0e:	2f 20 03 00             	ror        r0,r0
40005a12:	2f 20 03 00             	ror        r0,r0
40005a16:	2f 20 03 00             	ror        r0,r0
40005a1a:	2f 24 02 13             	lsr        r12,r12
40005a1e:	2f 24 02 13             	lsr        r12,r12
40005a22:	2f 24 02 13             	lsr        r12,r12
40005a26:	c2 bb                   	bmsk_s     r3,r3,2
40005a28:	30 e3                   	add_s      r3,r3,48
40005a2a:	00 1d c2 20             	stb        r3,[r21]
40005a2e:	05 20 0e 03             	or         r14,r0,r12
40005a32:	69 47                   	mov_s      r15,r11
40005a34:	05 26 fe 93             	or.f       0,r14,r15
40005a38:	bc 07 e2 ff             	bnz.d      400059f4 <_vfiprintf_r+0x1fc>

40005a3c:	42 25 42 20             	sub        r2,r21,1
40005a40:	51 23 00 a0             	btst       r19,0
40005a44:	0a 01 21 00             	bz.d       40005b4e <_vfiprintf_r+0x356>

40005a48:	aa 43                   	mov_s      r11,r21
40005a4a:	b0 e3                   	cmp_s      r3,48
40005a4c:	02 01 01 00             	bz         40005b4e <_vfiprintf_r+0x356>

40005a50:	50 45                   	mov_s      r21,r2
40005a52:	02 20 94 30             	sub        r20,r24,r2
40005a56:	30 da                   	mov_s      r2,48
40005a58:	fb 00 20 00             	b.d        40005b52 <_vfiprintf_r+0x35a>

40005a5c:	ff 1b 82 90             	stb        r2,[r11,-1]
40005a60:	22 40                   	mov_s      r0,r17
40005a62:	72 0b 6f fe             	bl.d       400025d0 <__swsetup_r>

40005a66:	a1 41                   	mov_s      r1,r13
40005a68:	96 e8                   	brne_s     r0,0,40005a94 <_vfiprintf_r+0x29c>

40005a6a:	0c 15 02 11             	ldh        r2,[r13,12]
40005a6e:	44 22 82 06             	and        r2,r2,26
40005a72:	8a e2                   	cmp_s      r2,10
40005a74:	08 06 e2 ff             	bnz.d      4000587c <_vfiprintf_r+0x84>

40005a78:	55 24 d8 35             	add2       r24,sp,23
40005a7c:	47 9d                   	ldh_s.x    r2,[r13,14]
40005a7e:	54 70                   	cmp_s      r2,0
40005a80:	f8 05 eb ff             	blt.d      40005878 <_vfiprintf_r+0x80>

40005a84:	04 c3                   	ld_s       r3,[sp,16]
40005a86:	22 40                   	mov_s      r0,r17
40005a88:	a1 41                   	mov_s      r1,r13
40005a8a:	a2 0a 60 00             	bl.d       40006528 <__sbprintf>

40005a8e:	e2 42                   	mov_s      r2,r23
40005a90:	03 f0                   	b_s        40005a96 <_vfiprintf_r+0x29e>

40005a92:	e0 78                   	nop_s      
40005a94:	0c 77                   	mov_s      r0,-1
40005a96:	cc 14 1f 30             	ld         blink,[sp,204]
40005a9a:	9c 14 0d 32             	ld.a       r13,[sp,156]
40005a9e:	01 c6                   	ld_s       r14,[sp,4]
40005aa0:	02 c7                   	ld_s       r15,[sp,8]
40005aa2:	0c 14 10 30             	ld         r16,[sp,12]
40005aa6:	10 14 11 30             	ld         r17,[sp,16]
40005aaa:	14 14 12 30             	ld         r18,[sp,20]
40005aae:	18 14 13 30             	ld         r19,[sp,24]
40005ab2:	1c 14 14 30             	ld         r20,[sp,28]
40005ab6:	20 14 15 30             	ld         r21,[sp,32]
40005aba:	24 14 16 30             	ld         r22,[sp,36]
40005abe:	28 14 17 30             	ld         r23,[sp,40]
40005ac2:	2c 14 18 30             	ld         r24,[sp,44]
40005ac6:	e0 7f                   	j_s.d      [blink]
40005ac8:	ad c0                   	add_s      sp,sp,52
40005aca:	e0 78                   	nop_s      
40005acc:	51 23 00 a1             	btst       r19,4
40005ad0:	26 04 22 00             	bnz.d      40005ef6 <_vfiprintf_r+0x6fe>

40005ad4:	4c 70                   	mov_s      r2,0
40005ad6:	51 23 80 a1             	btst       r19,6
40005ada:	1c 04 21 00             	bz.d       40005ef4 <_vfiprintf_r+0x6fc>

40005ade:	10 14 05 30             	ld         r5,[sp,16]
40005ae2:	4c 70                   	mov_s      r2,0
40005ae4:	00 15 0e 01             	ldh        r14,[r5,0]
40005ae8:	ed 70                   	mov_s      r15,0
40005aea:	a4 74                   	add_s      r5,r5,4
40005aec:	dd 06 ef ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

40005af0:	10 1c 40 31             	st         r5,[sp,16]
40005af4:	18 14 06 30             	ld         r6,[sp,24]
40005af8:	c1 43                   	mov_s      r3,r14
40005afa:	c3 bb                   	bmsk_s     r3,r3,3
40005afc:	c0 73                   	add_s      r3,r3,r6
40005afe:	80 8b                   	ldb_s      r12,[r3,0]
40005b00:	50 45                   	mov_s      r21,r2
40005b02:	e1 43                   	mov_s      r3,r15
40005b04:	e9 43                   	mov_s      r11,r15
40005b06:	2f 23 c2 00             	lsr        r3,r3
40005b0a:	2f 23 c2 00             	lsr        r3,r3
40005b0e:	2f 23 c2 00             	lsr        r3,r3
40005b12:	2f 23 c2 00             	lsr        r3,r3
40005b16:	4a 24 00 f7             	mov.f      lp_count,28
40005b1a:	e8 20 e2 01             	lpnz       40005b26 <_vfiprintf_r+0x32e>

40005b1e:	00 23 cb 12             	add        r11,r11,r11
40005b22:	4a 26 00 70             	nop        
40005b26:	c1 40                   	mov_s      r0,r14
40005b28:	00 1d 02 23             	stb        r12,[r21]
40005b2c:	2f 20 02 00             	lsr        r0,r0
40005b30:	2f 20 02 00             	lsr        r0,r0
40005b34:	2f 20 02 00             	lsr        r0,r0
40005b38:	2f 20 02 00             	lsr        r0,r0
40005b3c:	68 47                   	mov_s      r15,r3
40005b3e:	05 23 0e 10             	or         r14,r11,r0
40005b42:	05 26 fe 93             	or.f       0,r14,r15
40005b46:	b0 07 e2 ff             	bnz.d      40005af4 <_vfiprintf_r+0x2fc>

40005b4a:	42 25 42 20             	sub        r2,r21,1
40005b4e:	02 20 54 35             	sub        r20,r24,r21
40005b52:	08 24 92 25             	max        r18,r20,r22
40005b56:	0b 25 40 81             	tst        r5,r5
40005b5a:	c0 22 62 20             	add.nz     r18,r18,1
40005b5e:	0d 0b 7e 20             	bbit0.d    r19,1,40005b68 <_vfiprintf_r+0x370>

40005b62:	44 23 8c 20             	and        r12,r19,2
40005b66:	46 72                   	add_s      r18,r18,2
40005b68:	04 23 8b af 00 00 84 00 	and.f      r11,r19,132
40005b70:	c8 03 22 00             	bnz.d      40005f38 <_vfiprintf_r+0x740>

40005b74:	0b c3                   	ld_s       r3,[sp,44]
40005b76:	02 20 85 24             	sub        r5,r16,r18
40005b7a:	b4 70                   	cmp_s      r5,0
40005b7c:	bc 03 2c 00             	ble.d      40005f38 <_vfiprintf_r+0x740>

40005b80:	0c c0                   	ld_s       r0,[sp,48]
40005b82:	21 0d 7b 04             	brge.t.d   r5,17,40005ba0 <_vfiprintf_r+0x3a8>

40005b86:	0b c1                   	ld_s       r1,[sp,44]
40005b88:	45 00 20 00             	b.d        40005bcc <_vfiprintf_r+0x3d4>

40005b8c:	64 71                   	add_s      r3,r3,1
40005b8e:	e0 78                   	nop_s      
40005b90:	62 69                   	add_s      r3,r1,2
40005b92:	40 24 04 02             	add        r4,r4,8
40005b96:	40 41                   	mov_s      r1,r2
40005b98:	42 25 05 04             	sub        r5,r5,16
40005b9c:	31 0d 52 04             	brlt       r5,17,40005bcc <_vfiprintf_r+0x3d4>

40005ba0:	41 69                   	add_s      r2,r1,1
40005ba2:	10 e0                   	add_s      r0,r0,16
40005ba4:	00 1c 80 0f 00 40 8c d7 	st         0x4000d78c,[r4]
40005bac:	04 1c 01 04             	st         16,[r4,4]
40005bb0:	4c c0                   	st_s       r0,[sp,48]
40005bb2:	e1 0a 3a 82             	brlt.nt.d  r2,8,40005b90 <_vfiprintf_r+0x398>

40005bb6:	4b c2                   	st_s       r2,[sp,44]
40005bb8:	0b 78                   	tst_s      r0,r0
40005bba:	50 03 02 00             	bnz        40005f08 <_vfiprintf_r+0x710>

40005bbe:	42 25 05 04             	sub        r5,r5,16
40005bc2:	2c 70                   	mov_s      r1,0
40005bc4:	6c 71                   	mov_s      r3,1
40005bc6:	dd 0d 73 84             	brge.d     r5,17,40005ba0 <_vfiprintf_r+0x3a8>

40005bca:	03 44                   	mov_s      r4,r24
40005bcc:	a0 70                   	add_s      r0,r0,r5
40005bce:	00 1c 80 0f 00 40 8c d7 	st         0x4000d78c,[r4]
40005bd6:	04 1c 40 01             	st         r5,[r4,4]
40005bda:	4c c0                   	st_s       r0,[sp,48]
40005bdc:	87 e3                   	cmp_s      r3,7
40005bde:	e0 06 29 00             	bgt.d      400062bc <_vfiprintf_r+0xac4>

40005be2:	4b c3                   	st_s       r3,[sp,44]
40005be4:	40 24 04 02             	add        r4,r4,8
40005be8:	21 6b                   	add_s      r1,r3,1
40005bea:	57 03 20 00             	b.d        40005f3e <_vfiprintf_r+0x746>

40005bee:	00 45                   	mov_s      r5,r0
40005bf0:	4c 71                   	mov_s      r2,1
40005bf2:	40 25 06 02             	add        r6,r5,8
40005bf6:	00 15 0e 00             	ld         r14,[r5,0]
40005bfa:	04 15 0f 00             	ld         r15,[r5,4]
40005bfe:	cd 05 ef ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

40005c02:	10 1c 80 31             	st         r6,[sp,16]
40005c06:	e0 78                   	nop_s      
40005c08:	10 1c 00 35             	st         r20,[sp,16]
40005c0c:	4e 20 10 20             	rsub       r16,r16,0
40005c10:	45 23 13 21             	or         r19,r19,4
40005c14:	0f 05 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005c18:	00 17 82 20             	ldb        r2,[r23,0]
40005c1c:	4f 23 d3 21             	bset       r19,r19,7
40005c20:	03 05 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005c24:	00 17 82 20             	ldb        r2,[r23,0]
40005c28:	4a 20 00 20             	mov        r16,0
40005c2c:	42 22 03 0c             	sub        r3,r2,48
40005c30:	01 17 82 24             	ldb.ab     r2,[r23,1]
40005c34:	15 20 10 24             	add2       r16,r16,r16
40005c38:	14 23 10 04             	add1       r16,r3,r16
40005c3c:	42 22 03 0c             	sub        r3,r2,48
40005c40:	f1 0b 94 82             	brlo       r3,10,40005c30 <_vfiprintf_r+0x438>

40005c44:	42 22 03 08             	sub        r3,r2,32
40005c48:	e1 04 cf ff             	b          40005928 <_vfiprintf_r+0x130>

40005c4c:	23 1c 82 32             	stb        r10,[sp,35]
40005c50:	45 23 13 24             	or         r19,r19,16
40005c54:	51 23 40 a1             	btst       r19,5
40005c58:	74 01 21 00             	bz.d       40005dcc <_vfiprintf_r+0x5d4>

40005c5c:	10 14 06 30             	ld         r6,[sp,16]
40005c60:	04 16 02 00             	ld         r2,[r6,4]
40005c64:	00 16 0e 00             	ld         r14,[r6,0]
40005c68:	40 26 05 02             	add        r5,r6,8
40005c6c:	10 1c 40 31             	st         r5,[sp,16]
40005c70:	48 47                   	mov_s      r15,r2
40005c72:	54 70                   	cmp_s      r2,0
40005c74:	74 07 0b 00             	blt        400063e8 <_vfiprintf_r+0xbf0>

40005c78:	23 14 85 30             	ldb        r5,[sp,35]
40005c7c:	55 05 ef ff             	b.d        400059d0 <_vfiprintf_r+0x1d8>

40005c80:	4c 71                   	mov_s      r2,1
40005c82:	e0 78                   	nop_s      
40005c84:	45 23 53 20             	or         r19,r19,1
40005c88:	9b 04 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005c8c:	00 17 82 20             	ldb        r2,[r23,0]
40005c90:	00 17 82 20             	ldb        r2,[r23,0]
40005c94:	e2 43                   	mov_s      r3,r23
40005c96:	ec e2                   	cmp_s      r2,108
40005c98:	8a 04 e2 ff             	bnz.d      40005922 <_vfiprintf_r+0x12a>

40005c9c:	cf 23 22 21             	bset.nz    r19,r19,4
40005ca0:	e6 71                   	add_s      r23,r23,1
40005ca2:	45 23 13 28             	or         r19,r19,32
40005ca6:	7f 04 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005caa:	41 8b                   	ldb_s      r2,[r3,1]
40005cac:	0b 22 80 92             	tst        r10,r10
40005cb0:	00 17 82 20             	ldb        r2,[r23,0]
40005cb4:	6f 04 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005cb8:	ca 22 21 18             	mov.z      r10,32
40005cbc:	10 14 05 30             	ld         r5,[sp,16]
40005cc0:	30 da                   	mov_s      r2,48
40005cc2:	69 c2                   	stb_s      r2,[sp,36]
40005cc4:	78 da                   	mov_s      r2,120
40005cc6:	00 15 0e 00             	ld         r14,[r5,0]
40005cca:	25 1c 82 30             	stb        r2,[sp,37]
40005cce:	a4 74                   	add_s      r5,r5,4
40005cd0:	ed 70                   	mov_s      r15,0
40005cd2:	45 23 93 20             	or         r19,r19,2
40005cd6:	10 1c 40 31             	st         r5,[sp,16]
40005cda:	18 1c 80 3f 00 40 dc df 	st         0x4000dfdc,[sp,24]
40005ce2:	e9 04 ef ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

40005ce6:	4c 72                   	mov_s      r2,2
40005ce8:	45 23 13 28             	or         r19,r19,32
40005cec:	37 04 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005cf0:	00 17 82 20             	ldb        r2,[r23,0]
40005cf4:	10 14 06 30             	ld         r6,[sp,16]
40005cf8:	4c 70                   	mov_s      r2,0
40005cfa:	00 16 15 00             	ld         r21,[r6,0]
40005cfe:	23 1c 82 30             	stb        r2,[sp,35]
40005d02:	d0 42                   	mov_s      r18,r6
40005d04:	0b 25 40 a5             	tst        r21,r21
40005d08:	ac 07 21 00             	bz.d       400064b4 <_vfiprintf_r+0xcbc>

40005d0c:	46 74                   	add_s      r18,r18,4
40005d0e:	d6 70                   	cmp_s      r22,0
40005d10:	68 07 2b 00             	blt.d      40006478 <_vfiprintf_r+0xc80>

40005d14:	a2 40                   	mov_s      r0,r21
40005d16:	08 1c 00 31             	st         r4,[sp,8]
40005d1a:	2c 70                   	mov_s      r1,0
40005d1c:	9a 08 6f ff             	bl.d       400045b4 <memchr>

40005d20:	c2 42                   	mov_s      r2,r22
40005d22:	0b 78                   	tst_s      r0,r0
40005d24:	b8 07 21 00             	bz.d       400064dc <_vfiprintf_r+0xce4>

40005d28:	08 14 04 30             	ld         r4,[sp,8]
40005d2c:	02 20 54 05             	sub        r20,r0,r21
40005d30:	23 14 85 30             	ldb        r5,[sp,35]
40005d34:	10 1c 80 34             	st         r18,[sp,16]
40005d38:	1b 06 ef ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

40005d3c:	ce 70                   	mov_s      r22,0
40005d3e:	e0 78                   	nop_s      
40005d40:	4f 23 93 21             	bset       r19,r19,6
40005d44:	df 03 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005d48:	00 17 82 20             	ldb        r2,[r23,0]
40005d4c:	23 1c 82 32             	stb        r10,[sp,35]
40005d50:	18 1c 80 3f 00 40 c8 df 	st         0x4000dfc8,[sp,24]
40005d58:	b5 0b 7e 21             	bbit0.d    r19,5,40005e0c <_vfiprintf_r+0x614>

40005d5c:	10 14 06 30             	ld         r6,[sp,16]
40005d60:	00 16 0e 00             	ld         r14,[r6,0]
40005d64:	04 16 0f 00             	ld         r15,[r6,4]
40005d68:	40 26 05 02             	add        r5,r6,8
40005d6c:	10 1c 40 31             	st         r5,[sp,16]
40005d70:	51 23 00 a0             	btst       r19,0
40005d74:	40 05 21 00             	bz.d       400062b4 <_vfiprintf_r+0xabc>

40005d78:	05 26 fe 93             	or.f       0,r14,r15
40005d7c:	4c 04 e1 ff             	bz.d       400059c8 <_vfiprintf_r+0x1d0>

40005d80:	ca 22 a1 00             	mov.z      r2,2
40005d84:	25 1c 82 30             	stb        r2,[sp,37]
40005d88:	30 da                   	mov_s      r2,48
40005d8a:	45 23 93 20             	or         r19,r19,2
40005d8e:	69 c2                   	stb_s      r2,[sp,36]
40005d90:	39 04 ef ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

40005d94:	4c 72                   	mov_s      r2,2
40005d96:	e0 78                   	nop_s      
40005d98:	10 14 05 30             	ld         r5,[sp,16]
40005d9c:	4e 71                   	mov_s      r18,1
40005d9e:	00 15 02 00             	ld         r2,[r5,0]
40005da2:	8e 71                   	mov_s      r20,1
40005da4:	6d c2                   	stb_s      r2,[sp,52]
40005da6:	a4 74                   	add_s      r5,r5,4
40005da8:	4c 70                   	mov_s      r2,0
40005daa:	10 1c 40 31             	st         r5,[sp,16]
40005dae:	23 1c 82 30             	stb        r2,[sp,35]
40005db2:	40 24 15 3d             	add        r21,sp,52
40005db6:	ab 05 ef ff             	b.d        40005b5e <_vfiprintf_r+0x366>

40005dba:	ce 70                   	mov_s      r22,0
40005dbc:	23 1c 82 32             	stb        r10,[sp,35]
40005dc0:	51 23 40 a1             	btst       r19,5
40005dc4:	9c 06 e2 ff             	bnz.d      40005c60 <_vfiprintf_r+0x468>

40005dc8:	10 14 06 30             	ld         r6,[sp,16]
40005dcc:	0d 0b 1f 21             	bbit1      r19,4,40005dd8 <_vfiprintf_r+0x5e0>

40005dd0:	51 23 80 a1             	btst       r19,6
40005dd4:	9c 06 02 00             	bnz        40006470 <_vfiprintf_r+0xc78>

40005dd8:	00 16 02 00             	ld         r2,[r6,0]
40005ddc:	40 43                   	mov_s      r3,r2
40005dde:	c4 74                   	add_s      r6,r6,4
40005de0:	00 23 fe 80             	add.f      0,r3,r3
40005de4:	03 23 c3 00             	sbc        r3,r3,r3
40005de8:	48 46                   	mov_s      r14,r2
40005dea:	10 1c 80 31             	st         r6,[sp,16]
40005dee:	60 42                   	mov_s      r2,r3
40005df0:	83 06 ef ff             	b.d        40005c72 <_vfiprintf_r+0x47a>

40005df4:	68 47                   	mov_s      r15,r3
40005df6:	e0 78                   	nop_s      
40005df8:	23 1c 82 32             	stb        r10,[sp,35]
40005dfc:	18 1c 80 3f 00 40 dc df 	st         0x4000dfdc,[sp,24]
40005e04:	5d 0b 77 a1             	bbit1.nt.d r19,5,40005d60 <_vfiprintf_r+0x568>

40005e08:	10 14 06 30             	ld         r6,[sp,16]
40005e0c:	51 23 00 a1             	btst       r19,4
40005e10:	48 05 22 00             	bnz.d      40006358 <_vfiprintf_r+0xb60>

40005e14:	10 14 06 30             	ld         r6,[sp,16]
40005e18:	51 23 80 a1             	btst       r19,6
40005e1c:	3c 05 21 00             	bz.d       40006358 <_vfiprintf_r+0xb60>

40005e20:	10 14 05 30             	ld         r5,[sp,16]
40005e24:	ed 70                   	mov_s      r15,0
40005e26:	00 15 0e 01             	ldh        r14,[r5,0]
40005e2a:	a4 74                   	add_s      r5,r5,4
40005e2c:	45 07 ef ff             	b.d        40005d70 <_vfiprintf_r+0x578>

40005e30:	10 1c 40 31             	st         r5,[sp,16]
40005e34:	10 14 06 30             	ld         r6,[sp,16]
40005e38:	00 16 10 00             	ld         r16,[r6,0]
40005e3c:	d0 44                   	mov_s      r20,r6
40005e3e:	16 70                   	cmp_s      r16,0
40005e40:	c8 05 eb ff             	blt.d      40005c08 <_vfiprintf_r+0x410>

40005e44:	86 74                   	add_s      r20,r20,4
40005e46:	00 17 82 20             	ldb        r2,[r23,0]
40005e4a:	db 02 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005e4e:	10 1c 00 35             	st         r20,[sp,16]
40005e52:	e0 78                   	nop_s      
40005e54:	00 17 82 20             	ldb        r2,[r23,0]
40005e58:	cb 02 ef ff             	b.d        40005922 <_vfiprintf_r+0x12a>

40005e5c:	4a 22 c0 1a             	mov        r10,43
40005e60:	00 17 82 20             	ldb        r2,[r23,0]
40005e64:	aa e2                   	cmp_s      r2,42
40005e66:	88 06 21 00             	bz.d       400064ec <_vfiprintf_r+0xcf4>

40005e6a:	40 27 45 20             	add        r5,r23,1
40005e6e:	42 22 03 0c             	sub        r3,r2,48
40005e72:	89 e3                   	cmp_s      r3,9
40005e74:	ca 27 4d 21             	mov.hi     r23,r5
40005e78:	ac 02 ed ff             	bhi.d      40005924 <_vfiprintf_r+0x12c>

40005e7c:	ca 26 2d 20             	mov.hi     r22,0
40005e80:	4a 26 00 00             	mov        r6,0
40005e84:	01 15 82 04             	ldb.ab     r2,[r5,1]
40005e88:	15 26 86 01             	add2       r6,r6,r6
40005e8c:	14 23 86 01             	add1       r6,r3,r6
40005e90:	42 22 03 0c             	sub        r3,r2,48
40005e94:	f1 0b 94 82             	brlo       r3,10,40005e84 <_vfiprintf_r+0x68c>

40005e98:	b0 47                   	mov_s      r23,r5
40005e9a:	08 26 96 0f ff ff ff ff 	max        r22,r6,-1
40005ea2:	89 02 ef ff             	b.d        40005928 <_vfiprintf_r+0x130>

40005ea6:	42 22 03 08             	sub        r3,r2,32
40005eaa:	e0 78                   	nop_s      
40005eac:	51 23 40 a1             	btst       r19,5
40005eb0:	54 05 21 00             	bz.d       40006404 <_vfiprintf_r+0xc0c>

40005eb4:	23 1c 82 32             	stb        r10,[sp,35]
40005eb8:	05 c3                   	ld_s       r3,[sp,20]
40005eba:	10 14 06 30             	ld         r6,[sp,16]
40005ebe:	00 23 fe 80             	add.f      0,r3,r3
40005ec2:	03 23 c3 00             	sbc        r3,r3,r3
40005ec6:	00 16 02 00             	ld         r2,[r6,0]
40005eca:	10 14 05 30             	ld         r5,[sp,16]
40005ece:	14 14 06 30             	ld         r6,[sp,20]
40005ed2:	a4 74                   	add_s      r5,r5,4
40005ed4:	00 1a 80 01             	st         r6,[r2]
40005ed8:	61 a2                   	st_s       r3,[r2,4]
40005eda:	cd 01 ef ff             	b.d        400058a4 <_vfiprintf_r+0xac>

40005ede:	10 1c 40 31             	st         r5,[sp,16]
40005ee2:	e0 78                   	nop_s      
40005ee4:	00 15 0e 00             	ld         r14,[r5,0]
40005ee8:	ed 70                   	mov_s      r15,0
40005eea:	a4 74                   	add_s      r5,r5,4
40005eec:	dd 02 ef ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

40005ef0:	10 1c 40 31             	st         r5,[sp,16]
40005ef4:	4c 70                   	mov_s      r2,0
40005ef6:	00 16 0e 00             	ld         r14,[r6,0]
40005efa:	ed 70                   	mov_s      r15,0
40005efc:	c4 74                   	add_s      r6,r6,4
40005efe:	cd 02 ef ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

40005f02:	10 1c 80 31             	st         r6,[sp,16]
40005f06:	e0 78                   	nop_s      
40005f08:	00 1c 40 31             	st         r5,[sp]
40005f0c:	04 1c c0 32             	st         r11,[sp,4]
40005f10:	42 c4                   	st_s       r12,[sp,8]
40005f12:	22 40                   	mov_s      r0,r17
40005f14:	a1 41                   	mov_s      r1,r13
40005f16:	0e 08 ef ff             	bl.d       40005720 <__sprint_r.part.0>

40005f1a:	8a c2                   	add_s      r2,sp,40
40005f1c:	00 14 05 30             	ld         r5,[sp,0]
40005f20:	04 14 0b 30             	ld         r11,[sp,4]
40005f24:	14 70                   	cmp_s      r0,0
40005f26:	00 01 22 00             	bnz.d      40006024 <_vfiprintf_r+0x82c>

40005f2a:	02 c4                   	ld_s       r12,[sp,8]
40005f2c:	0b c1                   	ld_s       r1,[sp,44]
40005f2e:	0c c0                   	ld_s       r0,[sp,48]
40005f30:	61 69                   	add_s      r3,r1,1
40005f32:	69 04 ef ff             	b.d        40005b98 <_vfiprintf_r+0x3a0>

40005f36:	03 44                   	mov_s      r4,r24
40005f38:	30 14 05 30             	ld         r5,[sp,48]
40005f3c:	21 6b                   	add_s      r1,r3,1
40005f3e:	23 14 82 30             	ldb        r2,[sp,35]
40005f42:	13 ea                   	breq_s     r2,0,40005f66 <_vfiprintf_r+0x76e>

40005f44:	a4 71                   	add_s      r5,r5,1
40005f46:	40 24 c3 38             	add        r3,sp,35
40005f4a:	04 1c 41 00             	st         1,[r4,4]
40005f4e:	00 1c c0 00             	st         r3,[r4]
40005f52:	30 1c 40 31             	st         r5,[sp,48]
40005f56:	87 e1                   	cmp_s      r1,7
40005f58:	38 03 29 00             	bgt.d      40006290 <_vfiprintf_r+0xa98>

40005f5c:	4b c1                   	st_s       r1,[sp,44]
40005f5e:	20 43                   	mov_s      r3,r1
40005f60:	40 24 04 02             	add        r4,r4,8
40005f64:	24 71                   	add_s      r1,r1,1
40005f66:	31 0c 30 10             	breq.d     r12,0,40005f94 <_vfiprintf_r+0x79c>

40005f6a:	52 23 fe 91             	bxor.f     0,r11,7
40005f6e:	a4 72                   	add_s      r5,r5,2
40005f70:	40 24 06 39             	add        r6,sp,36
40005f74:	04 1c 81 00             	st         2,[r4,4]
40005f78:	00 1c 80 01             	st         r6,[r4]
40005f7c:	30 1c 40 31             	st         r5,[sp,48]
40005f80:	87 e1                   	cmp_s      r1,7
40005f82:	20 03 29 00             	bgt.d      400062a0 <_vfiprintf_r+0xaa8>

40005f86:	4b c1                   	st_s       r1,[sp,44]
40005f88:	20 43                   	mov_s      r3,r1
40005f8a:	40 24 04 02             	add        r4,r4,8
40005f8e:	24 71                   	add_s      r1,r1,1
40005f90:	52 23 fe 91             	bxor.f     0,r11,7
40005f94:	54 02 21 00             	bz.d       400061e8 <_vfiprintf_r+0x9f0>

40005f98:	02 20 8b 24             	sub        r11,r16,r18
40005f9c:	02 26 16 25             	sub        r22,r22,r20
40005fa0:	23 0e 7b 20             	brge.t.d   r22,1,40005fc2 <_vfiprintf_r+0x7ca>

40005fa4:	4c 26 00 a4             	cmp        r22,16
40005fa8:	ad 00 20 00             	b.d        40006054 <_vfiprintf_r+0x85c>

40005fac:	00 25 05 05             	add        r5,r5,r20
40005fb0:	22 6b                   	add_s      r1,r3,2
40005fb2:	40 24 04 02             	add        r4,r4,8
40005fb6:	a0 43                   	mov_s      r3,r5
40005fb8:	40 45                   	mov_s      r5,r2
40005fba:	42 26 16 24             	sub        r22,r22,16
40005fbe:	4c 26 00 a4             	cmp        r22,16
40005fc2:	b8 01 2c 00             	ble.d      40006178 <_vfiprintf_r+0x980>

40005fc6:	40 25 02 04             	add        r2,r5,16
40005fca:	00 1c 80 0f 00 40 7c d7 	st         0x4000d77c,[r4]
40005fd2:	40 23 45 00             	add        r5,r3,1
40005fd6:	04 1c 01 04             	st         16,[r4,4]
40005fda:	4c c2                   	st_s       r2,[sp,48]
40005fdc:	d5 0d 3a 82             	brlt.nt.d  r5,8,40005fb0 <_vfiprintf_r+0x7b8>

40005fe0:	2c 1c 40 31             	st         r5,[sp,44]
40005fe4:	11 0a 31 00             	brne.d     r2,0,40005ff4 <_vfiprintf_r+0x7fc>

40005fe8:	2c 71                   	mov_s      r1,1
40005fea:	6c 70                   	mov_s      r3,0
40005fec:	ac 70                   	mov_s      r5,0
40005fee:	cf 07 ef ff             	b.d        40005fba <_vfiprintf_r+0x7c2>

40005ff2:	03 44                   	mov_s      r4,r24
40005ff4:	22 40                   	mov_s      r0,r17
40005ff6:	a1 41                   	mov_s      r1,r13
40005ff8:	2a 0f af ff             	bl.d       40005720 <__sprint_r.part.0>

40005ffc:	40 24 02 3a             	add        r2,sp,40
40006000:	25 08 31 00             	brne.d     r0,0,40006024 <_vfiprintf_r+0x82c>

40006004:	0b c3                   	ld_s       r3,[sp,44]
40006006:	30 14 05 30             	ld         r5,[sp,48]
4000600a:	21 6b                   	add_s      r1,r3,1
4000600c:	af 07 ef ff             	b.d        40005fba <_vfiprintf_r+0x7c2>

40006010:	03 44                   	mov_s      r4,r24
40006012:	e0 78                   	nop_s      
40006014:	0c c2                   	ld_s       r2,[sp,48]
40006016:	11 0a 30 00             	breq.d     r2,0,40006024 <_vfiprintf_r+0x82c>

4000601a:	22 40                   	mov_s      r0,r17
4000601c:	a1 41                   	mov_s      r1,r13
4000601e:	06 0f af ff             	bl.d       40005720 <__sprint_r.part.0>

40006022:	8a c2                   	add_s      r2,sp,40
40006024:	0c 15 02 11             	ldh        r2,[r13,12]
40006028:	e6 ba                   	btst_s     r2,6
4000602a:	6c 02 c2 ff             	bnz        40005a94 <_vfiprintf_r+0x29c>

4000602e:	05 c0                   	ld_s       r0,[sp,20]
40006030:	67 02 cf ff             	b          40005a96 <_vfiprintf_r+0x29e>

40006034:	22 40                   	mov_s      r0,r17
40006036:	a1 41                   	mov_s      r1,r13
40006038:	ea 0e af ff             	bl.d       40005720 <__sprint_r.part.0>

4000603c:	40 24 02 3a             	add        r2,sp,40
40006040:	e5 08 39 80             	brne.nt.d  r0,0,40006024 <_vfiprintf_r+0x82c>

40006044:	0b c1                   	ld_s       r1,[sp,44]
40006046:	30 14 05 30             	ld         r5,[sp,48]
4000604a:	24 71                   	add_s      r1,r1,1
4000604c:	0a 24 00 06             	mov        r4,r24
40006050:	00 25 05 05             	add        r5,r5,r20
40006054:	00 1c 40 05             	st         r21,[r4]
40006058:	04 1c 00 05             	st         r20,[r4,4]
4000605c:	30 1c 40 31             	st         r5,[sp,48]
40006060:	87 e1                   	cmp_s      r1,7
40006062:	76 01 2c 00             	ble.d      400061d6 <_vfiprintf_r+0x9de>

40006066:	4b c1                   	st_s       r1,[sp,44]
40006068:	0b 25 40 81             	tst        r5,r5
4000606c:	d0 02 02 00             	bnz        4000633c <_vfiprintf_r+0xb44>

40006070:	2c 1c 01 30             	st         0,[sp,44]
40006074:	03 44                   	mov_s      r4,r24
40006076:	ad 0b be 20             	bbit0.d    r19,2,40006120 <_vfiprintf_r+0x928>

4000607a:	14 14 06 30             	ld         r6,[sp,20]
4000607e:	02 20 93 24             	sub        r19,r16,r18
40006082:	a1 0b 52 20             	brlt       r19,1,40006120 <_vfiprintf_r+0x928>

40006086:	23 0b 7b 24             	brge.t.d   r19,17,400060a6 <_vfiprintf_r+0x8ae>

4000608a:	0b c3                   	ld_s       r3,[sp,44]
4000608c:	49 04 20 00             	b.d        400064d4 <_vfiprintf_r+0xcdc>

40006090:	2c 14 06 30             	ld         r6,[sp,44]
40006094:	40 23 86 00             	add        r6,r3,2
40006098:	40 24 04 02             	add        r4,r4,8
4000609c:	40 43                   	mov_s      r3,r2
4000609e:	42 23 13 24             	sub        r19,r19,16
400060a2:	35 0b 52 24             	brlt       r19,17,400060d4 <_vfiprintf_r+0x8dc>

400060a6:	41 6b                   	add_s      r2,r3,1
400060a8:	40 25 05 04             	add        r5,r5,16
400060ac:	00 1c 80 0f 00 40 8c d7 	st         0x4000d78c,[r4]
400060b4:	04 1c 01 04             	st         16,[r4,4]
400060b8:	30 1c 40 31             	st         r5,[sp,48]
400060bc:	d9 0a 3a 82             	brlt.nt.d  r2,8,40006094 <_vfiprintf_r+0x89c>

400060c0:	4b c2                   	st_s       r2,[sp,44]
400060c2:	99 0d 11 00             	brne       r5,0,40006158 <_vfiprintf_r+0x960>

400060c6:	42 23 13 24             	sub        r19,r19,16
400060ca:	cc 71                   	mov_s      r6,1
400060cc:	6c 70                   	mov_s      r3,0
400060ce:	db 0b 73 a4             	brge.d     r19,17,400060a6 <_vfiprintf_r+0x8ae>

400060d2:	03 44                   	mov_s      r4,r24
400060d4:	00 25 c5 04             	add        r5,r5,r19
400060d8:	00 1c 80 0f 00 40 8c d7 	st         0x4000d78c,[r4]
400060e0:	04 1c c0 04             	st         r19,[r4,4]
400060e4:	30 1c 40 31             	st         r5,[sp,48]
400060e8:	35 0e 32 02             	brlt.d     r6,8,4000611c <_vfiprintf_r+0x924>

400060ec:	2c 1c 80 31             	st         r6,[sp,44]
400060f0:	19 0d 31 00             	brne.d     r5,0,40006108 <_vfiprintf_r+0x910>

400060f4:	14 14 05 30             	ld         r5,[sp,20]
400060f8:	08 20 90 24             	max        r16,r16,r18
400060fc:	00 20 50 21             	add        r16,r16,r5
40006100:	3f 00 20 00             	b.d        4000613e <_vfiprintf_r+0x946>

40006104:	14 1c 00 34             	st         r16,[sp,20]
40006108:	22 40                   	mov_s      r0,r17
4000610a:	a1 41                   	mov_s      r1,r13
4000610c:	16 0e af ff             	bl.d       40005720 <__sprint_r.part.0>

40006110:	40 24 02 3a             	add        r2,sp,40
40006114:	11 08 39 80             	brne.nt.d  r0,0,40006024 <_vfiprintf_r+0x82c>

40006118:	30 14 05 30             	ld         r5,[sp,48]
4000611c:	14 14 06 30             	ld         r6,[sp,20]
40006120:	08 20 90 24             	max        r16,r16,r18
40006124:	00 20 90 21             	add        r16,r16,r6
40006128:	17 0d 30 00             	breq.d     r5,0,4000613e <_vfiprintf_r+0x946>

4000612c:	14 1c 00 34             	st         r16,[sp,20]
40006130:	22 40                   	mov_s      r0,r17
40006132:	a1 41                   	mov_s      r1,r13
40006134:	ee 0d af ff             	bl.d       40005720 <__sprint_r.part.0>

40006138:	8a c2                   	add_s      r2,sp,40
4000613a:	0b 78                   	tst_s      r0,r0
4000613c:	74 f5                   	bne_s      40006024 <_vfiprintf_r+0x82c>

4000613e:	00 17 82 20             	ldb        r2,[r23,0]
40006142:	2c 1c 01 30             	st         0,[sp,44]
40006146:	4b 7a                   	tst_s      r2,r2
40006148:	68 07 a2 ff             	bnz.d      400058b0 <_vfiprintf_r+0xb8>

4000614c:	0a 24 00 06             	mov        r4,r24
40006150:	b3 07 af ff             	b.d        40005902 <_vfiprintf_r+0x10a>

40006154:	f2 40                   	mov_s      r16,r23
40006156:	e0 78                   	nop_s      
40006158:	22 40                   	mov_s      r0,r17
4000615a:	a1 41                   	mov_s      r1,r13
4000615c:	c6 0d af ff             	bl.d       40005720 <__sprint_r.part.0>

40006160:	8a c2                   	add_s      r2,sp,40
40006162:	0b 78                   	tst_s      r0,r0
40006164:	c0 06 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

40006168:	0b c3                   	ld_s       r3,[sp,44]
4000616a:	30 14 05 30             	ld         r5,[sp,48]
4000616e:	40 23 46 00             	add        r6,r3,1
40006172:	2f 07 ef ff             	b.d        4000609e <_vfiprintf_r+0x8a6>

40006176:	03 44                   	mov_s      r4,r24
40006178:	00 25 85 05             	add        r5,r5,r22
4000617c:	00 1c 80 0f 00 40 7c d7 	st         0x4000d77c,[r4]
40006184:	04 1c 80 05             	st         r22,[r4,4]
40006188:	30 1c 40 31             	st         r5,[sp,48]
4000618c:	31 09 33 02             	brge.d     r1,8,400061bc <_vfiprintf_r+0x9c4>

40006190:	4b c1                   	st_s       r1,[sp,44]
40006192:	40 24 04 02             	add        r4,r4,8
40006196:	bd 06 ef ff             	b.d        40006050 <_vfiprintf_r+0x858>

4000619a:	24 71                   	add_s      r1,r1,1
4000619c:	45 0a 31 00             	brne.d     r2,0,400061e0 <_vfiprintf_r+0x9e8>

400061a0:	8e 70                   	mov_s      r20,0
400061a2:	41 0b 1e 20             	bbit0      r19,0,400061e0 <_vfiprintf_r+0x9e8>

400061a6:	30 da                   	mov_s      r2,48
400061a8:	93 45                   	mov_s      r21,sp
400061aa:	1c 14 14 30             	ld         r20,[sp,28]
400061ae:	5b 1c 82 30             	stb        r2,[sp,91]
400061b2:	a3 01 ef ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

400061b6:	80 25 c1 26             	add        r21,r21,91
400061ba:	e0 78                   	nop_s      
400061bc:	0b 25 40 81             	tst        r5,r5
400061c0:	3a f5                   	bne_s      40006034 <_vfiprintf_r+0x83c>

400061c2:	5c 1c 40 35             	st         r21,[sp,92]
400061c6:	60 1c 00 35             	st         r20,[sp,96]
400061ca:	30 1c 00 35             	st         r20,[sp,48]
400061ce:	2c 1c 41 30             	st         1,[sp,44]
400061d2:	82 45                   	mov_s      r5,r20
400061d4:	03 44                   	mov_s      r4,r24
400061d6:	a3 06 ef ff             	b.d        40006076 <_vfiprintf_r+0x87e>

400061da:	40 24 04 02             	add        r4,r4,8
400061de:	e0 78                   	nop_s      
400061e0:	73 01 ef ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

400061e4:	13 45                   	mov_s      r21,r24
400061e6:	e0 78                   	nop_s      
400061e8:	75 70                   	cmp_s      r11,0
400061ea:	b8 05 ec ff             	ble.d      40005fa0 <_vfiprintf_r+0x7a8>

400061ee:	c2 26 0c 25             	sub.le     r22,r22,r20
400061f2:	21 0b 5b 14             	brge.t     r11,17,40006210 <_vfiprintf_r+0xa18>

400061f6:	28 44                   	mov_s      r12,r1
400061f8:	4b 00 20 00             	b.d        40006242 <_vfiprintf_r+0xa4a>

400061fc:	00 25 c5 02             	add        r5,r5,r11
40006200:	82 6b                   	add_s      r12,r3,2
40006202:	40 24 04 02             	add        r4,r4,8
40006206:	40 43                   	mov_s      r3,r2
40006208:	42 23 0b 14             	sub        r11,r11,16
4000620c:	33 0b 52 14             	brlt       r11,17,4000623e <_vfiprintf_r+0xa46>

40006210:	41 6b                   	add_s      r2,r3,1
40006212:	40 25 05 04             	add        r5,r5,16
40006216:	00 1c 80 0f 00 40 7c d7 	st         0x4000d77c,[r4]
4000621e:	04 1c 01 04             	st         16,[r4,4]
40006222:	30 1c 40 31             	st         r5,[sp,48]
40006226:	dd 0a 3a 82             	brlt.nt.d  r2,8,40006200 <_vfiprintf_r+0xa08>

4000622a:	4b c2                   	st_s       r2,[sp,44]
4000622c:	3d 0d 11 00             	brne       r5,0,40006268 <_vfiprintf_r+0xa70>

40006230:	42 23 0b 14             	sub        r11,r11,16
40006234:	8d 71                   	mov_s      r12,1
40006236:	6c 70                   	mov_s      r3,0
40006238:	d9 0b 73 94             	brge.d     r11,17,40006210 <_vfiprintf_r+0xa18>

4000623c:	03 44                   	mov_s      r4,r24
4000623e:	00 25 c5 02             	add        r5,r5,r11
40006242:	00 1c 80 0f 00 40 7c d7 	st         0x4000d77c,[r4]
4000624a:	04 1c c0 02             	st         r11,[r4,4]
4000624e:	30 1c 40 31             	st         r5,[sp,48]
40006252:	87 e4                   	cmp_s      r12,7
40006254:	84 01 29 00             	bgt.d      400063d8 <_vfiprintf_r+0xbe0>

40006258:	4b c4                   	st_s       r12,[sp,44]
4000625a:	40 24 04 02             	add        r4,r4,8
4000625e:	21 6c                   	add_s      r1,r12,1
40006260:	3d 05 ef ff             	b.d        40005f9c <_vfiprintf_r+0x7a4>

40006264:	81 43                   	mov_s      r3,r12
40006266:	e0 78                   	nop_s      
40006268:	04 1c c0 32             	st         r11,[sp,4]
4000626c:	22 40                   	mov_s      r0,r17
4000626e:	a1 41                   	mov_s      r1,r13
40006270:	b2 0c af ff             	bl.d       40005720 <__sprint_r.part.0>

40006274:	8a c2                   	add_s      r2,sp,40
40006276:	0b 78                   	tst_s      r0,r0
40006278:	ac 05 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

4000627c:	04 14 0b 30             	ld         r11,[sp,4]
40006280:	0b c3                   	ld_s       r3,[sp,44]
40006282:	30 14 05 30             	ld         r5,[sp,48]
40006286:	81 6b                   	add_s      r12,r3,1
40006288:	81 07 ef ff             	b.d        40006208 <_vfiprintf_r+0xa10>

4000628c:	03 44                   	mov_s      r4,r24
4000628e:	e0 78                   	nop_s      
40006290:	f5 0d 31 00             	brne.d     r5,0,40006384 <_vfiprintf_r+0xb8c>

40006294:	2c 71                   	mov_s      r1,1
40006296:	6c 70                   	mov_s      r3,0
40006298:	cf 04 ef ff             	b.d        40005f66 <_vfiprintf_r+0x76e>

4000629c:	03 44                   	mov_s      r4,r24
4000629e:	e0 78                   	nop_s      
400062a0:	0b 25 40 81             	tst        r5,r5
400062a4:	0c 01 22 00             	bnz.d      400063b0 <_vfiprintf_r+0xbb8>

400062a8:	2c 71                   	mov_s      r1,1
400062aa:	6c 70                   	mov_s      r3,0
400062ac:	e5 04 ef ff             	b.d        40005f90 <_vfiprintf_r+0x798>

400062b0:	03 44                   	mov_s      r4,r24
400062b2:	e0 78                   	nop_s      
400062b4:	15 07 af ff             	b.d        400059c8 <_vfiprintf_r+0x1d0>

400062b8:	4c 72                   	mov_s      r2,2
400062ba:	e0 78                   	nop_s      
400062bc:	0b 78                   	tst_s      r0,r0
400062be:	88 01 22 00             	bnz.d      40006444 <_vfiprintf_r+0xc4c>

400062c2:	6c 70                   	mov_s      r3,0
400062c4:	2c 71                   	mov_s      r1,1
400062c6:	ac 70                   	mov_s      r5,0
400062c8:	77 04 ef ff             	b.d        40005f3e <_vfiprintf_r+0x746>

400062cc:	03 44                   	mov_s      r4,r24
400062ce:	e0 78                   	nop_s      
400062d0:	0f 0f 31 10             	brne.d     r15,0,400062de <_vfiprintf_r+0xae6>

400062d4:	83 42                   	mov_s      r2,sp
400062d6:	55 0e b4 12             	brlo.d     r14,10,40006328 <_vfiprintf_r+0xb30>

400062da:	c1 42                   	mov_s      r2,r14
400062dc:	83 42                   	mov_s      r2,sp
400062de:	5b e2                   	add_s      r2,r2,91
400062e0:	50 45                   	mov_s      r21,r2
400062e2:	08 1c 00 31             	st         r4,[sp,8]
400062e6:	00 1c 40 31             	st         r5,[sp]
400062ea:	c1 40                   	mov_s      r0,r14
400062ec:	e1 41                   	mov_s      r1,r15
400062ee:	0a da                   	mov_s      r2,10
400062f0:	2e 0b e0 00             	bl.d       40007e1c <__umoddi3>

400062f4:	6c 70                   	mov_s      r3,0
400062f6:	30 e0                   	add_s      r0,r0,48
400062f8:	00 1d 02 20             	stb        r0,[r21]
400062fc:	e1 41                   	mov_s      r1,r15
400062fe:	c1 40                   	mov_s      r0,r14
40006300:	0a da                   	mov_s      r2,10
40006302:	ea 0b a0 00             	bl.d       400076e8 <__udivdi3>

40006306:	6c 70                   	mov_s      r3,0
40006308:	42 25 42 20             	sub        r2,r21,1
4000630c:	08 46                   	mov_s      r14,r0
4000630e:	28 47                   	mov_s      r15,r1
40006310:	05 20 7e 80             	or.f       0,r0,r1
40006314:	08 14 04 30             	ld         r4,[sp,8]
40006318:	c8 07 e2 ff             	bnz.d      400062e0 <_vfiprintf_r+0xae8>

4000631c:	00 14 05 30             	ld         r5,[sp,0]
40006320:	33 00 ef ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

40006324:	02 20 54 35             	sub        r20,r24,r21
40006328:	93 45                   	mov_s      r21,sp
4000632a:	30 e2                   	add_s      r2,r2,48
4000632c:	1c 14 14 30             	ld         r20,[sp,28]
40006330:	80 25 c1 26             	add        r21,r21,91
40006334:	1f 00 ef ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

40006338:	5b 1c 82 30             	stb        r2,[sp,91]
4000633c:	22 40                   	mov_s      r0,r17
4000633e:	a1 41                   	mov_s      r1,r13
40006340:	e2 0b af ff             	bl.d       40005720 <__sprint_r.part.0>

40006344:	8a c2                   	add_s      r2,sp,40
40006346:	0b 78                   	tst_s      r0,r0
40006348:	dc 04 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

4000634c:	30 14 05 30             	ld         r5,[sp,48]
40006350:	27 05 ef ff             	b.d        40006076 <_vfiprintf_r+0x87e>

40006354:	03 44                   	mov_s      r4,r24
40006356:	e0 78                   	nop_s      
40006358:	ed 70                   	mov_s      r15,0
4000635a:	00 16 0e 00             	ld         r14,[r6,0]
4000635e:	c4 74                   	add_s      r6,r6,4
40006360:	11 02 ef ff             	b.d        40005d70 <_vfiprintf_r+0x578>

40006364:	10 1c 80 31             	st         r6,[sp,16]
40006368:	22 40                   	mov_s      r0,r17
4000636a:	a1 41                   	mov_s      r1,r13
4000636c:	b6 0b af ff             	bl.d       40005720 <__sprint_r.part.0>

40006370:	8a c2                   	add_s      r2,sp,40
40006372:	0b 78                   	tst_s      r0,r0
40006374:	b0 04 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

40006378:	03 44                   	mov_s      r4,r24
4000637a:	83 05 af ff             	b.d        400058fa <_vfiprintf_r+0x102>

4000637e:	14 14 05 30             	ld         r5,[sp,20]
40006382:	e0 78                   	nop_s      
40006384:	04 1c c0 32             	st         r11,[sp,4]
40006388:	42 c4                   	st_s       r12,[sp,8]
4000638a:	22 40                   	mov_s      r0,r17
4000638c:	a1 41                   	mov_s      r1,r13
4000638e:	96 0b af ff             	bl.d       40005720 <__sprint_r.part.0>

40006392:	8a c2                   	add_s      r2,sp,40
40006394:	04 14 0b 30             	ld         r11,[sp,4]
40006398:	0b 78                   	tst_s      r0,r0
4000639a:	8c 04 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

4000639e:	02 c4                   	ld_s       r12,[sp,8]
400063a0:	0b c3                   	ld_s       r3,[sp,44]
400063a2:	30 14 05 30             	ld         r5,[sp,48]
400063a6:	21 6b                   	add_s      r1,r3,1
400063a8:	bf 03 ef ff             	b.d        40005f66 <_vfiprintf_r+0x76e>

400063ac:	03 44                   	mov_s      r4,r24
400063ae:	e0 78                   	nop_s      
400063b0:	04 1c c0 32             	st         r11,[sp,4]
400063b4:	22 40                   	mov_s      r0,r17
400063b6:	a1 41                   	mov_s      r1,r13
400063b8:	6a 0b af ff             	bl.d       40005720 <__sprint_r.part.0>

400063bc:	8a c2                   	add_s      r2,sp,40
400063be:	0b 78                   	tst_s      r0,r0
400063c0:	64 04 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

400063c4:	04 14 0b 30             	ld         r11,[sp,4]
400063c8:	0b c3                   	ld_s       r3,[sp,44]
400063ca:	30 14 05 30             	ld         r5,[sp,48]
400063ce:	21 6b                   	add_s      r1,r3,1
400063d0:	c1 03 ef ff             	b.d        40005f90 <_vfiprintf_r+0x798>

400063d4:	03 44                   	mov_s      r4,r24
400063d6:	e0 78                   	nop_s      
400063d8:	bd 0d 31 00             	brne.d     r5,0,40006494 <_vfiprintf_r+0xc9c>

400063dc:	2c 71                   	mov_s      r1,1
400063de:	6c 70                   	mov_s      r3,0
400063e0:	bd 03 ef ff             	b.d        40005f9c <_vfiprintf_r+0x7a4>

400063e4:	03 44                   	mov_s      r4,r24
400063e6:	e0 78                   	nop_s      
400063e8:	2d da                   	mov_s      r2,45
400063ea:	4e 26 0e 90             	rsub.f     r14,r14,0
400063ee:	23 1c 82 30             	stb        r2,[sp,35]
400063f2:	03 26 cf 73 00 00 00 00 	sbc        r15,0,r15
400063fa:	4a 25 40 0b             	mov        r5,45
400063fe:	d5 05 af ff             	b.d        400059d0 <_vfiprintf_r+0x1d8>

40006402:	4c 71                   	mov_s      r2,1
40006404:	29 0b 3f 21             	bbit1.d    r19,4,4000642c <_vfiprintf_r+0xc34>

40006408:	10 14 06 30             	ld         r6,[sp,16]
4000640c:	25 0b be 21             	bbit0.d    r19,6,40006430 <_vfiprintf_r+0xc38>

40006410:	14 14 05 30             	ld         r5,[sp,20]
40006414:	10 14 06 30             	ld         r6,[sp,16]
40006418:	00 16 02 00             	ld         r2,[r6,0]
4000641c:	c4 74                   	add_s      r6,r6,4
4000641e:	00 1a 44 01             	sth        r5,[r2]
40006422:	85 04 af ff             	b.d        400058a4 <_vfiprintf_r+0xac>

40006426:	10 1c 80 31             	st         r6,[sp,16]
4000642a:	e0 78                   	nop_s      
4000642c:	14 14 05 30             	ld         r5,[sp,20]
40006430:	00 16 02 00             	ld         r2,[r6,0]
40006434:	c4 74                   	add_s      r6,r6,4
40006436:	10 1c 80 31             	st         r6,[sp,16]
4000643a:	6d 04 af ff             	b.d        400058a4 <_vfiprintf_r+0xac>

4000643e:	00 1a 40 01             	st         r5,[r2]
40006442:	e0 78                   	nop_s      
40006444:	04 1c c0 32             	st         r11,[sp,4]
40006448:	42 c4                   	st_s       r12,[sp,8]
4000644a:	22 40                   	mov_s      r0,r17
4000644c:	a1 41                   	mov_s      r1,r13
4000644e:	d6 0a af ff             	bl.d       40005720 <__sprint_r.part.0>

40006452:	8a c2                   	add_s      r2,sp,40
40006454:	04 14 0b 30             	ld         r11,[sp,4]
40006458:	0b 78                   	tst_s      r0,r0
4000645a:	cc 03 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

4000645e:	02 c4                   	ld_s       r12,[sp,8]
40006460:	0b c3                   	ld_s       r3,[sp,44]
40006462:	30 14 05 30             	ld         r5,[sp,48]
40006466:	21 6b                   	add_s      r1,r3,1
40006468:	d7 02 ef ff             	b.d        40005f3e <_vfiprintf_r+0x746>

4000646c:	03 44                   	mov_s      r4,r24
4000646e:	e0 78                   	nop_s      
40006470:	6d 01 ef ff             	b.d        40005ddc <_vfiprintf_r+0x5e4>

40006474:	00 16 42 01             	ldh.x      r2,[r6,0]
40006478:	08 1c 00 31             	st         r4,[sp,8]
4000647c:	12 0a af ff             	bl.d       4000568c <strlen>

40006480:	10 1c 80 34             	st         r18,[sp,16]
40006484:	ce 70                   	mov_s      r22,0
40006486:	10 44                   	mov_s      r20,r0
40006488:	23 14 85 30             	ldb        r5,[sp,35]
4000648c:	c7 06 af ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

40006490:	08 14 04 30             	ld         r4,[sp,8]
40006494:	22 40                   	mov_s      r0,r17
40006496:	a1 41                   	mov_s      r1,r13
40006498:	8a 0a af ff             	bl.d       40005720 <__sprint_r.part.0>

4000649c:	8a c2                   	add_s      r2,sp,40
4000649e:	0b 78                   	tst_s      r0,r0
400064a0:	84 03 e2 ff             	bnz.d      40006024 <_vfiprintf_r+0x82c>

400064a4:	0b c3                   	ld_s       r3,[sp,44]
400064a6:	30 14 05 30             	ld         r5,[sp,48]
400064aa:	21 6b                   	add_s      r1,r3,1
400064ac:	f1 02 ef ff             	b.d        40005f9c <_vfiprintf_r+0x7a4>

400064b0:	03 44                   	mov_s      r4,r24
400064b2:	e0 78                   	nop_s      
400064b4:	d6 76                   	cmp_s      r22,6
400064b6:	8e 76                   	mov_s      r20,6
400064b8:	10 1c 80 34             	st         r18,[sp,16]
400064bc:	ca 24 8e 25             	mov.ls     r20,r22
400064c0:	0a 25 80 2f 00 40 f0 df 	mov        r21,0x4000dff0
400064c8:	48 24 12 20             	max        r18,r20,0
400064cc:	93 06 af ff             	b.d        40005b5e <_vfiprintf_r+0x366>

400064d0:	ce 70                   	mov_s      r22,0
400064d2:	e0 78                   	nop_s      
400064d4:	01 04 ef ff             	b.d        400060d4 <_vfiprintf_r+0x8dc>

400064d8:	c4 71                   	add_s      r6,r6,1
400064da:	e0 78                   	nop_s      
400064dc:	d2 44                   	mov_s      r20,r22
400064de:	23 14 85 30             	ldb        r5,[sp,35]
400064e2:	10 1c 80 34             	st         r18,[sp,16]
400064e6:	6f 06 af ff             	b.d        40005b52 <_vfiprintf_r+0x35a>

400064ea:	ce 70                   	mov_s      r22,0
400064ec:	10 14 06 30             	ld         r6,[sp,16]
400064f0:	01 17 82 20             	ldb        r2,[r23,1]
400064f4:	00 16 16 00             	ld         r22,[r6,0]
400064f8:	d0 44                   	mov_s      r20,r6
400064fa:	d6 70                   	cmp_s      r22,0
400064fc:	86 74                   	add_s      r20,r20,4
400064fe:	b0 47                   	mov_s      r23,r5
40006500:	ca 26 8b 2f ff ff ff ff 	mov.lt     r22,-1
40006508:	1b 04 af ff             	b.d        40005922 <_vfiprintf_r+0x12a>

4000650c:	10 1c 00 35             	st         r20,[sp,16]

40006510 <vfiprintf>:
40006510:	00 45                   	mov_s      r5,r0
40006512:	20 44                   	mov_s      r4,r1
40006514:	40 43                   	mov_s      r3,r2
40006516:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
4000651e:	a0 41                   	mov_s      r1,r5
40006520:	80 42                   	mov_s      r2,r4
40006522:	d9 02 8f ff             	b          400057f8 <_vfiprintf_r>

40006526:	e0 78                   	nop_s      

40006528 <__sbprintf>:
40006528:	f1 c0                   	push_s     blink
4000652a:	f4 1c 48 b3             	st.a       r13,[sp,-12]
4000652e:	0c 11 09 01             	ldh        r9,[r1,12]
40006532:	42 c7                   	st_s       r15,[sp,8]
40006534:	41 c6                   	st_s       r14,[sp,4]
40006536:	64 11 08 00             	ld         r8,[r1,100]
4000653a:	82 24 11 3a             	sub        sp,sp,0x468
4000653e:	0e 11 07 01             	ldh        r7,[r1,14]
40006542:	1c 11 06 00             	ld         r6,[r1,28]
40006546:	24 11 05 00             	ld         r5,[r1,36]
4000654a:	56 24 44 33             	add3       r4,sp,13
4000654e:	50 21 49 10             	bclr       r9,r9,1
40006552:	00 1c 00 31             	st         r4,[sp]
40006556:	10 1c 00 31             	st         r4,[sp,16]
4000655a:	8a 24 10 00             	mov        r4,0x400
4000655e:	28 45                   	mov_s      r13,r1
40006560:	08 47                   	mov_s      r15,r0
40006562:	0c 1c 44 32             	sth        r9,[sp,12]
40006566:	64 1c 00 32             	st         r8,[sp,100]
4000656a:	0e 1c c4 31             	sth        r7,[sp,14]
4000656e:	1c 1c 80 31             	st         r6,[sp,28]
40006572:	24 1c 40 31             	st         r5,[sp,36]
40006576:	08 1c 00 31             	st         r4,[sp,8]
4000657a:	14 1c 00 31             	st         r4,[sp,20]
4000657e:	18 1c 01 30             	st         0,[sp,24]
40006582:	7a 0a af ff             	bl.d       400057f8 <_vfiprintf_r>

40006586:	83 41                   	mov_s      r1,sp
40006588:	08 46                   	mov_s      r14,r0
4000658a:	19 0e 32 10             	brlt.d     r14,0,400065a0 <__sbprintf+0x78>

4000658e:	e1 40                   	mov_s      r0,r15
40006590:	66 0e af fe             	bl.d       40003bf4 <_fflush_r>

40006594:	83 41                   	mov_s      r1,sp
40006596:	4c 77                   	mov_s      r2,-1
40006598:	0b 78                   	tst_s      r0,r0
4000659a:	ca 22 81 03             	mov.z      r2,r14
4000659e:	48 46                   	mov_s      r14,r2
400065a0:	0c 14 02 31             	ldh        r2,[sp,12]
400065a4:	0d 0a 9e 01             	bbit0      r2,6,400065b0 <__sbprintf+0x88>

400065a8:	0c 15 02 11             	ldh        r2,[r13,12]
400065ac:	86 ba                   	bset_s     r2,r2,6
400065ae:	46 b5                   	sth_s      r2,[r13,12]
400065b0:	c1 40                   	mov_s      r0,r14
400065b2:	80 24 11 3a             	add        sp,sp,0x468
400065b6:	0c 14 1f 30             	ld         blink,[sp,12]
400065ba:	00 c5                   	ld_s       r13,[sp,0]
400065bc:	01 c6                   	ld_s       r14,[sp,4]
400065be:	02 c7                   	ld_s       r15,[sp,8]
400065c0:	e0 7f                   	j_s.d      [blink]
400065c2:	a4 c0                   	add_s      sp,sp,16

400065c4 <_write_r>:
400065c4:	f1 c0                   	push_s     blink
400065c6:	fc 1c 48 b3             	st.a       r13,[sp,-4]
400065ca:	0a 24 80 0f 00 a8 1c 15 	mov        r4,0xa800151c
400065d2:	08 45                   	mov_s      r13,r0
400065d4:	00 1c 01 00             	st         0,[r4]
400065d8:	20 40                   	mov_s      r0,r1
400065da:	0a 21 80 00             	mov        r1,r2
400065de:	92 08 60 02             	bl.d       4000ae6c <_write>

400065e2:	60 42                   	mov_s      r2,r3
400065e4:	15 08 80 0f ff ff ff ff 	breq       r0,-1,400065f8 <_write_r+0x34>

400065ec:	04 14 1f 30             	ld         blink,[sp,4]
400065f0:	00 c5                   	ld_s       r13,[sp,0]
400065f2:	e0 7f                   	j_s.d      [blink]
400065f4:	a2 c0                   	add_s      sp,sp,8
400065f6:	e0 78                   	nop_s      
400065f8:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
40006600:	76 ea                   	breq_s     r2,0,400065ec <_write_r+0x28>

40006602:	40 a5                   	st_s       r2,[r13,0]
40006604:	04 14 1f 30             	ld         blink,[sp,4]
40006608:	00 c5                   	ld_s       r13,[sp,0]
4000660a:	e0 7f                   	j_s.d      [blink]
4000660c:	a2 c0                   	add_s      sp,sp,8
4000660e:	e0 78                   	nop_s      

40006610 <_calloc_r>:
40006610:	f1 c0                   	push_s     blink
40006612:	00 44                   	mov_s      r4,r0
40006614:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40006618:	20 40                   	mov_s      r0,r1
4000661a:	3e 0f 60 00             	bl.d       40007554 <__mulsi3>

4000661e:	40 41                   	mov_s      r1,r2
40006620:	00 41                   	mov_s      r1,r0
40006622:	b2 0c ef fc             	bl.d       400002d0 <_malloc_r>

40006626:	80 40                   	mov_s      r0,r4
40006628:	0a 25 00 90             	mov.f      r13,r0
4000662c:	40 f2                   	beq_s      400066ac <_calloc_r+0x9c>

4000662e:	fc 15 02 90             	ld         r2,[r13,-4]
40006632:	6c 22 42 00             	bmskn      r2,r2,1
40006636:	42 22 02 01             	sub        r2,r2,4
4000663a:	49 0a 75 09             	brhs.t.d   r2,37,40006680 <_calloc_r+0x70>

4000663e:	93 e2                   	cmp_s      r2,19
40006640:	20 00 2d 00             	bhi.d      40006660 <_calloc_r+0x50>

40006644:	ca 22 4e 03             	mov.ls     r2,r13
40006648:	00 1a 01 00             	st         0,[r2]
4000664c:	04 1a 01 00             	st         0,[r2,4]
40006650:	08 1a 01 00             	st         0,[r2,8]
40006654:	a1 40                   	mov_s      r0,r13
40006656:	04 14 1f 30             	ld         blink,[sp,4]
4000665a:	00 c5                   	ld_s       r13,[sp,0]
4000665c:	e0 7f                   	j_s.d      [blink]
4000665e:	a2 c0                   	add_s      sp,sp,8
40006660:	00 1d 01 10             	st         0,[r13]
40006664:	31 0a 34 07             	brlo.d     r2,28,40006694 <_calloc_r+0x84>

40006668:	04 1d 01 10             	st         0,[r13,4]
4000666c:	08 1d 01 10             	st         0,[r13,8]
40006670:	2d 0a 30 09             	breq.d     r2,36,4000669c <_calloc_r+0x8c>

40006674:	0c 1d 01 10             	st         0,[r13,12]
40006678:	d1 07 ef ff             	b.d        40006648 <_calloc_r+0x38>

4000667c:	40 25 02 14             	add        r2,r13,16
40006680:	f2 0c 2f fd             	bl.d       40000b70 <memset>

40006684:	2c 70                   	mov_s      r1,0
40006686:	a1 40                   	mov_s      r0,r13
40006688:	04 14 1f 30             	ld         blink,[sp,4]
4000668c:	00 c5                   	ld_s       r13,[sp,0]
4000668e:	e0 7f                   	j_s.d      [blink]
40006690:	a2 c0                   	add_s      sp,sp,8
40006692:	e0 78                   	nop_s      
40006694:	b5 07 ef ff             	b.d        40006648 <_calloc_r+0x38>

40006698:	40 25 02 12             	add        r2,r13,8
4000669c:	10 1d 01 10             	st         0,[r13,16]
400066a0:	40 25 02 16             	add        r2,r13,24
400066a4:	a5 07 ef ff             	b.d        40006648 <_calloc_r+0x38>

400066a8:	14 1d 01 10             	st         0,[r13,20]
400066ac:	ab 07 ef ff             	b.d        40006656 <_calloc_r+0x46>

400066b0:	0c 70                   	mov_s      r0,0
400066b2:	e0 78                   	nop_s      

400066b4 <_close_r>:
400066b4:	f1 c0                   	push_s     blink
400066b6:	fc 1c 48 b3             	st.a       r13,[sp,-4]
400066ba:	c3 42 00 a8 1c 15       	mov_s      r2,0xa800151c
400066c0:	08 45                   	mov_s      r13,r0
400066c2:	00 1a 01 00             	st         0,[r2]
400066c6:	1e 08 60 02             	bl.d       4000aee0 <_close>

400066ca:	20 40                   	mov_s      r0,r1
400066cc:	15 08 80 0f ff ff ff ff 	breq       r0,-1,400066e0 <_close_r+0x2c>

400066d4:	04 14 1f 30             	ld         blink,[sp,4]
400066d8:	00 c5                   	ld_s       r13,[sp,0]
400066da:	e0 7f                   	j_s.d      [blink]
400066dc:	a2 c0                   	add_s      sp,sp,8
400066de:	e0 78                   	nop_s      
400066e0:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
400066e8:	76 ea                   	breq_s     r2,0,400066d4 <_close_r+0x20>

400066ea:	40 a5                   	st_s       r2,[r13,0]
400066ec:	04 14 1f 30             	ld         blink,[sp,4]
400066f0:	00 c5                   	ld_s       r13,[sp,0]
400066f2:	e0 7f                   	j_s.d      [blink]
400066f4:	a2 c0                   	add_s      sp,sp,8
400066f6:	e0 78                   	nop_s      

400066f8 <_fclose_r>:
400066f8:	f1 c0                   	push_s     blink
400066fa:	f4 1c 48 b3             	st.a       r13,[sp,-12]
400066fe:	41 c6                   	st_s       r14,[sp,4]
40006700:	0a 25 40 90             	mov.f      r13,r1
40006704:	16 00 21 00             	bz.d       4000671a <_fclose_r+0x22>

40006708:	42 c7                   	st_s       r15,[sp,8]
4000670a:	08 46                   	mov_s      r14,r0
4000670c:	05 ee                   	breq_s     r14,0,40006716 <_fclose_r+0x1e>

4000670e:	4e 80                   	ld_s       r2,[r0,56]
40006710:	4b 7a                   	tst_s      r2,r2
40006712:	d0 0d 81 fe             	blz        40003ce0 <__sinit>

40006716:	46 9d                   	ldh_s.x    r2,[r13,12]
40006718:	8a ea                   	brne_s     r2,0,4000672c <_fclose_r+0x34>

4000671a:	0c 70                   	mov_s      r0,0
4000671c:	0c 14 1f 30             	ld         blink,[sp,12]
40006720:	00 c5                   	ld_s       r13,[sp,0]
40006722:	01 c6                   	ld_s       r14,[sp,4]
40006724:	02 c7                   	ld_s       r15,[sp,8]
40006726:	e0 7f                   	j_s.d      [blink]
40006728:	a4 c0                   	add_s      sp,sp,16
4000672a:	e0 78                   	nop_s      
4000672c:	c1 40                   	mov_s      r0,r14
4000672e:	56 0b af fe             	bl.d       40003a80 <__sflush_r>

40006732:	a1 41                   	mov_s      r1,r13
40006734:	4b 85                   	ld_s       r2,[r13,44]
40006736:	19 0a 30 00             	breq.d     r2,0,4000674c <_fclose_r+0x54>

4000673a:	08 47                   	mov_s      r15,r0
4000673c:	27 85                   	ld_s       r1,[r13,28]
4000673e:	60 7a                   	jl_s.d     [r2]
40006740:	c1 40                   	mov_s      r0,r14
40006742:	4c 77                   	mov_s      r2,-1
40006744:	14 70                   	cmp_s      r0,0
40006746:	ca 22 ca 03             	mov.ge     r2,r15
4000674a:	48 47                   	mov_s      r15,r2
4000674c:	0c 15 02 11             	ldh        r2,[r13,12]
40006750:	49 0a df 01             	bbit1      r2,7,40006798 <_fclose_r+0xa0>

40006754:	2c 85                   	ld_s       r1,[r13,48]
40006756:	19 09 30 00             	breq.d     r1,0,4000676c <_fclose_r+0x74>

4000675a:	56 25 02 12             	add3       r2,r13,8
4000675e:	50 71                   	cmp_s      r1,r2
40006760:	ac 08 e2 fe             	blnz.d     4000400c <_free_r>

40006764:	ca 20 82 03             	mov.nz     r0,r14
40006768:	30 1d 01 10             	st         0,[r13,48]
4000676c:	31 85                   	ld_s       r1,[r13,68]
4000676e:	07 e9                   	breq_s     r1,0,4000677a <_fclose_r+0x82>

40006770:	9e 08 ef fe             	bl.d       4000400c <_free_r>

40006774:	c1 40                   	mov_s      r0,r14
40006776:	44 1d 01 10             	st         0,[r13,68]
4000677a:	7a 0f 8f fe             	bl         40003ef0 <__sfp_lock_acquire>

4000677e:	0c 1d 05 10             	sth        0,[r13,12]
40006782:	76 0f 8f fe             	bl         40003ef4 <__sfp_lock_release>

40006786:	e1 40                   	mov_s      r0,r15
40006788:	0c 14 1f 30             	ld         blink,[sp,12]
4000678c:	00 c5                   	ld_s       r13,[sp,0]
4000678e:	01 c6                   	ld_s       r14,[sp,4]
40006790:	02 c7                   	ld_s       r15,[sp,8]
40006792:	e0 7f                   	j_s.d      [blink]
40006794:	a4 c0                   	add_s      sp,sp,16
40006796:	e0 78                   	nop_s      
40006798:	24 85                   	ld_s       r1,[r13,16]
4000679a:	76 08 ef fe             	bl.d       4000400c <_free_r>

4000679e:	c1 40                   	mov_s      r0,r14
400067a0:	b7 07 ef ff             	b.d        40006756 <_fclose_r+0x5e>

400067a4:	2c 85                   	ld_s       r1,[r13,48]
400067a6:	e0 78                   	nop_s      

400067a8 <fclose>:
400067a8:	00 41                   	mov_s      r1,r0
400067aa:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
400067b2:	49 07 cf ff             	b          400066f8 <_fclose_r>

400067b6:	e0 78                   	nop_s      

400067b8 <__fputwc>:
400067b8:	f1 c0                   	push_s     blink
400067ba:	e8 1c 48 b3             	st.a       r13,[sp,-24]
400067be:	10 1c 40 34             	st         r17,[sp,16]
400067c2:	14 1c 80 34             	st         r18,[sp,20]
400067c6:	41 c6                   	st_s       r14,[sp,4]
400067c8:	42 c7                   	st_s       r15,[sp,8]
400067ca:	0c 1c 00 34             	st         r16,[sp,12]
400067ce:	10 42                   	mov_s      r18,r0
400067d0:	a1 c1                   	sub_s      sp,sp,4
400067d2:	30 41                   	mov_s      r17,r1
400067d4:	92 0c ef fe             	bl.d       40004464 <__locale_mb_cur_max>

400067d8:	0a 25 80 10             	mov        r13,r2
400067dc:	b5 08 70 00             	breq.d     r0,1,40006890 <__fputwc+0xd8>

400067e0:	42 21 42 20             	sub        r2,r17,1
400067e4:	42 40                   	mov_s      r0,r18
400067e6:	83 41                   	mov_s      r1,sp
400067e8:	22 42                   	mov_s      r2,r17
400067ea:	32 0c 60 00             	bl.d       40007418 <_wcrtomb_r>

400067ee:	55 25 c3 15             	add2       r3,r13,23
400067f2:	10 40                   	mov_s      r16,r0
400067f4:	5d 08 80 0f ff ff ff ff 	breq       r0,-1,40006850 <__fputwc+0x98>

400067fc:	4d 08 30 00             	breq.d     r0,0,40006848 <__fputwc+0x90>

40006800:	20 c1                   	ldb_s      r1,[sp,0]
40006802:	8b 47                   	mov_s      r15,sp
40006804:	1f 00 20 00             	b.d        40006822 <__fputwc+0x6a>

40006808:	cd 70                   	mov_s      r14,0
4000680a:	e0 78                   	nop_s      
4000680c:	60 85                   	ld_s       r3,[r13,0]
4000680e:	20 ab                   	stb_s      r1,[r3,0]
40006810:	60 85                   	ld_s       r3,[r13,0]
40006812:	64 71                   	add_s      r3,r3,1
40006814:	60 a5                   	st_s       r3,[r13,0]
40006816:	c5 71                   	add_s      r14,r14,1
40006818:	43 0e 25 14             	brhs.t.d   r14,r16,4000685a <__fputwc+0xa2>

4000681c:	22 40                   	mov_s      r0,r17
4000681e:	01 17 81 12             	ldb.a      r1,[r15,1]
40006822:	62 85                   	ld_s       r3,[r13,8]
40006824:	69 6b                   	sub_s      r3,r3,1
40006826:	e9 0b 33 80             	brge.d     r3,0,4000680c <__fputwc+0x54>

4000682a:	62 a5                   	st_s       r3,[r13,8]
4000682c:	46 85                   	ld_s       r2,[r13,24]
4000682e:	4d 0b 82 00             	brlt       r3,r2,40006878 <__fputwc+0xc0>

40006832:	40 85                   	ld_s       r2,[r13,0]
40006834:	20 aa                   	stb_s      r1,[r2,0]
40006836:	40 85                   	ld_s       r2,[r13,0]
40006838:	60 8a                   	ldb_s      r3,[r2,0]
4000683a:	71 0b b0 02             	breq.d     r3,10,400068a8 <__fputwc+0xf0>

4000683e:	44 71                   	add_s      r2,r2,1
40006840:	c5 71                   	add_s      r14,r14,1
40006842:	df 0e 24 94             	brlo.d     r14,r16,4000681e <__fputwc+0x66>

40006846:	40 a5                   	st_s       r2,[r13,0]
40006848:	13 00 20 00             	b.d        4000685a <__fputwc+0xa2>

4000684c:	22 40                   	mov_s      r0,r17
4000684e:	e0 78                   	nop_s      
40006850:	0c 15 02 11             	ldh        r2,[r13,12]
40006854:	0c 77                   	mov_s      r0,-1
40006856:	86 ba                   	bset_s     r2,r2,6
40006858:	46 b5                   	sth_s      r2,[r13,12]
4000685a:	1c 14 1f 30             	ld         blink,[sp,28]
4000685e:	04 14 0d 32             	ld.a       r13,[sp,4]
40006862:	01 c6                   	ld_s       r14,[sp,4]
40006864:	02 c7                   	ld_s       r15,[sp,8]
40006866:	0c 14 10 30             	ld         r16,[sp,12]
4000686a:	10 14 11 30             	ld         r17,[sp,16]
4000686e:	14 14 12 30             	ld         r18,[sp,20]
40006872:	e0 7f                   	j_s.d      [blink]
40006874:	a7 c0                   	add_s      sp,sp,28
40006876:	e0 78                   	nop_s      
40006878:	42 40                   	mov_s      r0,r18
4000687a:	b2 0a 60 00             	bl.d       40007328 <__swbuf_r>

4000687e:	a1 42                   	mov_s      r2,r13
40006880:	4c 71                   	mov_s      r2,1
40006882:	14 77                   	cmp_s      r0,-1
40006884:	c0 7a                   	sub_s.ne   r2,r2,r2
40006886:	93 0a 30 80             	breq.d     r2,0,40006816 <__fputwc+0x5e>

4000688a:	0c 77                   	mov_s      r0,-1
4000688c:	e7 f1                   	b_s        4000685a <__fputwc+0xa2>

4000688e:	e0 78                   	nop_s      
40006890:	55 0e 84 f0 00 00 fe 00 	brlo       254,r2,400067e4 <__fputwc+0x2c>

40006898:	2f 21 47 04             	extb       r1,r17
4000689c:	81 c7                   	add_s      r15,sp,4
4000689e:	0e 71                   	mov_s      r16,1
400068a0:	63 07 ef ff             	b.d        40006802 <__fputwc+0x4a>

400068a4:	fc 1f 4a 90             	stb.a      r1,[r15,-4]
400068a8:	42 40                   	mov_s      r0,r18
400068aa:	d3 07 ef ff             	b.d        4000687a <__fputwc+0xc2>

400068ae:	0a d9                   	mov_s      r1,10

400068b0 <_fputwc_r>:
400068b0:	66 9a                   	ldh_s.x    r3,[r2,12]
400068b2:	17 0b 7f 03             	bbit1.d    r3,13,400068c6 <_fputwc_r+0x16>

400068b6:	64 12 04 00             	ld         r4,[r2,100]
400068ba:	8d bb                   	bset_s     r3,r3,13
400068bc:	4f 24 44 03             	bset       r4,r4,13
400068c0:	66 b2                   	sth_s      r3,[r2,12]
400068c2:	64 1a 00 01             	st         r4,[r2,100]
400068c6:	f5 06 cf ff             	b          400067b8 <__fputwc>

400068ca:	e0 78                   	nop_s      

400068cc <fputwc>:
400068cc:	f1 c0                   	push_s     blink
400068ce:	f8 1c 48 b3             	st.a       r13,[sp,-8]
400068d2:	00 16 0d 70 00 a8 10 08 	ld         r13,[0xa8000810]
400068da:	41 c6                   	st_s       r14,[sp,4]
400068dc:	20 42                   	mov_s      r2,r1
400068de:	a1 c1                   	sub_s      sp,sp,4
400068e0:	17 0d 30 10             	breq.d     r13,0,400068f6 <fputwc+0x2a>

400068e4:	08 46                   	mov_s      r14,r0
400068e6:	6e 85                   	ld_s       r3,[r13,56]
400068e8:	11 0b 39 00             	brne.t.d   r3,0,400068f8 <fputwc+0x2c>

400068ec:	a1 40                   	mov_s      r0,r13
400068ee:	f6 0b af fe             	bl.d       40003ce0 <__sinit>

400068f2:	40 c1                   	st_s       r1,[sp,0]
400068f4:	00 c2                   	ld_s       r2,[sp,0]
400068f6:	a1 40                   	mov_s      r0,r13
400068f8:	c1 41                   	mov_s      r1,r14
400068fa:	0c 14 1f 30             	ld         blink,[sp,12]
400068fe:	04 14 0d 32             	ld.a       r13,[sp,4]
40006902:	01 c6                   	ld_s       r14,[sp,4]
40006904:	ad 07 ef ff             	b.d        400068b0 <_fputwc_r>

40006908:	a3 c0                   	add_s      sp,sp,12
4000690a:	e0 78                   	nop_s      

4000690c <_fstat_r>:
4000690c:	f1 c0                   	push_s     blink
4000690e:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40006912:	c3 43 00 a8 1c 15       	mov_s      r3,0xa800151c
40006918:	08 45                   	mov_s      r13,r0
4000691a:	00 1b 01 00             	st         0,[r3]
4000691e:	0a 20 40 00             	mov        r0,r1
40006922:	aa 0d 20 02             	bl.d       4000aec8 <_fstat>

40006926:	40 41                   	mov_s      r1,r2
40006928:	15 08 80 0f ff ff ff ff 	breq       r0,-1,4000693c <_fstat_r+0x30>

40006930:	04 14 1f 30             	ld         blink,[sp,4]
40006934:	00 c5                   	ld_s       r13,[sp,0]
40006936:	e0 7f                   	j_s.d      [blink]
40006938:	a2 c0                   	add_s      sp,sp,8
4000693a:	e0 78                   	nop_s      
4000693c:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
40006944:	76 ea                   	breq_s     r2,0,40006930 <_fstat_r+0x24>

40006946:	40 a5                   	st_s       r2,[r13,0]
40006948:	04 14 1f 30             	ld         blink,[sp,4]
4000694c:	00 c5                   	ld_s       r13,[sp,0]
4000694e:	e0 7f                   	j_s.d      [blink]
40006950:	a2 c0                   	add_s      sp,sp,8
40006952:	e0 78                   	nop_s      

40006954 <__sfvwrite_r>:
40006954:	f1 c0                   	push_s     blink
40006956:	d8 1c 48 b3             	st.a       r13,[sp,-40]
4000695a:	0c 1c 00 34             	st         r16,[sp,12]
4000695e:	50 40                   	mov_s      r16,r2
40006960:	42 82                   	ld_s       r2,[r2,8]
40006962:	41 c6                   	st_s       r14,[sp,4]
40006964:	42 c7                   	st_s       r15,[sp,8]
40006966:	10 1c 40 34             	st         r17,[sp,16]
4000696a:	14 1c 80 34             	st         r18,[sp,20]
4000696e:	18 1c c0 34             	st         r19,[sp,24]
40006972:	1c 1c 00 35             	st         r20,[sp,28]
40006976:	20 1c 40 35             	st         r21,[sp,32]
4000697a:	69 0a 30 00             	breq.d     r2,0,400069e0 <__sfvwrite_r+0x8c>

4000697e:	24 1c 80 35             	st         r22,[sp,36]
40006982:	0c 11 03 01             	ldh        r3,[r1,12]
40006986:	10 43                   	mov_s      r19,r0
40006988:	85 0b fe 00             	bbit0.d    r3,3,40006a0c <__sfvwrite_r+0xb8>

4000698c:	28 45                   	mov_s      r13,r1
4000698e:	44 81                   	ld_s       r2,[r1,16]
40006990:	7d 0a 10 00             	breq       r2,0,40006a0c <__sfvwrite_r+0xb8>

40006994:	93 0b 7e 00             	bbit0.d    r3,1,40006a26 <__sfvwrite_r+0xd2>

40006998:	00 10 0e 20             	ld         r14,[r16,0]
4000699c:	2e 70                   	mov_s      r17,0
4000699e:	ed 70                   	mov_s      r15,0
400069a0:	0a 22 80 2f ff 7f 00 fc 	mov        r18,0x7ffffc00
400069a8:	22 42                   	mov_s      r2,r17
400069aa:	f1 0f 30 10             	breq.d     r15,0,40006a98 <__sfvwrite_r+0x144>

400069ae:	62 40                   	mov_s      r0,r19
400069b0:	24 15 04 10             	ld         r4,[r13,36]
400069b4:	27 85                   	ld_s       r1,[r13,28]
400069b6:	d3 77 ff 7f 00 fc       	cmp_s      r15,0x7ffffc00
400069bc:	42 43                   	mov_s      r3,r18
400069be:	23 20 00 01             	jl.d       [r4]
400069c2:	ca 23 ce 03             	mov.ls     r3,r15
400069c6:	14 70                   	cmp_s      r0,0
400069c8:	20 01 0c 00             	ble        40006ae8 <__sfvwrite_r+0x194>

400069cc:	08 10 02 20             	ld         r2,[r16,8]
400069d0:	00 21 11 20             	add        r17,r17,r0
400069d4:	02 7a                   	sub_s      r2,r2,r0
400069d6:	08 18 80 20             	st         r2,[r16,8]
400069da:	d1 0a 31 80             	brne.d     r2,0,400069a8 <__sfvwrite_r+0x54>

400069de:	02 7f                   	sub_s      r15,r15,r0
400069e0:	0c 70                   	mov_s      r0,0
400069e2:	28 14 1f 30             	ld         blink,[sp,40]
400069e6:	00 c5                   	ld_s       r13,[sp,0]
400069e8:	01 c6                   	ld_s       r14,[sp,4]
400069ea:	02 c7                   	ld_s       r15,[sp,8]
400069ec:	0c 14 10 30             	ld         r16,[sp,12]
400069f0:	10 14 11 30             	ld         r17,[sp,16]
400069f4:	14 14 12 30             	ld         r18,[sp,20]
400069f8:	18 14 13 30             	ld         r19,[sp,24]
400069fc:	1c 14 14 30             	ld         r20,[sp,28]
40006a00:	20 14 15 30             	ld         r21,[sp,32]
40006a04:	24 14 16 30             	ld         r22,[sp,36]
40006a08:	e0 7f                   	j_s.d      [blink]
40006a0a:	ab c0                   	add_s      sp,sp,44
40006a0c:	62 40                   	mov_s      r0,r19
40006a0e:	c6 0b ef fd             	bl.d       400025d0 <__swsetup_r>

40006a12:	a1 41                   	mov_s      r1,r13
40006a14:	0b 78                   	tst_s      r0,r0
40006a16:	cc 02 02 00             	bnz        40006ce0 <__sfvwrite_r+0x38c>

40006a1a:	0c 15 03 11             	ldh        r3,[r13,12]
40006a1e:	81 0b 77 80             	bbit1.nt.d r3,1,4000699c <__sfvwrite_r+0x48>

40006a22:	00 10 0e 20             	ld         r14,[r16,0]
40006a26:	d1 0b 3f 00             	bbit1.d    r3,0,40006af4 <__sfvwrite_r+0x1a0>

40006a2a:	4e 70                   	mov_s      r18,0
40006a2c:	2e 70                   	mov_s      r17,0
40006a2e:	ed 70                   	mov_s      r15,0
40006a30:	0a 24 80 2f ff 7f ff ff 	mov        r20,0x7fffffff
40006a38:	29 ef                   	breq_s     r15,0,40006a8a <__sfvwrite_r+0x136>

40006a3a:	6d 0b 7e 02             	bbit0.d    r3,9,40006aa4 <__sfvwrite_r+0x150>

40006a3e:	08 15 12 10             	ld         r18,[r13,8]
40006a42:	52 77                   	cmp_s      r15,r18
40006a44:	74 01 25 00             	bc.d       40006bb8 <__sfvwrite_r+0x264>

40006a48:	8b 23 12 80             	tst        r3,0x480
40006a4c:	ca f4                   	bne_s      40006be0 <__sfvwrite_r+0x28c>

40006a4e:	00 85                   	ld_s       r0,[r13,0]
40006a50:	52 45                   	mov_s      r21,r18
40006a52:	a2 42                   	mov_s      r2,r21
40006a54:	32 0b 20 00             	bl.d       40006d84 <memmove>

40006a58:	22 41                   	mov_s      r1,r17
40006a5a:	40 85                   	ld_s       r2,[r13,0]
40006a5c:	62 85                   	ld_s       r3,[r13,8]
40006a5e:	00 25 95 20             	add        r21,r21,r2
40006a62:	02 23 83 04             	sub        r3,r3,r18
40006a66:	00 1d 40 15             	st         r21,[r13]
40006a6a:	62 a5                   	st_s       r3,[r13,8]
40006a6c:	e1 42                   	mov_s      r2,r15
40006a6e:	08 10 03 20             	ld         r3,[r16,8]
40006a72:	00 21 91 20             	add        r17,r17,r2
40006a76:	42 7b                   	sub_s      r3,r3,r2
40006a78:	08 18 c0 20             	st         r3,[r16,8]
40006a7c:	65 0b 38 80             	breq.nt.d  r3,0,400069e0 <__sfvwrite_r+0x8c>

40006a80:	42 7f                   	sub_s      r15,r15,r2
40006a82:	bb 0f 39 90             	brne.nt.d  r15,0,40006a3a <__sfvwrite_r+0xe6>

40006a86:	0c 15 03 11             	ldh        r3,[r13,12]
40006a8a:	00 16 11 10             	ld         r17,[r14,0]
40006a8e:	e1 86                   	ld_s       r15,[r14,4]
40006a90:	a9 07 ef ff             	b.d        40006a38 <__sfvwrite_r+0xe4>

40006a94:	08 e6                   	add_s      r14,r14,8
40006a96:	e0 78                   	nop_s      
40006a98:	00 16 11 10             	ld         r17,[r14,0]
40006a9c:	e1 86                   	ld_s       r15,[r14,4]
40006a9e:	0d 07 ef ff             	b.d        400069a8 <__sfvwrite_r+0x54>

40006aa2:	08 e6                   	add_s      r14,r14,8
40006aa4:	00 85                   	ld_s       r0,[r13,0]
40006aa6:	44 85                   	ld_s       r2,[r13,16]
40006aa8:	11 0a 04 00             	brlo       r2,r0,40006ab8 <__sfvwrite_r+0x164>

40006aac:	14 15 15 10             	ld         r21,[r13,20]
40006ab0:	b2 77                   	cmp_s      r15,r21
40006ab2:	a8 01 26 00             	bnc.d      40006c58 <__sfvwrite_r+0x304>

40006ab6:	a2 41                   	mov_s      r1,r21
40006ab8:	52 77                   	cmp_s      r15,r18
40006aba:	22 41                   	mov_s      r1,r17
40006abc:	ca 22 ce 23             	mov.ls     r18,r15
40006ac0:	c6 0a 20 00             	bl.d       40006d84 <memmove>

40006ac4:	42 42                   	mov_s      r2,r18
40006ac6:	42 85                   	ld_s       r2,[r13,8]
40006ac8:	60 85                   	ld_s       r3,[r13,0]
40006aca:	02 22 82 04             	sub        r2,r2,r18
40006ace:	42 73                   	add_s      r3,r3,r18
40006ad0:	42 a5                   	st_s       r2,[r13,8]
40006ad2:	ad 0a 39 00             	brne.t.d   r2,0,40006b7c <__sfvwrite_r+0x228>

40006ad6:	60 a5                   	st_s       r3,[r13,0]
40006ad8:	62 40                   	mov_s      r0,r19
40006ada:	1e 09 af fe             	bl.d       40003bf4 <_fflush_r>

40006ade:	a1 41                   	mov_s      r1,r13
40006ae0:	8f 08 30 80             	breq.d     r0,0,40006a6e <__sfvwrite_r+0x11a>

40006ae4:	0a 22 80 04             	mov        r2,r18
40006ae8:	46 9d                   	ldh_s.x    r2,[r13,12]
40006aea:	86 ba                   	bset_s     r2,r2,6
40006aec:	0c 77                   	mov_s      r0,-1
40006aee:	f7 06 ef ff             	b.d        400069e2 <__sfvwrite_r+0x8e>

40006af2:	46 b5                   	sth_s      r2,[r13,12]
40006af4:	ae 70                   	mov_s      r21,0
40006af6:	8e 70                   	mov_s      r20,0
40006af8:	4a 21 00 20             	mov        r17,0
40006afc:	6f 09 10 20             	breq       r17,0,40006b6a <__sfvwrite_r+0x216>

40006b00:	c5 0d 30 20             	breq.d     r21,0,40006bc4 <__sfvwrite_r+0x270>

40006b04:	82 40                   	mov_s      r0,r20
40006b06:	00 85                   	ld_s       r0,[r13,0]
40006b08:	10 15 04 10             	ld         r4,[r13,16]
40006b0c:	0c 22 40 a4             	cmp        r18,r17
40006b10:	2a 47                   	mov_s      r15,r17
40006b12:	42 85                   	ld_s       r2,[r13,8]
40006b14:	ca 27 8e 14             	mov.ls     r15,r18
40006b18:	13 0c 25 00             	brhs.t.d   r4,r0,40006b2a <__sfvwrite_r+0x1d6>

40006b1c:	65 85                   	ld_s       r3,[r13,20]
40006b1e:	00 22 d6 00             	add        r22,r2,r3
40006b22:	d2 77                   	cmp_s      r15,r22
40006b24:	6c 01 29 00             	bgt.d      40006c90 <__sfvwrite_r+0x33c>

40006b28:	82 41                   	mov_s      r1,r20
40006b2a:	5d 0f e2 10             	brlt.d     r15,r3,40006b84 <__sfvwrite_r+0x230>

40006b2e:	e1 42                   	mov_s      r2,r15
40006b30:	24 15 04 10             	ld         r4,[r13,36]
40006b34:	27 85                   	ld_s       r1,[r13,28]
40006b36:	62 40                   	mov_s      r0,r19
40006b38:	23 20 00 01             	jl.d       [r4]
40006b3c:	82 42                   	mov_s      r2,r20
40006b3e:	08 47                   	mov_s      r15,r0
40006b40:	a9 0f 5a 90             	brlt.nt    r15,1,40006ae8 <__sfvwrite_r+0x194>

40006b44:	02 22 d2 a3             	sub.f      r18,r18,r15
40006b48:	58 00 21 00             	bz.d       40006ba0 <__sfvwrite_r+0x24c>

40006b4c:	62 40                   	mov_s      r0,r19
40006b4e:	08 10 02 20             	ld         r2,[r16,8]
40006b52:	00 24 d4 23             	add        r20,r20,r15
40006b56:	e2 7a                   	sub_s      r2,r2,r15
40006b58:	08 18 80 20             	st         r2,[r16,8]
40006b5c:	4b 7a                   	tst_s      r2,r2
40006b5e:	84 06 e1 ff             	bz.d       400069e0 <__sfvwrite_r+0x8c>

40006b62:	02 21 d1 23             	sub        r17,r17,r15
40006b66:	9d 09 11 a0             	brne       r17,0,40006b00 <__sfvwrite_r+0x1ac>

40006b6a:	00 16 14 10             	ld         r20,[r14,0]
40006b6e:	04 16 11 10             	ld         r17,[r14,4]
40006b72:	ae 70                   	mov_s      r21,0
40006b74:	89 07 ef ff             	b.d        40006afc <__sfvwrite_r+0x1a8>

40006b78:	08 e6                   	add_s      r14,r14,8
40006b7a:	e0 78                   	nop_s      
40006b7c:	f3 06 ef ff             	b.d        40006a6e <__sfvwrite_r+0x11a>

40006b80:	42 42                   	mov_s      r2,r18
40006b82:	e0 78                   	nop_s      
40006b84:	02 0a 20 00             	bl.d       40006d84 <memmove>

40006b88:	82 41                   	mov_s      r1,r20
40006b8a:	62 85                   	ld_s       r3,[r13,8]
40006b8c:	40 85                   	ld_s       r2,[r13,0]
40006b8e:	e2 7b                   	sub_s      r3,r3,r15
40006b90:	fa 62                   	add_s      r2,r2,r15
40006b92:	62 a5                   	st_s       r3,[r13,8]
40006b94:	02 22 d2 a3             	sub.f      r18,r18,r15
40006b98:	b6 07 e2 ff             	bnz.d      40006b4e <__sfvwrite_r+0x1fa>

40006b9c:	40 a5                   	st_s       r2,[r13,0]
40006b9e:	62 40                   	mov_s      r0,r19
40006ba0:	56 08 af fe             	bl.d       40003bf4 <_fflush_r>

40006ba4:	0a 21 40 03             	mov        r1,r13
40006ba8:	41 08 19 80             	brne.nt    r0,0,40006ae8 <__sfvwrite_r+0x194>

40006bac:	ae 70                   	mov_s      r21,0
40006bae:	a7 07 ef ff             	b.d        40006b52 <__sfvwrite_r+0x1fe>

40006bb2:	08 10 02 20             	ld         r2,[r16,8]
40006bb6:	e0 78                   	nop_s      
40006bb8:	00 85                   	ld_s       r0,[r13,0]
40006bba:	f1 42                   	mov_s      r18,r15
40006bbc:	97 06 ef ff             	b.d        40006a52 <__sfvwrite_r+0xfe>

40006bc0:	f1 45                   	mov_s      r21,r15
40006bc2:	e0 78                   	nop_s      
40006bc4:	0a d9                   	mov_s      r1,10
40006bc6:	f2 09 ef fe             	bl.d       400045b4 <memchr>

40006bca:	22 42                   	mov_s      r2,r17
40006bcc:	0b 78                   	tst_s      r0,r0
40006bce:	84 f2                   	beq_s      40006cd4 <__sfvwrite_r+0x380>

40006bd0:	40 20 52 00             	add        r18,r0,1
40006bd4:	ae 71                   	mov_s      r21,1
40006bd6:	33 07 ef ff             	b.d        40006b06 <__sfvwrite_r+0x1b2>

40006bda:	02 22 12 25             	sub        r18,r18,r20
40006bde:	e0 78                   	nop_s      
40006be0:	14 15 12 10             	ld         r18,[r13,20]
40006be4:	24 85                   	ld_s       r1,[r13,16]
40006be6:	00 15 15 10             	ld         r21,[r13,0]
40006bea:	14 22 92 24             	add1       r18,r18,r18
40006bee:	42 42                   	mov_s      r2,r18
40006bf0:	00 22 be 80             	add.f      0,r2,r2
40006bf4:	6f 22 0b 00             	rlc        r2,0
40006bf8:	02 25 55 20             	sub        r21,r21,r1
40006bfc:	00 22 92 20             	add        r18,r18,r2
40006c00:	40 25 42 20             	add        r2,r21,1
40006c04:	2f 22 81 24             	asr        r18,r18
40006c08:	fa 62                   	add_s      r2,r2,r15
40006c0a:	0c 22 80 a0             	cmp        r18,r2
40006c0e:	ca 22 85 20             	mov.c      r18,r2
40006c12:	ca 22 86 04             	mov.nc     r2,r18
40006c16:	a1 0b be 02             	bbit0.d    r3,10,40006cb4 <__sfvwrite_r+0x360>

40006c1a:	62 40                   	mov_s      r0,r19
40006c1c:	b6 0e af fc             	bl.d       400002d0 <_malloc_r>

40006c20:	40 41                   	mov_s      r1,r2
40006c22:	0a 26 00 a0             	mov.f      r22,r0
40006c26:	62 f2                   	beq_s      40006ce8 <__sfvwrite_r+0x394>

40006c28:	24 85                   	ld_s       r1,[r13,16]
40006c2a:	be 0e ef fc             	bl.d       40000ae4 <memcpy>

40006c2e:	a2 42                   	mov_s      r2,r21
40006c30:	0c 15 02 11             	ldh        r2,[r13,12]
40006c34:	84 22 ed 0f             	and        r2,r2,0xfffffb7f
40006c38:	87 ba                   	bset_s     r2,r2,7
40006c3a:	46 b5                   	sth_s      r2,[r13,12]
40006c3c:	02 22 42 25             	sub        r2,r18,r21
40006c40:	00 26 40 25             	add        r0,r22,r21
40006c44:	14 1d 80 14             	st         r18,[r13,20]
40006c48:	10 1d 80 15             	st         r22,[r13,16]
40006c4c:	00 a5                   	st_s       r0,[r13,0]
40006c4e:	f1 42                   	mov_s      r18,r15
40006c50:	42 a5                   	st_s       r2,[r13,8]
40006c52:	03 06 ef ff             	b.d        40006a52 <__sfvwrite_r+0xfe>

40006c56:	f1 45                   	mov_s      r21,r15
40006c58:	d3 77 ff 7f ff ff       	cmp_s      r15,0x7fffffff
40006c5e:	82 40                   	mov_s      r0,r20
40006c60:	2a 09 60 00             	bl.d       40007588 <__divsi3>

40006c64:	ca 20 ce 03             	mov.ls     r0,r15
40006c68:	00 41                   	mov_s      r1,r0
40006c6a:	ee 08 60 00             	bl.d       40007554 <__mulsi3>

40006c6e:	a2 40                   	mov_s      r0,r21
40006c70:	24 15 04 10             	ld         r4,[r13,36]
40006c74:	27 85                   	ld_s       r1,[r13,28]
40006c76:	00 43                   	mov_s      r3,r0
40006c78:	22 42                   	mov_s      r2,r17
40006c7a:	23 20 00 01             	jl.d       [r4]
40006c7e:	62 40                   	mov_s      r0,r19
40006c80:	14 70                   	cmp_s      r0,0
40006c82:	68 06 ec ff             	ble.d      40006ae8 <__sfvwrite_r+0x194>

40006c86:	00 42                   	mov_s      r2,r0
40006c88:	eb 05 ef ff             	b.d        40006a72 <__sfvwrite_r+0x11e>

40006c8c:	08 10 03 20             	ld         r3,[r16,8]
40006c90:	f6 08 20 00             	bl.d       40006d84 <memmove>

40006c94:	c2 42                   	mov_s      r2,r22
40006c96:	40 85                   	ld_s       r2,[r13,0]
40006c98:	62 40                   	mov_s      r0,r19
40006c9a:	c2 72                   	add_s      r2,r2,r22
40006c9c:	40 a5                   	st_s       r2,[r13,0]
40006c9e:	5a 0f 6f fe             	bl.d       40003bf4 <_fflush_r>

40006ca2:	a1 41                   	mov_s      r1,r13
40006ca4:	0b 78                   	tst_s      r0,r0
40006ca6:	22 f5                   	bne_s      40006ae8 <__sfvwrite_r+0x194>

40006ca8:	ca 47                   	mov_s      r15,r22
40006caa:	a1 06 ef ff             	b.d        40006b48 <__sfvwrite_r+0x1f4>

40006cae:	02 22 d2 a3             	sub.f      r18,r18,r15
40006cb2:	e0 78                   	nop_s      
40006cb4:	1a 0a 00 00             	bl         40006ecc <_realloc_r>

40006cb8:	0a 26 00 a0             	mov.f      r22,r0
40006cbc:	c0 f5                   	bne_s      40006c3c <__sfvwrite_r+0x2e8>

40006cbe:	24 85                   	ld_s       r1,[r13,16]
40006cc0:	4e 0b af fe             	bl.d       4000400c <_free_r>

40006cc4:	62 40                   	mov_s      r0,r19
40006cc6:	46 9d                   	ldh_s.x    r2,[r13,12]
40006cc8:	00 1b 01 23             	st         12,[r19]
40006ccc:	1f 06 ef ff             	b.d        40006aea <__sfvwrite_r+0x196>

40006cd0:	a7 ba                   	bclr_s     r2,r2,7
40006cd2:	e0 78                   	nop_s      
40006cd4:	40 21 52 20             	add        r18,r17,1
40006cd8:	2f 06 ef ff             	b.d        40006b06 <__sfvwrite_r+0x1b2>

40006cdc:	ae 71                   	mov_s      r21,1
40006cde:	e0 78                   	nop_s      
40006ce0:	03 05 ef ff             	b.d        400069e2 <__sfvwrite_r+0x8e>

40006ce4:	0c 77                   	mov_s      r0,-1
40006ce6:	e0 78                   	nop_s      
40006ce8:	00 1b 01 23             	st         12,[r19]
40006cec:	ff 05 ef ff             	b.d        40006aea <__sfvwrite_r+0x196>

40006cf0:	46 9d                   	ldh_s.x    r2,[r13,12]
40006cf2:	e0 78                   	nop_s      

40006cf4 <_isatty_r>:
40006cf4:	f1 c0                   	push_s     blink
40006cf6:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40006cfa:	c3 42 00 a8 1c 15       	mov_s      r2,0xa800151c
40006d00:	08 45                   	mov_s      r13,r0
40006d02:	00 1a 01 00             	st         0,[r2]
40006d06:	b6 09 20 02             	bl.d       4000aeb8 <_isatty>

40006d0a:	20 40                   	mov_s      r0,r1
40006d0c:	15 08 80 0f ff ff ff ff 	breq       r0,-1,40006d20 <_isatty_r+0x2c>

40006d14:	04 14 1f 30             	ld         blink,[sp,4]
40006d18:	00 c5                   	ld_s       r13,[sp,0]
40006d1a:	e0 7f                   	j_s.d      [blink]
40006d1c:	a2 c0                   	add_s      sp,sp,8
40006d1e:	e0 78                   	nop_s      
40006d20:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
40006d28:	76 ea                   	breq_s     r2,0,40006d14 <_isatty_r+0x20>

40006d2a:	40 a5                   	st_s       r2,[r13,0]
40006d2c:	04 14 1f 30             	ld         blink,[sp,4]
40006d30:	00 c5                   	ld_s       r13,[sp,0]
40006d32:	e0 7f                   	j_s.d      [blink]
40006d34:	a2 c0                   	add_s      sp,sp,8
40006d36:	e0 78                   	nop_s      

40006d38 <_lseek_r>:
40006d38:	f1 c0                   	push_s     blink
40006d3a:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40006d3e:	0a 24 80 0f 00 a8 1c 15 	mov        r4,0xa800151c
40006d46:	08 45                   	mov_s      r13,r0
40006d48:	00 1c 01 00             	st         0,[r4]
40006d4c:	20 40                   	mov_s      r0,r1
40006d4e:	0a 21 80 00             	mov        r1,r2
40006d52:	a2 09 20 02             	bl.d       4000aef0 <_lseek>

40006d56:	60 42                   	mov_s      r2,r3
40006d58:	15 08 80 0f ff ff ff ff 	breq       r0,-1,40006d6c <_lseek_r+0x34>

40006d60:	04 14 1f 30             	ld         blink,[sp,4]
40006d64:	00 c5                   	ld_s       r13,[sp,0]
40006d66:	e0 7f                   	j_s.d      [blink]
40006d68:	a2 c0                   	add_s      sp,sp,8
40006d6a:	e0 78                   	nop_s      
40006d6c:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
40006d74:	76 ea                   	breq_s     r2,0,40006d60 <_lseek_r+0x28>

40006d76:	40 a5                   	st_s       r2,[r13,0]
40006d78:	04 14 1f 30             	ld         blink,[sp,4]
40006d7c:	00 c5                   	ld_s       r13,[sp,0]
40006d7e:	e0 7f                   	j_s.d      [blink]
40006d80:	a2 c0                   	add_s      sp,sp,8
40006d82:	e0 78                   	nop_s      

40006d84 <memmove>:
40006d84:	29 09 25 00             	brhs.t.d   r1,r0,40006dac <memmove+0x28>

40006d88:	40 45                   	mov_s      r5,r2
40006d8a:	5b 61                   	add_s      r3,r1,r2
40006d8c:	21 08 c5 00             	brhs.t     r0,r3,40006dac <memmove+0x28>

40006d90:	19 0d 30 00             	breq.d     r5,0,40006da8 <memmove+0x24>

40006d94:	5a 60                   	add_s      r2,r0,r2
40006d96:	0a 24 40 71             	mov        lp_count,r5
40006d9a:	e0 78                   	nop_s      
40006d9c:	a8 20 80 01             	lp         40006da8 <memmove+0x24>

40006da0:	ff 13 84 82             	ldb.a      r4,[r3,-1]
40006da4:	ff 1a 0a 81             	stb.a      r4,[r2,-1]
40006da8:	e0 7e                   	j_s        [blink]
40006daa:	e0 78                   	nop_s      
40006dac:	25 0d 35 04             	brhs.t.d   r5,16,40006dd0 <memmove+0x4c>

40006db0:	05 20 42 00             	or         r2,r0,r1
40006db4:	00 42                   	mov_s      r2,r0
40006db6:	f5 0d 10 80             	breq       r5,0,40006da8 <memmove+0x24>

40006dba:	0a 24 40 71             	mov        lp_count,r5
40006dbe:	29 69                   	sub_s      r1,r1,1
40006dc0:	a8 20 80 01             	lp         40006dcc <memmove+0x48>

40006dc4:	01 11 83 02             	ldb.a      r3,[r1,1]
40006dc8:	01 1a d2 00             	stb.ab     r3,[r2,1]
40006dcc:	e0 7e                   	j_s        [blink]
40006dce:	e0 78                   	nop_s      
40006dd0:	c1 ba                   	bmsk_s     r2,r2,1
40006dd2:	eb 0a 39 80             	brne.nt.d  r2,0,40006dba <memmove+0x36>

40006dd6:	00 42                   	mov_s      r2,r0
40006dd8:	42 25 06 04             	sub        r6,r5,16
40006ddc:	20 44                   	mov_s      r4,r1
40006dde:	2f 26 82 01             	lsr        r6,r6
40006de2:	2f 26 82 01             	lsr        r6,r6
40006de6:	2f 26 82 01             	lsr        r6,r6
40006dea:	2f 26 82 01             	lsr        r6,r6
40006dee:	00 43                   	mov_s      r3,r0
40006df0:	40 26 42 00             	add        r2,r6,1
40006df4:	0a 24 80 70             	mov        lp_count,r2
40006df8:	a8 20 40 05             	lp         40006e22 <memmove+0x9e>

40006dfc:	00 14 02 00             	ld         r2,[r4,0]
40006e00:	10 e3                   	add_s      r3,r3,16
40006e02:	f0 1b 80 80             	st         r2,[r3,-16]
40006e06:	04 14 02 00             	ld         r2,[r4,4]
40006e0a:	40 24 04 04             	add        r4,r4,16
40006e0e:	f4 1b 80 80             	st         r2,[r3,-12]
40006e12:	f8 14 02 80             	ld         r2,[r4,-8]
40006e16:	f8 1b 80 80             	st         r2,[r3,-8]
40006e1a:	fc 14 02 80             	ld         r2,[r4,-4]
40006e1e:	fc 1b 80 80             	st         r2,[r3,-4]
40006e22:	40 26 43 00             	add        r3,r6,1
40006e26:	4a 26 00 00             	mov        r6,0
40006e2a:	16 26 c3 00             	add3       r3,r6,r3
40006e2e:	00 23 c3 00             	add        r3,r3,r3
40006e32:	44 25 c7 03             	and        r7,r5,15
40006e36:	7a 60                   	add_s      r2,r0,r3
40006e38:	41 0f 34 01             	brlo.d     r7,4,40006e78 <memmove+0xf4>

40006e3c:	79 61                   	add_s      r1,r1,r3
40006e3e:	42 27 07 01             	sub        r7,r7,4
40006e42:	2f 27 c2 01             	lsr        r7,r7
40006e46:	2f 27 c2 01             	lsr        r7,r7
40006e4a:	20 44                   	mov_s      r4,r1
40006e4c:	40 27 46 00             	add        r6,r7,1
40006e50:	42 22 03 01             	sub        r3,r2,4
40006e54:	0a 24 80 71             	mov        lp_count,r6
40006e58:	a8 20 80 01             	lp         40006e64 <memmove+0xe0>

40006e5c:	04 14 06 04             	ld.ab      r6,[r4,4]
40006e60:	04 1b 88 01             	st.a       r6,[r3,4]
40006e64:	15 26 c7 71 00 00 04 00 	add2       r7,4,r7
40006e6c:	44 25 c5 00             	and        r5,r5,3
40006e70:	e0 72                   	add_s      r2,r2,r7
40006e72:	47 07 ef ff             	b.d        40006db6 <memmove+0x32>

40006e76:	e0 71                   	add_s      r1,r1,r7
40006e78:	3f 07 ef ff             	b.d        40006db6 <memmove+0x32>

40006e7c:	e0 45                   	mov_s      r5,r7
40006e7e:	e0 78                   	nop_s      

40006e80 <_read_r>:
40006e80:	f1 c0                   	push_s     blink
40006e82:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40006e86:	0a 24 80 0f 00 a8 1c 15 	mov        r4,0xa800151c
40006e8e:	08 45                   	mov_s      r13,r0
40006e90:	00 1c 01 00             	st         0,[r4]
40006e94:	20 40                   	mov_s      r0,r1
40006e96:	0a 21 80 00             	mov        r1,r2
40006e9a:	96 0f e0 01             	bl.d       4000ae2c <_read>

40006e9e:	60 42                   	mov_s      r2,r3
40006ea0:	15 08 80 0f ff ff ff ff 	breq       r0,-1,40006eb4 <_read_r+0x34>

40006ea8:	04 14 1f 30             	ld         blink,[sp,4]
40006eac:	00 c5                   	ld_s       r13,[sp,0]
40006eae:	e0 7f                   	j_s.d      [blink]
40006eb0:	a2 c0                   	add_s      sp,sp,8
40006eb2:	e0 78                   	nop_s      
40006eb4:	00 16 02 70 00 a8 1c 15 	ld         r2,[0xa800151c]
40006ebc:	76 ea                   	breq_s     r2,0,40006ea8 <_read_r+0x28>

40006ebe:	40 a5                   	st_s       r2,[r13,0]
40006ec0:	04 14 1f 30             	ld         blink,[sp,4]
40006ec4:	00 c5                   	ld_s       r13,[sp,0]
40006ec6:	e0 7f                   	j_s.d      [blink]
40006ec8:	a2 c0                   	add_s      sp,sp,8
40006eca:	e0 78                   	nop_s      

40006ecc <_realloc_r>:
40006ecc:	f1 c0                   	push_s     blink
40006ece:	dc 1c 48 b3             	st.a       r13,[sp,-36]
40006ed2:	10 1c 40 34             	st         r17,[sp,16]
40006ed6:	41 c6                   	st_s       r14,[sp,4]
40006ed8:	42 c7                   	st_s       r15,[sp,8]
40006eda:	0c 1c 00 34             	st         r16,[sp,12]
40006ede:	14 1c 80 34             	st         r18,[sp,20]
40006ee2:	18 1c c0 34             	st         r19,[sp,24]
40006ee6:	1c 1c 00 35             	st         r20,[sp,28]
40006eea:	20 1c 40 35             	st         r21,[sp,32]
40006eee:	0a 25 40 90             	mov.f      r13,r1
40006ef2:	fc 01 21 00             	bz.d       400070ec <_realloc_r+0x220>

40006ef6:	50 41                   	mov_s      r17,r2
40006ef8:	02 0d ef fc             	bl.d       40000bf8 <__malloc_lock>

40006efc:	10 42                   	mov_s      r18,r0
40006efe:	fc 15 02 90             	ld         r2,[r13,-4]
40006f02:	40 21 cf 22             	add        r15,r17,11
40006f06:	42 25 10 12             	sub        r16,r13,8
40006f0a:	e5 0f f5 15             	brhs.t.d   r15,23,40006fec <_realloc_r+0x120>

40006f0e:	6c 22 4e 00             	bmskn      r14,r2,1
40006f12:	6c 70                   	mov_s      r3,0
40006f14:	4a 24 00 04             	mov        r4,16
40006f18:	10 df                   	mov_s      r15,16
40006f1a:	32 77                   	cmp_s      r15,r17
40006f1c:	fc 01 05 00             	bc         40007118 <_realloc_r+0x24c>

40006f20:	6b 7b                   	tst_s      r3,r3
40006f22:	f8 01 02 00             	bnz        40007118 <_realloc_r+0x24c>

40006f26:	dd 0e 23 11             	brge.d     r14,r4,40007000 <_realloc_r+0x134>

40006f2a:	00 20 83 23             	add        r3,r16,r14
40006f2e:	00 16 05 70 00 a8 10 04 	ld         r5,[0xa8000410]
40006f36:	0c 25 c0 80             	cmp        r5,r3
40006f3a:	00 02 01 00             	bz         40007138 <_realloc_r+0x26c>

40006f3e:	04 13 06 00             	ld         r6,[r3,4]
40006f42:	6c 26 07 00             	bmskn      r7,r6,0
40006f46:	00 27 c7 00             	add        r7,r7,r3
40006f4a:	04 17 07 00             	ld         r7,[r7,4]
40006f4e:	51 27 00 80             	btst       r7,0
40006f52:	f8 00 21 00             	bz.d       40007048 <_realloc_r+0x17c>

40006f56:	6c 26 46 00             	bmskn      r6,r6,1
40006f5a:	cc 70                   	mov_s      r6,0
40006f5c:	6c 70                   	mov_s      r3,0
40006f5e:	e0 ba                   	btst_s     r2,0
40006f60:	2c 01 02 00             	bnz        4000708c <_realloc_r+0x1c0>

40006f64:	f8 15 02 90             	ld         r2,[r13,-8]
40006f68:	6b 7b                   	tst_s      r3,r3
40006f6a:	02 20 93 20             	sub        r19,r16,r2
40006f6e:	04 13 02 20             	ld         r2,[r19,4]
40006f72:	54 02 21 00             	bz.d       400071c4 <_realloc_r+0x2f8>

40006f76:	6c 22 42 00             	bmskn      r2,r2,1
40006f7a:	b0 73                   	cmp_s      r3,r5
40006f7c:	50 02 01 00             	bz         400071cc <_realloc_r+0x300>

40006f80:	da 62                   	add_s      r2,r2,r14
40006f82:	00 26 94 00             	add        r20,r6,r2
40006f86:	0c 24 00 a1             	cmp        r20,r4
40006f8a:	9c 01 0b 00             	blt        40007124 <_realloc_r+0x258>

40006f8e:	43 83                   	ld_s       r2,[r3,12]
40006f90:	62 83                   	ld_s       r3,[r3,8]
40006f92:	72 41                   	mov_s      r17,r19
40006f94:	43 a3                   	st_s       r2,[r3,12]
40006f96:	62 a2                   	st_s       r3,[r2,8]
40006f98:	0c 13 03 20             	ld         r3,[r19,12]
40006f9c:	08 11 04 22             	ld.a       r4,[r17,8]
40006fa0:	42 26 02 11             	sub        r2,r14,4
40006fa4:	0c 1c c0 00             	st         r3,[r4,12]
40006fa8:	a4 e2                   	cmp_s      r2,36
40006faa:	08 02 2d 00             	bhi.d      400071b0 <_realloc_r+0x2e4>

40006fae:	08 1b 00 01             	st         r4,[r3,8]
40006fb2:	93 e2                   	cmp_s      r2,19
40006fb4:	20 00 2e 00             	bls.d      40006fd4 <_realloc_r+0x108>

40006fb8:	ca 22 4e 04             	mov.ls     r2,r17
40006fbc:	60 85                   	ld_s       r3,[r13,0]
40006fbe:	9b e2                   	cmp_s      r2,27
40006fc0:	08 1b c0 20             	st         r3,[r19,8]
40006fc4:	61 85                   	ld_s       r3,[r13,4]
40006fc6:	c0 02 2d 00             	bhi.d      40007284 <_realloc_r+0x3b8>

40006fca:	0c 1b c0 20             	st         r3,[r19,12]
40006fce:	40 23 02 24             	add        r2,r19,16
40006fd2:	08 e5                   	add_s      r13,r13,8
40006fd4:	60 85                   	ld_s       r3,[r13,0]
40006fd6:	8a 46                   	mov_s      r14,r20
40006fd8:	60 a2                   	st_s       r3,[r2,0]
40006fda:	61 85                   	ld_s       r3,[r13,4]
40006fdc:	72 40                   	mov_s      r16,r19
40006fde:	61 a2                   	st_s       r3,[r2,4]
40006fe0:	62 85                   	ld_s       r3,[r13,8]
40006fe2:	62 a2                   	st_s       r3,[r2,8]
40006fe4:	1f 00 20 00             	b.d        40007002 <_realloc_r+0x136>

40006fe8:	04 13 02 20             	ld         r2,[r19,4]
40006fec:	6c 27 8f 10             	bmskn      r15,r15,2
40006ff0:	e1 43                   	mov_s      r3,r15
40006ff2:	00 23 fe 80             	add.f      0,r3,r3
40006ff6:	6f 23 0b 00             	rlc        r3,0
40006ffa:	23 07 ef ff             	b.d        40006f1a <_realloc_r+0x4e>

40006ffe:	e1 44                   	mov_s      r4,r15
40007000:	b1 41                   	mov_s      r17,r13
40007002:	02 26 c3 13             	sub        r3,r14,r15
40007006:	65 0b 35 04             	brhs.t.d   r3,16,40007068 <_realloc_r+0x19c>

4000700a:	c0 ba                   	bmsk_s     r2,r2,0
4000700c:	c5 7a                   	or_s       r2,r2,r14
4000700e:	04 18 80 20             	st         r2,[r16,4]
40007012:	02 76                   	add_s      r14,r14,r16
40007014:	41 86                   	ld_s       r2,[r14,4]
40007016:	80 ba                   	bset_s     r2,r2,0
40007018:	41 a6                   	st_s       r2,[r14,4]
4000701a:	e6 0b ef fc             	bl.d       40000bfc <__malloc_unlock>

4000701e:	42 40                   	mov_s      r0,r18
40007020:	22 40                   	mov_s      r0,r17
40007022:	24 14 1f 30             	ld         blink,[sp,36]
40007026:	00 c5                   	ld_s       r13,[sp,0]
40007028:	01 c6                   	ld_s       r14,[sp,4]
4000702a:	02 c7                   	ld_s       r15,[sp,8]
4000702c:	0c 14 10 30             	ld         r16,[sp,12]
40007030:	10 14 11 30             	ld         r17,[sp,16]
40007034:	14 14 12 30             	ld         r18,[sp,20]
40007038:	18 14 13 30             	ld         r19,[sp,24]
4000703c:	1c 14 14 30             	ld         r20,[sp,28]
40007040:	20 14 15 30             	ld         r21,[sp,32]
40007044:	e0 7f                   	j_s.d      [blink]
40007046:	aa c0                   	add_s      sp,sp,40
40007048:	00 26 87 03             	add        r7,r6,r14
4000704c:	13 0f 0a 81             	brlt.nt    r7,r4,40006f5e <_realloc_r+0x92>

40007050:	0c 13 04 00             	ld         r4,[r3,12]
40007054:	62 83                   	ld_s       r3,[r3,8]
40007056:	b1 41                   	mov_s      r17,r13
40007058:	0c 1b 00 01             	st         r4,[r3,12]
4000705c:	08 1c c0 00             	st         r3,[r4,8]
40007060:	a3 07 ef ff             	b.d        40007002 <_realloc_r+0x136>

40007064:	e8 46                   	mov_s      r14,r7
40007066:	e0 78                   	nop_s      
40007068:	e5 7a                   	or_s       r2,r2,r15
4000706a:	04 18 80 20             	st         r2,[r16,4]
4000706e:	00 20 c1 23             	add        r1,r16,r15
40007072:	45 23 42 00             	or         r2,r3,1
40007076:	41 a1                   	st_s       r2,[r1,4]
40007078:	3b 63                   	add_s      r3,r3,r1
4000707a:	41 83                   	ld_s       r2,[r3,4]
4000707c:	42 40                   	mov_s      r0,r18
4000707e:	80 ba                   	bset_s     r2,r2,0
40007080:	41 a3                   	st_s       r2,[r3,4]
40007082:	8e 0f 6f fe             	bl.d       4000400c <_free_r>

40007086:	08 e1                   	add_s      r1,r1,8
40007088:	c9 f1                   	b_s        4000701a <_realloc_r+0x14e>

4000708a:	e0 78                   	nop_s      
4000708c:	22 41                   	mov_s      r1,r17
4000708e:	46 0a af fc             	bl.d       400002d0 <_malloc_r>

40007092:	42 40                   	mov_s      r0,r18
40007094:	0a 21 00 a0             	mov.f      r17,r0
40007098:	68 02 01 00             	bz         40007300 <_realloc_r+0x434>

4000709c:	fc 15 02 90             	ld         r2,[r13,-4]
400070a0:	42 21 03 22             	sub        r3,r17,8
400070a4:	6c 22 04 00             	bmskn      r4,r2,0
400070a8:	00 24 04 04             	add        r4,r4,r16
400070ac:	90 73                   	cmp_s      r3,r4
400070ae:	e4 f2                   	beq_s      40007274 <_realloc_r+0x3a8>

400070b0:	42 26 02 11             	sub        r2,r14,4
400070b4:	ed 0a 55 09             	brhs.t     r2,37,400071a0 <_realloc_r+0x2d4>

400070b8:	99 0a 15 05             	brhs.t     r2,20,40007150 <_realloc_r+0x284>

400070bc:	22 42                   	mov_s      r2,r17
400070be:	a1 43                   	mov_s      r3,r13
400070c0:	00 13 04 00             	ld         r4,[r3,0]
400070c4:	00 1a 00 01             	st         r4,[r2]
400070c8:	04 13 04 00             	ld         r4,[r3,4]
400070cc:	04 1a 00 01             	st         r4,[r2,4]
400070d0:	62 83                   	ld_s       r3,[r3,8]
400070d2:	62 a2                   	st_s       r3,[r2,8]
400070d4:	a1 41                   	mov_s      r1,r13
400070d6:	3a 0f 6f fe             	bl.d       4000400c <_free_r>

400070da:	42 40                   	mov_s      r0,r18
400070dc:	22 0b ef fc             	bl.d       40000bfc <__malloc_unlock>

400070e0:	0a 20 80 04             	mov        r0,r18
400070e4:	3f 07 ef ff             	b.d        40007022 <_realloc_r+0x156>

400070e8:	22 40                   	mov_s      r0,r17
400070ea:	e0 78                   	nop_s      
400070ec:	40 41                   	mov_s      r1,r2
400070ee:	24 14 1f 30             	ld         blink,[sp,36]
400070f2:	00 c5                   	ld_s       r13,[sp,0]
400070f4:	01 c6                   	ld_s       r14,[sp,4]
400070f6:	02 c7                   	ld_s       r15,[sp,8]
400070f8:	0c 14 10 30             	ld         r16,[sp,12]
400070fc:	10 14 11 30             	ld         r17,[sp,16]
40007100:	14 14 12 30             	ld         r18,[sp,20]
40007104:	18 14 13 30             	ld         r19,[sp,24]
40007108:	1c 14 14 30             	ld         r20,[sp,28]
4000710c:	20 14 15 30             	ld         r21,[sp,32]
40007110:	c1 01 af fc             	b.d        400002d0 <_malloc_r>

40007114:	aa c0                   	add_s      sp,sp,40
40007116:	e0 78                   	nop_s      
40007118:	00 1a 01 23             	st         12,[r18]
4000711c:	07 07 ef ff             	b.d        40007022 <_realloc_r+0x156>

40007120:	0c 70                   	mov_s      r0,0
40007122:	e0 78                   	nop_s      
40007124:	50 44                   	mov_s      r20,r2
40007126:	6b 0c 2a a1             	brlt.nt.d  r20,r4,4000708e <_realloc_r+0x1c2>

4000712a:	22 41                   	mov_s      r1,r17
4000712c:	0c 13 03 20             	ld         r3,[r19,12]
40007130:	6d 06 ef ff             	b.d        40006f9c <_realloc_r+0xd0>

40007134:	72 41                   	mov_s      r17,r19
40007136:	e0 78                   	nop_s      
40007138:	04 15 06 00             	ld         r6,[r5,4]
4000713c:	40 27 07 14             	add        r7,r15,16
40007140:	6c 26 46 00             	bmskn      r6,r6,1
40007144:	00 26 83 03             	add        r3,r6,r14
40007148:	29 0b c3 01             	brge       r3,r7,40007170 <_realloc_r+0x2a4>

4000714c:	a0 43                   	mov_s      r3,r5
4000714e:	09 f1                   	b_s        40006f5e <_realloc_r+0x92>

40007150:	60 85                   	ld_s       r3,[r13,0]
40007152:	00 19 c0 20             	st         r3,[r17]
40007156:	61 85                   	ld_s       r3,[r13,4]
40007158:	9b e2                   	cmp_s      r2,27
4000715a:	fc 00 2d 00             	bhi.d      40007254 <_realloc_r+0x388>

4000715e:	04 19 c0 20             	st         r3,[r17,4]
40007162:	40 21 02 22             	add        r2,r17,8
40007166:	5d 07 ef ff             	b.d        400070c0 <_realloc_r+0x1f4>

4000716a:	40 25 03 12             	add        r3,r13,8
4000716e:	e0 78                   	nop_s      
40007170:	00 20 d0 23             	add        r16,r16,r15
40007174:	00 1e 00 74 00 a8 10 04 	st         r16,[0xa8000410]
4000717c:	e2 7b                   	sub_s      r3,r3,r15
4000717e:	80 bb                   	bset_s     r3,r3,0
40007180:	04 18 c0 20             	st         r3,[r16,4]
40007184:	fc 15 02 90             	ld         r2,[r13,-4]
40007188:	42 40                   	mov_s      r0,r18
4000718a:	c0 ba                   	bmsk_s     r2,r2,0
4000718c:	05 27 8f 10             	or         r15,r15,r2
40007190:	6e 0a ef fc             	bl.d       40000bfc <__malloc_unlock>

40007194:	fc 1d c0 93             	st         r15,[r13,-4]
40007198:	8b 06 ef ff             	b.d        40007022 <_realloc_r+0x156>

4000719c:	a1 40                   	mov_s      r0,r13
4000719e:	e0 78                   	nop_s      
400071a0:	e6 0b ef ff             	bl.d       40006d84 <memmove>

400071a4:	0a 21 40 03             	mov        r1,r13
400071a8:	2f 07 ef ff             	b.d        400070d6 <_realloc_r+0x20a>

400071ac:	a1 41                   	mov_s      r1,r13
400071ae:	e0 78                   	nop_s      
400071b0:	22 40                   	mov_s      r0,r17
400071b2:	d6 0b ef ff             	bl.d       40006d84 <memmove>

400071b6:	a1 41                   	mov_s      r1,r13
400071b8:	8a 46                   	mov_s      r14,r20
400071ba:	04 13 02 20             	ld         r2,[r19,4]
400071be:	47 06 ef ff             	b.d        40007002 <_realloc_r+0x136>

400071c2:	72 40                   	mov_s      r16,r19
400071c4:	63 07 ef ff             	b.d        40007126 <_realloc_r+0x25a>

400071c8:	00 22 94 03             	add        r20,r2,r14
400071cc:	00 22 94 03             	add        r20,r2,r14
400071d0:	40 27 02 14             	add        r2,r15,16
400071d4:	00 26 15 05             	add        r21,r6,r20
400071d8:	4f 0d 8a a0             	brlt.nt    r21,r2,40007126 <_realloc_r+0x25a>

400071dc:	0c 13 03 20             	ld         r3,[r19,12]
400071e0:	72 40                   	mov_s      r16,r19
400071e2:	08 10 04 22             	ld.a       r4,[r16,8]
400071e6:	42 26 02 11             	sub        r2,r14,4
400071ea:	0c 1c c0 00             	st         r3,[r4,12]
400071ee:	e9 0a 75 09             	brhs.t.d   r2,37,400072d4 <_realloc_r+0x408>

400071f2:	08 1b 00 01             	st         r4,[r3,8]
400071f6:	93 e2                   	cmp_s      r2,19
400071f8:	1e 00 2e 00             	bls.d      40007216 <_realloc_r+0x34a>

400071fc:	ca 22 0e 04             	mov.ls     r2,r16
40007200:	60 85                   	ld_s       r3,[r13,0]
40007202:	08 1b c0 20             	st         r3,[r19,8]
40007206:	61 85                   	ld_s       r3,[r13,4]
40007208:	dd 0a 35 07             	brhs.t.d   r2,28,400072e4 <_realloc_r+0x418>

4000720c:	0c 1b c0 20             	st         r3,[r19,12]
40007210:	40 23 02 24             	add        r2,r19,16
40007214:	08 e5                   	add_s      r13,r13,8
40007216:	60 85                   	ld_s       r3,[r13,0]
40007218:	60 a2                   	st_s       r3,[r2,0]
4000721a:	61 85                   	ld_s       r3,[r13,4]
4000721c:	61 a2                   	st_s       r3,[r2,4]
4000721e:	62 85                   	ld_s       r3,[r13,8]
40007220:	62 a2                   	st_s       r3,[r2,8]
40007222:	00 23 c2 23             	add        r2,r19,r15
40007226:	00 1e 80 70 00 a8 10 04 	st         r2,[0xa8000410]
4000722e:	02 25 c6 23             	sub        r6,r21,r15
40007232:	45 26 43 00             	or         r3,r6,1
40007236:	61 a2                   	st_s       r3,[r2,4]
40007238:	04 13 02 20             	ld         r2,[r19,4]
4000723c:	42 40                   	mov_s      r0,r18
4000723e:	c0 ba                   	bmsk_s     r2,r2,0
40007240:	05 27 8f 10             	or         r15,r15,r2
40007244:	ba 09 ef fc             	bl.d       40000bfc <__malloc_unlock>

40007248:	04 1b c0 23             	st         r15,[r19,4]
4000724c:	d7 05 ef ff             	b.d        40007022 <_realloc_r+0x156>

40007250:	02 40                   	mov_s      r0,r16
40007252:	e0 78                   	nop_s      
40007254:	62 85                   	ld_s       r3,[r13,8]
40007256:	a4 e2                   	cmp_s      r2,36
40007258:	08 19 c0 20             	st         r3,[r17,8]
4000725c:	43 85                   	ld_s       r2,[r13,12]
4000725e:	44 00 21 00             	bz.d       400072a0 <_realloc_r+0x3d4>

40007262:	0c 19 80 20             	st         r2,[r17,12]
40007266:	40 21 02 24             	add        r2,r17,16
4000726a:	59 06 ef ff             	b.d        400070c0 <_realloc_r+0x1f4>

4000726e:	40 25 03 14             	add        r3,r13,16
40007272:	e0 78                   	nop_s      
40007274:	fc 11 03 a0             	ld         r3,[r17,-4]
40007278:	b1 41                   	mov_s      r17,r13
4000727a:	6c 23 43 00             	bmskn      r3,r3,1
4000727e:	87 05 ef ff             	b.d        40007002 <_realloc_r+0x136>

40007282:	7e 66                   	add_s      r14,r14,r3
40007284:	62 85                   	ld_s       r3,[r13,8]
40007286:	a4 e2                   	cmp_s      r2,36
40007288:	10 1b c0 20             	st         r3,[r19,16]
4000728c:	43 85                   	ld_s       r2,[r13,12]
4000728e:	30 00 21 00             	bz.d       400072bc <_realloc_r+0x3f0>

40007292:	14 1b 80 20             	st         r2,[r19,20]
40007296:	40 23 02 26             	add        r2,r19,24
4000729a:	3d 05 ef ff             	b.d        40006fd4 <_realloc_r+0x108>

4000729e:	10 e5                   	add_s      r13,r13,16
400072a0:	64 85                   	ld_s       r3,[r13,16]
400072a2:	40 21 02 26             	add        r2,r17,24
400072a6:	10 19 c0 20             	st         r3,[r17,16]
400072aa:	14 15 04 10             	ld         r4,[r13,20]
400072ae:	40 25 03 16             	add        r3,r13,24
400072b2:	11 06 ef ff             	b.d        400070c0 <_realloc_r+0x1f4>

400072b6:	14 19 00 21             	st         r4,[r17,20]
400072ba:	e0 78                   	nop_s      
400072bc:	64 85                   	ld_s       r3,[r13,16]
400072be:	40 23 02 28             	add        r2,r19,32
400072c2:	18 1b c0 20             	st         r3,[r19,24]
400072c6:	65 85                   	ld_s       r3,[r13,20]
400072c8:	18 e5                   	add_s      r13,r13,24
400072ca:	0d 05 ef ff             	b.d        40006fd4 <_realloc_r+0x108>

400072ce:	1c 1b c0 20             	st         r3,[r19,28]
400072d2:	e0 78                   	nop_s      
400072d4:	02 40                   	mov_s      r0,r16
400072d6:	b2 0a ef ff             	bl.d       40006d84 <memmove>

400072da:	a1 41                   	mov_s      r1,r13
400072dc:	4b 07 ef ff             	b.d        40007226 <_realloc_r+0x35a>

400072e0:	00 23 c2 23             	add        r2,r19,r15
400072e4:	62 85                   	ld_s       r3,[r13,8]
400072e6:	a4 e2                   	cmp_s      r2,36
400072e8:	10 1b c0 20             	st         r3,[r19,16]
400072ec:	43 85                   	ld_s       r2,[r13,12]
400072ee:	24 00 21 00             	bz.d       40007310 <_realloc_r+0x444>

400072f2:	14 1b 80 20             	st         r2,[r19,20]
400072f6:	40 23 02 26             	add        r2,r19,24
400072fa:	1f 07 ef ff             	b.d        40007216 <_realloc_r+0x34a>

400072fe:	10 e5                   	add_s      r13,r13,16
40007300:	fe 08 ef fc             	bl.d       40000bfc <__malloc_unlock>

40007304:	0a 20 80 04             	mov        r0,r18
40007308:	1b 05 ef ff             	b.d        40007022 <_realloc_r+0x156>

4000730c:	0c 70                   	mov_s      r0,0
4000730e:	e0 78                   	nop_s      
40007310:	64 85                   	ld_s       r3,[r13,16]
40007312:	40 23 02 28             	add        r2,r19,32
40007316:	18 1b c0 20             	st         r3,[r19,24]
4000731a:	65 85                   	ld_s       r3,[r13,20]
4000731c:	18 e5                   	add_s      r13,r13,24
4000731e:	fb 06 ef ff             	b.d        40007216 <_realloc_r+0x34a>

40007322:	1c 1b c0 20             	st         r3,[r19,28]
40007326:	e0 78                   	nop_s      

40007328 <__swbuf_r>:
40007328:	f1 c0                   	push_s     blink
4000732a:	f4 1c 48 b3             	st.a       r13,[sp,-12]
4000732e:	41 c6                   	st_s       r14,[sp,4]
40007330:	42 c7                   	st_s       r15,[sp,8]
40007332:	28 46                   	mov_s      r14,r1
40007334:	0a 27 00 90             	mov.f      r15,r0
40007338:	0e 00 21 00             	bz.d       40007346 <__swbuf_r+0x1e>

4000733c:	48 45                   	mov_s      r13,r2
4000733e:	4e 87                   	ld_s       r2,[r15,56]
40007340:	4b 7a                   	tst_s      r2,r2
40007342:	a0 09 41 fe             	blz        40003ce0 <__sinit>

40007346:	46 85                   	ld_s       r2,[r13,24]
40007348:	66 9d                   	ldh_s.x    r3,[r13,12]
4000734a:	42 a5                   	st_s       r2,[r13,8]
4000734c:	2f 22 c8 00             	exth       r2,r3
40007350:	9d 0a de 00             	bbit0      r2,3,400073ec <__swbuf_r+0xc4>

40007354:	10 15 04 10             	ld         r4,[r13,16]
40007358:	97 0c 30 00             	breq.d     r4,0,400073ee <__swbuf_r+0xc6>

4000735c:	e1 40                   	mov_s      r0,r15
4000735e:	4d 0a 7e 03             	bbit0.d    r2,13,400073a8 <__swbuf_r+0x80>

40007362:	c7 be                   	bmsk_s     r14,r14,7
40007364:	40 85                   	ld_s       r2,[r13,0]
40007366:	14 15 05 10             	ld         r5,[r13,20]
4000736a:	02 22 03 01             	sub        r3,r2,r4
4000736e:	59 0b 63 01             	brge.d     r3,r5,400073c4 <__swbuf_r+0x9c>

40007372:	e1 40                   	mov_s      r0,r15
40007374:	64 71                   	add_s      r3,r3,1
40007376:	08 15 04 10             	ld         r4,[r13,8]
4000737a:	40 22 45 00             	add        r5,r2,1
4000737e:	84 77                   	add_s      r4,r4,-1
40007380:	00 1d 40 11             	st         r5,[r13]
40007384:	08 1d 00 11             	st         r4,[r13,8]
40007388:	c0 aa                   	stb_s      r14,[r2,0]
4000738a:	45 85                   	ld_s       r2,[r13,20]
4000738c:	4f 0a c0 00             	breq       r2,r3,400073da <__swbuf_r+0xb2>

40007390:	0c 15 02 11             	ldh        r2,[r13,12]
40007394:	41 0a 1f 00             	bbit1      r2,0,400073d4 <__swbuf_r+0xac>

40007398:	c1 40                   	mov_s      r0,r14
4000739a:	0c 14 1f 30             	ld         blink,[sp,12]
4000739e:	00 c5                   	ld_s       r13,[sp,0]
400073a0:	01 c6                   	ld_s       r14,[sp,4]
400073a2:	02 c7                   	ld_s       r15,[sp,8]
400073a4:	e0 7f                   	j_s.d      [blink]
400073a6:	a4 c0                   	add_s      sp,sp,16
400073a8:	59 85                   	ld_s       r2,[r13,100]
400073aa:	14 15 05 10             	ld         r5,[r13,20]
400073ae:	ad ba                   	bclr_s     r2,r2,13
400073b0:	59 a5                   	st_s       r2,[r13,100]
400073b2:	40 85                   	ld_s       r2,[r13,0]
400073b4:	8d bb                   	bset_s     r3,r3,13
400073b6:	66 b5                   	sth_s      r3,[r13,12]
400073b8:	02 22 03 01             	sub        r3,r2,r4
400073bc:	bb 0b 62 81             	brlt.d     r3,r5,40007376 <__swbuf_r+0x4e>

400073c0:	64 71                   	add_s      r3,r3,1
400073c2:	e1 40                   	mov_s      r0,r15
400073c4:	32 08 6f fe             	bl.d       40003bf4 <_fflush_r>

400073c8:	a1 41                   	mov_s      r1,r13
400073ca:	8e e8                   	brne_s     r0,0,400073e4 <__swbuf_r+0xbc>

400073cc:	40 85                   	ld_s       r2,[r13,0]
400073ce:	ab 07 ef ff             	b.d        40007376 <__swbuf_r+0x4e>

400073d2:	6c 71                   	mov_s      r3,1
400073d4:	c7 0e b1 92             	brne.d     r14,10,4000739a <__swbuf_r+0x72>

400073d8:	c1 40                   	mov_s      r0,r14
400073da:	e1 40                   	mov_s      r0,r15
400073dc:	1a 08 6f fe             	bl.d       40003bf4 <_fflush_r>

400073e0:	a1 41                   	mov_s      r1,r13
400073e2:	5c e8                   	breq_s     r0,0,40007398 <__swbuf_r+0x70>

400073e4:	b7 07 ef ff             	b.d        4000739a <__swbuf_r+0x72>

400073e8:	0c 77                   	mov_s      r0,-1
400073ea:	e0 78                   	nop_s      
400073ec:	e1 40                   	mov_s      r0,r15
400073ee:	e6 09 af fd             	bl.d       400025d0 <__swsetup_r>

400073f2:	a1 41                   	mov_s      r1,r13
400073f4:	f8 e8                   	brne_s     r0,0,400073e4 <__swbuf_r+0xbc>

400073f6:	66 9d                   	ldh_s.x    r3,[r13,12]
400073f8:	10 15 04 10             	ld         r4,[r13,16]
400073fc:	63 07 ef ff             	b.d        4000735e <__swbuf_r+0x36>

40007400:	2f 22 c8 00             	exth       r2,r3

40007404 <__swbuf>:
40007404:	00 43                   	mov_s      r3,r0
40007406:	20 42                   	mov_s      r2,r1
40007408:	00 16 00 70 00 a8 10 08 	ld         r0,[0xa8000810]
40007410:	60 41                   	mov_s      r1,r3
40007412:	19 07 cf ff             	b          40007328 <__swbuf_r>

40007416:	e0 78                   	nop_s      

40007418 <_wcrtomb_r>:
40007418:	f1 c0                   	push_s     blink
4000741a:	f4 1c 48 b3             	st.a       r13,[sp,-12]
4000741e:	41 c6                   	st_s       r14,[sp,4]
40007420:	42 c7                   	st_s       r15,[sp,8]
40007422:	08 45                   	mov_s      r13,r0
40007424:	a5 c1                   	sub_s      sp,sp,20
40007426:	00 16 0f 70 00 a8 b4 0c 	ld         r15,[0xa8000cb4]
4000742e:	3d 09 30 00             	breq.d     r1,0,40007468 <_wcrtomb_r+0x50>

40007432:	68 46                   	mov_s      r14,r3
40007434:	41 c1                   	st_s       r1,[sp,4]
40007436:	2a 08 af fe             	bl.d       4000445c <__locale_charset>

4000743a:	40 c2                   	st_s       r2,[sp,0]
4000743c:	01 c1                   	ld_s       r1,[sp,4]
4000743e:	00 c2                   	ld_s       r2,[sp,0]
40007440:	00 43                   	mov_s      r3,r0
40007442:	c1 44                   	mov_s      r4,r14
40007444:	60 7f                   	jl_s.d     [r15]
40007446:	a1 40                   	mov_s      r0,r13
40007448:	11 08 81 0f ff ff ff ff 	brne       r0,-1,40007458 <_wcrtomb_r+0x40>

40007450:	00 1e 01 10             	st         0,[r14]
40007454:	8a da                   	mov_s      r2,138
40007456:	40 a5                   	st_s       r2,[r13,0]
40007458:	20 14 1f 30             	ld         blink,[sp,32]
4000745c:	14 14 0d 32             	ld.a       r13,[sp,20]
40007460:	01 c6                   	ld_s       r14,[sp,4]
40007462:	02 c7                   	ld_s       r15,[sp,8]
40007464:	e0 7f                   	j_s.d      [blink]
40007466:	a4 c0                   	add_s      sp,sp,16
40007468:	f6 0f 4f fe             	bl         4000445c <__locale_charset>

4000746c:	82 c1                   	add_s      r1,sp,8
4000746e:	00 43                   	mov_s      r3,r0
40007470:	4c 70                   	mov_s      r2,0
40007472:	a1 40                   	mov_s      r0,r13
40007474:	60 7f                   	jl_s.d     [r15]
40007476:	c1 44                   	mov_s      r4,r14
40007478:	e8 f1                   	b_s        40007448 <_wcrtomb_r+0x30>

4000747a:	e0 78                   	nop_s      

4000747c <wcrtomb>:
4000747c:	f1 c0                   	push_s     blink
4000747e:	f0 1c 48 b3             	st.a       r13,[sp,-16]
40007482:	41 c6                   	st_s       r14,[sp,4]
40007484:	42 c7                   	st_s       r15,[sp,8]
40007486:	0c 1c 00 34             	st         r16,[sp,12]
4000748a:	28 47                   	mov_s      r15,r1
4000748c:	a4 c1                   	sub_s      sp,sp,16
4000748e:	00 16 0d 70 00 a8 10 08 	ld         r13,[0xa8000810]
40007496:	0a 21 00 80             	mov.f      r1,r0
4000749a:	48 00 21 00             	bz.d       400074e0 <wcrtomb+0x64>

4000749e:	48 46                   	mov_s      r14,r2
400074a0:	40 c1                   	st_s       r1,[sp,0]
400074a2:	00 16 10 70 00 a8 b4 0c 	ld         r16,[0xa8000cb4]
400074aa:	b6 0f 4f fe             	bl         4000445c <__locale_charset>

400074ae:	00 c1                   	ld_s       r1,[sp,0]
400074b0:	00 43                   	mov_s      r3,r0
400074b2:	e1 42                   	mov_s      r2,r15
400074b4:	a1 40                   	mov_s      r0,r13
400074b6:	23 20 00 04             	jl.d       [r16]
400074ba:	c1 44                   	mov_s      r4,r14
400074bc:	11 08 81 0f ff ff ff ff 	brne       r0,-1,400074cc <wcrtomb+0x50>

400074c4:	00 1e 01 10             	st         0,[r14]
400074c8:	8a da                   	mov_s      r2,138
400074ca:	40 a5                   	st_s       r2,[r13,0]
400074cc:	20 14 1f 30             	ld         blink,[sp,32]
400074d0:	10 14 0d 32             	ld.a       r13,[sp,16]
400074d4:	01 c6                   	ld_s       r14,[sp,4]
400074d6:	02 c7                   	ld_s       r15,[sp,8]
400074d8:	0c 14 10 30             	ld         r16,[sp,12]
400074dc:	e0 7f                   	j_s.d      [blink]
400074de:	a5 c0                   	add_s      sp,sp,20
400074e0:	00 16 0f 70 00 a8 b4 0c 	ld         r15,[0xa8000cb4]
400074e8:	76 0f 4f fe             	bl         4000445c <__locale_charset>

400074ec:	81 c1                   	add_s      r1,sp,4
400074ee:	00 43                   	mov_s      r3,r0
400074f0:	4c 70                   	mov_s      r2,0
400074f2:	a1 40                   	mov_s      r0,r13
400074f4:	60 7f                   	jl_s.d     [r15]
400074f6:	c1 44                   	mov_s      r4,r14
400074f8:	e2 f1                   	b_s        400074bc <wcrtomb+0x40>

400074fa:	e0 78                   	nop_s      

400074fc <__ascii_wctomb>:
400074fc:	08 e9                   	breq_s     r1,0,4000750c <__ascii_wctomb+0x10>

400074fe:	15 0e 84 70 00 00 ff 00 	brlo       255,r2,40007510 <__ascii_wctomb+0x14>

40007506:	0c 71                   	mov_s      r0,1
40007508:	40 a9                   	stb_s      r2,[r1,0]
4000750a:	e0 7e                   	j_s        [blink]
4000750c:	0c 70                   	mov_s      r0,0
4000750e:	e0 7e                   	j_s        [blink]
40007510:	8a da                   	mov_s      r2,138
40007512:	40 a0                   	st_s       r2,[r0,0]
40007514:	0c 77                   	mov_s      r0,-1
40007516:	e0 7e                   	j_s        [blink]

40007518 <_wctomb_r>:
40007518:	f1 c0                   	push_s     blink
4000751a:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000751e:	41 c6                   	st_s       r14,[sp,4]
40007520:	00 16 0d 70 00 a8 b4 0c 	ld         r13,[0xa8000cb4]
40007528:	a3 c1                   	sub_s      sp,sp,12
4000752a:	08 46                   	mov_s      r14,r0
4000752c:	42 c1                   	st_s       r1,[sp,8]
4000752e:	41 c2                   	st_s       r2,[sp,4]
40007530:	2e 0f 6f fe             	bl.d       4000445c <__locale_charset>

40007534:	40 c3                   	st_s       r3,[sp,0]
40007536:	02 c1                   	ld_s       r1,[sp,8]
40007538:	00 43                   	mov_s      r3,r0
4000753a:	01 c2                   	ld_s       r2,[sp,4]
4000753c:	c1 40                   	mov_s      r0,r14
4000753e:	00 14 04 30             	ld         r4,[sp,0]
40007542:	a1 45                   	mov_s      r5,r13
40007544:	14 14 1f 30             	ld         blink,[sp,20]
40007548:	0c 14 0d 32             	ld.a       r13,[sp,12]
4000754c:	01 c6                   	ld_s       r14,[sp,4]
4000754e:	21 20 40 01             	j.d        [r5]
40007552:	a3 c0                   	add_s      sp,sp,12

40007554 <__mulsi3>:
40007554:	2f 22 02 80             	lsr.f      r2,r0
40007558:	0c 70                   	mov_s      r0,0
4000755a:	6c 70                   	mov_s      r3,0
4000755c:	c0 20 45 00             	add.c      r0,r0,r1
40007560:	2f 22 82 80             	lsr.f      r2,r2
40007564:	d4 20 45 00             	add1.c     r0,r0,r1
40007568:	2f 22 82 80             	lsr.f      r2,r2
4000756c:	d5 20 45 00             	add2.c     r0,r0,r1
40007570:	2f 22 82 80             	lsr.f      r2,r2
40007574:	d6 20 45 00             	add3.c     r0,r0,r1
40007578:	e8 07 e2 ff             	bnz.d      40007560 <__mulsi3+0xc>

4000757c:	16 23 41 00             	add3       r1,r3,r1
40007580:	e0 7e                   	j_s        [blink]
40007582:	e0 78                   	nop_s      

40007584 <__udivsi3>:
40007584:	49 00 00 00             	b          400075cc <__udivmodsi4>


40007588 <__divsi3>:
40007588:	0a 27 c0 07             	mov        r7,blink
4000758c:	07 20 46 00             	xor        r6,r0,r1
40007590:	11 78                   	abs_s      r0,r0
40007592:	3e 08 20 00             	bl.d       400075cc <__udivmodsi4>

40007596:	31 79                   	abs_s      r1,r1
40007598:	0b 26 80 81             	tst        r6,r6
4000759c:	21 20 c0 01             	j.d        [r7]
400075a0:	ce 20 24 00             	rsub.n     r0,r0,0

400075a4 <__umodsi3>:
400075a4:	0a 27 c0 07             	mov        r7,blink
400075a8:	26 08 00 00             	bl         400075cc <__udivmodsi4>

400075ac:	21 20 c0 01             	j.d        [r7]
400075b0:	0a 20 40 00             	mov        r0,r1

400075b4 <__modsi3>:
400075b4:	eb 44                   	mov_s      r12,blink
400075b6:	00 46                   	mov_s      r6,r0
400075b8:	11 78                   	abs_s      r0,r0
400075ba:	16 08 20 00             	bl.d       400075cc <__udivmodsi4>

400075be:	31 79                   	abs_s      r1,r1
400075c0:	0b 26 80 81             	tst        r6,r6
400075c4:	33 78                   	neg_s      r0,r1
400075c6:	20 7c                   	j_s.d      [r12]
400075c8:	ca 20 43 00             	mov.p      r0,r1

400075cc <__udivmodsi4>:
400075cc:	1d 7a                   	lsr_s      r2,r0
400075ce:	5f 09 a5 00             	brhs.t.d   r1,r2,4000762a <__udivmodsi4+0x5e>

400075d2:	4a 24 00 78             	mov        lp_count,32
400075d6:	3b 79                   	asl_s      r1,r1
400075d8:	ff 0a 65 80             	brhs.nt.d  r2,r1,400075d6 <__udivmodsi4+0xa>

400075dc:	42 24 7c 70             	sub        lp_count,lp_count,1
400075e0:	22 78                   	sub_s      r0,r0,r1
400075e2:	3d 79                   	lsr_s      r1,r1
400075e4:	30 70                   	cmp_s      r0,r1
400075e6:	47 24 c2 f7             	xor.f      r2,lp_count,31
400075ea:	0a 24 80 70             	mov        lp_count,r2
400075ee:	e0 78                   	nop_s      
400075f0:	c2 20 46 00             	sub.nc     r0,r0,r1
400075f4:	6c 73                   	mov_s      r3,3
400075f6:	43 23 03 00             	sbc        r3,r3,0
400075fa:	4e 21 41 00             	rsub       r1,r1,1
400075fe:	e8 20 22 02             	lpnz       4000760c <__udivmodsi4+0x40>

40007602:	7b 7b                   	asl_s      r3,r3
40007604:	14 21 00 80             	add1.f     r0,r1,r0
40007608:	c2 20 46 00             	sub.nc     r0,r0,r1
4000760c:	1d 79                   	lsr_s      r1,r0
4000760e:	2f 24 82 f0             	lsr.f      lp_count,r2
40007612:	ca 21 06 00             	mov.nc     r1,r0
40007616:	e8 20 62 01             	lpnz       4000761e <__udivmodsi4+0x52>

4000761a:	3d 79                   	lsr_s      r1,r1
4000761c:	3d 79                   	lsr_s      r1,r1
4000761e:	13 20 80 00             	bmsk       r0,r0,r2
40007622:	10 20 80 00             	bclr       r0,r0,r2
40007626:	e0 7f                   	j_s.d      [blink]
40007628:	65 78                   	or_s       r0,r0,r3
4000762a:	20 44                   	mov_s      r4,r1
4000762c:	02 20 41 80             	sub.f      r1,r0,r1
40007630:	03 20 00 00             	sbc        r0,r0,r0
40007634:	c2 21 06 81             	sub.nc.f   r1,r1,r4
40007638:	43 20 00 00             	sbc        r0,r0,0
4000763c:	c2 21 06 81             	sub.nc.f   r1,r1,r4
40007640:	83 20 7f 0f             	sbc        r0,r0,-3
40007644:	e0 7f                   	j_s.d      [blink]
40007646:	c0 21 05 01             	add.c      r1,r1,r4
4000764a:	e0 78                   	nop_s      

4000764c <__st_r13_to_r25>:
4000764c:	30 1c 40 36             	st         r25,[sp,48]

40007650 <__st_r13_to_r24>:
40007650:	2c 1c 00 36             	st         r24,[sp,44]

40007654 <__st_r13_to_r23>:
40007654:	28 1c c0 35             	st         r23,[sp,40]

40007658 <__st_r13_to_r22>:
40007658:	24 1c 80 35             	st         r22,[sp,36]

4000765c <__st_r13_to_r21>:
4000765c:	20 1c 40 35             	st         r21,[sp,32]

40007660 <__st_r13_to_r20>:
40007660:	1c 1c 00 35             	st         r20,[sp,28]

40007664 <__st_r13_to_r19>:
40007664:	18 1c c0 34             	st         r19,[sp,24]

40007668 <__st_r13_to_r18>:
40007668:	14 1c 80 34             	st         r18,[sp,20]

4000766c <__st_r13_to_r17>:
4000766c:	10 1c 40 34             	st         r17,[sp,16]

40007670 <__st_r13_to_r16>:
40007670:	0c 1c 00 34             	st         r16,[sp,12]

40007674 <__st_r13_to_r15>:
40007674:	42 c7                   	st_s       r15,[sp,8]
40007676:	41 c6                   	st_s       r14,[sp,4]
40007678:	e0 7f                   	j_s.d      [blink]
4000767a:	40 c5                   	st_s       r13,[sp,0]

4000767c <__ld_r13_to_r25>:
4000767c:	30 14 19 30             	ld         r25,[sp,48]

40007680 <__ld_r13_to_r24>:
40007680:	2c 14 18 30             	ld         r24,[sp,44]

40007684 <__ld_r13_to_r23>:
40007684:	28 14 17 30             	ld         r23,[sp,40]

40007688 <__ld_r13_to_r22>:
40007688:	24 14 16 30             	ld         r22,[sp,36]

4000768c <__ld_r13_to_r21>:
4000768c:	20 14 15 30             	ld         r21,[sp,32]

40007690 <__ld_r13_to_r20>:
40007690:	1c 14 14 30             	ld         r20,[sp,28]

40007694 <__ld_r13_to_r19>:
40007694:	18 14 13 30             	ld         r19,[sp,24]

40007698 <__ld_r13_to_r18>:
40007698:	14 14 12 30             	ld         r18,[sp,20]

4000769c <__ld_r13_to_r17>:
4000769c:	10 14 11 30             	ld         r17,[sp,16]

400076a0 <__ld_r13_to_r16>:
400076a0:	0c 14 10 30             	ld         r16,[sp,12]

400076a4 <__ld_r13_to_r15>:
400076a4:	02 c7                   	ld_s       r15,[sp,8]
400076a6:	01 c6                   	ld_s       r14,[sp,4]
400076a8:	e0 7f                   	j_s.d      [blink]
400076aa:	00 c5                   	ld_s       r13,[sp,0]

400076ac <__ld_r13_to_r25_ret>:
400076ac:	30 14 19 30             	ld         r25,[sp,48]

400076b0 <__ld_r13_to_r24_ret>:
400076b0:	2c 14 18 30             	ld         r24,[sp,44]

400076b4 <__ld_r13_to_r23_ret>:
400076b4:	28 14 17 30             	ld         r23,[sp,40]

400076b8 <__ld_r13_to_r22_ret>:
400076b8:	24 14 16 30             	ld         r22,[sp,36]

400076bc <__ld_r13_to_r21_ret>:
400076bc:	20 14 15 30             	ld         r21,[sp,32]

400076c0 <__ld_r13_to_r20_ret>:
400076c0:	1c 14 14 30             	ld         r20,[sp,28]

400076c4 <__ld_r13_to_r19_ret>:
400076c4:	18 14 13 30             	ld         r19,[sp,24]

400076c8 <__ld_r13_to_r18_ret>:
400076c8:	14 14 12 30             	ld         r18,[sp,20]

400076cc <__ld_r13_to_r17_ret>:
400076cc:	10 14 11 30             	ld         r17,[sp,16]

400076d0 <__ld_r13_to_r16_ret>:
400076d0:	0c 14 10 30             	ld         r16,[sp,12]

400076d4 <__ld_r13_to_r15_ret>:
400076d4:	08 14 0f 30             	ld         r15,[sp,8]

400076d8 <__ld_r13_to_r14_ret>:
400076d8:	30 24 1f 33             	ld         blink,[sp,r12]
400076dc:	01 c6                   	ld_s       r14,[sp,4]
400076de:	b0 24 0d 33             	ld.ab      r13,[sp,r12]
400076e2:	e0 7f                   	j_s.d      [blink]
400076e4:	87 74                   	add_s      sp,sp,4
400076e6:	e0 78                   	nop_s      

400076e8 <__udivdi3>:
400076e8:	f1 c0                   	push_s     blink
400076ea:	d8 1c 48 b3             	st.a       r13,[sp,-40]
400076ee:	41 c6                   	st_s       r14,[sp,4]
400076f0:	42 c7                   	st_s       r15,[sp,8]
400076f2:	0c 1c 00 34             	st         r16,[sp,12]
400076f6:	10 1c 40 34             	st         r17,[sp,16]
400076fa:	14 1c 80 34             	st         r18,[sp,20]
400076fe:	18 1c c0 34             	st         r19,[sp,24]
40007702:	1c 1c 00 35             	st         r20,[sp,28]
40007706:	20 1c 40 35             	st         r21,[sp,32]
4000770a:	24 1c 80 35             	st         r22,[sp,36]
4000770e:	28 46                   	mov_s      r14,r1
40007710:	48 45                   	mov_s      r13,r2
40007712:	6b 7b                   	tst_s      r3,r3
40007714:	74 01 22 00             	bnz.d      40007888 <__udivdi3+0x1a0>

40007718:	08 47                   	mov_s      r15,r0
4000771a:	30 75                   	cmp_s      r13,r1
4000771c:	d0 01 0e 00             	bls        400078ec <__udivdi3+0x204>

40007720:	d3 75 00 00 ff ff       	cmp_s      r13,0xffff
40007726:	3c 03 2e 00             	bls.d      40007a60 <__udivdi3+0x378>

4000772a:	30 40                   	mov_s      r16,r1
4000772c:	10 db                   	mov_s      r3,16
4000772e:	d3 75 ff 00 ff ff       	cmp_s      r13,0x00ffffff
40007734:	60 42                   	mov_s      r2,r3
40007736:	ca 22 2d 06             	mov.hi     r2,24
4000773a:	40 43                   	mov_s      r3,r2
4000773c:	a1 44                   	mov_s      r4,r13
4000773e:	44 22 fc 87             	and.f      lp_count,r2,31
40007742:	e8 20 e2 01             	lpnz       4000774e <__udivdi3+0x66>

40007746:	2f 24 02 01             	lsr        r4,r4
4000774a:	4a 26 00 70             	nop        
4000774e:	32 24 82 0f 00 40 b0 d7 	ldb        r2,[r4,0x4000d7b0]
40007756:	5b 63                   	add_s      r3,r3,r2
40007758:	4e 23 02 08             	rsub       r2,r3,32
4000775c:	4b 0a 30 00             	breq.d     r2,0,400077a6 <__udivdi3+0xbe>

40007760:	e1 45                   	mov_s      r5,r15
40007762:	44 22 fc 87             	and.f      lp_count,r2,31
40007766:	e8 20 e2 01             	lpnz       40007772 <__udivdi3+0x8a>

4000776a:	00 26 8e 13             	add        r14,r14,r14
4000776e:	4a 26 00 70             	nop        
40007772:	44 23 fc 87             	and.f      lp_count,r3,31
40007776:	e8 20 e2 01             	lpnz       40007782 <__udivdi3+0x9a>

4000777a:	2f 25 42 01             	lsr        r5,r5
4000777e:	4a 26 00 70             	nop        
40007782:	44 22 fc 87             	and.f      lp_count,r2,31
40007786:	e8 20 e2 01             	lpnz       40007792 <__udivdi3+0xaa>

4000778a:	00 25 4d 13             	add        r13,r13,r13
4000778e:	4a 26 00 70             	nop        
40007792:	05 26 50 11             	or         r16,r14,r5
40007796:	44 22 fc 87             	and.f      lp_count,r2,31
4000779a:	e8 20 e2 01             	lpnz       400077a6 <__udivdi3+0xbe>

4000779e:	00 27 cf 13             	add        r15,r15,r15
400077a2:	4a 26 00 70             	nop        
400077a6:	02 40                   	mov_s      r0,r16
400077a8:	a9 46                   	mov_s      r14,r13
400077aa:	4a 24 00 f4             	mov.f      lp_count,16
400077ae:	e8 20 e2 01             	lpnz       400077ba <__udivdi3+0xd2>

400077b2:	2f 26 82 13             	lsr        r14,r14
400077b6:	4a 26 00 70             	nop        
400077ba:	ee 0d ef ff             	bl.d       400075a4 <__umodsi3>

400077be:	c1 41                   	mov_s      r1,r14
400077c0:	c1 41                   	mov_s      r1,r14
400077c2:	10 42                   	mov_s      r18,r0
400077c4:	c2 0d ef ff             	bl.d       40007584 <__udivsi3>

400077c8:	02 40                   	mov_s      r0,r16
400077ca:	53 25 d1 13             	bmsk       r17,r13,15
400077ce:	10 40                   	mov_s      r16,r0
400077d0:	86 0d ef ff             	bl.d       40007554 <__mulsi3>

400077d4:	22 41                   	mov_s      r1,r17
400077d6:	42 44                   	mov_s      r4,r18
400077d8:	e1 42                   	mov_s      r2,r15
400077da:	4a 24 00 f4             	mov.f      lp_count,16
400077de:	e8 20 e2 01             	lpnz       400077ea <__udivdi3+0x102>

400077e2:	00 24 04 01             	add        r4,r4,r4
400077e6:	4a 26 00 70             	nop        
400077ea:	4a 24 00 f4             	mov.f      lp_count,16
400077ee:	e8 20 e2 01             	lpnz       400077fa <__udivdi3+0x112>

400077f2:	2f 22 82 00             	lsr        r2,r2
400077f6:	4a 26 00 70             	nop        
400077fa:	05 22 02 01             	or         r2,r2,r4
400077fe:	1f 0a 05 00             	brhs.t     r2,r0,4000781a <__udivdi3+0x132>

40007802:	00 22 42 83             	add.f      r2,r2,r13
40007806:	14 00 25 00             	bc.d       40007818 <__udivdi3+0x130>

4000780a:	42 20 44 20             	sub        r4,r16,1
4000780e:	50 70                   	cmp_s      r0,r2
40007810:	04 06 2d 00             	bhi.d      40007e14 <__udivdi3+0x72c>

40007814:	42 20 90 20             	sub        r16,r16,2
40007818:	90 40                   	mov_s      r16,r4
4000781a:	02 22 12 00             	sub        r18,r2,r0
4000781e:	c1 41                   	mov_s      r1,r14
40007820:	86 0d ef ff             	bl.d       400075a4 <__umodsi3>

40007824:	42 40                   	mov_s      r0,r18
40007826:	c1 41                   	mov_s      r1,r14
40007828:	10 43                   	mov_s      r19,r0
4000782a:	5e 0d ef ff             	bl.d       40007584 <__udivsi3>

4000782e:	42 40                   	mov_s      r0,r18
40007830:	62 45                   	mov_s      r5,r19
40007832:	4a 24 00 f4             	mov.f      lp_count,16
40007836:	e8 20 e2 01             	lpnz       40007842 <__udivdi3+0x15a>

4000783a:	00 25 45 01             	add        r5,r5,r5
4000783e:	4a 26 00 70             	nop        
40007842:	00 44                   	mov_s      r4,r0
40007844:	22 41                   	mov_s      r1,r17
40007846:	12 0d ef ff             	bl.d       40007554 <__mulsi3>

4000784a:	cf bf                   	bmsk_s     r15,r15,15
4000784c:	05 27 4f 11             	or         r15,r15,r5
40007850:	1b 0f 05 10             	brhs.t     r15,r0,4000786a <__udivdi3+0x182>

40007854:	00 27 4d 93             	add.f      r13,r15,r13
40007858:	78 05 25 00             	bc.d       40007dd0 <__udivdi3+0x6e8>

4000785c:	42 24 42 00             	sub        r2,r4,1
40007860:	b1 70                   	cmp_s      r0,r13
40007862:	c2 24 ad 00             	sub.hi     r4,r4,2
40007866:	6c 05 0e 00             	bls        40007dd0 <__udivdi3+0x6e8>

4000786a:	02 40                   	mov_s      r0,r16
4000786c:	0e 70                   	mov_s      r16,0
4000786e:	4a 24 00 f4             	mov.f      lp_count,16
40007872:	e8 20 e2 01             	lpnz       4000787e <__udivdi3+0x196>

40007876:	00 20 00 00             	add        r0,r0,r0
4000787a:	4a 26 00 70             	nop        
4000787e:	a7 01 20 00             	b.d        40007a22 <__udivdi3+0x33a>

40007882:	05 20 00 01             	or         r0,r0,r4
40007886:	e0 78                   	nop_s      
40007888:	30 73                   	cmp_s      r3,r1
4000788a:	98 01 2d 00             	bhi.d      40007a20 <__udivdi3+0x338>

4000788e:	0e 70                   	mov_s      r16,0
40007890:	d3 73 00 00 ff ff       	cmp_s      r3,0xffff
40007896:	bc 01 2e 00             	bls.d      40007a50 <__udivdi3+0x368>

4000789a:	4c 70                   	mov_s      r2,0
4000789c:	10 da                   	mov_s      r2,16
4000789e:	d3 73 ff 00 ff ff       	cmp_s      r3,0x00ffffff
400078a4:	40 44                   	mov_s      r4,r2
400078a6:	ca 24 2d 06             	mov.hi     r4,24
400078aa:	80 42                   	mov_s      r2,r4
400078ac:	60 45                   	mov_s      r5,r3
400078ae:	44 24 fc 87             	and.f      lp_count,r4,31
400078b2:	e8 20 e2 01             	lpnz       400078be <__udivdi3+0x1d6>

400078b6:	2f 25 42 01             	lsr        r5,r5
400078ba:	4a 26 00 70             	nop        
400078be:	32 25 84 0f 00 40 b0 d7 	ldb        r4,[r5,0x4000d7b0]
400078c6:	80 72                   	add_s      r2,r2,r4
400078c8:	4e 22 10 08             	rsub       r16,r2,32
400078cc:	0b 20 00 a4             	tst        r16,r16
400078d0:	b0 01 22 00             	bnz.d      40007a80 <__udivdi3+0x398>

400078d4:	d1 43                   	mov_s      r19,r14
400078d6:	13 0f 65 13             	brhs.t.d   r15,r13,400078e6 <__udivdi3+0x1fe>

400078da:	0e 70                   	mov_s      r16,0
400078dc:	d1 73                   	cmp_s      r3,r14
400078de:	46 01 26 00             	bnc.d      40007a22 <__udivdi3+0x33a>

400078e2:	ca 20 26 00             	mov.nc     r0,0
400078e6:	3f 01 20 00             	b.d        40007a22 <__udivdi3+0x33a>

400078ea:	0c 71                   	mov_s      r0,1
400078ec:	0f 0d 31 10             	brne.d     r13,0,400078fa <__udivdi3+0x212>

400078f0:	0c 71                   	mov_s      r0,1
400078f2:	96 0c ef ff             	bl.d       40007584 <__udivsi3>

400078f6:	2c 70                   	mov_s      r1,0
400078f8:	08 45                   	mov_s      r13,r0
400078fa:	d3 75 00 00 ff ff       	cmp_s      r13,0xffff
40007900:	70 01 2e 00             	bls.d      40007a70 <__udivdi3+0x388>

40007904:	6c 70                   	mov_s      r3,0
40007906:	10 db                   	mov_s      r3,16
40007908:	d3 75 ff 00 ff ff       	cmp_s      r13,0x00ffffff
4000790e:	60 42                   	mov_s      r2,r3
40007910:	ca 22 2d 06             	mov.hi     r2,24
40007914:	40 43                   	mov_s      r3,r2
40007916:	a1 44                   	mov_s      r4,r13
40007918:	44 22 fc 87             	and.f      lp_count,r2,31
4000791c:	e8 20 a2 01             	lpnz       40007928 <__udivdi3+0x240>

40007920:	2f 24 02 01             	lsr        r4,r4
40007924:	4a 26 00 70             	nop        
40007928:	32 24 82 0f 00 40 b0 d7 	ldb        r2,[r4,0x4000d7b0]
40007930:	5b 63                   	add_s      r3,r3,r2
40007932:	4e 23 02 08             	rsub       r2,r3,32
40007936:	4b 7a                   	tst_s      r2,r2
40007938:	4c 03 22 00             	bnz.d      40007c84 <__udivdi3+0x59c>

4000793c:	e1 44                   	mov_s      r4,r15
4000793e:	b1 41                   	mov_s      r17,r13
40007940:	a2 7e                   	sub_s      r14,r14,r13
40007942:	4a 24 00 f4             	mov.f      lp_count,16
40007946:	e8 20 e2 01             	lpnz       40007952 <__udivdi3+0x26a>

4000794a:	2f 21 42 24             	lsr        r17,r17
4000794e:	4a 26 00 70             	nop        
40007952:	53 25 d2 13             	bmsk       r18,r13,15
40007956:	0e 71                   	mov_s      r16,1
40007958:	c1 40                   	mov_s      r0,r14
4000795a:	4e 0c ef ff             	bl.d       400075a4 <__umodsi3>

4000795e:	22 41                   	mov_s      r1,r17
40007960:	22 41                   	mov_s      r1,r17
40007962:	10 43                   	mov_s      r19,r0
40007964:	22 0c ef ff             	bl.d       40007584 <__udivsi3>

40007968:	c1 40                   	mov_s      r0,r14
4000796a:	42 41                   	mov_s      r1,r18
4000796c:	ea 0b ef ff             	bl.d       40007554 <__mulsi3>

40007970:	08 46                   	mov_s      r14,r0
40007972:	62 44                   	mov_s      r4,r19
40007974:	e1 42                   	mov_s      r2,r15
40007976:	4a 24 00 f4             	mov.f      lp_count,16
4000797a:	e8 20 e2 01             	lpnz       40007986 <__udivdi3+0x29e>

4000797e:	00 24 04 01             	add        r4,r4,r4
40007982:	4a 26 00 70             	nop        
40007986:	4a 24 00 f4             	mov.f      lp_count,16
4000798a:	e8 20 e2 01             	lpnz       40007996 <__udivdi3+0x2ae>

4000798e:	2f 22 82 00             	lsr        r2,r2
40007992:	4a 26 00 70             	nop        
40007996:	05 22 02 01             	or         r2,r2,r4
4000799a:	1f 0a 05 00             	brhs.t     r2,r0,400079b6 <__udivdi3+0x2ce>

4000799e:	00 22 42 83             	add.f      r2,r2,r13
400079a2:	14 00 25 00             	bc.d       400079b4 <__udivdi3+0x2cc>

400079a6:	42 26 44 10             	sub        r4,r14,1
400079aa:	50 70                   	cmp_s      r0,r2
400079ac:	60 04 2d 00             	bhi.d      40007e0c <__udivdi3+0x724>

400079b0:	42 26 8e 10             	sub        r14,r14,2
400079b4:	88 46                   	mov_s      r14,r4
400079b6:	02 22 13 00             	sub        r19,r2,r0
400079ba:	22 41                   	mov_s      r1,r17
400079bc:	ea 0b ef ff             	bl.d       400075a4 <__umodsi3>

400079c0:	62 40                   	mov_s      r0,r19
400079c2:	22 41                   	mov_s      r1,r17
400079c4:	10 44                   	mov_s      r20,r0
400079c6:	c2 0b ef ff             	bl.d       40007584 <__udivsi3>

400079ca:	62 40                   	mov_s      r0,r19
400079cc:	82 45                   	mov_s      r5,r20
400079ce:	4a 24 00 f4             	mov.f      lp_count,16
400079d2:	e8 20 e2 01             	lpnz       400079de <__udivdi3+0x2f6>

400079d6:	00 25 45 01             	add        r5,r5,r5
400079da:	4a 26 00 70             	nop        
400079de:	00 44                   	mov_s      r4,r0
400079e0:	42 41                   	mov_s      r1,r18
400079e2:	76 0b ef ff             	bl.d       40007554 <__mulsi3>

400079e6:	cf bf                   	bmsk_s     r15,r15,15
400079e8:	05 27 4f 11             	or         r15,r15,r5
400079ec:	1b 0f 05 10             	brhs.t     r15,r0,40007a06 <__udivdi3+0x31e>

400079f0:	00 27 4d 93             	add.f      r13,r15,r13
400079f4:	d4 03 25 00             	bc.d       40007dc8 <__udivdi3+0x6e0>

400079f8:	42 24 42 00             	sub        r2,r4,1
400079fc:	b1 70                   	cmp_s      r0,r13
400079fe:	c2 24 ad 00             	sub.hi     r4,r4,2
40007a02:	c8 03 0e 00             	bls        40007dc8 <__udivdi3+0x6e0>

40007a06:	4a 24 00 f4             	mov.f      lp_count,16
40007a0a:	e8 20 e2 01             	lpnz       40007a16 <__udivdi3+0x32e>

40007a0e:	00 26 8e 13             	add        r14,r14,r14
40007a12:	4a 26 00 70             	nop        
40007a16:	0f 00 20 00             	b.d        40007a22 <__udivdi3+0x33a>

40007a1a:	05 24 80 03             	or         r0,r4,r14
40007a1e:	e0 78                   	nop_s      
40007a20:	0c 70                   	mov_s      r0,0
40007a22:	02 41                   	mov_s      r1,r16
40007a24:	28 14 1f 30             	ld         blink,[sp,40]
40007a28:	00 c5                   	ld_s       r13,[sp,0]
40007a2a:	01 c6                   	ld_s       r14,[sp,4]
40007a2c:	02 c7                   	ld_s       r15,[sp,8]
40007a2e:	0c 14 10 30             	ld         r16,[sp,12]
40007a32:	10 14 11 30             	ld         r17,[sp,16]
40007a36:	14 14 12 30             	ld         r18,[sp,20]
40007a3a:	18 14 13 30             	ld         r19,[sp,24]
40007a3e:	1c 14 14 30             	ld         r20,[sp,28]
40007a42:	20 14 15 30             	ld         r21,[sp,32]
40007a46:	24 14 16 30             	ld         r22,[sp,36]
40007a4a:	e0 7f                   	j_s.d      [blink]
40007a4c:	ab c0                   	add_s      sp,sp,44
40007a4e:	e0 78                   	nop_s      
40007a50:	8c 23 c3 8f             	cmp        r3,255
40007a54:	40 44                   	mov_s      r4,r2
40007a56:	ca 24 2d 02             	mov.hi     r4,8
40007a5a:	55 06 ef ff             	b.d        400078ac <__udivdi3+0x1c4>

40007a5e:	80 42                   	mov_s      r2,r4
40007a60:	8c 22 c3 8f             	cmp        r2,255
40007a64:	60 42                   	mov_s      r2,r3
40007a66:	ca 22 2d 02             	mov.hi     r2,8
40007a6a:	d5 04 ef ff             	b.d        4000773c <__udivdi3+0x54>

40007a6e:	40 43                   	mov_s      r3,r2
40007a70:	8c 25 c3 9f             	cmp        r13,255
40007a74:	60 42                   	mov_s      r2,r3
40007a76:	ca 22 2d 02             	mov.hi     r2,8
40007a7a:	9f 06 ef ff             	b.d        40007916 <__udivdi3+0x22e>

40007a7e:	40 43                   	mov_s      r3,r2
40007a80:	44 20 fc a7             	and.f      lp_count,r16,31
40007a84:	e8 20 a2 01             	lpnz       40007a90 <__udivdi3+0x3a8>

40007a88:	00 23 c3 00             	add        r3,r3,r3
40007a8c:	4a 26 00 70             	nop        
40007a90:	a1 44                   	mov_s      r4,r13
40007a92:	44 22 fc 87             	and.f      lp_count,r2,31
40007a96:	e8 20 e2 01             	lpnz       40007aa2 <__udivdi3+0x3ba>

40007a9a:	2f 24 02 01             	lsr        r4,r4
40007a9e:	4a 26 00 70             	nop        
40007aa2:	44 22 fc 87             	and.f      lp_count,r2,31
40007aa6:	e8 20 e2 01             	lpnz       40007ab2 <__udivdi3+0x3ca>

40007aaa:	2f 23 c2 24             	lsr        r19,r19
40007aae:	4a 26 00 70             	nop        
40007ab2:	05 23 11 01             	or         r17,r3,r4
40007ab6:	e1 43                   	mov_s      r3,r15
40007ab8:	44 22 fc 87             	and.f      lp_count,r2,31
40007abc:	e8 20 a2 01             	lpnz       40007ac8 <__udivdi3+0x3e0>

40007ac0:	2f 23 c2 00             	lsr        r3,r3
40007ac4:	4a 26 00 70             	nop        
40007ac8:	60 42                   	mov_s      r2,r3
40007aca:	44 20 fc a7             	and.f      lp_count,r16,31
40007ace:	e8 20 e2 01             	lpnz       40007ada <__udivdi3+0x3f2>

40007ad2:	00 26 8e 13             	add        r14,r14,r14
40007ad6:	4a 26 00 70             	nop        
40007ada:	62 40                   	mov_s      r0,r19
40007adc:	45 7e                   	or_s       r14,r14,r2
40007ade:	32 42                   	mov_s      r18,r17
40007ae0:	4a 24 00 f4             	mov.f      lp_count,16
40007ae4:	e8 20 a2 01             	lpnz       40007af0 <__udivdi3+0x408>

40007ae8:	2f 22 82 24             	lsr        r18,r18
40007aec:	4a 26 00 70             	nop        
40007af0:	b6 0a ef ff             	bl.d       400075a4 <__umodsi3>

40007af4:	42 41                   	mov_s      r1,r18
40007af6:	42 41                   	mov_s      r1,r18
40007af8:	10 45                   	mov_s      r21,r0
40007afa:	8e 0a ef ff             	bl.d       40007584 <__udivsi3>

40007afe:	62 40                   	mov_s      r0,r19
40007b00:	53 21 d4 23             	bmsk       r20,r17,15
40007b04:	10 43                   	mov_s      r19,r0
40007b06:	52 0a ef ff             	bl.d       40007554 <__mulsi3>

40007b0a:	82 41                   	mov_s      r1,r20
40007b0c:	44 20 fc a7             	and.f      lp_count,r16,31
40007b10:	e8 20 a2 01             	lpnz       40007b1c <__udivdi3+0x434>

40007b14:	00 25 4d 13             	add        r13,r13,r13
40007b18:	4a 26 00 70             	nop        
40007b1c:	a2 44                   	mov_s      r4,r21
40007b1e:	c1 42                   	mov_s      r2,r14
40007b20:	4a 24 00 f4             	mov.f      lp_count,16
40007b24:	e8 20 a2 01             	lpnz       40007b30 <__udivdi3+0x448>

40007b28:	00 24 04 01             	add        r4,r4,r4
40007b2c:	4a 26 00 70             	nop        
40007b30:	4a 24 00 f4             	mov.f      lp_count,16
40007b34:	e8 20 a2 01             	lpnz       40007b40 <__udivdi3+0x458>

40007b38:	2f 22 82 00             	lsr        r2,r2
40007b3c:	4a 26 00 70             	nop        
40007b40:	05 22 02 01             	or         r2,r2,r4
40007b44:	1b 0a 25 00             	brhs.t.d   r2,r0,40007b5e <__udivdi3+0x476>

40007b48:	02 22 15 00             	sub        r21,r2,r0
40007b4c:	00 22 42 84             	add.f      r2,r2,r17
40007b50:	9c 02 26 00             	bnc.d      40007dec <__udivdi3+0x704>

40007b54:	42 23 43 20             	sub        r3,r19,1
40007b58:	70 43                   	mov_s      r19,r3
40007b5a:	02 22 15 00             	sub        r21,r2,r0
40007b5e:	42 41                   	mov_s      r1,r18
40007b60:	46 0a ef ff             	bl.d       400075a4 <__umodsi3>

40007b64:	a2 40                   	mov_s      r0,r21
40007b66:	42 41                   	mov_s      r1,r18
40007b68:	10 46                   	mov_s      r22,r0
40007b6a:	1e 0a ef ff             	bl.d       40007584 <__udivsi3>

40007b6e:	a2 40                   	mov_s      r0,r21
40007b70:	c2 44                   	mov_s      r4,r22
40007b72:	4a 24 00 f4             	mov.f      lp_count,16
40007b76:	e8 20 e2 01             	lpnz       40007b82 <__udivdi3+0x49a>

40007b7a:	00 24 04 01             	add        r4,r4,r4
40007b7e:	4a 26 00 70             	nop        
40007b82:	00 47                   	mov_s      r7,r0
40007b84:	82 41                   	mov_s      r1,r20
40007b86:	d2 09 ef ff             	bl.d       40007554 <__mulsi3>

40007b8a:	cf be                   	bmsk_s     r14,r14,15
40007b8c:	05 24 84 03             	or         r4,r4,r14
40007b90:	15 0c 25 00             	brhs.t.d   r4,r0,40007ba4 <__udivdi3+0x4bc>

40007b94:	00 46                   	mov_s      r6,r0
40007b96:	00 24 44 84             	add.f      r4,r4,r17
40007b9a:	40 02 26 00             	bnc.d      40007dd8 <__udivdi3+0x6f0>

40007b9e:	42 27 42 00             	sub        r2,r7,1
40007ba2:	40 47                   	mov_s      r7,r2
40007ba4:	53 25 c8 13             	bmsk       r8,r13,15
40007ba8:	4a 24 00 f4             	mov.f      lp_count,16
40007bac:	e8 20 a2 01             	lpnz       40007bb8 <__udivdi3+0x4d0>

40007bb0:	00 23 d3 24             	add        r19,r19,r19
40007bb4:	4a 26 00 70             	nop        
40007bb8:	01 41                   	mov_s      r1,r8
40007bba:	05 27 c5 04             	or         r5,r7,r19
40007bbe:	53 25 c9 03             	bmsk       r9,r5,15
40007bc2:	96 09 ef ff             	bl.d       40007554 <__mulsi3>

40007bc6:	21 40                   	mov_s      r0,r9
40007bc8:	4a 24 00 f4             	mov.f      lp_count,16
40007bcc:	e8 20 a2 01             	lpnz       40007bd8 <__udivdi3+0x4f0>

40007bd0:	2f 25 42 13             	lsr        r13,r13
40007bd4:	4a 26 00 70             	nop        
40007bd8:	00 47                   	mov_s      r7,r0
40007bda:	a1 41                   	mov_s      r1,r13
40007bdc:	7a 09 ef ff             	bl.d       40007554 <__mulsi3>

40007be0:	21 40                   	mov_s      r0,r9
40007be2:	01 41                   	mov_s      r1,r8
40007be4:	08 43                   	mov_s      r11,r0
40007be6:	a8 41                   	mov_s      r9,r5
40007be8:	4a 24 00 f4             	mov.f      lp_count,16
40007bec:	e8 20 a2 01             	lpnz       40007bf8 <__udivdi3+0x510>

40007bf0:	2f 21 42 12             	lsr        r9,r9
40007bf4:	4a 26 00 70             	nop        
40007bf8:	5e 09 ef ff             	bl.d       40007554 <__mulsi3>

40007bfc:	21 40                   	mov_s      r0,r9
40007bfe:	e8 42                   	mov_s      r10,r7
40007c00:	08 40                   	mov_s      r8,r0
40007c02:	4a 24 00 f4             	mov.f      lp_count,16
40007c06:	e8 20 e2 01             	lpnz       40007c12 <__udivdi3+0x52a>

40007c0a:	2f 22 82 12             	lsr        r10,r10
40007c0e:	4a 26 00 70             	nop        
40007c12:	a1 41                   	mov_s      r1,r13
40007c14:	42 09 ef ff             	bl.d       40007554 <__mulsi3>

40007c18:	21 40                   	mov_s      r0,r9
40007c1a:	00 20 c2 12             	add        r2,r8,r11
40007c1e:	41 72                   	add_s      r2,r2,r10
40007c20:	0c 20 80 90             	cmp        r8,r2
40007c24:	40 43                   	mov_s      r3,r2
40007c26:	c0 20 8d 0f 01 00 00 00 	add.hi     r0,r0,0x10000
40007c2e:	4a 24 00 f4             	mov.f      lp_count,16
40007c32:	e8 20 e2 01             	lpnz       40007c3e <__udivdi3+0x556>

40007c36:	2f 23 c2 00             	lsr        r3,r3
40007c3a:	4a 26 00 70             	nop        
40007c3e:	4a 24 00 f4             	mov.f      lp_count,16
40007c42:	e8 20 e2 01             	lpnz       40007c4e <__udivdi3+0x566>

40007c46:	00 22 82 00             	add        r2,r2,r2
40007c4a:	4a 26 00 70             	nop        
40007c4e:	02 24 84 01             	sub        r4,r4,r6
40007c52:	78 60                   	add_s      r0,r0,r3
40007c54:	53 27 c7 03             	bmsk       r7,r7,15
40007c58:	0c 24 00 80             	cmp        r4,r0
40007c5c:	60 01 25 00             	bc.d       40007dbc <__udivdi3+0x6d4>

40007c60:	e0 72                   	add_s      r2,r2,r7
40007c62:	1f 0c 21 00             	brne.d     r4,r0,40007c7e <__udivdi3+0x596>

40007c66:	a0 40                   	mov_s      r0,r5
40007c68:	44 20 fc a7             	and.f      lp_count,r16,31
40007c6c:	e8 20 a2 01             	lpnz       40007c78 <__udivdi3+0x590>

40007c70:	00 27 cf 13             	add        r15,r15,r15
40007c74:	4a 26 00 70             	nop        
40007c78:	50 77                   	cmp_s      r15,r2
40007c7a:	44 01 05 00             	bc         40007dbc <__udivdi3+0x6d4>

40007c7e:	a7 05 ef ff             	b.d        40007a22 <__udivdi3+0x33a>

40007c82:	0e 70                   	mov_s      r16,0
40007c84:	44 23 fc 87             	and.f      lp_count,r3,31
40007c88:	e8 20 a2 01             	lpnz       40007c94 <__udivdi3+0x5ac>

40007c8c:	2f 24 02 01             	lsr        r4,r4
40007c90:	4a 26 00 70             	nop        
40007c94:	44 22 fc 87             	and.f      lp_count,r2,31
40007c98:	e8 20 a2 01             	lpnz       40007ca4 <__udivdi3+0x5bc>

40007c9c:	00 25 4d 13             	add        r13,r13,r13
40007ca0:	4a 26 00 70             	nop        
40007ca4:	44 22 fc 87             	and.f      lp_count,r2,31
40007ca8:	e8 20 a2 01             	lpnz       40007cb4 <__udivdi3+0x5cc>

40007cac:	00 27 cf 13             	add        r15,r15,r15
40007cb0:	4a 26 00 70             	nop        
40007cb4:	d1 40                   	mov_s      r16,r14
40007cb6:	b1 41                   	mov_s      r17,r13
40007cb8:	44 23 fc 87             	and.f      lp_count,r3,31
40007cbc:	e8 20 a2 01             	lpnz       40007cc8 <__udivdi3+0x5e0>

40007cc0:	2f 20 02 24             	lsr        r16,r16
40007cc4:	4a 26 00 70             	nop        
40007cc8:	44 22 fc 87             	and.f      lp_count,r2,31
40007ccc:	e8 20 a2 01             	lpnz       40007cd8 <__udivdi3+0x5f0>

40007cd0:	00 26 8e 13             	add        r14,r14,r14
40007cd4:	4a 26 00 70             	nop        
40007cd8:	4a 24 00 f4             	mov.f      lp_count,16
40007cdc:	e8 20 a2 01             	lpnz       40007ce8 <__udivdi3+0x600>

40007ce0:	2f 21 42 24             	lsr        r17,r17
40007ce4:	4a 26 00 70             	nop        
40007ce8:	05 26 13 11             	or         r19,r14,r4
40007cec:	02 40                   	mov_s      r0,r16
40007cee:	ba 08 ef ff             	bl.d       400075a4 <__umodsi3>

40007cf2:	22 41                   	mov_s      r1,r17
40007cf4:	22 41                   	mov_s      r1,r17
40007cf6:	08 46                   	mov_s      r14,r0
40007cf8:	8e 08 ef ff             	bl.d       40007584 <__udivsi3>

40007cfc:	02 40                   	mov_s      r0,r16
40007cfe:	53 25 d2 13             	bmsk       r18,r13,15
40007d02:	10 40                   	mov_s      r16,r0
40007d04:	52 08 ef ff             	bl.d       40007554 <__mulsi3>

40007d08:	42 41                   	mov_s      r1,r18
40007d0a:	c1 44                   	mov_s      r4,r14
40007d0c:	62 42                   	mov_s      r2,r19
40007d0e:	4a 24 00 f4             	mov.f      lp_count,16
40007d12:	e8 20 e2 01             	lpnz       40007d1e <__udivdi3+0x636>

40007d16:	00 24 04 01             	add        r4,r4,r4
40007d1a:	4a 26 00 70             	nop        
40007d1e:	4a 24 00 f4             	mov.f      lp_count,16
40007d22:	e8 20 e2 01             	lpnz       40007d2e <__udivdi3+0x646>

40007d26:	2f 22 82 00             	lsr        r2,r2
40007d2a:	4a 26 00 70             	nop        
40007d2e:	05 22 02 01             	or         r2,r2,r4
40007d32:	25 0a 25 00             	brhs.t.d   r2,r0,40007d54 <__udivdi3+0x66c>

40007d36:	02 22 14 00             	sub        r20,r2,r0
40007d3a:	00 22 42 83             	add.f      r2,r2,r13
40007d3e:	c8 00 25 00             	bc.d       40007e04 <__udivdi3+0x71c>

40007d42:	42 20 43 20             	sub        r3,r16,1
40007d46:	c1 0a 05 00             	brhs.t     r2,r0,40007e04 <__udivdi3+0x71c>

40007d4a:	42 20 90 20             	sub        r16,r16,2
40007d4e:	ba 62                   	add_s      r2,r2,r13
40007d50:	02 22 14 00             	sub        r20,r2,r0
40007d54:	22 41                   	mov_s      r1,r17
40007d56:	52 08 ef ff             	bl.d       400075a4 <__umodsi3>

40007d5a:	82 40                   	mov_s      r0,r20
40007d5c:	22 41                   	mov_s      r1,r17
40007d5e:	08 46                   	mov_s      r14,r0
40007d60:	4a 24 00 f4             	mov.f      lp_count,16
40007d64:	e8 20 a2 01             	lpnz       40007d70 <__udivdi3+0x688>

40007d68:	00 26 8e 13             	add        r14,r14,r14
40007d6c:	4a 26 00 70             	nop        
40007d70:	16 08 ef ff             	bl.d       40007584 <__udivsi3>

40007d74:	82 40                   	mov_s      r0,r20
40007d76:	42 41                   	mov_s      r1,r18
40007d78:	00 44                   	mov_s      r4,r0
40007d7a:	de 0f af ff             	bl.d       40007554 <__mulsi3>

40007d7e:	53 23 d3 23             	bmsk       r19,r19,15
40007d82:	05 26 ce 14             	or         r14,r14,r19
40007d86:	1d 0e 05 10             	brhs.t     r14,r0,40007da0 <__udivdi3+0x6b8>

40007d8a:	00 26 4e 93             	add.f      r14,r14,r13
40007d8e:	70 00 25 00             	bc.d       40007dfc <__udivdi3+0x714>

40007d92:	42 24 43 00             	sub        r3,r4,1
40007d96:	69 0e 05 10             	brhs.t     r14,r0,40007dfc <__udivdi3+0x714>

40007d9a:	42 24 84 00             	sub        r4,r4,2
40007d9e:	be 66                   	add_s      r14,r14,r13
40007da0:	4a 24 00 f4             	mov.f      lp_count,16
40007da4:	e8 20 a2 01             	lpnz       40007db0 <__udivdi3+0x6c8>

40007da8:	00 20 10 24             	add        r16,r16,r16
40007dac:	4a 26 00 70             	nop        
40007db0:	02 7e                   	sub_s      r14,r14,r0
40007db2:	a9 03 ef ff             	b.d        40007958 <__udivdi3+0x270>

40007db6:	05 20 10 21             	or         r16,r16,r4
40007dba:	e0 78                   	nop_s      
40007dbc:	42 25 40 00             	sub        r0,r5,1
40007dc0:	63 04 ef ff             	b.d        40007a22 <__udivdi3+0x33a>

40007dc4:	0e 70                   	mov_s      r16,0
40007dc6:	e0 78                   	nop_s      
40007dc8:	3f 04 ef ff             	b.d        40007a06 <__udivdi3+0x31e>

40007dcc:	40 44                   	mov_s      r4,r2
40007dce:	e0 78                   	nop_s      
40007dd0:	9b 02 ef ff             	b.d        4000786a <__udivdi3+0x182>

40007dd4:	40 44                   	mov_s      r4,r2
40007dd6:	e0 78                   	nop_s      
40007dd8:	90 70                   	cmp_s      r0,r4
40007dda:	ca 05 ee ff             	bls.d      40007ba2 <__udivdi3+0x4ba>

40007dde:	42 27 87 00             	sub        r7,r7,2
40007de2:	c5 05 ef ff             	b.d        40007ba4 <__udivdi3+0x4bc>

40007de6:	00 24 44 04             	add        r4,r4,r17
40007dea:	e0 78                   	nop_s      
40007dec:	50 70                   	cmp_s      r0,r2
40007dee:	6c 05 ee ff             	bls.d      40007b58 <__udivdi3+0x470>

40007df2:	42 23 93 20             	sub        r19,r19,2
40007df6:	67 05 ef ff             	b.d        40007b5a <__udivdi3+0x472>

40007dfa:	22 72                   	add_s      r2,r2,r17
40007dfc:	a5 07 ef ff             	b.d        40007da0 <__udivdi3+0x6b8>

40007e00:	60 44                   	mov_s      r4,r3
40007e02:	e0 78                   	nop_s      
40007e04:	4d 07 ef ff             	b.d        40007d50 <__udivdi3+0x668>

40007e08:	70 40                   	mov_s      r16,r3
40007e0a:	e0 78                   	nop_s      
40007e0c:	ab 03 ef ff             	b.d        400079b6 <__udivdi3+0x2ce>

40007e10:	ba 62                   	add_s      r2,r2,r13
40007e12:	e0 78                   	nop_s      
40007e14:	07 02 ef ff             	b.d        4000781a <__udivdi3+0x132>

40007e18:	ba 62                   	add_s      r2,r2,r13
40007e1a:	e0 78                   	nop_s      

40007e1c <__umoddi3>:
40007e1c:	f1 c0                   	push_s     blink
40007e1e:	d4 1c 48 b3             	st.a       r13,[sp,-44]
40007e22:	41 c6                   	st_s       r14,[sp,4]
40007e24:	42 c7                   	st_s       r15,[sp,8]
40007e26:	0c 1c 00 34             	st         r16,[sp,12]
40007e2a:	10 1c 40 34             	st         r17,[sp,16]
40007e2e:	14 1c 80 34             	st         r18,[sp,20]
40007e32:	18 1c c0 34             	st         r19,[sp,24]
40007e36:	1c 1c 00 35             	st         r20,[sp,28]
40007e3a:	20 1c 40 35             	st         r21,[sp,32]
40007e3e:	24 1c 80 35             	st         r22,[sp,36]
40007e42:	28 1c c0 35             	st         r23,[sp,40]
40007e46:	28 46                   	mov_s      r14,r1
40007e48:	48 45                   	mov_s      r13,r2
40007e4a:	08 47                   	mov_s      r15,r0
40007e4c:	0a 24 c0 80             	mov.f      r4,r3
40007e50:	28 01 22 00             	bnz.d      40007f78 <__umoddi3+0x15c>

40007e54:	30 40                   	mov_s      r16,r1
40007e56:	30 75                   	cmp_s      r13,r1
40007e58:	c4 01 0e 00             	bls        4000801c <__umoddi3+0x200>

40007e5c:	d3 75 00 00 ff ff       	cmp_s      r13,0xffff
40007e62:	08 03 2e 00             	bls.d      40008168 <__umoddi3+0x34c>

40007e66:	8c 22 c3 8f             	cmp        r2,255
40007e6a:	4a 24 00 04             	mov        r4,16
40007e6e:	d3 75 ff 00 ff ff       	cmp_s      r13,0x00ffffff
40007e74:	80 42                   	mov_s      r2,r4
40007e76:	ca 22 2d 06             	mov.hi     r2,24
40007e7a:	40 44                   	mov_s      r4,r2
40007e7c:	a1 43                   	mov_s      r3,r13
40007e7e:	44 22 fc 87             	and.f      lp_count,r2,31
40007e82:	e8 20 e2 01             	lpnz       40007e8e <__umoddi3+0x72>

40007e86:	2f 23 c2 00             	lsr        r3,r3
40007e8a:	4a 26 00 70             	nop        
40007e8e:	32 23 82 0f 00 40 b0 d7 	ldb        r2,[r3,0x4000d7b0]
40007e96:	00 24 84 00             	add        r4,r4,r2
40007e9a:	4e 24 11 08             	rsub       r17,r4,32
40007e9e:	0b 21 40 a4             	tst        r17,r17
40007ea2:	50 00 21 00             	bz.d       40007ef0 <__umoddi3+0xd4>

40007ea6:	ca 21 21 20             	mov.z      r17,0
40007eaa:	e1 42                   	mov_s      r2,r15
40007eac:	44 21 fc a7             	and.f      lp_count,r17,31
40007eb0:	e8 20 a2 01             	lpnz       40007ebc <__umoddi3+0xa0>

40007eb4:	00 26 8e 13             	add        r14,r14,r14
40007eb8:	4a 26 00 70             	nop        
40007ebc:	44 24 fc 87             	and.f      lp_count,r4,31
40007ec0:	e8 20 a2 01             	lpnz       40007ecc <__umoddi3+0xb0>

40007ec4:	2f 22 82 00             	lsr        r2,r2
40007ec8:	4a 26 00 70             	nop        
40007ecc:	44 21 fc a7             	and.f      lp_count,r17,31
40007ed0:	e8 20 a2 01             	lpnz       40007edc <__umoddi3+0xc0>

40007ed4:	00 25 4d 13             	add        r13,r13,r13
40007ed8:	4a 26 00 70             	nop        
40007edc:	05 26 90 10             	or         r16,r14,r2
40007ee0:	44 21 fc a7             	and.f      lp_count,r17,31
40007ee4:	e8 20 a2 01             	lpnz       40007ef0 <__umoddi3+0xd4>

40007ee8:	00 27 cf 13             	add        r15,r15,r15
40007eec:	4a 26 00 70             	nop        
40007ef0:	a9 46                   	mov_s      r14,r13
40007ef2:	02 40                   	mov_s      r0,r16
40007ef4:	4a 24 00 f4             	mov.f      lp_count,16
40007ef8:	e8 20 a2 01             	lpnz       40007f04 <__umoddi3+0xe8>

40007efc:	2f 26 82 13             	lsr        r14,r14
40007f00:	4a 26 00 70             	nop        
40007f04:	a2 0e af ff             	bl.d       400075a4 <__umodsi3>

40007f08:	c1 41                   	mov_s      r1,r14
40007f0a:	c1 41                   	mov_s      r1,r14
40007f0c:	10 43                   	mov_s      r19,r0
40007f0e:	7a 0e af ff             	bl.d       40007584 <__udivsi3>

40007f12:	02 40                   	mov_s      r0,r16
40007f14:	53 25 d2 13             	bmsk       r18,r13,15
40007f18:	3e 0e af ff             	bl.d       40007554 <__mulsi3>

40007f1c:	42 41                   	mov_s      r1,r18
40007f1e:	62 44                   	mov_s      r4,r19
40007f20:	e1 42                   	mov_s      r2,r15
40007f22:	4a 24 00 f4             	mov.f      lp_count,16
40007f26:	e8 20 e2 01             	lpnz       40007f32 <__umoddi3+0x116>

40007f2a:	00 24 04 01             	add        r4,r4,r4
40007f2e:	4a 26 00 70             	nop        
40007f32:	4a 24 00 f4             	mov.f      lp_count,16
40007f36:	e8 20 e2 01             	lpnz       40007f42 <__umoddi3+0x126>

40007f3a:	2f 22 82 00             	lsr        r2,r2
40007f3e:	4a 26 00 70             	nop        
40007f42:	05 22 02 01             	or         r2,r2,r4
40007f46:	21 0a 25 00             	brhs.t.d   r2,r0,40007f64 <__umoddi3+0x148>

40007f4a:	02 22 10 00             	sub        r16,r2,r0
40007f4e:	00 22 42 83             	add.f      r2,r2,r13
40007f52:	14 00 25 00             	bc.d       40007f64 <__umoddi3+0x148>

40007f56:	02 22 10 00             	sub        r16,r2,r0
40007f5a:	50 70                   	cmp_s      r0,r2
40007f5c:	c0 22 4d 03             	add.hi     r2,r2,r13
40007f60:	02 22 10 00             	sub        r16,r2,r0
40007f64:	c1 41                   	mov_s      r1,r14
40007f66:	42 0e af ff             	bl.d       400075a4 <__umodsi3>

40007f6a:	02 40                   	mov_s      r0,r16
40007f6c:	c1 41                   	mov_s      r1,r14
40007f6e:	10 43                   	mov_s      r19,r0
40007f70:	87 01 20 00             	b.d        400080f6 <__umoddi3+0x2da>

40007f74:	02 40                   	mov_s      r0,r16
40007f76:	e0 78                   	nop_s      
40007f78:	0c 24 40 80             	cmp        r4,r1
40007f7c:	70 00 2d 00             	bhi.d      40007fec <__umoddi3+0x1d0>

40007f80:	ca 21 4d 00             	mov.hi     r1,r1
40007f84:	0c 24 80 8f 00 00 ff ff 	cmp        r4,0xffff
40007f8c:	bc 01 2e 00             	bls.d      40008148 <__umoddi3+0x32c>

40007f90:	4e 70                   	mov_s      r18,0
40007f92:	4a 22 00 24             	mov        r18,16
40007f96:	0c 24 80 8f ff 00 ff ff 	cmp        r4,0x00ffffff
40007f9e:	42 46                   	mov_s      r6,r18
40007fa0:	ca 26 2d 06             	mov.hi     r6,24
40007fa4:	d0 42                   	mov_s      r18,r6
40007fa6:	80 45                   	mov_s      r5,r4
40007fa8:	44 26 fc 87             	and.f      lp_count,r6,31
40007fac:	e8 20 a2 01             	lpnz       40007fb8 <__umoddi3+0x19c>

40007fb0:	2f 25 42 01             	lsr        r5,r5
40007fb4:	4a 26 00 70             	nop        
40007fb8:	32 25 86 0f 00 40 b0 d7 	ldb        r6,[r5,0x4000d7b0]
40007fc0:	00 22 92 21             	add        r18,r18,r6
40007fc4:	4e 22 11 28             	rsub       r17,r18,32
40007fc8:	0b 21 40 a4             	tst        r17,r17
40007fcc:	a8 01 22 00             	bnz.d      40008174 <__umoddi3+0x358>

40007fd0:	ca 22 42 03             	mov.nz     r2,r13
40007fd4:	f1 75                   	cmp_s      r13,r15
40007fd6:	fc 04 2d 00             	bhi.d      400084d0 <__umoddi3+0x6b4>

40007fda:	0c 24 80 83             	cmp        r4,r14
40007fde:	02 20 8f 80             	sub.f      r15,r0,r2
40007fe2:	03 21 d0 00             	sbc        r16,r1,r3
40007fe6:	e1 40                   	mov_s      r0,r15
40007fe8:	0a 21 00 04             	mov        r1,r16
40007fec:	2c 14 1f 30             	ld         blink,[sp,44]
40007ff0:	00 c5                   	ld_s       r13,[sp,0]
40007ff2:	01 c6                   	ld_s       r14,[sp,4]
40007ff4:	02 c7                   	ld_s       r15,[sp,8]
40007ff6:	0c 14 10 30             	ld         r16,[sp,12]
40007ffa:	10 14 11 30             	ld         r17,[sp,16]
40007ffe:	14 14 12 30             	ld         r18,[sp,20]
40008002:	18 14 13 30             	ld         r19,[sp,24]
40008006:	1c 14 14 30             	ld         r20,[sp,28]
4000800a:	20 14 15 30             	ld         r21,[sp,32]
4000800e:	24 14 16 30             	ld         r22,[sp,36]
40008012:	28 14 17 30             	ld         r23,[sp,40]
40008016:	e0 7f                   	j_s.d      [blink]
40008018:	ac c0                   	add_s      sp,sp,48
4000801a:	e0 78                   	nop_s      
4000801c:	0f 0d 31 10             	brne.d     r13,0,4000802a <__umoddi3+0x20e>

40008020:	0c 71                   	mov_s      r0,1
40008022:	66 0d af ff             	bl.d       40007584 <__udivsi3>

40008026:	2c 70                   	mov_s      r1,0
40008028:	08 45                   	mov_s      r13,r0
4000802a:	d3 75 00 00 ff ff       	cmp_s      r13,0xffff
40008030:	28 01 2e 00             	bls.d      40008158 <__umoddi3+0x33c>

40008034:	4c 70                   	mov_s      r2,0
40008036:	10 da                   	mov_s      r2,16
40008038:	d3 75 ff 00 ff ff       	cmp_s      r13,0x00ffffff
4000803e:	40 43                   	mov_s      r3,r2
40008040:	ca 23 2d 06             	mov.hi     r3,24
40008044:	60 42                   	mov_s      r2,r3
40008046:	a1 44                   	mov_s      r4,r13
40008048:	44 23 fc 87             	and.f      lp_count,r3,31
4000804c:	e8 20 a2 01             	lpnz       40008058 <__umoddi3+0x23c>

40008050:	2f 24 02 01             	lsr        r4,r4
40008054:	4a 26 00 70             	nop        
40008058:	32 24 83 0f 00 40 b0 d7 	ldb        r3,[r4,0x4000d7b0]
40008060:	7a 62                   	add_s      r2,r2,r3
40008062:	4e 22 11 08             	rsub       r17,r2,32
40008066:	0b 21 40 a4             	tst        r17,r17
4000806a:	44 03 22 00             	bnz.d      400083ac <__umoddi3+0x590>

4000806e:	e1 43                   	mov_s      r3,r15
40008070:	b1 40                   	mov_s      r16,r13
40008072:	a2 7e                   	sub_s      r14,r14,r13
40008074:	4a 24 00 f4             	mov.f      lp_count,16
40008078:	e8 20 a2 01             	lpnz       40008084 <__umoddi3+0x268>

4000807c:	2f 20 02 24             	lsr        r16,r16
40008080:	4a 26 00 70             	nop        
40008084:	53 25 d2 13             	bmsk       r18,r13,15
40008088:	02 41                   	mov_s      r1,r16
4000808a:	1e 0d af ff             	bl.d       400075a4 <__umodsi3>

4000808e:	c1 40                   	mov_s      r0,r14
40008090:	02 41                   	mov_s      r1,r16
40008092:	10 43                   	mov_s      r19,r0
40008094:	f2 0c af ff             	bl.d       40007584 <__udivsi3>

40008098:	0a 20 80 03             	mov        r0,r14
4000809c:	ba 0c af ff             	bl.d       40007554 <__mulsi3>

400080a0:	42 41                   	mov_s      r1,r18
400080a2:	62 44                   	mov_s      r4,r19
400080a4:	e1 42                   	mov_s      r2,r15
400080a6:	4a 24 00 f4             	mov.f      lp_count,16
400080aa:	e8 20 e2 01             	lpnz       400080b6 <__umoddi3+0x29a>

400080ae:	00 24 04 01             	add        r4,r4,r4
400080b2:	4a 26 00 70             	nop        
400080b6:	4a 24 00 f4             	mov.f      lp_count,16
400080ba:	e8 20 e2 01             	lpnz       400080c6 <__umoddi3+0x2aa>

400080be:	2f 22 82 00             	lsr        r2,r2
400080c2:	4a 26 00 70             	nop        
400080c6:	05 22 02 01             	or         r2,r2,r4
400080ca:	21 0a 25 00             	brhs.t.d   r2,r0,400080e8 <__umoddi3+0x2cc>

400080ce:	02 22 0e 00             	sub        r14,r2,r0
400080d2:	00 22 42 83             	add.f      r2,r2,r13
400080d6:	14 00 25 00             	bc.d       400080e8 <__umoddi3+0x2cc>

400080da:	02 22 0e 00             	sub        r14,r2,r0
400080de:	50 70                   	cmp_s      r0,r2
400080e0:	c0 22 4d 03             	add.hi     r2,r2,r13
400080e4:	02 22 0e 00             	sub        r14,r2,r0
400080e8:	02 41                   	mov_s      r1,r16
400080ea:	be 0c af ff             	bl.d       400075a4 <__umodsi3>

400080ee:	c1 40                   	mov_s      r0,r14
400080f0:	02 41                   	mov_s      r1,r16
400080f2:	10 43                   	mov_s      r19,r0
400080f4:	c1 40                   	mov_s      r0,r14
400080f6:	92 0c af ff             	bl.d       40007584 <__udivsi3>

400080fa:	cf bf                   	bmsk_s     r15,r15,15
400080fc:	62 44                   	mov_s      r4,r19
400080fe:	4a 24 00 f4             	mov.f      lp_count,16
40008102:	e8 20 e2 01             	lpnz       4000810e <__umoddi3+0x2f2>

40008106:	00 24 04 01             	add        r4,r4,r4
4000810a:	4a 26 00 70             	nop        
4000810e:	4a 0c af ff             	bl.d       40007554 <__mulsi3>

40008112:	42 41                   	mov_s      r1,r18
40008114:	05 27 0f 11             	or         r15,r15,r4
40008118:	17 0f 05 10             	brhs.t     r15,r0,4000812e <__umoddi3+0x312>

4000811c:	00 27 4f 93             	add.f      r15,r15,r13
40008120:	12 00 25 00             	bc.d       40008132 <__umoddi3+0x316>

40008124:	ce 20 c5 03             	rsub.c     r0,r0,r15
40008128:	f1 70                   	cmp_s      r0,r15
4000812a:	c0 27 4d 13             	add.hi     r15,r15,r13
4000812e:	0e 20 c0 03             	rsub       r0,r0,r15
40008132:	44 21 fc a7             	and.f      lp_count,r17,31
40008136:	e8 20 e2 01             	lpnz       40008142 <__umoddi3+0x326>

4000813a:	2f 20 02 00             	lsr        r0,r0
4000813e:	4a 26 00 70             	nop        
40008142:	ad 06 ef ff             	b.d        40007fec <__umoddi3+0x1d0>

40008146:	2c 70                   	mov_s      r1,0
40008148:	8c 24 c3 8f             	cmp        r4,255
4000814c:	42 46                   	mov_s      r6,r18
4000814e:	ca 26 2d 02             	mov.hi     r6,8
40008152:	57 06 ef ff             	b.d        40007fa6 <__umoddi3+0x18a>

40008156:	d0 42                   	mov_s      r18,r6
40008158:	8c 25 c3 9f             	cmp        r13,255
4000815c:	40 43                   	mov_s      r3,r2
4000815e:	ca 23 2d 02             	mov.hi     r3,8
40008162:	e7 06 ef ff             	b.d        40008046 <__umoddi3+0x22a>

40008166:	60 42                   	mov_s      r2,r3
40008168:	80 42                   	mov_s      r2,r4
4000816a:	ca 22 2d 02             	mov.hi     r2,8
4000816e:	11 05 ef ff             	b.d        40007e7c <__umoddi3+0x60>

40008172:	40 44                   	mov_s      r4,r2
40008174:	44 22 fc a7             	and.f      lp_count,r18,31
40008178:	e8 20 a2 01             	lpnz       40008184 <__umoddi3+0x368>

4000817c:	2f 22 82 00             	lsr        r2,r2
40008180:	4a 26 00 70             	nop        
40008184:	44 21 fc a7             	and.f      lp_count,r17,31
40008188:	e8 20 a2 01             	lpnz       40008194 <__umoddi3+0x378>

4000818c:	00 24 04 01             	add        r4,r4,r4
40008190:	4a 26 00 70             	nop        
40008194:	05 24 90 00             	or         r16,r4,r2
40008198:	e1 42                   	mov_s      r2,r15
4000819a:	44 22 fc a7             	and.f      lp_count,r18,31
4000819e:	e8 20 e2 01             	lpnz       400081aa <__umoddi3+0x38e>

400081a2:	2f 22 82 00             	lsr        r2,r2
400081a6:	4a 26 00 70             	nop        
400081aa:	d1 45                   	mov_s      r21,r14
400081ac:	12 43                   	mov_s      r19,r16
400081ae:	44 22 fc a7             	and.f      lp_count,r18,31
400081b2:	e8 20 e2 01             	lpnz       400081be <__umoddi3+0x3a2>

400081b6:	2f 25 42 25             	lsr        r21,r21
400081ba:	4a 26 00 70             	nop        
400081be:	44 21 fc a7             	and.f      lp_count,r17,31
400081c2:	e8 20 e2 01             	lpnz       400081ce <__umoddi3+0x3b2>

400081c6:	00 26 8e 13             	add        r14,r14,r14
400081ca:	4a 26 00 70             	nop        
400081ce:	4a 24 00 f4             	mov.f      lp_count,16
400081d2:	e8 20 e2 01             	lpnz       400081de <__umoddi3+0x3c2>

400081d6:	2f 23 c2 24             	lsr        r19,r19
400081da:	4a 26 00 70             	nop        
400081de:	05 26 94 10             	or         r20,r14,r2
400081e2:	a2 40                   	mov_s      r0,r21
400081e4:	c2 0b af ff             	bl.d       400075a4 <__umodsi3>

400081e8:	62 41                   	mov_s      r1,r19
400081ea:	62 41                   	mov_s      r1,r19
400081ec:	08 46                   	mov_s      r14,r0
400081ee:	9a 0b af ff             	bl.d       40007584 <__udivsi3>

400081f2:	a2 40                   	mov_s      r0,r21
400081f4:	53 20 d6 23             	bmsk       r22,r16,15
400081f8:	10 45                   	mov_s      r21,r0
400081fa:	5e 0b af ff             	bl.d       40007554 <__mulsi3>

400081fe:	c2 41                   	mov_s      r1,r22
40008200:	44 21 fc a7             	and.f      lp_count,r17,31
40008204:	e8 20 a2 01             	lpnz       40008210 <__umoddi3+0x3f4>

40008208:	00 25 4d 13             	add        r13,r13,r13
4000820c:	4a 26 00 70             	nop        
40008210:	44 21 fc a7             	and.f      lp_count,r17,31
40008214:	e8 20 a2 01             	lpnz       40008220 <__umoddi3+0x404>

40008218:	00 27 cf 13             	add        r15,r15,r15
4000821c:	4a 26 00 70             	nop        
40008220:	c1 44                   	mov_s      r4,r14
40008222:	82 42                   	mov_s      r2,r20
40008224:	4a 24 00 f4             	mov.f      lp_count,16
40008228:	e8 20 a2 01             	lpnz       40008234 <__umoddi3+0x418>

4000822c:	00 24 04 01             	add        r4,r4,r4
40008230:	4a 26 00 70             	nop        
40008234:	4a 24 00 f4             	mov.f      lp_count,16
40008238:	e8 20 a2 01             	lpnz       40008244 <__umoddi3+0x428>

4000823c:	2f 22 82 00             	lsr        r2,r2
40008240:	4a 26 00 70             	nop        
40008244:	05 24 84 00             	or         r4,r4,r2
40008248:	1b 0c 25 00             	brhs.t.d   r4,r0,40008262 <__umoddi3+0x446>

4000824c:	02 24 17 00             	sub        r23,r4,r0
40008250:	00 24 04 84             	add.f      r4,r4,r16
40008254:	98 02 26 00             	bnc.d      400084ec <__umoddi3+0x6d0>

40008258:	42 25 42 20             	sub        r2,r21,1
4000825c:	50 45                   	mov_s      r21,r2
4000825e:	02 24 17 00             	sub        r23,r4,r0
40008262:	62 41                   	mov_s      r1,r19
40008264:	42 0b af ff             	bl.d       400075a4 <__umodsi3>

40008268:	e2 40                   	mov_s      r0,r23
4000826a:	62 41                   	mov_s      r1,r19
4000826c:	08 46                   	mov_s      r14,r0
4000826e:	4a 24 00 f4             	mov.f      lp_count,16
40008272:	e8 20 e2 01             	lpnz       4000827e <__umoddi3+0x462>

40008276:	00 26 8e 13             	add        r14,r14,r14
4000827a:	4a 26 00 70             	nop        
4000827e:	0a 0b af ff             	bl.d       40007584 <__udivsi3>

40008282:	e2 40                   	mov_s      r0,r23
40008284:	c2 41                   	mov_s      r1,r22
40008286:	00 45                   	mov_s      r5,r0
40008288:	ce 0a af ff             	bl.d       40007554 <__mulsi3>

4000828c:	53 24 d4 23             	bmsk       r20,r20,15
40008290:	05 26 0e 15             	or         r14,r14,r20
40008294:	15 0e 25 10             	brhs.t.d   r14,r0,400082a8 <__umoddi3+0x48c>

40008298:	00 44                   	mov_s      r4,r0
4000829a:	00 26 0e 94             	add.f      r14,r14,r16
4000829e:	40 02 26 00             	bnc.d      400084dc <__umoddi3+0x6c0>

400082a2:	42 25 42 00             	sub        r2,r5,1
400082a6:	40 45                   	mov_s      r5,r2
400082a8:	53 25 c7 13             	bmsk       r7,r13,15
400082ac:	4a 24 00 f4             	mov.f      lp_count,16
400082b0:	e8 20 a2 01             	lpnz       400082bc <__umoddi3+0x4a0>

400082b4:	00 25 55 25             	add        r21,r21,r21
400082b8:	4a 26 00 70             	nop        
400082bc:	e0 41                   	mov_s      r1,r7
400082be:	05 25 45 05             	or         r5,r5,r21
400082c2:	53 25 c9 03             	bmsk       r9,r5,15
400082c6:	92 0a af ff             	bl.d       40007554 <__mulsi3>

400082ca:	21 40                   	mov_s      r0,r9
400082cc:	a9 40                   	mov_s      r8,r13
400082ce:	00 46                   	mov_s      r6,r0
400082d0:	4a 24 00 f4             	mov.f      lp_count,16
400082d4:	e8 20 a2 01             	lpnz       400082e0 <__umoddi3+0x4c4>

400082d8:	2f 20 02 12             	lsr        r8,r8
400082dc:	4a 26 00 70             	nop        
400082e0:	21 40                   	mov_s      r0,r9
400082e2:	76 0a af ff             	bl.d       40007554 <__mulsi3>

400082e6:	01 41                   	mov_s      r1,r8
400082e8:	4a 24 00 f4             	mov.f      lp_count,16
400082ec:	e8 20 a2 01             	lpnz       400082f8 <__umoddi3+0x4dc>

400082f0:	2f 25 42 01             	lsr        r5,r5
400082f4:	4a 26 00 70             	nop        
400082f8:	e0 41                   	mov_s      r1,r7
400082fa:	08 42                   	mov_s      r10,r0
400082fc:	5a 0a af ff             	bl.d       40007554 <__mulsi3>

40008300:	a0 40                   	mov_s      r0,r5
40008302:	c8 41                   	mov_s      r9,r6
40008304:	00 47                   	mov_s      r7,r0
40008306:	4a 24 00 f4             	mov.f      lp_count,16
4000830a:	e8 20 e2 01             	lpnz       40008316 <__umoddi3+0x4fa>

4000830e:	2f 21 42 12             	lsr        r9,r9
40008312:	4a 26 00 70             	nop        
40008316:	01 41                   	mov_s      r1,r8
40008318:	3e 0a af ff             	bl.d       40007554 <__mulsi3>

4000831c:	a0 40                   	mov_s      r0,r5
4000831e:	00 27 83 02             	add        r3,r7,r10
40008322:	21 73                   	add_s      r3,r3,r9
40008324:	0c 27 c0 80             	cmp        r7,r3
40008328:	60 42                   	mov_s      r2,r3
4000832a:	c0 20 8d 0f 01 00 00 00 	add.hi     r0,r0,0x10000
40008332:	4a 24 00 f4             	mov.f      lp_count,16
40008336:	e8 20 e2 01             	lpnz       40008342 <__umoddi3+0x526>

4000833a:	2f 22 82 00             	lsr        r2,r2
4000833e:	4a 26 00 70             	nop        
40008342:	4a 24 00 f4             	mov.f      lp_count,16
40008346:	e8 20 e2 01             	lpnz       40008352 <__umoddi3+0x536>

4000834a:	00 23 c3 00             	add        r3,r3,r3
4000834e:	4a 26 00 70             	nop        
40008352:	02 26 0e 11             	sub        r14,r14,r4
40008356:	1a 62                   	add_s      r2,r2,r0
40008358:	53 26 c6 03             	bmsk       r6,r6,15
4000835c:	50 76                   	cmp_s      r14,r2
4000835e:	64 01 25 00             	bc.d       400084c0 <__umoddi3+0x6a4>

40008362:	c0 73                   	add_s      r3,r3,r6
40008364:	50 76                   	cmp_s      r14,r2
40008366:	58 01 21 00             	bz.d       400084bc <__umoddi3+0x6a0>

4000836a:	70 77                   	cmp_s      r15,r3
4000836c:	02 27 c0 90             	sub.f      r0,r15,r3
40008370:	03 26 81 10             	sbc        r1,r14,r2
40008374:	20 42                   	mov_s      r2,r1
40008376:	44 21 fc a7             	and.f      lp_count,r17,31
4000837a:	e8 20 e2 01             	lpnz       40008386 <__umoddi3+0x56a>

4000837e:	2f 20 02 00             	lsr        r0,r0
40008382:	4a 26 00 70             	nop        
40008386:	44 22 fc a7             	and.f      lp_count,r18,31
4000838a:	e8 20 e2 01             	lpnz       40008396 <__umoddi3+0x57a>

4000838e:	00 22 82 00             	add        r2,r2,r2
40008392:	4a 26 00 70             	nop        
40008396:	44 21 fc a7             	and.f      lp_count,r17,31
4000839a:	e8 20 e2 01             	lpnz       400083a6 <__umoddi3+0x58a>

4000839e:	2f 21 42 00             	lsr        r1,r1
400083a2:	4a 26 00 70             	nop        
400083a6:	49 04 ef ff             	b.d        40007fec <__umoddi3+0x1d0>

400083aa:	45 78                   	or_s       r0,r0,r2
400083ac:	44 22 fc 87             	and.f      lp_count,r2,31
400083b0:	e8 20 a2 01             	lpnz       400083bc <__umoddi3+0x5a0>

400083b4:	2f 23 c2 00             	lsr        r3,r3
400083b8:	4a 26 00 70             	nop        
400083bc:	44 21 fc a7             	and.f      lp_count,r17,31
400083c0:	e8 20 a2 01             	lpnz       400083cc <__umoddi3+0x5b0>

400083c4:	00 25 4d 13             	add        r13,r13,r13
400083c8:	4a 26 00 70             	nop        
400083cc:	d1 44                   	mov_s      r20,r14
400083ce:	b1 40                   	mov_s      r16,r13
400083d0:	44 22 fc 87             	and.f      lp_count,r2,31
400083d4:	e8 20 a2 01             	lpnz       400083e0 <__umoddi3+0x5c4>

400083d8:	2f 24 02 25             	lsr        r20,r20
400083dc:	4a 26 00 70             	nop        
400083e0:	4a 24 00 f4             	mov.f      lp_count,16
400083e4:	e8 20 a2 01             	lpnz       400083f0 <__umoddi3+0x5d4>

400083e8:	2f 20 02 24             	lsr        r16,r16
400083ec:	4a 26 00 70             	nop        
400083f0:	44 21 fc a7             	and.f      lp_count,r17,31
400083f4:	e8 20 a2 01             	lpnz       40008400 <__umoddi3+0x5e4>

400083f8:	00 26 8e 13             	add        r14,r14,r14
400083fc:	4a 26 00 70             	nop        
40008400:	02 41                   	mov_s      r1,r16
40008402:	05 26 d3 10             	or         r19,r14,r3
40008406:	a2 09 af ff             	bl.d       400075a4 <__umodsi3>

4000840a:	82 40                   	mov_s      r0,r20
4000840c:	02 41                   	mov_s      r1,r16
4000840e:	08 46                   	mov_s      r14,r0
40008410:	76 09 af ff             	bl.d       40007584 <__udivsi3>

40008414:	82 40                   	mov_s      r0,r20
40008416:	53 25 d2 13             	bmsk       r18,r13,15
4000841a:	3e 09 af ff             	bl.d       40007554 <__mulsi3>

4000841e:	42 41                   	mov_s      r1,r18
40008420:	44 21 fc a7             	and.f      lp_count,r17,31
40008424:	e8 20 a2 01             	lpnz       40008430 <__umoddi3+0x614>

40008428:	00 27 cf 13             	add        r15,r15,r15
4000842c:	4a 26 00 70             	nop        
40008430:	c1 44                   	mov_s      r4,r14
40008432:	62 42                   	mov_s      r2,r19
40008434:	4a 24 00 f4             	mov.f      lp_count,16
40008438:	e8 20 a2 01             	lpnz       40008444 <__umoddi3+0x628>

4000843c:	00 24 04 01             	add        r4,r4,r4
40008440:	4a 26 00 70             	nop        
40008444:	4a 24 00 f4             	mov.f      lp_count,16
40008448:	e8 20 a2 01             	lpnz       40008454 <__umoddi3+0x638>

4000844c:	2f 22 82 00             	lsr        r2,r2
40008450:	4a 26 00 70             	nop        
40008454:	05 22 02 01             	or         r2,r2,r4
40008458:	17 0a 25 00             	brhs.t.d   r2,r0,4000846e <__umoddi3+0x652>

4000845c:	02 22 14 00             	sub        r20,r2,r0
40008460:	00 22 42 83             	add.f      r2,r2,r13
40008464:	9c 00 26 00             	bnc.d      40008500 <__umoddi3+0x6e4>

40008468:	50 70                   	cmp_s      r0,r2
4000846a:	02 22 14 00             	sub        r20,r2,r0
4000846e:	02 41                   	mov_s      r1,r16
40008470:	36 09 af ff             	bl.d       400075a4 <__umodsi3>

40008474:	82 40                   	mov_s      r0,r20
40008476:	02 41                   	mov_s      r1,r16
40008478:	08 46                   	mov_s      r14,r0
4000847a:	4a 24 00 f4             	mov.f      lp_count,16
4000847e:	e8 20 e2 01             	lpnz       4000848a <__umoddi3+0x66e>

40008482:	00 26 8e 13             	add        r14,r14,r14
40008486:	4a 26 00 70             	nop        
4000848a:	fe 08 af ff             	bl.d       40007584 <__udivsi3>

4000848e:	82 40                   	mov_s      r0,r20
40008490:	42 41                   	mov_s      r1,r18
40008492:	c6 08 af ff             	bl.d       40007554 <__mulsi3>

40008496:	53 23 d3 23             	bmsk       r19,r19,15
4000849a:	05 26 ce 14             	or         r14,r14,r19
4000849e:	19 0e 05 10             	brhs.t     r14,r0,400084b4 <__umoddi3+0x698>

400084a2:	00 26 4e 93             	add.f      r14,r14,r13
400084a6:	e4 03 e5 ff             	bc.d       40008088 <__umoddi3+0x26c>

400084aa:	c2 26 05 10             	sub.c      r14,r14,r0
400084ae:	d1 70                   	cmp_s      r0,r14
400084b0:	c0 26 4d 13             	add.hi     r14,r14,r13
400084b4:	d5 03 ef ff             	b.d        40008088 <__umoddi3+0x26c>

400084b8:	02 7e                   	sub_s      r14,r14,r0
400084ba:	e0 78                   	nop_s      
400084bc:	b0 06 c6 ff             	bnc        4000836c <__umoddi3+0x550>

400084c0:	02 23 44 83             	sub.f      r4,r3,r13
400084c4:	03 22 02 04             	sbc        r2,r2,r16
400084c8:	a5 06 ef ff             	b.d        4000836c <__umoddi3+0x550>

400084cc:	80 43                   	mov_s      r3,r4
400084ce:	e0 78                   	nop_s      
400084d0:	0e 03 c5 ff             	bc         40007fde <__umoddi3+0x1c2>

400084d4:	e1 40                   	mov_s      r0,r15
400084d6:	19 03 ef ff             	b.d        40007fec <__umoddi3+0x1d0>

400084da:	02 41                   	mov_s      r1,r16
400084dc:	d1 70                   	cmp_s      r0,r14
400084de:	ca 05 ee ff             	bls.d      400082a6 <__umoddi3+0x48a>

400084e2:	42 25 85 00             	sub        r5,r5,2
400084e6:	c5 05 ef ff             	b.d        400082a8 <__umoddi3+0x48c>

400084ea:	02 76                   	add_s      r14,r14,r16
400084ec:	90 70                   	cmp_s      r0,r4
400084ee:	70 05 ee ff             	bls.d      4000825c <__umoddi3+0x440>

400084f2:	42 25 95 20             	sub        r21,r21,2
400084f6:	6b 05 ef ff             	b.d        4000825e <__umoddi3+0x442>

400084fa:	00 24 04 04             	add        r4,r4,r16
400084fe:	e0 78                   	nop_s      
40008500:	6b 07 ef ff             	b.d        4000846a <__umoddi3+0x64e>

40008504:	c0 22 4d 03             	add.hi     r2,r2,r13

40008508 <_fpadd_parts>:
40008508:	00 10 05 00             	ld         r5,[r0,0]
4000850c:	b4 71                   	cmp_s      r5,1
4000850e:	4c 02 2e 00             	bls.d      40008758 <_fpadd_parts+0x250>

40008512:	00 43                   	mov_s      r3,r0
40008514:	00 11 04 00             	ld         r4,[r1,0]
40008518:	94 71                   	cmp_s      r4,1
4000851a:	78 02 0e 00             	bls        40008790 <_fpadd_parts+0x288>

4000851e:	52 25 be 80             	bxor.f     0,r5,2
40008522:	64 03 21 00             	bz.d       40008884 <_fpadd_parts+0x37c>

40008526:	52 24 be 80             	bxor.f     0,r4,2
4000852a:	68 02 01 00             	bz         40008790 <_fpadd_parts+0x288>

4000852e:	52 24 7e 80             	bxor.f     0,r4,1
40008532:	24 02 21 00             	bz.d       40008754 <_fpadd_parts+0x24c>

40008536:	52 25 7e 80             	bxor.f     0,r5,1
4000853a:	58 02 01 00             	bz         40008790 <_fpadd_parts+0x288>

4000853e:	f4 1c 48 b3             	st.a       r13,[sp,-12]
40008542:	08 10 0b 00             	ld         r11,[r0,8]
40008546:	08 11 06 00             	ld         r6,[r1,8]
4000854a:	41 c6                   	st_s       r14,[sp,4]
4000854c:	42 c7                   	st_s       r15,[sp,8]
4000854e:	02 23 87 11             	sub        r7,r11,r6
40008552:	0c 10 08 00             	ld         r8,[r0,12]
40008556:	2f 22 c9 11             	abs        r10,r7
4000855a:	10 10 09 00             	ld         r9,[r0,16]
4000855e:	0c 11 04 00             	ld         r4,[r1,12]
40008562:	4c 22 c0 9f             	cmp        r10,63
40008566:	18 01 2c 00             	ble.d      4000867c <_fpadd_parts+0x174>

4000856a:	10 11 05 00             	ld         r5,[r1,16]
4000856e:	0c 23 80 91             	cmp        r11,r6
40008572:	ca 24 29 00             	mov.gt     r4,0
40008576:	ca 25 29 00             	mov.gt     r5,0
4000857a:	ca 23 8c 11             	mov.le     r11,r6
4000857e:	ca 20 2c 10             	mov.le     r8,0
40008582:	ca 21 2c 10             	mov.le     r9,0
40008586:	61 83                   	ld_s       r3,[r3,4]
40008588:	04 11 06 00             	ld         r6,[r1,4]
4000858c:	d0 73                   	cmp_s      r3,r6
4000858e:	cf f2                   	beq_s      4000872a <_fpadd_parts+0x222>

40008590:	6b 7b                   	tst_s      r3,r3
40008592:	cc 01 01 00             	bz         4000875c <_fpadd_parts+0x254>

40008596:	02 24 04 82             	sub.f      r4,r4,r8
4000859a:	02 25 45 02             	sub        r5,r5,r9
4000859e:	c2 25 65 00             	sub.c      r5,r5,1
400085a2:	b4 70                   	cmp_s      r5,0
400085a4:	ca 01 0b 00             	blt        4000876e <_fpadd_parts+0x266>

400085a8:	04 1a 01 00             	st         0,[r2,4]
400085ac:	08 1a c0 02             	st         r11,[r2,8]
400085b0:	0c 1a 00 01             	st         r4,[r2,12]
400085b4:	10 1a 40 01             	st         r5,[r2,16]
400085b8:	42 24 46 80             	sub.f      r6,r4,1
400085bc:	a0 47                   	mov_s      r7,r5
400085be:	c2 27 65 00             	sub.c      r7,r7,1
400085c2:	71 0e c4 71 ff 0f ff ff 	brlo       0x0fffffff,r7,40008630 <_fpadd_parts+0x128>

400085ca:	0c 27 80 8f ff 0f ff ff 	cmp        r7,0x0fffffff
400085d2:	a8 02 21 00             	bz.d       40008878 <_fpadd_parts+0x370>

400085d6:	8c 26 bf 8f             	cmp        r6,-2
400085da:	62 82                   	ld_s       r3,[r2,8]
400085dc:	19 00 20 00             	b.d        400085f4 <_fpadd_parts+0xec>

400085e0:	69 6b                   	sub_s      r3,r3,1
400085e2:	e0 78                   	nop_s      
400085e4:	0c 27 80 8f ff 0f ff ff 	cmp        r7,0x0fffffff
400085ec:	58 01 21 00             	bz.d       40008744 <_fpadd_parts+0x23c>

400085f0:	8c 26 bf 8f             	cmp        r6,-2
400085f4:	80 47                   	mov_s      r7,r4
400085f6:	00 27 fe 81             	add.f      0,r7,r7
400085fa:	6f 27 0b 00             	rlc        r7,0
400085fe:	a0 46                   	mov_s      r6,r5
40008600:	00 26 86 01             	add        r6,r6,r6
40008604:	88 40                   	mov_s      r8,r4
40008606:	05 27 85 01             	or         r5,r7,r6
4000860a:	00 20 08 12             	add        r8,r8,r8
4000860e:	42 20 46 90             	sub.f      r6,r8,1
40008612:	68 41                   	mov_s      r9,r3
40008614:	43 25 07 00             	sbc        r7,r5,0
40008618:	69 6b                   	sub_s      r3,r3,1
4000861a:	01 44                   	mov_s      r4,r8
4000861c:	c9 0e c5 f1 ff 0f ff ff 	brhs.nt    0x0fffffff,r7,400085e4 <_fpadd_parts+0xdc>

40008624:	0c 1a 00 01             	st         r4,[r2,12]
40008628:	10 1a 40 01             	st         r5,[r2,16]
4000862c:	08 1a 40 02             	st         r9,[r2,8]
40008630:	00 1a c1 00             	st         3,[r2]
40008634:	3d 0e 45 71 ff 1f ff ff 	brhs.t     0x1fffffff,r5,40008670 <_fpadd_parts+0x168>

4000863c:	08 12 06 00             	ld         r6,[r2,8]
40008640:	80 47                   	mov_s      r7,r4
40008642:	80 43                   	mov_s      r3,r4
40008644:	a8 40                   	mov_s      r8,r5
40008646:	44 27 47 00             	and        r7,r7,1
4000864a:	44 20 48 10             	and        r8,r8,1
4000864e:	2f 20 03 12             	ror        r8,r8
40008652:	2f 23 c2 00             	lsr        r3,r3
40008656:	a0 44                   	mov_s      r4,r5
40008658:	05 23 03 02             	or         r3,r3,r8
4000865c:	2f 24 02 01             	lsr        r4,r4
40008660:	c4 71                   	add_s      r6,r6,1
40008662:	05 23 c3 01             	or         r3,r3,r7
40008666:	10 1a 00 01             	st         r4,[r2,16]
4000866a:	63 a2                   	st_s       r3,[r2,12]
4000866c:	08 1a 80 01             	st         r6,[r2,8]
40008670:	40 40                   	mov_s      r0,r2
40008672:	00 c5                   	ld_s       r13,[sp,0]
40008674:	01 c6                   	ld_s       r14,[sp,4]
40008676:	02 c7                   	ld_s       r15,[sp,8]
40008678:	e0 7f                   	j_s.d      [blink]
4000867a:	a3 c0                   	add_s      sp,sp,12
4000867c:	f4 70                   	cmp_s      r7,0
4000867e:	4c 01 2c 00             	ble.d      400087c8 <_fpadd_parts+0x2c0>

40008682:	a0 46                   	mov_s      r6,r5
40008684:	00 26 86 01             	add        r6,r6,r6
40008688:	2f 27 8a 02             	not        r7,r10
4000868c:	a0 40                   	mov_s      r0,r5
4000868e:	44 27 fc 87             	and.f      lp_count,r7,31
40008692:	e8 20 e2 01             	lpnz       4000869e <_fpadd_parts+0x196>

40008696:	00 26 86 01             	add        r6,r6,r6
4000869a:	4a 26 00 70             	nop        
4000869e:	44 22 fc 97             	and.f      lp_count,r10,31
400086a2:	e8 20 e2 01             	lpnz       400086ae <_fpadd_parts+0x1a6>

400086a6:	2f 20 02 00             	lsr        r0,r0
400086aa:	4a 26 00 70             	nop        
400086ae:	88 44                   	mov_s      r12,r4
400086b0:	44 22 fc 97             	and.f      lp_count,r10,31
400086b4:	e8 20 a2 01             	lpnz       400086c0 <_fpadd_parts+0x1b8>

400086b8:	2f 24 02 13             	lsr        r12,r12
400086bc:	4a 26 00 70             	nop        
400086c0:	44 22 0d 98             	and.f      r13,r10,32
400086c4:	05 24 8c 11             	or         r12,r12,r6
400086c8:	08 47                   	mov_s      r15,r0
400086ca:	ca 27 01 13             	mov.z      r15,r12
400086ce:	ab 7d                   	tst_s      r13,r13
400086d0:	cd 71                   	mov_s      r14,1
400086d2:	c2 20 02 00             	sub.nz     r0,r0,r0
400086d6:	c1 46                   	mov_s      r6,r14
400086d8:	44 22 fc 97             	and.f      lp_count,r10,31
400086dc:	e8 20 a2 01             	lpnz       400086e8 <_fpadd_parts+0x1e0>

400086e0:	00 26 86 01             	add        r6,r6,r6
400086e4:	4a 26 00 70             	nop        
400086e8:	ab 7d                   	tst_s      r13,r13
400086ea:	ec 70                   	mov_s      r7,0
400086ec:	c8 42                   	mov_s      r10,r6
400086ee:	ca 22 c1 11             	mov.z      r10,r7
400086f2:	ab 7d                   	tst_s      r13,r13
400086f4:	ca 26 22 00             	mov.nz     r6,0
400086f8:	42 26 46 80             	sub.f      r6,r6,1
400086fc:	41 47                   	mov_s      r7,r10
400086fe:	c8 42                   	mov_s      r10,r6
40008700:	c2 27 65 00             	sub.c      r7,r7,1
40008704:	e0 46                   	mov_s      r6,r7
40008706:	04 26 46 01             	and        r6,r6,r5
4000870a:	04 22 07 11             	and        r7,r10,r4
4000870e:	05 27 be 81             	or.f       0,r7,r6
40008712:	cc 71                   	mov_s      r6,1
40008714:	ca 26 21 00             	mov.z      r6,0
40008718:	61 83                   	ld_s       r3,[r3,4]
4000871a:	05 26 c4 03             	or         r4,r6,r15
4000871e:	04 11 06 00             	ld         r6,[r1,4]
40008722:	d0 73                   	cmp_s      r3,r6
40008724:	6c 06 e2 ff             	bnz.d      40008590 <_fpadd_parts+0x88>

40008728:	00 45                   	mov_s      r5,r0
4000872a:	00 24 04 82             	add.f      r4,r4,r8
4000872e:	61 a2                   	st_s       r3,[r2,4]
40008730:	01 25 45 02             	adc        r5,r5,r9
40008734:	08 1a c0 02             	st         r11,[r2,8]
40008738:	0c 1a 00 01             	st         r4,[r2,12]
4000873c:	f5 06 ef ff             	b.d        40008630 <_fpadd_parts+0x128>

40008740:	10 1a 40 01             	st         r5,[r2,16]
40008744:	b0 06 ce ff             	bls        400085f4 <_fpadd_parts+0xec>

40008748:	0c 1a 00 01             	st         r4,[r2,12]
4000874c:	e1 06 ef ff             	b.d        4000862c <_fpadd_parts+0x124>

40008750:	10 1a 40 01             	st         r5,[r2,16]
40008754:	41 0d 90 00             	breq       r5,2,40008794 <_fpadd_parts+0x28c>

40008758:	e0 7f                   	j_s.d      [blink]
4000875a:	60 40                   	mov_s      r0,r3
4000875c:	02 20 04 91             	sub.f      r4,r8,r4
40008760:	0e 25 45 02             	rsub       r5,r5,r9
40008764:	c2 25 65 00             	sub.c      r5,r5,1
40008768:	b4 70                   	cmp_s      r5,0
4000876a:	40 06 ca ff             	bge        400085a8 <_fpadd_parts+0xa0>

4000876e:	4e 24 04 80             	rsub.f     r4,r4,0
40008772:	04 1a 41 00             	st         1,[r2,4]
40008776:	03 26 45 71 00 00 00 00 	sbc        r5,0,r5
4000877e:	08 1a c0 02             	st         r11,[r2,8]
40008782:	0c 1a 00 01             	st         r4,[r2,12]
40008786:	35 06 ef ff             	b.d        400085b8 <_fpadd_parts+0xb0>

4000878a:	10 1a 40 01             	st         r5,[r2,16]
4000878e:	e0 78                   	nop_s      
40008790:	e0 7f                   	j_s.d      [blink]
40008792:	20 40                   	mov_s      r0,r1
40008794:	04 10 05 00             	ld         r5,[r0,4]
40008798:	00 1a 81 00             	st         2,[r2]
4000879c:	08 10 04 00             	ld         r4,[r0,8]
400087a0:	04 1a 40 01             	st         r5,[r2,4]
400087a4:	0c 10 05 00             	ld         r5,[r0,12]
400087a8:	08 1a 00 01             	st         r4,[r2,8]
400087ac:	10 10 04 00             	ld         r4,[r0,16]
400087b0:	0c 1a 40 01             	st         r5,[r2,12]
400087b4:	10 1a 00 01             	st         r4,[r2,16]
400087b8:	61 80                   	ld_s       r3,[r0,4]
400087ba:	04 11 04 00             	ld         r4,[r1,4]
400087be:	40 40                   	mov_s      r0,r2
400087c0:	04 23 03 01             	and        r3,r3,r4
400087c4:	e0 7f                   	j_s.d      [blink]
400087c6:	61 a2                   	st_s       r3,[r2,4]
400087c8:	0b 27 c0 81             	tst        r7,r7
400087cc:	ba 05 c1 ff             	bz         40008586 <_fpadd_parts+0x7e>

400087d0:	2f 27 8a 02             	not        r7,r10
400087d4:	29 45                   	mov_s      r13,r9
400087d6:	21 46                   	mov_s      r6,r9
400087d8:	44 22 fc 97             	and.f      lp_count,r10,31
400087dc:	e8 20 a2 01             	lpnz       400087e8 <_fpadd_parts+0x2e0>

400087e0:	2f 25 42 13             	lsr        r13,r13
400087e4:	4a 26 00 70             	nop        
400087e8:	00 26 86 01             	add        r6,r6,r6
400087ec:	09 44                   	mov_s      r12,r8
400087ee:	44 27 fc 87             	and.f      lp_count,r7,31
400087f2:	e8 20 e2 01             	lpnz       400087fe <_fpadd_parts+0x2f6>

400087f6:	00 26 86 01             	add        r6,r6,r6
400087fa:	4a 26 00 70             	nop        
400087fe:	44 22 fc 97             	and.f      lp_count,r10,31
40008802:	e8 20 e2 01             	lpnz       4000880e <_fpadd_parts+0x306>

40008806:	2f 24 02 13             	lsr        r12,r12
4000880a:	4a 26 00 70             	nop        
4000880e:	44 22 0e 98             	and.f      r14,r10,32
40008812:	05 24 8c 11             	or         r12,r12,r6
40008816:	a1 46                   	mov_s      r6,r13
40008818:	ca 26 01 03             	mov.z      r6,r12
4000881c:	cb 7e                   	tst_s      r14,r14
4000881e:	c8 44                   	mov_s      r12,r6
40008820:	c2 25 42 13             	sub.nz     r13,r13,r13
40008824:	0c 71                   	mov_s      r0,1
40008826:	00 46                   	mov_s      r6,r0
40008828:	44 22 fc 97             	and.f      lp_count,r10,31
4000882c:	e8 20 a2 01             	lpnz       40008838 <_fpadd_parts+0x330>

40008830:	00 26 86 01             	add        r6,r6,r6
40008834:	4a 26 00 70             	nop        
40008838:	cb 7e                   	tst_s      r14,r14
4000883a:	ec 70                   	mov_s      r7,0
4000883c:	c8 47                   	mov_s      r15,r6
4000883e:	ca 27 c1 11             	mov.z      r15,r7
40008842:	cb 7e                   	tst_s      r14,r14
40008844:	ca 26 22 00             	mov.nz     r6,0
40008848:	42 26 46 80             	sub.f      r6,r6,1
4000884c:	e1 47                   	mov_s      r7,r15
4000884e:	00 23 8b 12             	add        r11,r11,r10
40008852:	c2 27 65 00             	sub.c      r7,r7,1
40008856:	c8 42                   	mov_s      r10,r6
40008858:	e0 46                   	mov_s      r6,r7
4000885a:	04 26 46 02             	and        r6,r6,r9
4000885e:	04 22 07 12             	and        r7,r10,r8
40008862:	05 27 be 81             	or.f       0,r7,r6
40008866:	cc 71                   	mov_s      r6,1
40008868:	ca 26 21 00             	mov.z      r6,0
4000886c:	a9 41                   	mov_s      r9,r13
4000886e:	1b 05 ef ff             	b.d        40008586 <_fpadd_parts+0x7e>

40008872:	05 26 08 03             	or         r8,r6,r12
40008876:	e0 78                   	nop_s      
40008878:	62 05 ce ff             	bls        400085da <_fpadd_parts+0xd2>

4000887c:	00 1a c1 00             	st         3,[r2]
40008880:	b5 05 cf ff             	b          40008634 <_fpadd_parts+0x12c>

40008884:	6a f5                   	bne_s      40008758 <_fpadd_parts+0x250>

40008886:	41 80                   	ld_s       r2,[r0,4]
40008888:	04 11 04 00             	ld         r4,[r1,4]
4000888c:	c3 40 00 40 9c d7       	mov_s      r0,0x4000d79c
40008892:	90 72                   	cmp_s      r2,r4
40008894:	e0 7f                   	j_s.d      [blink]
40008896:	ca 20 c1 00             	mov.z      r0,r3
4000889a:	e0 78                   	nop_s      

4000889c <__pack_d>:
4000889c:	f1 c0                   	push_s     blink
4000889e:	e8 1c 48 b3             	st.a       r13,[sp,-24]
400088a2:	40 80                   	ld_s       r2,[r0,0]
400088a4:	41 c6                   	st_s       r14,[sp,4]
400088a6:	42 c7                   	st_s       r15,[sp,8]
400088a8:	0c 1c 00 34             	st         r16,[sp,12]
400088ac:	10 1c 40 34             	st         r17,[sp,16]
400088b0:	14 1c 80 34             	st         r18,[sp,20]
400088b4:	c3 80                   	ld_s       r14,[r0,12]
400088b6:	e4 80                   	ld_s       r15,[r0,16]
400088b8:	54 71                   	cmp_s      r2,1
400088ba:	28 01 2e 00             	bls.d      400089e0 <__pack_d+0x144>

400088be:	a1 80                   	ld_s       r13,[r0,4]
400088c0:	54 74                   	cmp_s      r2,4
400088c2:	8a f2                   	beq_s      400089d4 <__pack_d+0x138>

400088c4:	7d 0a b0 00             	breq.d     r2,2,40008940 <__pack_d+0xa4>

400088c8:	05 26 fe 93             	or.f       0,r14,r15
400088cc:	3a f2                   	beq_s      40008940 <__pack_d+0xa4>

400088ce:	42 80                   	ld_s       r2,[r0,8]
400088d0:	8c 22 b0 80             	cmp        r2,0xfffffc02
400088d4:	1c 01 2b 00             	blt.d      400089f0 <__pack_d+0x154>

400088d8:	8c 22 cf 8f             	cmp        r2,0x3ff
400088dc:	f8 00 29 00             	bgt.d      400089d4 <__pack_d+0x138>

400088e0:	cf 7b                   	exth_s     r3,r14
400088e2:	52 23 fe 81             	bxor.f     0,r3,7
400088e6:	6e f2                   	beq_s      400089c0 <__pack_d+0x124>

400088e8:	80 26 c1 9f             	add.f      r14,r14,127
400088ec:	e9 47                   	mov_s      r15,r15
400088ee:	c0 27 65 10             	add.c      r15,r15,1
400088f2:	ad 0e c4 73 ff 1f ff ff 	brlo       0x1fffffff,r15,4000899c <__pack_d+0x100>

400088fa:	80 22 cf 0f             	add        r2,r2,0x3ff
400088fe:	e1 43                   	mov_s      r3,r15
40008900:	4a 24 00 f2             	mov.f      lp_count,8
40008904:	e8 20 a2 01             	lpnz       40008910 <__pack_d+0x74>

40008908:	2f 26 82 13             	lsr        r14,r14
4000890c:	4a 26 00 70             	nop        
40008910:	4a 24 00 f6             	mov.f      lp_count,24
40008914:	e8 20 a2 01             	lpnz       40008920 <__pack_d+0x84>

40008918:	00 23 c3 00             	add        r3,r3,r3
4000891c:	4a 26 00 70             	nop        
40008920:	e1 44                   	mov_s      r4,r15
40008922:	65 7e                   	or_s       r14,r14,r3
40008924:	4a 24 00 f2             	mov.f      lp_count,8
40008928:	e8 20 a2 01             	lpnz       40008934 <__pack_d+0x98>

4000892c:	2f 24 02 01             	lsr        r4,r4
40008930:	4a 26 00 70             	nop        
40008934:	ca ba                   	bmsk_s     r2,r2,10
40008936:	13 00 20 00             	b.d        40008946 <__pack_d+0xaa>

4000893a:	53 24 c4 04             	bmsk       r4,r4,19
4000893e:	e0 78                   	nop_s      
40008940:	4c 70                   	mov_s      r2,0
40008942:	cd 70                   	mov_s      r14,0
40008944:	8c 70                   	mov_s      r4,0
40008946:	2c 70                   	mov_s      r1,0
40008948:	53 24 c4 04             	bmsk       r4,r4,19
4000894c:	c1 40                   	mov_s      r0,r14
4000894e:	4a 24 00 f5             	mov.f      lp_count,20
40008952:	e8 20 e2 01             	lpnz       4000895e <__pack_d+0xc2>

40008956:	00 22 82 00             	add        r2,r2,r2
4000895a:	4a 26 00 70             	nop        
4000895e:	20 43                   	mov_s      r3,r1
40008960:	44 25 4d 10             	and        r13,r13,1
40008964:	2f 25 43 13             	ror        r13,r13
40008968:	6c 23 c3 04             	bmskn      r3,r3,19
4000896c:	05 23 03 01             	or         r3,r3,r4
40008970:	04 23 83 0f 0f 80 ff ff 	and        r3,r3,0x800fffff
40008978:	65 7a                   	or_s       r2,r2,r3
4000897a:	de ba                   	bmsk_s     r2,r2,30
4000897c:	05 22 41 03             	or         r1,r2,r13
40008980:	18 14 1f 30             	ld         blink,[sp,24]
40008984:	00 c5                   	ld_s       r13,[sp,0]
40008986:	01 c6                   	ld_s       r14,[sp,4]
40008988:	02 c7                   	ld_s       r15,[sp,8]
4000898a:	0c 14 10 30             	ld         r16,[sp,12]
4000898e:	10 14 11 30             	ld         r17,[sp,16]
40008992:	14 14 12 30             	ld         r18,[sp,20]
40008996:	e0 7f                   	j_s.d      [blink]
40008998:	a7 c0                   	add_s      sp,sp,28
4000899a:	e0 78                   	nop_s      
4000899c:	e1 43                   	mov_s      r3,r15
4000899e:	2f 23 c2 00             	lsr        r3,r3
400089a2:	e1 45                   	mov_s      r5,r15
400089a4:	c1 44                   	mov_s      r4,r14
400089a6:	44 25 45 00             	and        r5,r5,1
400089aa:	2f 25 43 01             	ror        r5,r5
400089ae:	2f 24 02 01             	lsr        r4,r4
400089b2:	80 22 10 00             	add        r2,r2,0x400
400089b6:	05 25 0e 01             	or         r14,r5,r4
400089ba:	47 07 ef ff             	b.d        400088fe <__pack_d+0x62>

400089be:	68 47                   	mov_s      r15,r3
400089c0:	c1 43                   	mov_s      r3,r14
400089c2:	33 0b 16 82             	bbit0.nt   r3,8,400088f2 <__pack_d+0x56>

400089c6:	80 26 02 90             	add.f      r14,r14,128
400089ca:	2b 07 ef ff             	b.d        400088f2 <__pack_d+0x56>

400089ce:	c0 27 65 10             	add.c      r15,r15,1
400089d2:	e0 78                   	nop_s      
400089d4:	8a 22 df 0f             	mov        r2,0x7ff
400089d8:	cd 70                   	mov_s      r14,0
400089da:	6f 07 ef ff             	b.d        40008946 <__pack_d+0xaa>

400089de:	8c 70                   	mov_s      r4,0
400089e0:	4f 27 c4 14             	bset       r4,r15,19
400089e4:	8a 22 df 0f             	mov        r2,0x7ff
400089e8:	5f 07 ef ff             	b.d        40008946 <__pack_d+0xaa>

400089ec:	53 24 c4 04             	bmsk       r4,r4,19
400089f0:	50 40                   	mov_s      r16,r2
400089f2:	8e 20 b0 20             	rsub       r16,r16,0xfffffc02
400089f6:	ad 08 73 2e             	brge.d     r16,57,40008aa0 <__pack_d+0x204>

400089fa:	4c 70                   	mov_s      r2,0
400089fc:	02 42                   	mov_s      r2,r16
400089fe:	c1 40                   	mov_s      r0,r14
40008a00:	ea 0c 60 00             	bl.d       400096e8 <__lshrdi3>

40008a04:	e1 41                   	mov_s      r1,r15
40008a06:	02 42                   	mov_s      r2,r16
40008a08:	10 42                   	mov_s      r18,r0
40008a0a:	30 41                   	mov_s      r17,r1
40008a0c:	0c 71                   	mov_s      r0,1
40008a0e:	42 0d 60 00             	bl.d       4000974c <__ashldi3>

40008a12:	2c 70                   	mov_s      r1,0
40008a14:	8c 71                   	mov_s      r4,1
40008a16:	42 20 40 80             	sub.f      r0,r0,1
40008a1a:	20 41                   	mov_s      r1,r1
40008a1c:	c2 21 65 00             	sub.c      r1,r1,1
40008a20:	00 43                   	mov_s      r3,r0
40008a22:	20 42                   	mov_s      r2,r1
40008a24:	c4 7b                   	and_s      r3,r3,r14
40008a26:	e4 7a                   	and_s      r2,r2,r15
40008a28:	05 23 be 80             	or.f       0,r3,r2
40008a2c:	ca 24 21 00             	mov.z      r4,0
40008a30:	22 43                   	mov_s      r3,r17
40008a32:	05 24 82 04             	or         r2,r4,r18
40008a36:	53 22 c4 01             	bmsk       r4,r2,7
40008a3a:	6b 0c 81 0f 00 00 80 00 	brne       r4,128,40008aa2 <__pack_d+0x206>

40008a42:	11 0a 1e 02             	bbit0      r2,8,40008a50 <__pack_d+0x1b4>

40008a46:	80 22 02 80             	add.f      r2,r2,128
40008a4a:	60 43                   	mov_s      r3,r3
40008a4c:	c0 23 65 00             	add.c      r3,r3,1
40008a50:	48 46                   	mov_s      r14,r2
40008a52:	60 45                   	mov_s      r5,r3
40008a54:	4a 24 00 f2             	mov.f      lp_count,8
40008a58:	e8 20 a2 01             	lpnz       40008a64 <__pack_d+0x1c8>

40008a5c:	2f 26 82 13             	lsr        r14,r14
40008a60:	4a 26 00 70             	nop        
40008a64:	4a 24 00 f6             	mov.f      lp_count,24
40008a68:	e8 20 a2 01             	lpnz       40008a74 <__pack_d+0x1d8>

40008a6c:	00 25 45 01             	add        r5,r5,r5
40008a70:	4a 26 00 70             	nop        
40008a74:	60 44                   	mov_s      r4,r3
40008a76:	4c 71                   	mov_s      r2,1
40008a78:	4a 24 00 f2             	mov.f      lp_count,8
40008a7c:	e8 20 a2 01             	lpnz       40008a88 <__pack_d+0x1ec>

40008a80:	2f 24 02 01             	lsr        r4,r4
40008a84:	4a 26 00 70             	nop        
40008a88:	d3 73 ff 0f ff ff       	cmp_s      r3,0x0fffffff
40008a8e:	05 26 4e 11             	or         r14,r14,r5
40008a92:	53 24 c4 04             	bmsk       r4,r4,19
40008a96:	b3 06 ef ff             	b.d        40008946 <__pack_d+0xaa>

40008a9a:	ca 22 2e 00             	mov.ls     r2,0
40008a9e:	e0 78                   	nop_s      
40008aa0:	6c 70                   	mov_s      r3,0
40008aa2:	80 22 c1 8f             	add.f      r2,r2,127
40008aa6:	ad 07 ef ff             	b.d        40008a50 <__pack_d+0x1b4>

40008aaa:	c0 23 65 00             	add.c      r3,r3,1
40008aae:	e0 78                   	nop_s      

40008ab0 <__unpack_d>:
40008ab0:	47 88                   	ldb_s      r2,[r0,7]
40008ab2:	06 10 04 01             	ldh        r4,[r0,6]
40008ab6:	4a 24 c0 f1             	mov.f      lp_count,7
40008aba:	e8 20 e2 01             	lpnz       40008ac6 <__unpack_d+0x16>

40008abe:	2f 22 82 00             	lsr        r2,r2
40008ac2:	4a 26 00 70             	nop        
40008ac6:	04 10 05 00             	ld         r5,[r0,4]
40008aca:	60 80                   	ld_s       r3,[r0,0]
40008acc:	41 a1                   	st_s       r2,[r1,4]
40008ace:	2f 24 02 01             	lsr        r4,r4
40008ad2:	2f 24 02 01             	lsr        r4,r4
40008ad6:	2f 24 02 01             	lsr        r4,r4
40008ada:	2f 24 02 01             	lsr        r4,r4
40008ade:	84 24 df 8f             	and.f      r4,r4,0x7ff
40008ae2:	7c 00 22 00             	bnz.d      40008b5c <__unpack_d+0xac>

40008ae6:	53 25 c2 04             	bmsk       r2,r5,19
40008aea:	05 23 be 80             	or.f       0,r3,r2
40008aee:	c4 00 21 00             	bz.d       40008bb0 <__unpack_d+0x100>

40008af2:	60 45                   	mov_s      r5,r3
40008af4:	00 19 c1 00             	st         3,[r1]
40008af8:	4a 24 00 00             	mov        r4,0
40008afc:	16 24 c3 00             	add3       r3,r4,r3
40008b00:	16 24 c3 00             	add3       r3,r4,r3
40008b04:	15 24 c3 00             	add2       r3,r4,r3
40008b08:	4a 24 00 f6             	mov.f      lp_count,24
40008b0c:	e8 20 a2 01             	lpnz       40008b18 <__unpack_d+0x68>

40008b10:	2f 25 42 01             	lsr        r5,r5
40008b14:	4a 26 00 70             	nop        
40008b18:	4a 26 00 00             	mov        r6,0
40008b1c:	16 26 82 00             	add3       r2,r6,r2
40008b20:	16 26 82 00             	add3       r2,r6,r2
40008b24:	15 26 82 00             	add2       r2,r6,r2
40008b28:	8a 24 70 00             	mov        r4,0xfffffc01
40008b2c:	05 22 42 01             	or         r2,r2,r5
40008b30:	60 45                   	mov_s      r5,r3
40008b32:	00 22 82 00             	add        r2,r2,r2
40008b36:	00 25 7e 81             	add.f      0,r5,r5
40008b3a:	6f 25 0b 00             	rlc        r5,0
40008b3e:	00 23 c3 00             	add        r3,r3,r3
40008b42:	05 22 42 01             	or         r2,r2,r5
40008b46:	80 45                   	mov_s      r5,r4
40008b48:	84 77                   	add_s      r4,r4,-1
40008b4a:	e9 0e 85 f0 ff 0f ff ff 	brhs.nt    0x0fffffff,r2,40008b30 <__unpack_d+0x80>

40008b52:	08 19 40 01             	st         r5,[r1,8]
40008b56:	63 a1                   	st_s       r3,[r1,12]
40008b58:	44 a1                   	st_s       r2,[r1,16]
40008b5a:	e0 7e                   	j_s        [blink]
40008b5c:	5d 0c 80 0f 00 00 ff 07 	breq       r4,0x7ff,40008bb8 <__unpack_d+0x108>

40008b64:	82 24 cf 0f             	sub        r4,r4,0x3ff
40008b68:	60 45                   	mov_s      r5,r3
40008b6a:	4a 26 00 00             	mov        r6,0
40008b6e:	16 26 82 00             	add3       r2,r6,r2
40008b72:	16 26 82 00             	add3       r2,r6,r2
40008b76:	15 26 82 00             	add2       r2,r6,r2
40008b7a:	4a 24 00 f6             	mov.f      lp_count,24
40008b7e:	e8 20 e2 01             	lpnz       40008b8a <__unpack_d+0xda>

40008b82:	2f 25 42 01             	lsr        r5,r5
40008b86:	4a 26 00 70             	nop        
40008b8a:	4a 26 00 00             	mov        r6,0
40008b8e:	16 26 c3 00             	add3       r3,r6,r3
40008b92:	16 26 c3 00             	add3       r3,r6,r3
40008b96:	15 26 c3 00             	add2       r3,r6,r3
40008b9a:	05 22 42 01             	or         r2,r2,r5
40008b9e:	08 19 00 01             	st         r4,[r1,8]
40008ba2:	9c ba                   	bset_s     r2,r2,28
40008ba4:	00 19 c1 00             	st         3,[r1]
40008ba8:	63 a1                   	st_s       r3,[r1,12]
40008baa:	44 a1                   	st_s       r2,[r1,16]
40008bac:	e0 7e                   	j_s        [blink]
40008bae:	e0 78                   	nop_s      
40008bb0:	00 19 81 00             	st         2,[r1]
40008bb4:	e0 7e                   	j_s        [blink]
40008bb6:	e0 78                   	nop_s      
40008bb8:	05 23 be 80             	or.f       0,r3,r2
40008bbc:	0a f2                   	beq_s      40008bd0 <__unpack_d+0x120>

40008bbe:	63 a1                   	st_s       r3,[r1,12]
40008bc0:	6c 71                   	mov_s      r3,1
40008bc2:	51 25 c0 84             	btst       r5,19
40008bc6:	44 a1                   	st_s       r2,[r1,16]
40008bc8:	ca 23 21 00             	mov.z      r3,0
40008bcc:	60 a1                   	st_s       r3,[r1,0]
40008bce:	e0 7e                   	j_s        [blink]
40008bd0:	00 19 01 01             	st         4,[r1]
40008bd4:	e0 7e                   	j_s        [blink]
40008bd6:	e0 78                   	nop_s      

40008bd8 <__adddf3>:
40008bd8:	f1 c0                   	push_s     blink
40008bda:	b3 c1                   	sub_s      sp,sp,76
40008bdc:	43 c3                   	st_s       r3,[sp,12]
40008bde:	42 c2                   	st_s       r2,[sp,8]
40008be0:	40 c0                   	st_s       r0,[sp,0]
40008be2:	41 c1                   	st_s       r1,[sp,4]
40008be4:	83 40                   	mov_s      r0,sp
40008be6:	ce 0e ef ff             	bl.d       40008ab0 <__unpack_d>

40008bea:	84 c1                   	add_s      r1,sp,16
40008bec:	82 c0                   	add_s      r0,sp,8
40008bee:	c6 0e ef ff             	bl.d       40008ab0 <__unpack_d>

40008bf2:	89 c1                   	add_s      r1,sp,36
40008bf4:	89 c1                   	add_s      r1,sp,36
40008bf6:	40 24 02 3e             	add        r2,sp,56
40008bfa:	12 09 ef ff             	bl.d       40008508 <_fpadd_parts>

40008bfe:	84 c0                   	add_s      r0,sp,16
40008c00:	9e 0c cf ff             	bl         4000889c <__pack_d>

40008c04:	4c 14 1f 32             	ld.a       blink,[sp,76]
40008c08:	e0 7f                   	j_s.d      [blink]
40008c0a:	87 74                   	add_s      sp,sp,4

40008c0c <__subdf3>:
40008c0c:	f1 c0                   	push_s     blink
40008c0e:	b3 c1                   	sub_s      sp,sp,76
40008c10:	42 c2                   	st_s       r2,[sp,8]
40008c12:	43 c3                   	st_s       r3,[sp,12]
40008c14:	40 c0                   	st_s       r0,[sp,0]
40008c16:	41 c1                   	st_s       r1,[sp,4]
40008c18:	83 40                   	mov_s      r0,sp
40008c1a:	9a 0e ef ff             	bl.d       40008ab0 <__unpack_d>

40008c1e:	84 c1                   	add_s      r1,sp,16
40008c20:	82 c0                   	add_s      r0,sp,8
40008c22:	92 0e ef ff             	bl.d       40008ab0 <__unpack_d>

40008c26:	89 c1                   	add_s      r1,sp,36
40008c28:	0a c3                   	ld_s       r3,[sp,40]
40008c2a:	89 c1                   	add_s      r1,sp,36
40008c2c:	47 23 43 00             	xor        r3,r3,1
40008c30:	8e c2                   	add_s      r2,sp,56
40008c32:	28 1c c0 30             	st         r3,[sp,40]
40008c36:	d6 08 ef ff             	bl.d       40008508 <_fpadd_parts>

40008c3a:	84 c0                   	add_s      r0,sp,16
40008c3c:	62 0c cf ff             	bl         4000889c <__pack_d>

40008c40:	4c 14 1f 32             	ld.a       blink,[sp,76]
40008c44:	e0 7f                   	j_s.d      [blink]
40008c46:	87 74                   	add_s      sp,sp,4

40008c48 <__muldf3>:
40008c48:	f1 c0                   	push_s     blink
40008c4a:	f8 1c 88 b3             	st.a       r14,[sp,-8]
40008c4e:	41 c7                   	st_s       r15,[sp,4]
40008c50:	b3 c1                   	sub_s      sp,sp,76
40008c52:	42 c2                   	st_s       r2,[sp,8]
40008c54:	40 c0                   	st_s       r0,[sp,0]
40008c56:	41 c1                   	st_s       r1,[sp,4]
40008c58:	43 c3                   	st_s       r3,[sp,12]
40008c5a:	83 40                   	mov_s      r0,sp
40008c5c:	56 0e ef ff             	bl.d       40008ab0 <__unpack_d>

40008c60:	84 c1                   	add_s      r1,sp,16
40008c62:	82 c0                   	add_s      r0,sp,8
40008c64:	4e 0e ef ff             	bl.d       40008ab0 <__unpack_d>

40008c68:	89 c1                   	add_s      r1,sp,36
40008c6a:	04 c2                   	ld_s       r2,[sp,16]
40008c6c:	29 0a b5 00             	brhs.t.d   r2,2,40008c94 <__muldf3+0x4c>

40008c70:	09 c3                   	ld_s       r3,[sp,36]
40008c72:	0a c2                   	ld_s       r2,[sp,40]
40008c74:	05 c3                   	ld_s       r3,[sp,20]
40008c76:	84 c0                   	add_s      r0,sp,16
40008c78:	50 73                   	cmp_s      r3,r2
40008c7a:	4c 71                   	mov_s      r2,1
40008c7c:	ca 22 21 00             	mov.z      r2,0
40008c80:	45 c2                   	st_s       r2,[sp,20]
40008c82:	1e 0c cf ff             	bl         4000889c <__pack_d>

40008c86:	54 14 1f 30             	ld         blink,[sp,84]
40008c8a:	4c 14 0e 32             	ld.a       r14,[sp,76]
40008c8e:	01 c7                   	ld_s       r15,[sp,4]
40008c90:	e0 7f                   	j_s.d      [blink]
40008c92:	a3 c0                   	add_s      sp,sp,12
40008c94:	19 0b 95 00             	brhs.t     r3,2,40008cac <__muldf3+0x64>

40008c98:	0a c2                   	ld_s       r2,[sp,40]
40008c9a:	05 c3                   	ld_s       r3,[sp,20]
40008c9c:	89 c0                   	add_s      r0,sp,36
40008c9e:	50 73                   	cmp_s      r3,r2
40008ca0:	4c 71                   	mov_s      r2,1
40008ca2:	ca 22 21 00             	mov.z      r2,0
40008ca6:	df 07 ef ff             	b.d        40008c82 <__muldf3+0x3a>

40008caa:	4a c2                   	st_s       r2,[sp,40]
40008cac:	15 0a 11 01             	brne       r2,4,40008cc0 <__muldf3+0x78>

40008cb0:	c5 0b b9 80             	brne.nt.d  r3,2,40008c74 <__muldf3+0x2c>

40008cb4:	0a c2                   	ld_s       r2,[sp,40]
40008cb6:	c3 40 00 40 9c d7       	mov_s      r0,0x4000d79c
40008cbc:	e3 f1                   	b_s        40008c82 <__muldf3+0x3a>

40008cbe:	e0 78                   	nop_s      
40008cc0:	11 0b 11 01             	brne       r3,4,40008cd0 <__muldf3+0x88>

40008cc4:	f3 0a b8 80             	breq.nt.d  r2,2,40008cb6 <__muldf3+0x6e>

40008cc8:	0a c2                   	ld_s       r2,[sp,40]
40008cca:	d5 07 ef ff             	b.d        40008c9c <__muldf3+0x54>

40008cce:	05 c3                   	ld_s       r3,[sp,20]
40008cd0:	a5 0a b8 80             	breq.nt.d  r2,2,40008c74 <__muldf3+0x2c>

40008cd4:	0a c2                   	ld_s       r2,[sp,40]
40008cd6:	c7 0b b8 80             	breq.nt.d  r3,2,40008c9a <__muldf3+0x52>

40008cda:	1c 14 04 30             	ld         r4,[sp,28]
40008cde:	30 14 07 30             	ld         r7,[sp,48]
40008ce2:	34 14 08 30             	ld         r8,[sp,52]
40008ce6:	20 14 06 30             	ld         r6,[sp,32]
40008cea:	80 40                   	mov_s      r0,r4
40008cec:	96 09 60 00             	bl.d       40009680 <__umulsidi3>

40008cf0:	e0 41                   	mov_s      r1,r7
40008cf2:	08 42                   	mov_s      r10,r0
40008cf4:	28 43                   	mov_s      r11,r1
40008cf6:	80 40                   	mov_s      r0,r4
40008cf8:	8a 09 60 00             	bl.d       40009680 <__umulsidi3>

40008cfc:	01 41                   	mov_s      r1,r8
40008cfe:	20 45                   	mov_s      r5,r1
40008d00:	00 44                   	mov_s      r4,r0
40008d02:	c0 41                   	mov_s      r1,r6
40008d04:	7e 09 60 00             	bl.d       40009680 <__umulsidi3>

40008d08:	01 40                   	mov_s      r0,r8
40008d0a:	08 46                   	mov_s      r14,r0
40008d0c:	28 47                   	mov_s      r15,r1
40008d0e:	e0 40                   	mov_s      r0,r7
40008d10:	72 09 60 00             	bl.d       40009680 <__umulsidi3>

40008d14:	c0 41                   	mov_s      r1,r6
40008d16:	00 20 00 81             	add.f      r0,r0,r4
40008d1a:	a0 71                   	add_s      r1,r1,r5
40008d1c:	c0 21 65 00             	add.c      r1,r1,1
40008d20:	0c 25 40 80             	cmp        r5,r1
40008d24:	5c 01 2d 00             	bhi.d      40008e80 <__muldf3+0x238>

40008d28:	4c 70                   	mov_s      r2,0
40008d2a:	17 0d 61 00             	brne.d     r5,r1,40008d3e <__muldf3+0xf6>

40008d2e:	6c 70                   	mov_s      r3,0
40008d30:	0c 24 00 80             	cmp        r4,r0
40008d34:	6c 71                   	mov_s      r3,1
40008d36:	ca 22 2e 00             	mov.ls     r2,0
40008d3a:	ca 23 2e 00             	mov.ls     r3,0
40008d3e:	8c 70                   	mov_s      r4,0
40008d40:	00 24 84 82             	add.f      r4,r4,r10
40008d44:	01 20 c5 02             	adc        r5,r0,r11
40008d48:	15 0d c4 02             	brlo       r5,r11,40008d5c <__muldf3+0x114>

40008d4c:	1f 0b 61 11             	brne.d     r11,r5,40008d6a <__muldf3+0x122>

40008d50:	28 14 06 30             	ld         r6,[sp,40]
40008d54:	1b 0c a5 02             	brhs.t.d   r4,r10,40008d6e <__muldf3+0x126>

40008d58:	14 14 07 30             	ld         r7,[sp,20]
40008d5c:	40 22 42 80             	add.f      r2,r2,1
40008d60:	60 43                   	mov_s      r3,r3
40008d62:	c0 23 65 00             	add.c      r3,r3,1
40008d66:	28 14 06 30             	ld         r6,[sp,40]
40008d6a:	14 14 07 30             	ld         r7,[sp,20]
40008d6e:	00 21 88 83             	add.f      r8,r1,r14
40008d72:	2d 70                   	mov_s      r9,0
40008d74:	01 21 c9 13             	adc        r9,r9,r15
40008d78:	00 22 02 82             	add.f      r2,r2,r8
40008d7c:	21 73                   	add_s      r3,r3,r9
40008d7e:	c0 23 65 00             	add.c      r3,r3,1
40008d82:	0c 27 80 81             	cmp        r7,r6
40008d86:	18 14 07 30             	ld         r7,[sp,24]
40008d8a:	2c 14 06 30             	ld         r6,[sp,44]
40008d8e:	0d 71                   	mov_s      r8,1
40008d90:	ca 20 21 10             	mov.z      r8,0
40008d94:	00 26 c6 01             	add        r6,r6,r7
40008d98:	3c 1c 00 32             	st         r8,[sp,60]
40008d9c:	40 26 07 01             	add        r7,r6,4
40008da0:	40 1c c0 31             	st         r7,[sp,64]
40008da4:	5f 0e c5 70 ff 1f ff ff 	brhs.t     0x1fffffff,r3,40008e02 <__muldf3+0x1ba>

40008dac:	40 26 46 01             	add        r6,r6,5
40008db0:	60 47                   	mov_s      r7,r3
40008db2:	68 41                   	mov_s      r9,r3
40008db4:	2f 27 c2 01             	lsr        r7,r7
40008db8:	44 21 49 10             	and        r9,r9,1
40008dbc:	2f 21 43 12             	ror        r9,r9
40008dc0:	48 40                   	mov_s      r8,r2
40008dc2:	2f 20 02 12             	lsr        r8,r8
40008dc6:	2b 0a 3e 00             	bbit0.d    r2,0,40008dee <__muldf3+0x1a6>

40008dca:	c8 42                   	mov_s      r10,r6
40008dcc:	a8 43                   	mov_s      r11,r5
40008dce:	44 23 4b 10             	and        r11,r11,1
40008dd2:	2f 23 c3 12             	ror        r11,r11
40008dd6:	a0 42                   	mov_s      r2,r5
40008dd8:	80 43                   	mov_s      r3,r4
40008dda:	2f 22 82 00             	lsr        r2,r2
40008dde:	2f 23 c2 00             	lsr        r3,r3
40008de2:	05 22 85 0f 00 80 00 00 	or         r5,r2,0x80000000
40008dea:	05 23 c4 10             	or         r4,r11,r3
40008dee:	e0 43                   	mov_s      r3,r7
40008df0:	c4 71                   	add_s      r6,r6,1
40008df2:	05 21 02 12             	or         r2,r9,r8
40008df6:	bd 0e c4 f0 ff 1f ff ff 	brlo       0x1fffffff,r3,40008db0 <__muldf3+0x168>

40008dfe:	40 1c 80 32             	st         r10,[sp,64]
40008e02:	65 0e c4 70 ff 0f ff ff 	brlo       0x0fffffff,r3,40008e64 <__muldf3+0x21c>

40008e0a:	40 14 07 30             	ld         r7,[sp,64]
40008e0e:	e4 77                   	add_s      r7,r7,-1
40008e10:	48 41                   	mov_s      r9,r2
40008e12:	00 21 7e 92             	add.f      0,r9,r9
40008e16:	6f 21 0b 10             	rlc        r9,0
40008e1a:	60 46                   	mov_s      r6,r3
40008e1c:	00 26 86 01             	add        r6,r6,r6
40008e20:	48 40                   	mov_s      r8,r2
40008e22:	00 20 08 12             	add        r8,r8,r8
40008e26:	05 26 46 02             	or         r6,r6,r9
40008e2a:	b4 70                   	cmp_s      r5,0
40008e2c:	e8 42                   	mov_s      r10,r7
40008e2e:	01 42                   	mov_s      r2,r8
40008e30:	c0 43                   	mov_s      r3,r6
40008e32:	cf 20 2b 10             	bset.lt    r8,r8,0
40008e36:	ca 22 0b 02             	mov.lt     r2,r8
40008e3a:	88 40                   	mov_s      r8,r4
40008e3c:	a0 46                   	mov_s      r6,r5
40008e3e:	00 20 3e 92             	add.f      0,r8,r8
40008e42:	6f 20 0b 10             	rlc        r8,0
40008e46:	00 26 86 01             	add        r6,r6,r6
40008e4a:	88 41                   	mov_s      r9,r4
40008e4c:	00 21 49 12             	add        r9,r9,r9
40008e50:	e4 77                   	add_s      r7,r7,-1
40008e52:	21 44                   	mov_s      r4,r9
40008e54:	05 20 85 11             	or         r5,r8,r6
40008e58:	b9 0e c5 f0 ff 0f ff ff 	brhs.nt    0x0fffffff,r3,40008e10 <__muldf3+0x1c8>

40008e60:	40 1c 80 32             	st         r10,[sp,64]
40008e64:	53 22 c6 01             	bmsk       r6,r2,7
40008e68:	21 0e 80 0f 00 00 80 00 	breq       r6,128,40008e88 <__muldf3+0x240>

40008e70:	93 c0                   	add_s      r0,sp,76
40008e72:	51 c2                   	st_s       r2,[sp,68]
40008e74:	52 c3                   	st_s       r3,[sp,72]
40008e76:	0f 06 ef ff             	b.d        40008c82 <__muldf3+0x3a>

40008e7a:	ec 18 c9 80             	st.a       3,[r0,-20]
40008e7e:	e0 78                   	nop_s      
40008e80:	bf 06 ef ff             	b.d        40008d3e <__muldf3+0xf6>

40008e84:	6c 71                   	mov_s      r3,1
40008e86:	e0 78                   	nop_s      
40008e88:	eb 0a 37 82             	bbit1.nt.d r2,8,40008e72 <__muldf3+0x22a>

40008e8c:	93 c0                   	add_s      r0,sp,76
40008e8e:	05 24 7e 81             	or.f       0,r4,r5
40008e92:	f1 f3                   	beq_s      40008e72 <__muldf3+0x22a>

40008e94:	00 22 84 8f 00 00 80 00 	add.f      r4,r2,128
40008e9c:	60 45                   	mov_s      r5,r3
40008e9e:	c0 25 65 00             	add.c      r5,r5,1
40008ea2:	80 46                   	mov_s      r6,r4
40008ea4:	a0 43                   	mov_s      r3,r5
40008ea6:	cf 07 ef ff             	b.d        40008e72 <__muldf3+0x22a>

40008eaa:	6c 26 c2 01             	bmskn      r2,r6,7
40008eae:	e0 78                   	nop_s      

40008eb0 <__divdf3>:
40008eb0:	f1 c0                   	push_s     blink
40008eb2:	fc 1c 48 b3             	st.a       r13,[sp,-4]
40008eb6:	ae c1                   	sub_s      sp,sp,56
40008eb8:	42 c2                   	st_s       r2,[sp,8]
40008eba:	40 c0                   	st_s       r0,[sp,0]
40008ebc:	41 c1                   	st_s       r1,[sp,4]
40008ebe:	43 c3                   	st_s       r3,[sp,12]
40008ec0:	83 40                   	mov_s      r0,sp
40008ec2:	f2 0b ef ff             	bl.d       40008ab0 <__unpack_d>

40008ec6:	84 c1                   	add_s      r1,sp,16
40008ec8:	82 c0                   	add_s      r0,sp,8
40008eca:	ea 0b ef ff             	bl.d       40008ab0 <__unpack_d>

40008ece:	89 c1                   	add_s      r1,sp,36
40008ed0:	04 c2                   	ld_s       r2,[sp,16]
40008ed2:	1d 0a b5 00             	brhs.t.d   r2,2,40008eec <__divdf3+0x3c>

40008ed6:	09 c3                   	ld_s       r3,[sp,36]
40008ed8:	84 c0                   	add_s      r0,sp,16
40008eda:	c6 09 cf ff             	bl         4000889c <__pack_d>

40008ede:	3c 14 1f 30             	ld         blink,[sp,60]
40008ee2:	38 14 0d 32             	ld.a       r13,[sp,56]
40008ee6:	e0 7f                   	j_s.d      [blink]
40008ee8:	a2 c0                   	add_s      sp,sp,8
40008eea:	e0 78                   	nop_s      
40008eec:	ef 0b b4 80             	brlo.d     r3,2,40008eda <__divdf3+0x2a>

40008ef0:	89 c0                   	add_s      r0,sp,36
40008ef2:	14 14 05 30             	ld         r5,[sp,20]
40008ef6:	28 14 04 30             	ld         r4,[sp,40]
40008efa:	07 24 44 01             	xor        r4,r4,r5
40008efe:	11 0a 30 01             	breq.d     r2,4,40008f0c <__divdf3+0x5c>

40008f02:	14 1c 00 31             	st         r4,[sp,20]
40008f06:	15 0a b1 00             	brne.d     r2,2,40008f18 <__divdf3+0x68>

40008f0a:	74 74                   	cmp_s      r3,4
40008f0c:	cd 0a c1 80             	brne       r2,r3,40008ed8 <__divdf3+0x28>

40008f10:	c3 40 00 40 9c d7       	mov_s      r0,0x4000d79c
40008f16:	e3 f1                   	b_s        40008eda <__divdf3+0x2a>

40008f18:	e4 00 21 00             	bz.d       40008ffc <__divdf3+0x14c>

40008f1c:	74 72                   	cmp_s      r3,2
40008f1e:	f4 00 21 00             	bz.d       40009010 <__divdf3+0x160>

40008f22:	18 14 06 30             	ld         r6,[sp,24]
40008f26:	2c 14 07 30             	ld         r7,[sp,44]
40008f2a:	08 c3                   	ld_s       r3,[sp,32]
40008f2c:	34 14 05 30             	ld         r5,[sp,52]
40008f30:	02 26 c6 01             	sub        r6,r6,r7
40008f34:	18 1c 80 31             	st         r6,[sp,24]
40008f38:	07 c2                   	ld_s       r2,[sp,28]
40008f3a:	19 0b 64 01             	brlo.d     r3,r5,40008f50 <__divdf3+0xa0>

40008f3e:	30 14 04 30             	ld         r4,[sp,48]
40008f42:	37 0d e1 00             	brne.d     r5,r3,40008f76 <__divdf3+0xc6>

40008f46:	4a 20 40 1f             	mov        r8,61
40008f4a:	31 0a 25 01             	brhs.t.d   r2,r4,40008f78 <__divdf3+0xc8>

40008f4e:	ec 70                   	mov_s      r7,0
40008f50:	c4 77                   	add_s      r6,r6,-1
40008f52:	40 47                   	mov_s      r7,r2
40008f54:	18 1c 80 31             	st         r6,[sp,24]
40008f58:	00 27 fe 81             	add.f      0,r7,r7
40008f5c:	6f 27 0b 00             	rlc        r7,0
40008f60:	60 46                   	mov_s      r6,r3
40008f62:	00 26 86 01             	add        r6,r6,r6
40008f66:	48 40                   	mov_s      r8,r2
40008f68:	05 27 83 01             	or         r3,r7,r6
40008f6c:	00 20 08 12             	add        r8,r8,r8
40008f70:	01 42                   	mov_s      r2,r8
40008f72:	4a 20 40 1f             	mov        r8,61
40008f76:	ec 70                   	mov_s      r7,0
40008f78:	0a 26 80 0f 00 10 00 00 	mov        r6,0x10000000
40008f80:	0c 70                   	mov_s      r0,0
40008f82:	8d 70                   	mov_s      r12,0
40008f84:	4a 24 40 7f             	mov        lp_count,61
40008f88:	23 0b 64 01             	brlo.d     r3,r5,40008faa <__divdf3+0xfa>

40008f8c:	c8 43                   	mov_s      r11,r6
40008f8e:	0d 0d c1 00             	brne       r5,r3,40008f98 <__divdf3+0xe8>

40008f92:	1d 0a 24 01             	brlo.d     r2,r4,40008fac <__divdf3+0xfc>

40008f96:	68 40                   	mov_s      r8,r3
40008f98:	02 22 02 81             	sub.f      r2,r2,r4
40008f9c:	05 20 c0 01             	or         r0,r0,r7
40008fa0:	03 23 43 01             	sbc        r3,r3,r5
40008fa4:	05 24 8c 11             	or         r12,r12,r6
40008fa8:	c8 43                   	mov_s      r11,r6
40008faa:	68 40                   	mov_s      r8,r3
40008fac:	44 23 4b 10             	and        r11,r11,1
40008fb0:	2f 23 c3 12             	ror        r11,r11
40008fb4:	00 20 08 12             	add        r8,r8,r8
40008fb8:	48 41                   	mov_s      r9,r2
40008fba:	48 42                   	mov_s      r10,r2
40008fbc:	2f 26 82 01             	lsr        r6,r6
40008fc0:	00 21 7e 92             	add.f      0,r9,r9
40008fc4:	6f 21 0b 10             	rlc        r9,0
40008fc8:	2f 27 c2 01             	lsr        r7,r7
40008fcc:	00 22 8a 12             	add        r10,r10,r10
40008fd0:	05 27 c7 02             	or         r7,r7,r11
40008fd4:	41 42                   	mov_s      r2,r10
40008fd6:	05 21 03 12             	or         r3,r9,r8
40008fda:	b1 0c 71 f0             	brne.d     lp_count,1,40008f88 <__divdf3+0xd8>

40008fde:	42 24 7c 70             	sub        lp_count,lp_count,1
40008fe2:	53 20 c6 01             	bmsk       r6,r0,7
40008fe6:	00 44                   	mov_s      r4,r0
40008fe8:	81 45                   	mov_s      r5,r12
40008fea:	35 0e 80 0f 00 00 80 00 	breq       r6,128,4000901c <__divdf3+0x16c>

40008ff2:	47 c0                   	st_s       r0,[sp,28]
40008ff4:	e5 06 ef ff             	b.d        40008ed8 <__divdf3+0x28>

40008ff8:	48 c4                   	st_s       r12,[sp,32]
40008ffa:	e0 78                   	nop_s      
40008ffc:	4c 70                   	mov_s      r2,0
40008ffe:	6c 70                   	mov_s      r3,0
40009000:	18 1c 01 30             	st         0,[sp,24]
40009004:	47 c2                   	st_s       r2,[sp,28]
40009006:	48 c3                   	st_s       r3,[sp,32]
40009008:	d3 06 ef ff             	b.d        40008eda <__divdf3+0x2a>

4000900c:	84 c0                   	add_s      r0,sp,16
4000900e:	e0 78                   	nop_s      
40009010:	10 1c 01 31             	st         4,[sp,16]
40009014:	c7 06 ef ff             	b.d        40008eda <__divdf3+0x2a>

40009018:	84 c0                   	add_s      r0,sp,16
4000901a:	e0 78                   	nop_s      
4000901c:	d7 08 37 82             	bbit1.nt.d r0,8,40008ff2 <__divdf3+0x142>

40009020:	05 22 fe 90             	or.f       0,r10,r3
40009024:	ce 07 e1 ff             	bz.d       40008ff2 <__divdf3+0x142>

40009028:	80 24 02 80             	add.f      r4,r4,128
4000902c:	a0 45                   	mov_s      r5,r5
4000902e:	c0 25 65 00             	add.c      r5,r5,1
40009032:	80 40                   	mov_s      r0,r4
40009034:	a8 44                   	mov_s      r12,r5
40009036:	bf 07 ef ff             	b.d        40008ff2 <__divdf3+0x142>

4000903a:	6c 20 c0 01             	bmskn      r0,r0,7
4000903e:	e0 78                   	nop_s      

40009040 <__fpcmp_parts_d>:
40009040:	40 80                   	ld_s       r2,[r0,0]
40009042:	a1 0a 94 00             	brlo       r2,2,400090e0 <__fpcmp_parts_d+0xa0>

40009046:	60 81                   	ld_s       r3,[r1,0]
40009048:	99 0b 94 00             	brlo       r3,2,400090e0 <__fpcmp_parts_d+0xa0>

4000904c:	99 0a 10 01             	breq       r2,4,400090e4 <__fpcmp_parts_d+0xa4>

40009050:	29 0b 10 01             	breq       r3,4,40009078 <__fpcmp_parts_d+0x38>

40009054:	21 0a 90 00             	breq       r2,2,40009074 <__fpcmp_parts_d+0x34>

40009058:	2d 0b 90 00             	breq       r3,2,40009084 <__fpcmp_parts_d+0x44>

4000905c:	41 80                   	ld_s       r2,[r0,4]
4000905e:	61 81                   	ld_s       r3,[r1,4]
40009060:	35 0a c0 00             	breq       r2,r3,40009094 <__fpcmp_parts_d+0x54>

40009064:	4b 7a                   	tst_s      r2,r2
40009066:	0c 71                   	mov_s      r0,1
40009068:	ca 20 82 0f ff ff ff ff 	mov.nz     r0,-1
40009070:	e0 7e                   	j_s        [blink]
40009072:	e0 78                   	nop_s      
40009074:	69 0b 90 00             	breq       r3,2,400090dc <__fpcmp_parts_d+0x9c>

40009078:	41 81                   	ld_s       r2,[r1,4]
4000907a:	0c 77                   	mov_s      r0,-1
4000907c:	4b 7a                   	tst_s      r2,r2
4000907e:	ca 20 62 00             	mov.nz     r0,1
40009082:	e0 7e                   	j_s        [blink]
40009084:	41 80                   	ld_s       r2,[r0,4]
40009086:	0c 71                   	mov_s      r0,1
40009088:	4b 7a                   	tst_s      r2,r2
4000908a:	ca 20 82 0f ff ff ff ff 	mov.nz     r0,-1
40009092:	e0 7e                   	j_s        [blink]
40009094:	08 10 04 00             	ld         r4,[r0,8]
40009098:	62 81                   	ld_s       r3,[r1,8]
4000909a:	cf 0b 2a 81             	brlt.nt.d  r3,r4,40009066 <__fpcmp_parts_d+0x26>

4000909e:	4b 7a                   	tst_s      r2,r2
400090a0:	35 0c e2 00             	brlt.d     r4,r3,400090d4 <__fpcmp_parts_d+0x94>

400090a4:	4b 7a                   	tst_s      r2,r2
400090a6:	64 80                   	ld_s       r3,[r0,16]
400090a8:	10 11 04 00             	ld         r4,[r1,16]
400090ac:	0c 10 05 00             	ld         r5,[r0,12]
400090b0:	b5 0c ec 80             	brlo.nt.d  r4,r3,40009064 <__fpcmp_parts_d+0x24>

400090b4:	0c 11 06 00             	ld         r6,[r1,12]
400090b8:	0b 0b 01 01             	brne       r3,r4,400090c2 <__fpcmp_parts_d+0x82>

400090bc:	ab 0e 6c 81             	brlo.nt.d  r6,r5,40009066 <__fpcmp_parts_d+0x26>

400090c0:	4b 7a                   	tst_s      r2,r2
400090c2:	15 0b 2c 01             	brlo.t.d   r3,r4,400090d4 <__fpcmp_parts_d+0x94>

400090c6:	4b 7a                   	tst_s      r2,r2
400090c8:	17 0c e1 00             	brne.d     r4,r3,400090de <__fpcmp_parts_d+0x9e>

400090cc:	0c 70                   	mov_s      r0,0
400090ce:	13 0d a5 01             	brhs.t.d   r5,r6,400090de <__fpcmp_parts_d+0x9e>

400090d2:	4b 7a                   	tst_s      r2,r2
400090d4:	0c 77                   	mov_s      r0,-1
400090d6:	ca 20 62 00             	mov.nz     r0,1
400090da:	e0 7e                   	j_s        [blink]
400090dc:	0c 70                   	mov_s      r0,0
400090de:	e0 7e                   	j_s        [blink]
400090e0:	0c 71                   	mov_s      r0,1
400090e2:	e0 7e                   	j_s        [blink]
400090e4:	a1 0b 11 81             	brne       r3,4,40009084 <__fpcmp_parts_d+0x44>

400090e8:	61 81                   	ld_s       r3,[r1,4]
400090ea:	41 80                   	ld_s       r2,[r0,4]
400090ec:	02 23 80 00             	sub        r0,r3,r2
400090f0:	e0 7e                   	j_s        [blink]
400090f2:	e0 78                   	nop_s      

400090f4 <__cmpdf2>:
400090f4:	f1 c0                   	push_s     blink
400090f6:	ae c1                   	sub_s      sp,sp,56
400090f8:	42 c2                   	st_s       r2,[sp,8]
400090fa:	43 c3                   	st_s       r3,[sp,12]
400090fc:	40 c0                   	st_s       r0,[sp,0]
400090fe:	41 c1                   	st_s       r1,[sp,4]
40009100:	83 40                   	mov_s      r0,sp
40009102:	b2 09 ef ff             	bl.d       40008ab0 <__unpack_d>

40009106:	84 c1                   	add_s      r1,sp,16
40009108:	82 c0                   	add_s      r0,sp,8
4000910a:	aa 09 ef ff             	bl.d       40008ab0 <__unpack_d>

4000910e:	89 c1                   	add_s      r1,sp,36
40009110:	84 c0                   	add_s      r0,sp,16
40009112:	32 0f ef ff             	bl.d       40009040 <__fpcmp_parts_d>

40009116:	89 c1                   	add_s      r1,sp,36
40009118:	38 14 1f 32             	ld.a       blink,[sp,56]
4000911c:	e0 7f                   	j_s.d      [blink]
4000911e:	87 74                   	add_s      sp,sp,4

40009120 <__eqdf2>:
40009120:	f1 c0                   	push_s     blink
40009122:	ae c1                   	sub_s      sp,sp,56
40009124:	42 c2                   	st_s       r2,[sp,8]
40009126:	40 c0                   	st_s       r0,[sp,0]
40009128:	41 c1                   	st_s       r1,[sp,4]
4000912a:	43 c3                   	st_s       r3,[sp,12]
4000912c:	83 40                   	mov_s      r0,sp
4000912e:	86 09 ef ff             	bl.d       40008ab0 <__unpack_d>

40009132:	84 c1                   	add_s      r1,sp,16
40009134:	82 c0                   	add_s      r0,sp,8
40009136:	7e 09 ef ff             	bl.d       40008ab0 <__unpack_d>

4000913a:	89 c1                   	add_s      r1,sp,36
4000913c:	04 c2                   	ld_s       r2,[sp,16]
4000913e:	1d 0a b4 00             	brlo.d     r2,2,40009158 <__eqdf2+0x38>

40009142:	09 c2                   	ld_s       r2,[sp,36]
40009144:	15 0a 94 00             	brlo       r2,2,40009158 <__eqdf2+0x38>

40009148:	84 c0                   	add_s      r0,sp,16
4000914a:	fa 0e ef ff             	bl.d       40009040 <__fpcmp_parts_d>

4000914e:	89 c1                   	add_s      r1,sp,36
40009150:	38 14 1f 32             	ld.a       blink,[sp,56]
40009154:	e0 7f                   	j_s.d      [blink]
40009156:	87 74                   	add_s      sp,sp,4
40009158:	f9 07 ef ff             	b.d        40009150 <__eqdf2+0x30>

4000915c:	0c 71                   	mov_s      r0,1
4000915e:	e0 78                   	nop_s      

40009160 <__nedf2>:
40009160:	f1 c0                   	push_s     blink
40009162:	ae c1                   	sub_s      sp,sp,56
40009164:	42 c2                   	st_s       r2,[sp,8]
40009166:	40 c0                   	st_s       r0,[sp,0]
40009168:	41 c1                   	st_s       r1,[sp,4]
4000916a:	43 c3                   	st_s       r3,[sp,12]
4000916c:	83 40                   	mov_s      r0,sp
4000916e:	46 09 ef ff             	bl.d       40008ab0 <__unpack_d>

40009172:	84 c1                   	add_s      r1,sp,16
40009174:	82 c0                   	add_s      r0,sp,8
40009176:	3e 09 ef ff             	bl.d       40008ab0 <__unpack_d>

4000917a:	89 c1                   	add_s      r1,sp,36
4000917c:	04 c2                   	ld_s       r2,[sp,16]
4000917e:	1d 0a b4 00             	brlo.d     r2,2,40009198 <__nedf2+0x38>

40009182:	09 c2                   	ld_s       r2,[sp,36]
40009184:	15 0a 94 00             	brlo       r2,2,40009198 <__nedf2+0x38>

40009188:	84 c0                   	add_s      r0,sp,16
4000918a:	ba 0e ef ff             	bl.d       40009040 <__fpcmp_parts_d>

4000918e:	89 c1                   	add_s      r1,sp,36
40009190:	38 14 1f 32             	ld.a       blink,[sp,56]
40009194:	e0 7f                   	j_s.d      [blink]
40009196:	87 74                   	add_s      sp,sp,4
40009198:	f9 07 ef ff             	b.d        40009190 <__nedf2+0x30>

4000919c:	0c 71                   	mov_s      r0,1
4000919e:	e0 78                   	nop_s      

400091a0 <__gtdf2>:
400091a0:	f1 c0                   	push_s     blink
400091a2:	ae c1                   	sub_s      sp,sp,56
400091a4:	42 c2                   	st_s       r2,[sp,8]
400091a6:	40 c0                   	st_s       r0,[sp,0]
400091a8:	41 c1                   	st_s       r1,[sp,4]
400091aa:	43 c3                   	st_s       r3,[sp,12]
400091ac:	83 40                   	mov_s      r0,sp
400091ae:	06 09 ef ff             	bl.d       40008ab0 <__unpack_d>

400091b2:	84 c1                   	add_s      r1,sp,16
400091b4:	82 c0                   	add_s      r0,sp,8
400091b6:	fe 08 ef ff             	bl.d       40008ab0 <__unpack_d>

400091ba:	89 c1                   	add_s      r1,sp,36
400091bc:	04 c2                   	ld_s       r2,[sp,16]
400091be:	1d 0a b4 00             	brlo.d     r2,2,400091d8 <__gtdf2+0x38>

400091c2:	09 c2                   	ld_s       r2,[sp,36]
400091c4:	15 0a 94 00             	brlo       r2,2,400091d8 <__gtdf2+0x38>

400091c8:	84 c0                   	add_s      r0,sp,16
400091ca:	7a 0e ef ff             	bl.d       40009040 <__fpcmp_parts_d>

400091ce:	89 c1                   	add_s      r1,sp,36
400091d0:	38 14 1f 32             	ld.a       blink,[sp,56]
400091d4:	e0 7f                   	j_s.d      [blink]
400091d6:	87 74                   	add_s      sp,sp,4
400091d8:	f9 07 ef ff             	b.d        400091d0 <__gtdf2+0x30>

400091dc:	0c 77                   	mov_s      r0,-1
400091de:	e0 78                   	nop_s      

400091e0 <__gedf2>:
400091e0:	f1 c0                   	push_s     blink
400091e2:	ae c1                   	sub_s      sp,sp,56
400091e4:	42 c2                   	st_s       r2,[sp,8]
400091e6:	40 c0                   	st_s       r0,[sp,0]
400091e8:	41 c1                   	st_s       r1,[sp,4]
400091ea:	43 c3                   	st_s       r3,[sp,12]
400091ec:	83 40                   	mov_s      r0,sp
400091ee:	c6 08 ef ff             	bl.d       40008ab0 <__unpack_d>

400091f2:	84 c1                   	add_s      r1,sp,16
400091f4:	82 c0                   	add_s      r0,sp,8
400091f6:	be 08 ef ff             	bl.d       40008ab0 <__unpack_d>

400091fa:	89 c1                   	add_s      r1,sp,36
400091fc:	04 c2                   	ld_s       r2,[sp,16]
400091fe:	1d 0a b4 00             	brlo.d     r2,2,40009218 <__gedf2+0x38>

40009202:	09 c2                   	ld_s       r2,[sp,36]
40009204:	15 0a 94 00             	brlo       r2,2,40009218 <__gedf2+0x38>

40009208:	84 c0                   	add_s      r0,sp,16
4000920a:	3a 0e ef ff             	bl.d       40009040 <__fpcmp_parts_d>

4000920e:	89 c1                   	add_s      r1,sp,36
40009210:	38 14 1f 32             	ld.a       blink,[sp,56]
40009214:	e0 7f                   	j_s.d      [blink]
40009216:	87 74                   	add_s      sp,sp,4
40009218:	f9 07 ef ff             	b.d        40009210 <__gedf2+0x30>

4000921c:	0c 77                   	mov_s      r0,-1
4000921e:	e0 78                   	nop_s      

40009220 <__ltdf2>:
40009220:	f1 c0                   	push_s     blink
40009222:	ae c1                   	sub_s      sp,sp,56
40009224:	42 c2                   	st_s       r2,[sp,8]
40009226:	40 c0                   	st_s       r0,[sp,0]
40009228:	41 c1                   	st_s       r1,[sp,4]
4000922a:	43 c3                   	st_s       r3,[sp,12]
4000922c:	83 40                   	mov_s      r0,sp
4000922e:	86 08 ef ff             	bl.d       40008ab0 <__unpack_d>

40009232:	84 c1                   	add_s      r1,sp,16
40009234:	82 c0                   	add_s      r0,sp,8
40009236:	7e 08 ef ff             	bl.d       40008ab0 <__unpack_d>

4000923a:	89 c1                   	add_s      r1,sp,36
4000923c:	04 c2                   	ld_s       r2,[sp,16]
4000923e:	1d 0a b4 00             	brlo.d     r2,2,40009258 <__ltdf2+0x38>

40009242:	09 c2                   	ld_s       r2,[sp,36]
40009244:	15 0a 94 00             	brlo       r2,2,40009258 <__ltdf2+0x38>

40009248:	84 c0                   	add_s      r0,sp,16
4000924a:	fa 0d ef ff             	bl.d       40009040 <__fpcmp_parts_d>

4000924e:	89 c1                   	add_s      r1,sp,36
40009250:	38 14 1f 32             	ld.a       blink,[sp,56]
40009254:	e0 7f                   	j_s.d      [blink]
40009256:	87 74                   	add_s      sp,sp,4
40009258:	f9 07 ef ff             	b.d        40009250 <__ltdf2+0x30>

4000925c:	0c 71                   	mov_s      r0,1
4000925e:	e0 78                   	nop_s      

40009260 <__ledf2>:
40009260:	f1 c0                   	push_s     blink
40009262:	ae c1                   	sub_s      sp,sp,56
40009264:	42 c2                   	st_s       r2,[sp,8]
40009266:	40 c0                   	st_s       r0,[sp,0]
40009268:	41 c1                   	st_s       r1,[sp,4]
4000926a:	43 c3                   	st_s       r3,[sp,12]
4000926c:	83 40                   	mov_s      r0,sp
4000926e:	46 08 ef ff             	bl.d       40008ab0 <__unpack_d>

40009272:	84 c1                   	add_s      r1,sp,16
40009274:	82 c0                   	add_s      r0,sp,8
40009276:	3e 08 ef ff             	bl.d       40008ab0 <__unpack_d>

4000927a:	89 c1                   	add_s      r1,sp,36
4000927c:	04 c2                   	ld_s       r2,[sp,16]
4000927e:	1d 0a b4 00             	brlo.d     r2,2,40009298 <__ledf2+0x38>

40009282:	09 c2                   	ld_s       r2,[sp,36]
40009284:	15 0a 94 00             	brlo       r2,2,40009298 <__ledf2+0x38>

40009288:	84 c0                   	add_s      r0,sp,16
4000928a:	ba 0d ef ff             	bl.d       40009040 <__fpcmp_parts_d>

4000928e:	89 c1                   	add_s      r1,sp,36
40009290:	38 14 1f 32             	ld.a       blink,[sp,56]
40009294:	e0 7f                   	j_s.d      [blink]
40009296:	87 74                   	add_s      sp,sp,4
40009298:	f9 07 ef ff             	b.d        40009290 <__ledf2+0x30>

4000929c:	0c 71                   	mov_s      r0,1
4000929e:	e0 78                   	nop_s      

400092a0 <__unorddf2>:
400092a0:	f1 c0                   	push_s     blink
400092a2:	ae c1                   	sub_s      sp,sp,56
400092a4:	42 c2                   	st_s       r2,[sp,8]
400092a6:	40 c0                   	st_s       r0,[sp,0]
400092a8:	41 c1                   	st_s       r1,[sp,4]
400092aa:	43 c3                   	st_s       r3,[sp,12]
400092ac:	83 40                   	mov_s      r0,sp
400092ae:	06 08 ef ff             	bl.d       40008ab0 <__unpack_d>

400092b2:	84 c1                   	add_s      r1,sp,16
400092b4:	82 c0                   	add_s      r0,sp,8
400092b6:	fe 0f af ff             	bl.d       40008ab0 <__unpack_d>

400092ba:	89 c1                   	add_s      r1,sp,36
400092bc:	04 c2                   	ld_s       r2,[sp,16]
400092be:	19 0a b4 00             	brlo.d     r2,2,400092d4 <__unorddf2+0x34>

400092c2:	09 c2                   	ld_s       r2,[sp,36]
400092c4:	0c 71                   	mov_s      r0,1
400092c6:	54 71                   	cmp_s      r2,1
400092c8:	ca 20 2d 00             	mov.hi     r0,0
400092cc:	38 14 1f 32             	ld.a       blink,[sp,56]
400092d0:	e0 7f                   	j_s.d      [blink]
400092d2:	87 74                   	add_s      sp,sp,4
400092d4:	f9 07 ef ff             	b.d        400092cc <__unorddf2+0x2c>

400092d8:	0c 71                   	mov_s      r0,1
400092da:	e0 78                   	nop_s      

400092dc <__floatsidf>:
400092dc:	f1 c0                   	push_s     blink
400092de:	fc 1c 48 b3             	st.a       r13,[sp,-4]
400092e2:	a5 c1                   	sub_s      sp,sp,20
400092e4:	00 42                   	mov_s      r2,r0
400092e6:	00 1c c1 30             	st         3,[sp]
400092ea:	00 22 be 80             	add.f      0,r2,r2
400092ee:	6f 22 0b 00             	rlc        r2,0
400092f2:	21 08 31 00             	brne.d     r0,0,40009310 <__floatsidf+0x34>

400092f6:	41 c2                   	st_s       r2,[sp,4]
400092f8:	00 1c 81 30             	st         2,[sp]
400092fc:	a2 0d af ff             	bl.d       4000889c <__pack_d>

40009300:	83 40                   	mov_s      r0,sp
40009302:	18 14 1f 30             	ld         blink,[sp,24]
40009306:	14 14 0d 32             	ld.a       r13,[sp,20]
4000930a:	e0 7f                   	j_s.d      [blink]
4000930c:	a2 c0                   	add_s      sp,sp,8
4000930e:	e0 78                   	nop_s      
40009310:	4a 24 00 0f             	mov        r4,60
40009314:	65 0a 31 00             	brne.d     r2,0,40009378 <__floatsidf+0x9c>

40009318:	08 1c 00 31             	st         r4,[sp,8]
4000931c:	08 45                   	mov_s      r13,r0
4000931e:	9e 0b 20 00             	bl.d       400096b8 <__clzsi2>

40009322:	a1 40                   	mov_s      r0,r13
40009324:	40 20 42 07             	add        r2,r0,29
40009328:	6b 0a 72 00             	brlt.d     r2,1,40009392 <__floatsidf+0xb6>

4000932c:	a1 43                   	mov_s      r3,r13
4000932e:	2f 25 42 13             	lsr        r13,r13
40009332:	44 22 fc 87             	and.f      lp_count,r2,31
40009336:	e8 20 e2 01             	lpnz       40009342 <__floatsidf+0x66>

4000933a:	00 23 c3 00             	add        r3,r3,r3
4000933e:	4a 26 00 70             	nop        
40009342:	2f 24 8a 00             	not        r4,r2
40009346:	44 24 fc 87             	and.f      lp_count,r4,31
4000934a:	e8 20 e2 01             	lpnz       40009356 <__floatsidf+0x7a>

4000934e:	2f 25 42 13             	lsr        r13,r13
40009352:	4a 26 00 70             	nop        
40009356:	44 22 02 88             	and.f      r2,r2,32
4000935a:	4e 20 c0 07             	rsub       r0,r0,31
4000935e:	60 44                   	mov_s      r4,r3
40009360:	42 c0                   	st_s       r0,[sp,8]
40009362:	ca 24 41 03             	mov.z      r4,r13
40009366:	4b 7a                   	tst_s      r2,r2
40009368:	10 1c 00 31             	st         r4,[sp,16]
4000936c:	4c 70                   	mov_s      r2,0
4000936e:	ca 22 c1 00             	mov.z      r2,r3
40009372:	8d 07 ef ff             	b.d        400092fc <__floatsidf+0x20>

40009376:	43 c2                   	st_s       r2,[sp,12]
40009378:	25 08 80 0f 00 80 00 00 	breq       r0,0x80000000,4000939c <__floatsidf+0xc0>

40009380:	13 7d                   	neg_s      r13,r0
40009382:	3a 0b 20 00             	bl.d       400096b8 <__clzsi2>

40009386:	a1 40                   	mov_s      r0,r13
40009388:	40 20 42 07             	add        r2,r0,29
4000938c:	a3 0a 73 80             	brge.d     r2,1,4000932e <__floatsidf+0x52>

40009390:	a1 43                   	mov_s      r3,r13
40009392:	43 c5                   	st_s       r13,[sp,12]
40009394:	69 07 ef ff             	b.d        400092fc <__floatsidf+0x20>

40009398:	10 1c 01 30             	st         0,[sp,16]
4000939c:	c3 41 e0 c1 00 00       	mov_s      r1,0xc1e00000
400093a2:	63 07 ef ff             	b.d        40009302 <__floatsidf+0x26>

400093a6:	0c 70                   	mov_s      r0,0

400093a8 <__floatunsidf>:
400093a8:	f1 c0                   	push_s     blink
400093aa:	f8 1c 48 b3             	st.a       r13,[sp,-8]
400093ae:	41 c6                   	st_s       r14,[sp,4]
400093b0:	a5 c1                   	sub_s      sp,sp,20
400093b2:	04 1c 01 30             	st         0,[sp,4]
400093b6:	0a 25 00 90             	mov.f      r13,r0
400093ba:	7c 00 21 00             	bz.d       40009434 <__floatunsidf+0x8c>

400093be:	cd 70                   	mov_s      r14,0
400093c0:	3c da                   	mov_s      r2,60
400093c2:	00 1c c1 30             	st         3,[sp]
400093c6:	f6 0a 20 00             	bl.d       400096b8 <__clzsi2>

400093ca:	42 c2                   	st_s       r2,[sp,8]
400093cc:	40 20 42 07             	add        r2,r0,29
400093d0:	6d 0a 32 00             	brlt.d     r2,0,4000943c <__floatunsidf+0x94>

400093d4:	6c 71                   	mov_s      r3,1
400093d6:	bd 0a 30 00             	breq.d     r2,0,40009490 <__floatunsidf+0xe8>

400093da:	a1 43                   	mov_s      r3,r13
400093dc:	2f 25 42 13             	lsr        r13,r13
400093e0:	44 22 fc 87             	and.f      lp_count,r2,31
400093e4:	e8 20 a2 01             	lpnz       400093f0 <__floatunsidf+0x48>

400093e8:	00 23 c3 00             	add        r3,r3,r3
400093ec:	4a 26 00 70             	nop        
400093f0:	2f 24 8a 00             	not        r4,r2
400093f4:	44 24 fc 87             	and.f      lp_count,r4,31
400093f8:	e8 20 a2 01             	lpnz       40009404 <__floatunsidf+0x5c>

400093fc:	2f 25 42 13             	lsr        r13,r13
40009400:	4a 26 00 70             	nop        
40009404:	44 22 02 88             	and.f      r2,r2,32
40009408:	4e 20 c0 07             	rsub       r0,r0,31
4000940c:	60 44                   	mov_s      r4,r3
4000940e:	42 c0                   	st_s       r0,[sp,8]
40009410:	ca 24 41 03             	mov.z      r4,r13
40009414:	4b 7a                   	tst_s      r2,r2
40009416:	10 1c 00 31             	st         r4,[sp,16]
4000941a:	ca 26 c1 10             	mov.z      r14,r3
4000941e:	43 c6                   	st_s       r14,[sp,12]
40009420:	7e 0c af ff             	bl.d       4000889c <__pack_d>

40009424:	83 40                   	mov_s      r0,sp
40009426:	1c 14 1f 30             	ld         blink,[sp,28]
4000942a:	14 14 0d 32             	ld.a       r13,[sp,20]
4000942e:	01 c6                   	ld_s       r14,[sp,4]
40009430:	e0 7f                   	j_s.d      [blink]
40009432:	a3 c0                   	add_s      sp,sp,12
40009434:	ed 07 ef ff             	b.d        40009420 <__floatunsidf+0x78>

40009438:	00 1c 81 30             	st         2,[sp]
4000943c:	53 7a                   	neg_s      r2,r2
4000943e:	44 22 fc 87             	and.f      lp_count,r2,31
40009442:	e8 20 e2 01             	lpnz       4000944e <__floatunsidf+0xa6>

40009446:	00 23 c3 00             	add        r3,r3,r3
4000944a:	4a 26 00 70             	nop        
4000944e:	44 22 04 88             	and.f      r4,r2,32
40009452:	0b 24 00 81             	tst        r4,r4
40009456:	c2 23 c2 00             	sub.nz     r3,r3,r3
4000945a:	69 6b                   	sub_s      r3,r3,1
4000945c:	ab 7b                   	tst_s      r3,r13
4000945e:	6c 71                   	mov_s      r3,1
40009460:	ca 23 21 00             	mov.z      r3,0
40009464:	44 22 fc 87             	and.f      lp_count,r2,31
40009468:	e8 20 a2 01             	lpnz       40009474 <__floatunsidf+0xcc>

4000946c:	2f 25 42 13             	lsr        r13,r13
40009470:	4a 26 00 70             	nop        
40009474:	0b 24 00 81             	tst        r4,r4
40009478:	4e 20 c0 07             	rsub       r0,r0,31
4000947c:	ca 26 41 13             	mov.z      r14,r13
40009480:	10 1c 01 30             	st         0,[sp,16]
40009484:	c9 45                   	mov_s      r13,r14
40009486:	42 c0                   	st_s       r0,[sp,8]
40009488:	65 7d                   	or_s       r13,r13,r3
4000948a:	99 07 ef ff             	b.d        40009420 <__floatunsidf+0x78>

4000948e:	43 c5                   	st_s       r13,[sp,12]
40009490:	43 c5                   	st_s       r13,[sp,12]
40009492:	91 07 ef ff             	b.d        40009420 <__floatunsidf+0x78>

40009496:	10 1c 01 30             	st         0,[sp,16]
4000949a:	e0 78                   	nop_s      

4000949c <__fixdfsi>:
4000949c:	f1 c0                   	push_s     blink
4000949e:	a7 c1                   	sub_s      sp,sp,28
400094a0:	87 c2                   	add_s      r2,sp,28
400094a2:	e4 1a 08 80             	st.a       r0,[r2,-28]
400094a6:	21 a2                   	st_s       r1,[r2,4]
400094a8:	83 40                   	mov_s      r0,sp
400094aa:	0a 0e af ff             	bl.d       40008ab0 <__unpack_d>

400094ae:	82 c1                   	add_s      r1,sp,8
400094b0:	02 c2                   	ld_s       r2,[sp,8]
400094b2:	91 0a f4 00             	brlo.d     r2,3,40009540 <__fixdfsi+0xa4>

400094b6:	0c 70                   	mov_s      r0,0
400094b8:	13 0a 30 01             	breq.d     r2,4,400094ca <__fixdfsi+0x2e>

400094bc:	04 c2                   	ld_s       r2,[sp,16]
400094be:	85 0a 12 00             	brlt       r2,0,40009540 <__fixdfsi+0xa4>

400094c2:	25 0a f2 07             	brlt.d     r2,31,400094e4 <__fixdfsi+0x48>

400094c6:	18 14 04 30             	ld         r4,[sp,24]
400094ca:	03 c2                   	ld_s       r2,[sp,12]
400094cc:	6f 20 43 00             	ror        r0,1
400094d0:	4b 7a                   	tst_s      r2,r2
400094d2:	ca 20 81 0f ff 7f ff ff 	mov.z      r0,0x7fffffff
400094da:	1c 14 1f 32             	ld.a       blink,[sp,28]
400094de:	e0 7f                   	j_s.d      [blink]
400094e0:	87 74                   	add_s      sp,sp,4
400094e2:	e0 78                   	nop_s      
400094e4:	05 c0                   	ld_s       r0,[sp,20]
400094e6:	80 43                   	mov_s      r3,r4
400094e8:	00 23 c3 00             	add        r3,r3,r3
400094ec:	4e 22 02 0f             	rsub       r2,r2,60
400094f0:	44 22 fc 87             	and.f      lp_count,r2,31
400094f4:	e8 20 a2 01             	lpnz       40009500 <__fixdfsi+0x64>

400094f8:	2f 20 02 00             	lsr        r0,r0
400094fc:	4a 26 00 70             	nop        
40009500:	44 22 fc 87             	and.f      lp_count,r2,31
40009504:	e8 20 a2 01             	lpnz       40009510 <__fixdfsi+0x74>

40009508:	2f 24 02 01             	lsr        r4,r4
4000950c:	4a 26 00 70             	nop        
40009510:	2f 25 8a 00             	not        r5,r2
40009514:	44 25 fc 87             	and.f      lp_count,r5,31
40009518:	e8 20 a2 01             	lpnz       40009524 <__fixdfsi+0x88>

4000951c:	00 23 c3 00             	add        r3,r3,r3
40009520:	4a 26 00 70             	nop        
40009524:	e5 ba                   	btst_s     r2,5
40009526:	03 c2                   	ld_s       r2,[sp,12]
40009528:	65 78                   	or_s       r0,r0,r3
4000952a:	ca 24 01 00             	mov.z      r4,r0
4000952e:	4b 7a                   	tst_s      r2,r2
40009530:	80 40                   	mov_s      r0,r4
40009532:	ce 20 22 00             	rsub.nz    r0,r0,0
40009536:	1c 14 1f 32             	ld.a       blink,[sp,28]
4000953a:	e0 7f                   	j_s.d      [blink]
4000953c:	87 74                   	add_s      sp,sp,4
4000953e:	e0 78                   	nop_s      
40009540:	1c 14 1f 32             	ld.a       blink,[sp,28]
40009544:	e0 7f                   	j_s.d      [blink]
40009546:	87 74                   	add_s      sp,sp,4

40009548 <__fixunsdfsi>:
40009548:	f1 c0                   	push_s     blink
4000954a:	a7 c1                   	sub_s      sp,sp,28
4000954c:	87 c2                   	add_s      r2,sp,28
4000954e:	e4 1a 08 80             	st.a       r0,[r2,-28]
40009552:	21 a2                   	st_s       r1,[r2,4]
40009554:	83 40                   	mov_s      r0,sp
40009556:	5e 0d af ff             	bl.d       40008ab0 <__unpack_d>

4000955a:	82 c1                   	add_s      r1,sp,8
4000955c:	02 c2                   	ld_s       r2,[sp,8]
4000955e:	29 0a f4 00             	brlo.d     r2,3,40009584 <__fixunsdfsi+0x3c>

40009562:	03 c3                   	ld_s       r3,[sp,12]
40009564:	23 0b 31 00             	brne.d     r3,0,40009586 <__fixunsdfsi+0x3e>

40009568:	0c 70                   	mov_s      r0,0
4000956a:	13 0a 10 01             	breq       r2,4,4000957a <__fixunsdfsi+0x32>

4000956e:	04 c2                   	ld_s       r2,[sp,16]
40009570:	17 0a 12 00             	brlt       r2,0,40009586 <__fixunsdfsi+0x3e>

40009574:	1d 0a 32 08             	brlt.d     r2,32,40009590 <__fixunsdfsi+0x48>

40009578:	05 c3                   	ld_s       r3,[sp,20]
4000957a:	0c 77                   	mov_s      r0,-1
4000957c:	1c 14 1f 32             	ld.a       blink,[sp,28]
40009580:	e0 7f                   	j_s.d      [blink]
40009582:	87 74                   	add_s      sp,sp,4
40009584:	0c 70                   	mov_s      r0,0
40009586:	1c 14 1f 32             	ld.a       blink,[sp,28]
4000958a:	e0 7f                   	j_s.d      [blink]
4000958c:	87 74                   	add_s      sp,sp,4
4000958e:	e0 78                   	nop_s      
40009590:	06 c0                   	ld_s       r0,[sp,24]
40009592:	00 44                   	mov_s      r4,r0
40009594:	00 24 04 01             	add        r4,r4,r4
40009598:	4e 22 02 0f             	rsub       r2,r2,60
4000959c:	44 22 fc 87             	and.f      lp_count,r2,31
400095a0:	e8 20 a2 01             	lpnz       400095ac <__fixunsdfsi+0x64>

400095a4:	2f 23 c2 00             	lsr        r3,r3
400095a8:	4a 26 00 70             	nop        
400095ac:	44 22 fc 87             	and.f      lp_count,r2,31
400095b0:	e8 20 a2 01             	lpnz       400095bc <__fixunsdfsi+0x74>

400095b4:	2f 20 02 00             	lsr        r0,r0
400095b8:	4a 26 00 70             	nop        
400095bc:	2f 25 8a 00             	not        r5,r2
400095c0:	44 25 fc 87             	and.f      lp_count,r5,31
400095c4:	e8 20 a2 01             	lpnz       400095d0 <__fixunsdfsi+0x88>

400095c8:	00 24 04 01             	add        r4,r4,r4
400095cc:	4a 26 00 70             	nop        
400095d0:	e5 ba                   	btst_s     r2,5
400095d2:	05 23 03 01             	or         r3,r3,r4
400095d6:	b3 07 ef ff             	b.d        40009586 <__fixunsdfsi+0x3e>

400095da:	ca 20 c1 00             	mov.z      r0,r3
400095de:	e0 78                   	nop_s      

400095e0 <__negdf2>:
400095e0:	f1 c0                   	push_s     blink
400095e2:	a7 c1                   	sub_s      sp,sp,28
400095e4:	87 c2                   	add_s      r2,sp,28
400095e6:	e4 1a 08 80             	st.a       r0,[r2,-28]
400095ea:	21 a2                   	st_s       r1,[r2,4]
400095ec:	83 40                   	mov_s      r0,sp
400095ee:	c6 0c af ff             	bl.d       40008ab0 <__unpack_d>

400095f2:	82 c1                   	add_s      r1,sp,8
400095f4:	03 c2                   	ld_s       r2,[sp,12]
400095f6:	82 c0                   	add_s      r0,sp,8
400095f8:	4b 7a                   	tst_s      r2,r2
400095fa:	4c 71                   	mov_s      r2,1
400095fc:	c0 7a                   	sub_s.ne   r2,r2,r2
400095fe:	a2 0a af ff             	bl.d       4000889c <__pack_d>

40009602:	43 c2                   	st_s       r2,[sp,12]
40009604:	1c 14 1f 32             	ld.a       blink,[sp,28]
40009608:	e0 7f                   	j_s.d      [blink]
4000960a:	87 74                   	add_s      sp,sp,4

4000960c <__make_dp>:
4000960c:	f1 c0                   	push_s     blink
4000960e:	a5 c1                   	sub_s      sp,sp,20
40009610:	40 c0                   	st_s       r0,[sp,0]
40009612:	41 c1                   	st_s       r1,[sp,4]
40009614:	42 c2                   	st_s       r2,[sp,8]
40009616:	43 c3                   	st_s       r3,[sp,12]
40009618:	10 1c 00 31             	st         r4,[sp,16]
4000961c:	82 0a af ff             	bl.d       4000889c <__pack_d>

40009620:	83 40                   	mov_s      r0,sp
40009622:	14 14 1f 32             	ld.a       blink,[sp,20]
40009626:	e0 7f                   	j_s.d      [blink]
40009628:	87 74                   	add_s      sp,sp,4
4000962a:	e0 78                   	nop_s      

4000962c <__truncdfsf2>:
4000962c:	f1 c0                   	push_s     blink
4000962e:	a7 c1                   	sub_s      sp,sp,28
40009630:	87 c2                   	add_s      r2,sp,28
40009632:	e4 1a 08 80             	st.a       r0,[r2,-28]
40009636:	21 a2                   	st_s       r1,[r2,4]
40009638:	83 40                   	mov_s      r0,sp
4000963a:	7a 0c af ff             	bl.d       40008ab0 <__unpack_d>

4000963e:	82 c1                   	add_s      r1,sp,8
40009640:	06 c2                   	ld_s       r2,[sp,24]
40009642:	14 14 04 30             	ld         r4,[sp,20]
40009646:	00 22 82 00             	add        r2,r2,r2
4000964a:	00 22 82 00             	add        r2,r2,r2
4000964e:	80 43                   	mov_s      r3,r4
40009650:	02 c0                   	ld_s       r0,[sp,8]
40009652:	00 23 c5 80             	add.f      r5,r3,r3
40009656:	6f 23 0b 00             	rlc        r3,0
4000965a:	00 25 7e 81             	add.f      0,r5,r5
4000965e:	2f 23 cb 00             	rlc        r3,r3
40009662:	03 c1                   	ld_s       r1,[sp,12]
40009664:	45 7b                   	or_s       r3,r3,r2
40009666:	04 c2                   	ld_s       r2,[sp,16]
40009668:	53 24 44 07             	bmsk       r4,r4,29
4000966c:	0b 24 00 81             	tst        r4,r4
40009670:	ee 0b 60 00             	bl.d       4000a25c <__make_fp>

40009674:	cf 23 22 00             	bset.nz    r3,r3,0
40009678:	1c 14 1f 32             	ld.a       blink,[sp,28]
4000967c:	e0 7f                   	j_s.d      [blink]
4000967e:	87 74                   	add_s      sp,sp,4

40009680 <__umulsidi3>:
40009680:	6f 24 00 90             	asl.f      r12,0
40009684:	4c 70                   	mov_s      r2,0
40009686:	21 08 3f 00             	bbit1.d    r0,0,400096a4 <__umulsidi3+0x24>

4000968a:	6c 70                   	mov_s      r3,0
4000968c:	2f 24 0b 13             	rlc        r12,r12
40009690:	21 08 10 00             	breq       r0,0,400096b0 <__umulsidi3+0x30>

40009694:	2f 21 40 80             	asl.f      r1,r1
40009698:	f5 08 7e 80             	bbit0.d    r0,1,4000968c <__umulsidi3+0xc>

4000969c:	2f 20 02 00             	lsr        r0,r0
400096a0:	2f 24 0b 13             	rlc        r12,r12
400096a4:	00 23 43 80             	add.f      r3,r3,r1
400096a8:	ed 08 31 80             	brne.d     r0,0,40009694 <__umulsidi3+0x14>

400096ac:	01 22 02 03             	adc        r2,r2,r12
400096b0:	60 40                   	mov_s      r0,r3
400096b2:	e0 7f                   	j_s.d      [blink]
400096b4:	0a 21 80 00             	mov        r1,r2

400096b8 <__clzsi2>:
400096b8:	4a 24 80 72             	mov        lp_count,10
400096bc:	4a 21 00 00             	mov        r1,0
400096c0:	4f 21 42 07             	bset       r2,r1,29
400096c4:	a8 20 80 01             	lp         400096d0 <__clzsi2+0x18>

400096c8:	09 08 85 00             	brhs.t     r0,r2,400096d0 <__clzsi2+0x18>

400096cc:	16 21 00 00             	add3       r0,r1,r0
400096d0:	2f 26 00 f0             	asl.f      0,r0
400096d4:	18 24 00 7f             	sub2       r0,lp_count,lp_count
400096d8:	c2 20 65 80             	sub.c.f    r0,r0,1
400096dc:	40 20 c0 07             	add        r0,r0,31
400096e0:	e0 7f                   	j_s.d      [blink]
400096e2:	c0 20 63 00             	add.p      r0,r0,1
400096e6:	e0 78                   	nop_s      

400096e8 <__lshrdi3>:
400096e8:	47 0a 30 00             	breq.d     r2,0,4000972e <__lshrdi3+0x46>

400096ec:	4e 22 03 08             	rsub       r3,r2,32
400096f0:	41 0b 72 00             	brlt.d     r3,1,40009730 <__lshrdi3+0x48>

400096f4:	20 44                   	mov_s      r4,r1
400096f6:	44 22 fc 87             	and.f      lp_count,r2,31
400096fa:	e8 20 e2 01             	lpnz       40009706 <__lshrdi3+0x1e>

400096fe:	2f 21 42 00             	lsr        r1,r1
40009702:	4a 26 00 70             	nop        
40009706:	44 22 fc 87             	and.f      lp_count,r2,31
4000970a:	e8 20 e2 01             	lpnz       40009716 <__lshrdi3+0x2e>

4000970e:	2f 20 02 00             	lsr        r0,r0
40009712:	4a 26 00 70             	nop        
40009716:	44 23 fc 87             	and.f      lp_count,r3,31
4000971a:	e8 20 e2 01             	lpnz       40009726 <__lshrdi3+0x3e>

4000971e:	00 24 04 01             	add        r4,r4,r4
40009722:	4a 26 00 70             	nop        
40009726:	20 42                   	mov_s      r2,r1
40009728:	80 43                   	mov_s      r3,r4
4000972a:	40 41                   	mov_s      r1,r2
4000972c:	65 78                   	or_s       r0,r0,r3
4000972e:	e0 7e                   	j_s        [blink]
40009730:	20 40                   	mov_s      r0,r1
40009732:	73 7b                   	neg_s      r3,r3
40009734:	4c 70                   	mov_s      r2,0
40009736:	44 23 fc 87             	and.f      lp_count,r3,31
4000973a:	e8 20 e2 01             	lpnz       40009746 <__lshrdi3+0x5e>

4000973e:	2f 20 02 00             	lsr        r0,r0
40009742:	4a 26 00 70             	nop        
40009746:	eb 07 ef ff             	b.d        4000972e <__lshrdi3+0x46>

4000974a:	40 41                   	mov_s      r1,r2

4000974c <__ashldi3>:
4000974c:	45 0a 30 00             	breq.d     r2,0,40009790 <__ashldi3+0x44>

40009750:	4e 22 03 08             	rsub       r3,r2,32
40009754:	41 0b 72 00             	brlt.d     r3,1,40009794 <__ashldi3+0x48>

40009758:	00 44                   	mov_s      r4,r0
4000975a:	00 45                   	mov_s      r5,r0
4000975c:	44 22 fc 87             	and.f      lp_count,r2,31
40009760:	e8 20 a2 01             	lpnz       4000976c <__ashldi3+0x20>

40009764:	00 21 41 00             	add        r1,r1,r1
40009768:	4a 26 00 70             	nop        
4000976c:	44 23 fc 87             	and.f      lp_count,r3,31
40009770:	e8 20 a2 01             	lpnz       4000977c <__ashldi3+0x30>

40009774:	2f 25 42 01             	lsr        r5,r5
40009778:	4a 26 00 70             	nop        
4000977c:	44 22 fc 87             	and.f      lp_count,r2,31
40009780:	e8 20 a2 01             	lpnz       4000978c <__ashldi3+0x40>

40009784:	00 20 00 00             	add        r0,r0,r0
40009788:	4a 26 00 70             	nop        
4000978c:	a0 43                   	mov_s      r3,r5
4000978e:	65 79                   	or_s       r1,r1,r3
40009790:	e0 7e                   	j_s        [blink]
40009792:	e0 78                   	nop_s      
40009794:	73 7b                   	neg_s      r3,r3
40009796:	0c 70                   	mov_s      r0,0
40009798:	80 41                   	mov_s      r1,r4
4000979a:	44 23 fc 87             	and.f      lp_count,r3,31
4000979e:	e8 20 e2 01             	lpnz       400097aa <__ashldi3+0x5e>

400097a2:	00 21 41 00             	add        r1,r1,r1
400097a6:	4a 26 00 70             	nop        
400097aa:	e0 7e                   	j_s        [blink]

400097ac <_fpadd_parts>:
400097ac:	00 10 05 00             	ld         r5,[r0,0]
400097b0:	b4 71                   	cmp_s      r5,1
400097b2:	3c 01 2e 00             	bls.d      400098ec <_fpadd_parts+0x140>

400097b6:	00 44                   	mov_s      r4,r0
400097b8:	60 81                   	ld_s       r3,[r1,0]
400097ba:	74 71                   	cmp_s      r3,1
400097bc:	58 01 2e 00             	bls.d      40009914 <_fpadd_parts+0x168>

400097c0:	52 25 be 80             	bxor.f     0,r5,2
400097c4:	a8 01 21 00             	bz.d       4000996c <_fpadd_parts+0x1c0>

400097c8:	74 74                   	cmp_s      r3,4
400097ca:	4c 01 21 00             	bz.d       40009914 <_fpadd_parts+0x168>

400097ce:	74 72                   	cmp_s      r3,2
400097d0:	18 01 21 00             	bz.d       400098e8 <_fpadd_parts+0x13c>

400097d4:	52 25 7e 80             	bxor.f     0,r5,1
400097d8:	9e f2                   	beq_s      40009914 <_fpadd_parts+0x168>

400097da:	08 10 05 00             	ld         r5,[r0,8]
400097de:	08 11 07 00             	ld         r7,[r1,8]
400097e2:	0c 10 09 00             	ld         r9,[r0,12]
400097e6:	02 25 c8 01             	sub        r8,r5,r7
400097ea:	2f 26 09 02             	abs        r6,r8
400097ee:	81 0e 32 08             	brlt.d     r6,32,4000986c <_fpadd_parts+0xc0>

400097f2:	63 81                   	ld_s       r3,[r1,12]
400097f4:	0c 25 c0 81             	cmp        r5,r7
400097f8:	ca 23 29 00             	mov.gt     r3,0
400097fc:	ca 25 cc 01             	mov.le     r5,r7
40009800:	ca 21 2c 10             	mov.le     r9,0
40009804:	04 14 04 00             	ld         r4,[r4,4]
40009808:	04 11 06 00             	ld         r6,[r1,4]
4000980c:	a5 0c 80 01             	breq       r4,r6,400098b0 <_fpadd_parts+0x104>

40009810:	0b 24 00 81             	tst        r4,r4
40009814:	c2 23 42 02             	sub.nz     r3,r3,r9
40009818:	ce 23 41 02             	rsub.z     r3,r3,r9
4000981c:	74 70                   	cmp_s      r3,0
4000981e:	fc 00 0b 00             	blt        40009918 <_fpadd_parts+0x16c>

40009822:	04 1a 01 00             	st         0,[r2,4]
40009826:	08 1a 40 01             	st         r5,[r2,8]
4000982a:	63 a2                   	st_s       r3,[r2,12]
4000982c:	42 23 44 00             	sub        r4,r3,1
40009830:	2b 0e 04 71 ff 3f fe ff 	brlo       0x3ffffffe,r4,4000985a <_fpadd_parts+0xae>

40009838:	08 12 04 00             	ld         r4,[r2,8]
4000983c:	42 24 44 00             	sub        r4,r4,1
40009840:	00 23 c3 00             	add        r3,r3,r3
40009844:	80 46                   	mov_s      r6,r4
40009846:	42 23 45 00             	sub        r5,r3,1
4000984a:	84 77                   	add_s      r4,r4,-1
4000984c:	f5 0e 45 f1 ff 3f fe ff 	brhs.nt    0x3ffffffe,r5,40009840 <_fpadd_parts+0x94>

40009854:	63 a2                   	st_s       r3,[r2,12]
40009856:	08 1a 80 01             	st         r6,[r2,8]
4000985a:	00 1a c1 00             	st         3,[r2]
4000985e:	74 70                   	cmp_s      r3,0
40009860:	6a 00 2b 00             	blt.d      400098ca <_fpadd_parts+0x11e>

40009864:	ca 20 8a 00             	mov.ge     r0,r2
40009868:	e0 7e                   	j_s        [blink]
4000986a:	e0 78                   	nop_s      
4000986c:	bd 08 52 10             	brlt       r8,1,40009928 <_fpadd_parts+0x17c>

40009870:	68 40                   	mov_s      r8,r3
40009872:	ec 71                   	mov_s      r7,1
40009874:	44 26 fc 87             	and.f      lp_count,r6,31
40009878:	e8 20 a2 01             	lpnz       40009884 <_fpadd_parts+0xd8>

4000987c:	2f 20 02 12             	lsr        r8,r8
40009880:	4a 26 00 70             	nop        
40009884:	44 26 fc 87             	and.f      lp_count,r6,31
40009888:	e8 20 a2 01             	lpnz       40009894 <_fpadd_parts+0xe8>

4000988c:	00 27 c7 01             	add        r7,r7,r7
40009890:	4a 26 00 70             	nop        
40009894:	04 14 04 00             	ld         r4,[r4,4]
40009898:	04 11 06 00             	ld         r6,[r1,4]
4000989c:	e4 77                   	add_s      r7,r7,-1
4000989e:	0b 27 c0 80             	tst        r7,r3
400098a2:	6c 71                   	mov_s      r3,1
400098a4:	ca 23 21 00             	mov.z      r3,0
400098a8:	69 0c a1 81             	brne.d     r4,r6,40009810 <_fpadd_parts+0x64>

400098ac:	05 23 03 02             	or         r3,r3,r8
400098b0:	21 73                   	add_s      r3,r3,r9
400098b2:	04 1a 00 01             	st         r4,[r2,4]
400098b6:	08 1a 40 01             	st         r5,[r2,8]
400098ba:	63 a2                   	st_s       r3,[r2,12]
400098bc:	00 1a c1 00             	st         3,[r2]
400098c0:	74 70                   	cmp_s      r3,0
400098c2:	a8 07 ea ff             	bge.d      40009868 <_fpadd_parts+0xbc>

400098c6:	ca 20 8a 00             	mov.ge     r0,r2
400098ca:	08 12 04 00             	ld         r4,[r2,8]
400098ce:	44 23 45 00             	and        r5,r3,1
400098d2:	84 71                   	add_s      r4,r4,1
400098d4:	2f 23 c2 00             	lsr        r3,r3
400098d8:	40 40                   	mov_s      r0,r2
400098da:	05 23 43 01             	or         r3,r3,r5
400098de:	08 1a 00 01             	st         r4,[r2,8]
400098e2:	63 a2                   	st_s       r3,[r2,12]
400098e4:	e0 7e                   	j_s        [blink]
400098e6:	e0 78                   	nop_s      
400098e8:	09 0d 90 00             	breq       r5,2,400098f0 <_fpadd_parts+0x144>

400098ec:	80 40                   	mov_s      r0,r4
400098ee:	e0 7e                   	j_s        [blink]
400098f0:	61 80                   	ld_s       r3,[r0,4]
400098f2:	00 1a 81 00             	st         2,[r2]
400098f6:	08 10 05 00             	ld         r5,[r0,8]
400098fa:	61 a2                   	st_s       r3,[r2,4]
400098fc:	63 80                   	ld_s       r3,[r0,12]
400098fe:	08 1a 40 01             	st         r5,[r2,8]
40009902:	63 a2                   	st_s       r3,[r2,12]
40009904:	61 80                   	ld_s       r3,[r0,4]
40009906:	04 11 04 00             	ld         r4,[r1,4]
4000990a:	40 40                   	mov_s      r0,r2
4000990c:	04 23 03 01             	and        r3,r3,r4
40009910:	61 a2                   	st_s       r3,[r2,4]
40009912:	e0 7e                   	j_s        [blink]
40009914:	20 40                   	mov_s      r0,r1
40009916:	e0 7e                   	j_s        [blink]
40009918:	73 7b                   	neg_s      r3,r3
4000991a:	04 1a 41 00             	st         1,[r2,4]
4000991e:	08 1a 40 01             	st         r5,[r2,8]
40009922:	0d 07 ef ff             	b.d        4000982c <_fpadd_parts+0x80>

40009926:	63 a2                   	st_s       r3,[r2,12]
40009928:	0b 20 00 92             	tst        r8,r8
4000992c:	6c f3                   	beq_s      40009804 <_fpadd_parts+0x58>

4000992e:	29 40                   	mov_s      r8,r9
40009930:	ec 71                   	mov_s      r7,1
40009932:	44 26 fc 87             	and.f      lp_count,r6,31
40009936:	e8 20 e2 01             	lpnz       40009942 <_fpadd_parts+0x196>

4000993a:	2f 20 02 12             	lsr        r8,r8
4000993e:	4a 26 00 70             	nop        
40009942:	44 26 fc 87             	and.f      lp_count,r6,31
40009946:	e8 20 e2 01             	lpnz       40009952 <_fpadd_parts+0x1a6>

4000994a:	00 27 c7 01             	add        r7,r7,r7
4000994e:	4a 26 00 70             	nop        
40009952:	e4 77                   	add_s      r7,r7,-1
40009954:	0b 27 40 82             	tst        r7,r9
40009958:	2d 71                   	mov_s      r9,1
4000995a:	ca 21 21 10             	mov.z      r9,0
4000995e:	00 25 85 01             	add        r5,r5,r6
40009962:	a5 06 ef ff             	b.d        40009804 <_fpadd_parts+0x58>

40009966:	05 21 09 12             	or         r9,r9,r8
4000996a:	e0 78                   	nop_s      
4000996c:	81 0b 11 81             	brne       r3,4,400098ec <_fpadd_parts+0x140>

40009970:	41 80                   	ld_s       r2,[r0,4]
40009972:	61 81                   	ld_s       r3,[r1,4]
40009974:	c3 40 00 40 b0 d8       	mov_s      r0,0x4000d8b0
4000997a:	70 72                   	cmp_s      r2,r3
4000997c:	ca 20 01 01             	mov.z      r0,r4
40009980:	e0 7e                   	j_s        [blink]
40009982:	e0 78                   	nop_s      

40009984 <__pack_f>:
40009984:	60 80                   	ld_s       r3,[r0,0]
40009986:	43 80                   	ld_s       r2,[r0,12]
40009988:	ad 0b b4 00             	brlo.d     r3,2,40009a34 <__pack_f+0xb0>

4000998c:	04 10 06 00             	ld         r6,[r0,4]
40009990:	9d 0b 30 01             	breq.d     r3,4,40009a2c <__pack_f+0xa8>

40009994:	8a 24 c3 0f             	mov        r4,255
40009998:	53 0b b0 00             	breq.d     r3,2,400099ea <__pack_f+0x66>

4000999c:	8c 70                   	mov_s      r4,0
4000999e:	26 ea                   	breq_s     r2,0,400099e8 <__pack_f+0x64>

400099a0:	08 10 04 00             	ld         r4,[r0,8]
400099a4:	a1 0c 82 0f ff ff 82 ff 	brlt       r4,-126,40009a44 <__pack_f+0xc0>

400099ac:	7d 0e 02 71 00 00 7f 00 	brlt       127,r4,40009a28 <__pack_f+0xa4>

400099b4:	53 22 83 01             	bmsk       r3,r2,6
400099b8:	c0 e3                   	cmp_s      r3,64
400099ba:	5c 00 21 00             	bz.d       40009a14 <__pack_f+0x90>

400099be:	c0 22 e2 0f             	add.nz     r2,r2,63
400099c2:	5d 0a 12 00             	brlt       r2,0,40009a1c <__pack_f+0x98>

400099c6:	80 24 c1 0f             	add        r4,r4,127
400099ca:	40 43                   	mov_s      r3,r2
400099cc:	53 24 c4 01             	bmsk       r4,r4,7
400099d0:	4a 24 c0 f1             	mov.f      lp_count,7
400099d4:	e8 20 a2 01             	lpnz       400099e0 <__pack_f+0x5c>

400099d8:	2f 23 c2 00             	lsr        r3,r3
400099dc:	4a 26 00 70             	nop        
400099e0:	0d 00 20 00             	b.d        400099ec <__pack_f+0x68>

400099e4:	d6 bb                   	bmsk_s     r3,r3,22
400099e6:	e0 78                   	nop_s      
400099e8:	8c 70                   	mov_s      r4,0
400099ea:	6c 70                   	mov_s      r3,0
400099ec:	80 45                   	mov_s      r5,r4
400099ee:	53 23 80 05             	bmsk       r0,r3,22
400099f2:	4a 24 c0 f5             	mov.f      lp_count,23
400099f6:	e8 20 e2 01             	lpnz       40009a02 <__pack_f+0x7e>

400099fa:	00 25 45 01             	add        r5,r5,r5
400099fe:	4a 26 00 70             	nop        
40009a02:	44 26 46 00             	and        r6,r6,1
40009a06:	2f 26 83 01             	ror        r6,r6
40009a0a:	05 20 40 01             	or         r0,r0,r5
40009a0e:	05 20 80 01             	or         r0,r0,r6
40009a12:	e0 7e                   	j_s        [blink]
40009a14:	af 0a d6 81             	bbit0.nt   r2,7,400099c2 <__pack_f+0x3e>

40009a18:	40 e2                   	add_s      r2,r2,64
40009a1a:	d5 f1                   	b_s        400099c2 <__pack_f+0x3e>

40009a1c:	2f 22 82 00             	lsr        r2,r2
40009a20:	ab 07 ef ff             	b.d        400099ca <__pack_f+0x46>

40009a24:	80 24 02 00             	add        r4,r4,128
40009a28:	8a 24 c3 0f             	mov        r4,255
40009a2c:	c1 07 ef ff             	b.d        400099ec <__pack_f+0x68>

40009a30:	6c 70                   	mov_s      r3,0
40009a32:	e0 78                   	nop_s      
40009a34:	4f 22 03 05             	bset       r3,r2,20
40009a38:	8a 24 c3 0f             	mov        r4,255
40009a3c:	b1 07 ef ff             	b.d        400099ec <__pack_f+0x68>

40009a40:	d6 bb                   	bmsk_s     r3,r3,22
40009a42:	e0 78                   	nop_s      
40009a44:	8e 24 be 00             	rsub       r4,r4,-126
40009a48:	6d 0c b3 06             	brge.d     r4,26,40009ab4 <__pack_f+0x130>

40009a4c:	40 45                   	mov_s      r5,r2
40009a4e:	6c 71                   	mov_s      r3,1
40009a50:	44 24 fc 87             	and.f      lp_count,r4,31
40009a54:	e8 20 a2 01             	lpnz       40009a60 <__pack_f+0xdc>

40009a58:	2f 25 42 01             	lsr        r5,r5
40009a5c:	4a 26 00 70             	nop        
40009a60:	44 24 fc 87             	and.f      lp_count,r4,31
40009a64:	e8 20 a2 01             	lpnz       40009a70 <__pack_f+0xec>

40009a68:	00 23 c3 00             	add        r3,r3,r3
40009a6c:	4a 26 00 70             	nop        
40009a70:	69 6b                   	sub_s      r3,r3,1
40009a72:	4b 7b                   	tst_s      r3,r2
40009a74:	4c 71                   	mov_s      r2,1
40009a76:	ca 22 21 00             	mov.z      r2,0
40009a7a:	05 22 42 01             	or         r2,r2,r5
40009a7e:	53 22 83 01             	bmsk       r3,r2,6
40009a82:	37 0b 81 0f 00 00 40 00 	brne       r3,64,40009ab6 <__pack_f+0x132>

40009a8a:	09 0a de 01             	bbit0      r2,7,40009a90 <__pack_f+0x10c>

40009a8e:	40 e2                   	add_s      r2,r2,64
40009a90:	40 43                   	mov_s      r3,r2
40009a92:	8c 71                   	mov_s      r4,1
40009a94:	4a 24 c0 f1             	mov.f      lp_count,7
40009a98:	e8 20 a2 01             	lpnz       40009aa4 <__pack_f+0x120>

40009a9c:	2f 23 c2 00             	lsr        r3,r3
40009aa0:	4a 26 00 70             	nop        
40009aa4:	d3 72 ff 3f ff ff       	cmp_s      r2,0x3fffffff
40009aaa:	d6 bb                   	bmsk_s     r3,r3,22
40009aac:	41 07 ef ff             	b.d        400099ec <__pack_f+0x68>

40009ab0:	ca 24 2e 00             	mov.ls     r4,0
40009ab4:	4c 70                   	mov_s      r2,0
40009ab6:	dd 07 ef ff             	b.d        40009a90 <__pack_f+0x10c>

40009aba:	3f e2                   	add_s      r2,r2,63

40009abc <__unpack_f>:
40009abc:	02 10 02 01             	ldh        r2,[r0,2]
40009ac0:	63 88                   	ldb_s      r3,[r0,3]
40009ac2:	00 10 04 00             	ld         r4,[r0,0]
40009ac6:	4a 24 c0 f1             	mov.f      lp_count,7
40009aca:	e8 20 e2 01             	lpnz       40009ad6 <__unpack_f+0x1a>

40009ace:	2f 22 82 00             	lsr        r2,r2
40009ad2:	4a 26 00 70             	nop        
40009ad6:	4a 24 c0 f1             	mov.f      lp_count,7
40009ada:	e8 20 e2 01             	lpnz       40009ae6 <__unpack_f+0x2a>

40009ade:	2f 23 c2 00             	lsr        r3,r3
40009ae2:	4a 26 00 70             	nop        
40009ae6:	61 a1                   	st_s       r3,[r1,4]
40009ae8:	4f 7b                   	exth_s     r3,r2
40009aea:	3d 0b 31 00             	brne.d     r3,0,40009b24 <__unpack_f+0x68>

40009aee:	53 24 82 05             	bmsk       r2,r4,22
40009af2:	2e ea                   	breq_s     r2,0,40009b4c <__unpack_f+0x90>

40009af4:	00 19 c1 00             	st         3,[r1]
40009af8:	8a 23 7e 00             	mov        r3,-127
40009afc:	4a 24 00 00             	mov        r4,0
40009b00:	16 24 82 00             	add3       r2,r4,r2
40009b04:	16 24 82 00             	add3       r2,r4,r2
40009b08:	00 22 82 00             	add        r2,r2,r2
40009b0c:	00 22 82 00             	add        r2,r2,r2
40009b10:	60 44                   	mov_s      r4,r3
40009b12:	69 6b                   	sub_s      r3,r3,1
40009b14:	f9 0e 85 f0 ff 3f ff ff 	brhs.nt    0x3fffffff,r2,40009b0c <__unpack_f+0x50>

40009b1c:	08 19 00 01             	st         r4,[r1,8]
40009b20:	43 a1                   	st_s       r2,[r1,12]
40009b22:	e0 7e                   	j_s        [blink]
40009b24:	31 0b 80 0f 00 00 ff 00 	breq       r3,255,40009b54 <__unpack_f+0x98>

40009b2c:	82 23 c1 0f             	sub        r3,r3,127
40009b30:	00 19 c1 00             	st         3,[r1]
40009b34:	62 a1                   	st_s       r3,[r1,8]
40009b36:	4a 23 00 00             	mov        r3,0
40009b3a:	16 23 82 00             	add3       r2,r3,r2
40009b3e:	16 23 82 00             	add3       r2,r3,r2
40009b42:	00 22 82 00             	add        r2,r2,r2
40009b46:	9e ba                   	bset_s     r2,r2,30
40009b48:	43 a1                   	st_s       r2,[r1,12]
40009b4a:	e0 7e                   	j_s        [blink]
40009b4c:	00 19 81 00             	st         2,[r1]
40009b50:	e0 7e                   	j_s        [blink]
40009b52:	e0 78                   	nop_s      
40009b54:	0a ea                   	breq_s     r2,0,40009b68 <__unpack_f+0xac>

40009b56:	43 a1                   	st_s       r2,[r1,12]
40009b58:	4c 71                   	mov_s      r2,1
40009b5a:	51 24 00 85             	btst       r4,20
40009b5e:	ca 22 21 00             	mov.z      r2,0
40009b62:	40 a1                   	st_s       r2,[r1,0]
40009b64:	e0 7e                   	j_s        [blink]
40009b66:	e0 78                   	nop_s      
40009b68:	00 19 01 01             	st         4,[r1]
40009b6c:	e0 7e                   	j_s        [blink]
40009b6e:	e0 78                   	nop_s      

40009b70 <__addsf3>:
40009b70:	f1 c0                   	push_s     blink
40009b72:	ae c1                   	sub_s      sp,sp,56
40009b74:	00 1c 00 30             	st         r0,[sp]
40009b78:	04 1c 40 30             	st         r1,[sp,4]
40009b7c:	83 40                   	mov_s      r0,sp
40009b7e:	42 0f ef ff             	bl.d       40009abc <__unpack_f>

40009b82:	82 c1                   	add_s      r1,sp,8
40009b84:	81 c0                   	add_s      r0,sp,4
40009b86:	3a 0f ef ff             	bl.d       40009abc <__unpack_f>

40009b8a:	86 c1                   	add_s      r1,sp,24
40009b8c:	86 c1                   	add_s      r1,sp,24
40009b8e:	40 24 02 3a             	add        r2,sp,40
40009b92:	1e 0c ef ff             	bl.d       400097ac <_fpadd_parts>

40009b96:	82 c0                   	add_s      r0,sp,8
40009b98:	ee 0d cf ff             	bl         40009984 <__pack_f>

40009b9c:	38 14 1f 32             	ld.a       blink,[sp,56]
40009ba0:	e0 7f                   	j_s.d      [blink]
40009ba2:	87 74                   	add_s      sp,sp,4

40009ba4 <__subsf3>:
40009ba4:	f1 c0                   	push_s     blink
40009ba6:	ae c1                   	sub_s      sp,sp,56
40009ba8:	00 1c 00 30             	st         r0,[sp]
40009bac:	04 1c 40 30             	st         r1,[sp,4]
40009bb0:	83 40                   	mov_s      r0,sp
40009bb2:	0e 0f ef ff             	bl.d       40009abc <__unpack_f>

40009bb6:	82 c1                   	add_s      r1,sp,8
40009bb8:	81 c0                   	add_s      r0,sp,4
40009bba:	06 0f ef ff             	bl.d       40009abc <__unpack_f>

40009bbe:	86 c1                   	add_s      r1,sp,24
40009bc0:	07 c3                   	ld_s       r3,[sp,28]
40009bc2:	86 c1                   	add_s      r1,sp,24
40009bc4:	47 23 43 00             	xor        r3,r3,1
40009bc8:	8a c2                   	add_s      r2,sp,40
40009bca:	1c 1c c0 30             	st         r3,[sp,28]
40009bce:	e2 0b ef ff             	bl.d       400097ac <_fpadd_parts>

40009bd2:	82 c0                   	add_s      r0,sp,8
40009bd4:	b2 0d cf ff             	bl         40009984 <__pack_f>

40009bd8:	38 14 1f 32             	ld.a       blink,[sp,56]
40009bdc:	e0 7f                   	j_s.d      [blink]
40009bde:	87 74                   	add_s      sp,sp,4

40009be0 <__mulsf3>:
40009be0:	f1 c0                   	push_s     blink
40009be2:	ae c1                   	sub_s      sp,sp,56
40009be4:	00 1c 00 30             	st         r0,[sp]
40009be8:	04 1c 40 30             	st         r1,[sp,4]
40009bec:	83 40                   	mov_s      r0,sp
40009bee:	d2 0e ef ff             	bl.d       40009abc <__unpack_f>

40009bf2:	82 c1                   	add_s      r1,sp,8
40009bf4:	81 c0                   	add_s      r0,sp,4
40009bf6:	ca 0e ef ff             	bl.d       40009abc <__unpack_f>

40009bfa:	86 c1                   	add_s      r1,sp,24
40009bfc:	02 c2                   	ld_s       r2,[sp,8]
40009bfe:	25 0a b5 00             	brhs.t.d   r2,2,40009c20 <__mulsf3+0x40>

40009c02:	06 c3                   	ld_s       r3,[sp,24]
40009c04:	07 c2                   	ld_s       r2,[sp,28]
40009c06:	03 c3                   	ld_s       r3,[sp,12]
40009c08:	82 c0                   	add_s      r0,sp,8
40009c0a:	50 73                   	cmp_s      r3,r2
40009c0c:	4c 71                   	mov_s      r2,1
40009c0e:	ca 22 21 00             	mov.z      r2,0
40009c12:	43 c2                   	st_s       r2,[sp,12]
40009c14:	72 0d cf ff             	bl         40009984 <__pack_f>

40009c18:	38 14 1f 32             	ld.a       blink,[sp,56]
40009c1c:	e0 7f                   	j_s.d      [blink]
40009c1e:	87 74                   	add_s      sp,sp,4
40009c20:	21 0b 95 00             	brhs.t     r3,2,40009c40 <__mulsf3+0x60>

40009c24:	07 c2                   	ld_s       r2,[sp,28]
40009c26:	03 c3                   	ld_s       r3,[sp,12]
40009c28:	86 c0                   	add_s      r0,sp,24
40009c2a:	50 73                   	cmp_s      r3,r2
40009c2c:	4c 71                   	mov_s      r2,1
40009c2e:	ca 22 21 00             	mov.z      r2,0
40009c32:	56 0d ef ff             	bl.d       40009984 <__pack_f>

40009c36:	47 c2                   	st_s       r2,[sp,28]
40009c38:	38 14 1f 32             	ld.a       blink,[sp,56]
40009c3c:	e0 7f                   	j_s.d      [blink]
40009c3e:	87 74                   	add_s      sp,sp,4
40009c40:	15 0a 11 01             	brne       r2,4,40009c54 <__mulsf3+0x74>

40009c44:	c3 0b b9 80             	brne.nt.d  r3,2,40009c06 <__mulsf3+0x26>

40009c48:	07 c2                   	ld_s       r2,[sp,28]
40009c4a:	c3 40 00 40 b0 d8       	mov_s      r0,0x4000d8b0
40009c50:	e2 f1                   	b_s        40009c14 <__mulsf3+0x34>

40009c52:	e0 78                   	nop_s      
40009c54:	11 0b 11 01             	brne       r3,4,40009c64 <__mulsf3+0x84>

40009c58:	f3 0a b8 80             	breq.nt.d  r2,2,40009c4a <__mulsf3+0x6a>

40009c5c:	07 c2                   	ld_s       r2,[sp,28]
40009c5e:	cd 07 ef ff             	b.d        40009c28 <__mulsf3+0x48>

40009c62:	03 c3                   	ld_s       r3,[sp,12]
40009c64:	a1 0a 90 80             	breq       r2,2,40009c04 <__mulsf3+0x24>

40009c68:	bd 0b 98 80             	breq.nt    r3,2,40009c24 <__mulsf3+0x44>

40009c6c:	09 c0                   	ld_s       r0,[sp,36]
40009c6e:	05 c1                   	ld_s       r1,[sp,20]
40009c70:	12 0a ef ff             	bl.d       40009680 <__umulsidi3>

40009c74:	8c 71                   	mov_s      r4,1
40009c76:	07 c2                   	ld_s       r2,[sp,28]
40009c78:	03 c3                   	ld_s       r3,[sp,12]
40009c7a:	50 73                   	cmp_s      r3,r2
40009c7c:	08 c2                   	ld_s       r2,[sp,32]
40009c7e:	04 c3                   	ld_s       r3,[sp,16]
40009c80:	ca 24 21 00             	mov.z      r4,0
40009c84:	5b 63                   	add_s      r3,r3,r2
40009c86:	2c 1c 00 31             	st         r4,[sp,44]
40009c8a:	42 6b                   	add_s      r2,r3,2
40009c8c:	4c c2                   	st_s       r2,[sp,48]
40009c8e:	23 09 33 00             	brge.d     r1,0,40009cae <__mulsf3+0xce>

40009c92:	20 42                   	mov_s      r2,r1
40009c94:	13 09 3e 00             	bbit0.d    r1,0,40009ca6 <__mulsf3+0xc6>

40009c98:	43 6b                   	add_s      r2,r3,3
40009c9a:	2f 20 02 00             	lsr        r0,r0
40009c9e:	05 20 80 0f 00 80 00 00 	or         r0,r0,0x80000000
40009ca6:	4c c2                   	st_s       r2,[sp,48]
40009ca8:	20 42                   	mov_s      r2,r1
40009caa:	2f 22 82 00             	lsr        r2,r2
40009cae:	2f 0e 84 70 ff 3f ff ff 	brlo       0x3fffffff,r2,40009cda <__mulsf3+0xfa>

40009cb6:	0c c3                   	ld_s       r3,[sp,48]
40009cb8:	42 23 43 00             	sub        r3,r3,1
40009cbc:	00 22 82 00             	add        r2,r2,r2
40009cc0:	14 70                   	cmp_s      r0,0
40009cc2:	cf 22 2b 00             	bset.lt    r2,r2,0
40009cc6:	00 20 00 00             	add        r0,r0,r0
40009cca:	60 44                   	mov_s      r4,r3
40009ccc:	69 6b                   	sub_s      r3,r3,1
40009cce:	f1 0e 85 f0 ff 3f ff ff 	brhs.nt    0x3fffffff,r2,40009cbc <__mulsf3+0xdc>

40009cd6:	30 1c 00 31             	st         r4,[sp,48]
40009cda:	53 22 83 01             	bmsk       r3,r2,6
40009cde:	19 0b 80 0f 00 00 40 00 	breq       r3,64,40009cf4 <__mulsf3+0x114>

40009ce6:	8e c0                   	add_s      r0,sp,56
40009ce8:	4d c2                   	st_s       r2,[sp,52]
40009cea:	2d 07 ef ff             	b.d        40009c14 <__mulsf3+0x34>

40009cee:	f0 18 c9 80             	st.a       3,[r0,-16]
40009cf2:	e0 78                   	nop_s      
40009cf4:	f3 0a f7 81             	bbit1.nt.d r2,7,40009ce6 <__mulsf3+0x106>

40009cf8:	0b 78                   	tst_s      r0,r0
40009cfa:	d6 22 22 02             	add3.nz    r2,r2,8
40009cfe:	ec 22 a2 01             	bmskn.nz   r2,r2,6
40009d02:	e9 07 ef ff             	b.d        40009ce8 <__mulsf3+0x108>

40009d06:	8e c0                   	add_s      r0,sp,56

40009d08 <__divsf3>:
40009d08:	f1 c0                   	push_s     blink
40009d0a:	aa c1                   	sub_s      sp,sp,40
40009d0c:	00 1c 00 30             	st         r0,[sp]
40009d10:	04 1c 40 30             	st         r1,[sp,4]
40009d14:	83 40                   	mov_s      r0,sp
40009d16:	aa 0d ef ff             	bl.d       40009abc <__unpack_f>

40009d1a:	82 c1                   	add_s      r1,sp,8
40009d1c:	81 c0                   	add_s      r0,sp,4
40009d1e:	a2 0d ef ff             	bl.d       40009abc <__unpack_f>

40009d22:	86 c1                   	add_s      r1,sp,24
40009d24:	02 c2                   	ld_s       r2,[sp,8]
40009d26:	19 0a b5 00             	brhs.t.d   r2,2,40009d3c <__divsf3+0x34>

40009d2a:	06 c3                   	ld_s       r3,[sp,24]
40009d2c:	82 c0                   	add_s      r0,sp,8
40009d2e:	5a 0c cf ff             	bl         40009984 <__pack_f>

40009d32:	28 14 1f 32             	ld.a       blink,[sp,40]
40009d36:	e0 7f                   	j_s.d      [blink]
40009d38:	87 74                   	add_s      sp,sp,4
40009d3a:	e0 78                   	nop_s      
40009d3c:	f3 0b b4 80             	brlo.d     r3,2,40009d2e <__divsf3+0x26>

40009d40:	86 c0                   	add_s      r0,sp,24
40009d42:	0c 14 05 30             	ld         r5,[sp,12]
40009d46:	1c 14 04 30             	ld         r4,[sp,28]
40009d4a:	07 24 44 01             	xor        r4,r4,r5
40009d4e:	0f 0a 30 01             	breq.d     r2,4,40009d5a <__divsf3+0x52>

40009d52:	0c 1c 00 31             	st         r4,[sp,12]
40009d56:	15 0a 91 00             	brne       r2,2,40009d68 <__divsf3+0x60>

40009d5a:	d5 0a c1 80             	brne       r2,r3,40009d2c <__divsf3+0x24>

40009d5e:	c3 40 00 40 b0 d8       	mov_s      r0,0x4000d8b0
40009d64:	e5 f1                   	b_s        40009d2e <__divsf3+0x26>

40009d66:	e0 78                   	nop_s      
40009d68:	69 0b 10 01             	breq       r3,4,40009dd0 <__divsf3+0xc8>

40009d6c:	75 0b b0 00             	breq.d     r3,2,40009de0 <__divsf3+0xd8>

40009d70:	04 c3                   	ld_s       r3,[sp,16]
40009d72:	20 14 05 30             	ld         r5,[sp,32]
40009d76:	05 c2                   	ld_s       r2,[sp,20]
40009d78:	24 14 04 30             	ld         r4,[sp,36]
40009d7c:	02 23 43 01             	sub        r3,r3,r5
40009d80:	0f 0a 25 01             	brhs.t.d   r2,r4,40009d8e <__divsf3+0x86>

40009d84:	44 c3                   	st_s       r3,[sp,16]
40009d86:	69 6b                   	sub_s      r3,r3,1
40009d88:	44 c3                   	st_s       r3,[sp,16]
40009d8a:	00 22 82 00             	add        r2,r2,r2
40009d8e:	4a 26 c0 07             	mov        r6,31
40009d92:	c3 43 00 40 00 00       	mov_s      r3,0x40000000
40009d98:	4a 25 00 00             	mov        r5,0
40009d9c:	4a 24 c0 77             	mov        lp_count,31
40009da0:	0c 24 80 80             	cmp        r4,r2
40009da4:	c5 25 ce 00             	or.ls      r5,r5,r3
40009da8:	c2 22 0e 01             	sub.ls     r2,r2,r4
40009dac:	2f 23 c2 00             	lsr        r3,r3
40009db0:	00 22 82 00             	add        r2,r2,r2
40009db4:	ed 0c 71 f0             	brne.d     lp_count,1,40009da0 <__divsf3+0x98>

40009db8:	42 24 7c 70             	sub        lp_count,lp_count,1
40009dbc:	53 25 83 01             	bmsk       r3,r5,6
40009dc0:	2d 0b 80 0f 00 00 40 00 	breq       r3,64,40009dec <__divsf3+0xe4>

40009dc8:	65 07 ef ff             	b.d        40009d2c <__divsf3+0x24>

40009dcc:	14 1c 40 31             	st         r5,[sp,20]
40009dd0:	14 1c 01 30             	st         0,[sp,20]
40009dd4:	10 1c 01 30             	st         0,[sp,16]
40009dd8:	57 07 ef ff             	b.d        40009d2e <__divsf3+0x26>

40009ddc:	82 c0                   	add_s      r0,sp,8
40009dde:	e0 78                   	nop_s      
40009de0:	08 1c 01 31             	st         4,[sp,8]
40009de4:	4b 07 ef ff             	b.d        40009d2e <__divsf3+0x26>

40009de8:	82 c0                   	add_s      r0,sp,8
40009dea:	e0 78                   	nop_s      
40009dec:	dd 0d f7 81             	bbit1.nt.d r5,7,40009dc8 <__divsf3+0xc0>

40009df0:	4b 7a                   	tst_s      r2,r2
40009df2:	d6 25 22 02             	add3.nz    r5,r5,8
40009df6:	ec 25 a2 01             	bmskn.nz   r5,r5,6
40009dfa:	35 07 ef ff             	b.d        40009d2c <__divsf3+0x24>

40009dfe:	14 1c 40 31             	st         r5,[sp,20]
40009e02:	e0 78                   	nop_s      

40009e04 <__fpcmp_parts_f>:
40009e04:	40 80                   	ld_s       r2,[r0,0]
40009e06:	85 0a 94 00             	brlo       r2,2,40009e88 <__fpcmp_parts_f+0x84>

40009e0a:	60 81                   	ld_s       r3,[r1,0]
40009e0c:	7d 0b 94 00             	brlo       r3,2,40009e88 <__fpcmp_parts_f+0x84>

40009e10:	7d 0a 10 01             	breq       r2,4,40009e8c <__fpcmp_parts_f+0x88>

40009e14:	29 0b 10 01             	breq       r3,4,40009e3c <__fpcmp_parts_f+0x38>

40009e18:	21 0a 90 00             	breq       r2,2,40009e38 <__fpcmp_parts_f+0x34>

40009e1c:	2d 0b 90 00             	breq       r3,2,40009e48 <__fpcmp_parts_f+0x44>

40009e20:	41 80                   	ld_s       r2,[r0,4]
40009e22:	61 81                   	ld_s       r3,[r1,4]
40009e24:	35 0a e0 00             	breq.d     r2,r3,40009e58 <__fpcmp_parts_f+0x54>

40009e28:	4b 7a                   	tst_s      r2,r2
40009e2a:	0c 71                   	mov_s      r0,1
40009e2c:	ca 20 82 0f ff ff ff ff 	mov.nz     r0,-1
40009e34:	e0 7e                   	j_s        [blink]
40009e36:	e0 78                   	nop_s      
40009e38:	4d 0b 90 00             	breq       r3,2,40009e84 <__fpcmp_parts_f+0x80>

40009e3c:	41 81                   	ld_s       r2,[r1,4]
40009e3e:	0c 77                   	mov_s      r0,-1
40009e40:	4b 7a                   	tst_s      r2,r2
40009e42:	ca 20 62 00             	mov.nz     r0,1
40009e46:	e0 7e                   	j_s        [blink]
40009e48:	41 80                   	ld_s       r2,[r0,4]
40009e4a:	0c 71                   	mov_s      r0,1
40009e4c:	4b 7a                   	tst_s      r2,r2
40009e4e:	ca 20 82 0f ff ff ff ff 	mov.nz     r0,-1
40009e56:	e0 7e                   	j_s        [blink]
40009e58:	08 10 04 00             	ld         r4,[r0,8]
40009e5c:	62 81                   	ld_s       r3,[r1,8]
40009e5e:	cf 0b 2a 81             	brlt.nt.d  r3,r4,40009e2a <__fpcmp_parts_f+0x26>

40009e62:	4b 7a                   	tst_s      r2,r2
40009e64:	19 0c e2 00             	brlt.d     r4,r3,40009e7c <__fpcmp_parts_f+0x78>

40009e68:	4b 7a                   	tst_s      r2,r2
40009e6a:	0c 10 04 00             	ld         r4,[r0,12]
40009e6e:	63 81                   	ld_s       r3,[r1,12]
40009e70:	bb 0b 2c 81             	brlo.nt.d  r3,r4,40009e2a <__fpcmp_parts_f+0x26>

40009e74:	4b 7a                   	tst_s      r2,r2
40009e76:	11 0c e5 00             	brhs.t.d   r4,r3,40009e84 <__fpcmp_parts_f+0x80>

40009e7a:	4b 7a                   	tst_s      r2,r2
40009e7c:	0c 77                   	mov_s      r0,-1
40009e7e:	ca 20 62 00             	mov.nz     r0,1
40009e82:	e0 7e                   	j_s        [blink]
40009e84:	0c 70                   	mov_s      r0,0
40009e86:	e0 7e                   	j_s        [blink]
40009e88:	0c 71                   	mov_s      r0,1
40009e8a:	e0 7e                   	j_s        [blink]
40009e8c:	bd 0b 11 81             	brne       r3,4,40009e48 <__fpcmp_parts_f+0x44>

40009e90:	61 81                   	ld_s       r3,[r1,4]
40009e92:	41 80                   	ld_s       r2,[r0,4]
40009e94:	02 23 80 00             	sub        r0,r3,r2
40009e98:	e0 7e                   	j_s        [blink]
40009e9a:	e0 78                   	nop_s      

40009e9c <__cmpsf2>:
40009e9c:	f1 c0                   	push_s     blink
40009e9e:	aa c1                   	sub_s      sp,sp,40
40009ea0:	00 1c 00 30             	st         r0,[sp]
40009ea4:	04 1c 40 30             	st         r1,[sp,4]
40009ea8:	83 40                   	mov_s      r0,sp
40009eaa:	16 0c ef ff             	bl.d       40009abc <__unpack_f>

40009eae:	82 c1                   	add_s      r1,sp,8
40009eb0:	81 c0                   	add_s      r0,sp,4
40009eb2:	0e 0c ef ff             	bl.d       40009abc <__unpack_f>

40009eb6:	86 c1                   	add_s      r1,sp,24
40009eb8:	82 c0                   	add_s      r0,sp,8
40009eba:	4e 0f ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

40009ebe:	86 c1                   	add_s      r1,sp,24
40009ec0:	28 14 1f 32             	ld.a       blink,[sp,40]
40009ec4:	e0 7f                   	j_s.d      [blink]
40009ec6:	87 74                   	add_s      sp,sp,4

40009ec8 <__eqsf2>:
40009ec8:	f1 c0                   	push_s     blink
40009eca:	aa c1                   	sub_s      sp,sp,40
40009ecc:	00 1c 00 30             	st         r0,[sp]
40009ed0:	04 1c 40 30             	st         r1,[sp,4]
40009ed4:	83 40                   	mov_s      r0,sp
40009ed6:	ea 0b ef ff             	bl.d       40009abc <__unpack_f>

40009eda:	82 c1                   	add_s      r1,sp,8
40009edc:	81 c0                   	add_s      r0,sp,4
40009ede:	e2 0b ef ff             	bl.d       40009abc <__unpack_f>

40009ee2:	86 c1                   	add_s      r1,sp,24
40009ee4:	02 c2                   	ld_s       r2,[sp,8]
40009ee6:	1d 0a b4 00             	brlo.d     r2,2,40009f00 <__eqsf2+0x38>

40009eea:	06 c2                   	ld_s       r2,[sp,24]
40009eec:	15 0a 94 00             	brlo       r2,2,40009f00 <__eqsf2+0x38>

40009ef0:	82 c0                   	add_s      r0,sp,8
40009ef2:	16 0f ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

40009ef6:	86 c1                   	add_s      r1,sp,24
40009ef8:	28 14 1f 32             	ld.a       blink,[sp,40]
40009efc:	e0 7f                   	j_s.d      [blink]
40009efe:	87 74                   	add_s      sp,sp,4
40009f00:	f9 07 ef ff             	b.d        40009ef8 <__eqsf2+0x30>

40009f04:	0c 71                   	mov_s      r0,1
40009f06:	e0 78                   	nop_s      

40009f08 <__nesf2>:
40009f08:	f1 c0                   	push_s     blink
40009f0a:	aa c1                   	sub_s      sp,sp,40
40009f0c:	00 1c 00 30             	st         r0,[sp]
40009f10:	04 1c 40 30             	st         r1,[sp,4]
40009f14:	83 40                   	mov_s      r0,sp
40009f16:	aa 0b ef ff             	bl.d       40009abc <__unpack_f>

40009f1a:	82 c1                   	add_s      r1,sp,8
40009f1c:	81 c0                   	add_s      r0,sp,4
40009f1e:	a2 0b ef ff             	bl.d       40009abc <__unpack_f>

40009f22:	86 c1                   	add_s      r1,sp,24
40009f24:	02 c2                   	ld_s       r2,[sp,8]
40009f26:	1d 0a b4 00             	brlo.d     r2,2,40009f40 <__nesf2+0x38>

40009f2a:	06 c2                   	ld_s       r2,[sp,24]
40009f2c:	15 0a 94 00             	brlo       r2,2,40009f40 <__nesf2+0x38>

40009f30:	82 c0                   	add_s      r0,sp,8
40009f32:	d6 0e ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

40009f36:	86 c1                   	add_s      r1,sp,24
40009f38:	28 14 1f 32             	ld.a       blink,[sp,40]
40009f3c:	e0 7f                   	j_s.d      [blink]
40009f3e:	87 74                   	add_s      sp,sp,4
40009f40:	f9 07 ef ff             	b.d        40009f38 <__nesf2+0x30>

40009f44:	0c 71                   	mov_s      r0,1
40009f46:	e0 78                   	nop_s      

40009f48 <__gtsf2>:
40009f48:	f1 c0                   	push_s     blink
40009f4a:	aa c1                   	sub_s      sp,sp,40
40009f4c:	00 1c 00 30             	st         r0,[sp]
40009f50:	04 1c 40 30             	st         r1,[sp,4]
40009f54:	83 40                   	mov_s      r0,sp
40009f56:	6a 0b ef ff             	bl.d       40009abc <__unpack_f>

40009f5a:	82 c1                   	add_s      r1,sp,8
40009f5c:	81 c0                   	add_s      r0,sp,4
40009f5e:	62 0b ef ff             	bl.d       40009abc <__unpack_f>

40009f62:	86 c1                   	add_s      r1,sp,24
40009f64:	02 c2                   	ld_s       r2,[sp,8]
40009f66:	1d 0a b4 00             	brlo.d     r2,2,40009f80 <__gtsf2+0x38>

40009f6a:	06 c2                   	ld_s       r2,[sp,24]
40009f6c:	15 0a 94 00             	brlo       r2,2,40009f80 <__gtsf2+0x38>

40009f70:	82 c0                   	add_s      r0,sp,8
40009f72:	96 0e ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

40009f76:	86 c1                   	add_s      r1,sp,24
40009f78:	28 14 1f 32             	ld.a       blink,[sp,40]
40009f7c:	e0 7f                   	j_s.d      [blink]
40009f7e:	87 74                   	add_s      sp,sp,4
40009f80:	f9 07 ef ff             	b.d        40009f78 <__gtsf2+0x30>

40009f84:	0c 77                   	mov_s      r0,-1
40009f86:	e0 78                   	nop_s      

40009f88 <__gesf2>:
40009f88:	f1 c0                   	push_s     blink
40009f8a:	aa c1                   	sub_s      sp,sp,40
40009f8c:	00 1c 00 30             	st         r0,[sp]
40009f90:	04 1c 40 30             	st         r1,[sp,4]
40009f94:	83 40                   	mov_s      r0,sp
40009f96:	2a 0b ef ff             	bl.d       40009abc <__unpack_f>

40009f9a:	82 c1                   	add_s      r1,sp,8
40009f9c:	81 c0                   	add_s      r0,sp,4
40009f9e:	22 0b ef ff             	bl.d       40009abc <__unpack_f>

40009fa2:	86 c1                   	add_s      r1,sp,24
40009fa4:	02 c2                   	ld_s       r2,[sp,8]
40009fa6:	1d 0a b4 00             	brlo.d     r2,2,40009fc0 <__gesf2+0x38>

40009faa:	06 c2                   	ld_s       r2,[sp,24]
40009fac:	15 0a 94 00             	brlo       r2,2,40009fc0 <__gesf2+0x38>

40009fb0:	82 c0                   	add_s      r0,sp,8
40009fb2:	56 0e ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

40009fb6:	86 c1                   	add_s      r1,sp,24
40009fb8:	28 14 1f 32             	ld.a       blink,[sp,40]
40009fbc:	e0 7f                   	j_s.d      [blink]
40009fbe:	87 74                   	add_s      sp,sp,4
40009fc0:	f9 07 ef ff             	b.d        40009fb8 <__gesf2+0x30>

40009fc4:	0c 77                   	mov_s      r0,-1
40009fc6:	e0 78                   	nop_s      

40009fc8 <__ltsf2>:
40009fc8:	f1 c0                   	push_s     blink
40009fca:	aa c1                   	sub_s      sp,sp,40
40009fcc:	00 1c 00 30             	st         r0,[sp]
40009fd0:	04 1c 40 30             	st         r1,[sp,4]
40009fd4:	83 40                   	mov_s      r0,sp
40009fd6:	ea 0a ef ff             	bl.d       40009abc <__unpack_f>

40009fda:	82 c1                   	add_s      r1,sp,8
40009fdc:	81 c0                   	add_s      r0,sp,4
40009fde:	e2 0a ef ff             	bl.d       40009abc <__unpack_f>

40009fe2:	86 c1                   	add_s      r1,sp,24
40009fe4:	02 c2                   	ld_s       r2,[sp,8]
40009fe6:	1d 0a b4 00             	brlo.d     r2,2,4000a000 <__ltsf2+0x38>

40009fea:	06 c2                   	ld_s       r2,[sp,24]
40009fec:	15 0a 94 00             	brlo       r2,2,4000a000 <__ltsf2+0x38>

40009ff0:	82 c0                   	add_s      r0,sp,8
40009ff2:	16 0e ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

40009ff6:	86 c1                   	add_s      r1,sp,24
40009ff8:	28 14 1f 32             	ld.a       blink,[sp,40]
40009ffc:	e0 7f                   	j_s.d      [blink]
40009ffe:	87 74                   	add_s      sp,sp,4
4000a000:	f9 07 ef ff             	b.d        40009ff8 <__ltsf2+0x30>

4000a004:	0c 71                   	mov_s      r0,1
4000a006:	e0 78                   	nop_s      

4000a008 <__lesf2>:
4000a008:	f1 c0                   	push_s     blink
4000a00a:	aa c1                   	sub_s      sp,sp,40
4000a00c:	00 1c 00 30             	st         r0,[sp]
4000a010:	04 1c 40 30             	st         r1,[sp,4]
4000a014:	83 40                   	mov_s      r0,sp
4000a016:	aa 0a ef ff             	bl.d       40009abc <__unpack_f>

4000a01a:	82 c1                   	add_s      r1,sp,8
4000a01c:	81 c0                   	add_s      r0,sp,4
4000a01e:	a2 0a ef ff             	bl.d       40009abc <__unpack_f>

4000a022:	86 c1                   	add_s      r1,sp,24
4000a024:	02 c2                   	ld_s       r2,[sp,8]
4000a026:	1d 0a b4 00             	brlo.d     r2,2,4000a040 <__lesf2+0x38>

4000a02a:	06 c2                   	ld_s       r2,[sp,24]
4000a02c:	15 0a 94 00             	brlo       r2,2,4000a040 <__lesf2+0x38>

4000a030:	82 c0                   	add_s      r0,sp,8
4000a032:	d6 0d ef ff             	bl.d       40009e04 <__fpcmp_parts_f>

4000a036:	86 c1                   	add_s      r1,sp,24
4000a038:	28 14 1f 32             	ld.a       blink,[sp,40]
4000a03c:	e0 7f                   	j_s.d      [blink]
4000a03e:	87 74                   	add_s      sp,sp,4
4000a040:	f9 07 ef ff             	b.d        4000a038 <__lesf2+0x30>

4000a044:	0c 71                   	mov_s      r0,1
4000a046:	e0 78                   	nop_s      

4000a048 <__unordsf2>:
4000a048:	f1 c0                   	push_s     blink
4000a04a:	aa c1                   	sub_s      sp,sp,40
4000a04c:	00 1c 00 30             	st         r0,[sp]
4000a050:	04 1c 40 30             	st         r1,[sp,4]
4000a054:	83 40                   	mov_s      r0,sp
4000a056:	6a 0a ef ff             	bl.d       40009abc <__unpack_f>

4000a05a:	82 c1                   	add_s      r1,sp,8
4000a05c:	81 c0                   	add_s      r0,sp,4
4000a05e:	62 0a ef ff             	bl.d       40009abc <__unpack_f>

4000a062:	86 c1                   	add_s      r1,sp,24
4000a064:	02 c2                   	ld_s       r2,[sp,8]
4000a066:	19 0a b4 00             	brlo.d     r2,2,4000a07c <__unordsf2+0x34>

4000a06a:	06 c2                   	ld_s       r2,[sp,24]
4000a06c:	0c 71                   	mov_s      r0,1
4000a06e:	54 71                   	cmp_s      r2,1
4000a070:	ca 20 2d 00             	mov.hi     r0,0
4000a074:	28 14 1f 32             	ld.a       blink,[sp,40]
4000a078:	e0 7f                   	j_s.d      [blink]
4000a07a:	87 74                   	add_s      sp,sp,4
4000a07c:	f9 07 ef ff             	b.d        4000a074 <__unordsf2+0x2c>

4000a080:	0c 71                   	mov_s      r0,1
4000a082:	e0 78                   	nop_s      

4000a084 <__floatsisf>:
4000a084:	f1 c0                   	push_s     blink
4000a086:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000a08a:	a4 c1                   	sub_s      sp,sp,16
4000a08c:	00 42                   	mov_s      r2,r0
4000a08e:	00 1c c1 30             	st         3,[sp]
4000a092:	00 22 be 80             	add.f      0,r2,r2
4000a096:	6f 22 0b 00             	rlc        r2,0
4000a09a:	21 08 31 00             	brne.d     r0,0,4000a0b8 <__floatsisf+0x34>

4000a09e:	41 c2                   	st_s       r2,[sp,4]
4000a0a0:	00 1c 81 30             	st         2,[sp]
4000a0a4:	e2 08 ef ff             	bl.d       40009984 <__pack_f>

4000a0a8:	83 40                   	mov_s      r0,sp
4000a0aa:	14 14 1f 30             	ld         blink,[sp,20]
4000a0ae:	10 14 0d 32             	ld.a       r13,[sp,16]
4000a0b2:	e0 7f                   	j_s.d      [blink]
4000a0b4:	a2 c0                   	add_s      sp,sp,8
4000a0b6:	e0 78                   	nop_s      
4000a0b8:	35 0a 31 00             	brne.d     r2,0,4000a0ec <__floatsisf+0x68>

4000a0bc:	08 1c 81 37             	st         30,[sp,8]
4000a0c0:	08 45                   	mov_s      r13,r0
4000a0c2:	fa 0d af ff             	bl.d       400096b8 <__clzsi2>

4000a0c6:	a1 40                   	mov_s      r0,r13
4000a0c8:	42 20 42 00             	sub        r2,r0,1
4000a0cc:	39 0a 52 00             	brlt       r2,1,4000a104 <__floatsisf+0x80>

4000a0d0:	44 22 fc 87             	and.f      lp_count,r2,31
4000a0d4:	e8 20 a2 01             	lpnz       4000a0e0 <__floatsisf+0x5c>

4000a0d8:	00 25 4d 13             	add        r13,r13,r13
4000a0dc:	4a 26 00 70             	nop        
4000a0e0:	4e 20 c0 07             	rsub       r0,r0,31
4000a0e4:	43 c5                   	st_s       r13,[sp,12]
4000a0e6:	c1 07 ef ff             	b.d        4000a0a4 <__floatsisf+0x20>

4000a0ea:	42 c0                   	st_s       r0,[sp,8]
4000a0ec:	21 08 80 0f 00 80 00 00 	breq       r0,0x80000000,4000a10c <__floatsisf+0x88>

4000a0f4:	13 7d                   	neg_s      r13,r0
4000a0f6:	c6 0d af ff             	bl.d       400096b8 <__clzsi2>

4000a0fa:	a1 40                   	mov_s      r0,r13
4000a0fc:	42 20 42 00             	sub        r2,r0,1
4000a100:	d1 0a 53 80             	brge       r2,1,4000a0d0 <__floatsisf+0x4c>

4000a104:	a1 07 ef ff             	b.d        4000a0a4 <__floatsisf+0x20>

4000a108:	43 c5                   	st_s       r13,[sp,12]
4000a10a:	e0 78                   	nop_s      
4000a10c:	0a 20 80 0f 00 cf 00 00 	mov        r0,0xcf000000
4000a114:	cb f1                   	b_s        4000a0aa <__floatsisf+0x26>

4000a116:	e0 78                   	nop_s      

4000a118 <__floatunsisf>:
4000a118:	f1 c0                   	push_s     blink
4000a11a:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000a11e:	a4 c1                   	sub_s      sp,sp,16
4000a120:	0a 25 00 90             	mov.f      r13,r0
4000a124:	4c 00 21 00             	bz.d       4000a170 <__floatunsisf+0x58>

4000a128:	04 1c 01 30             	st         0,[sp,4]
4000a12c:	00 1c c1 30             	st         3,[sp]
4000a130:	8a 0d af ff             	bl.d       400096b8 <__clzsi2>

4000a134:	08 1c 81 37             	st         30,[sp,8]
4000a138:	42 20 42 00             	sub        r2,r0,1
4000a13c:	3d 0a 32 00             	brlt.d     r2,0,4000a178 <__floatunsisf+0x60>

4000a140:	6c 71                   	mov_s      r3,1
4000a142:	3a ea                   	breq_s     r2,0,4000a1b4 <__floatunsisf+0x9c>

4000a144:	4e 20 c0 07             	rsub       r0,r0,31
4000a148:	44 22 fc 87             	and.f      lp_count,r2,31
4000a14c:	e8 20 a2 01             	lpnz       4000a158 <__floatunsisf+0x40>

4000a150:	00 25 4d 13             	add        r13,r13,r13
4000a154:	4a 26 00 70             	nop        
4000a158:	43 c5                   	st_s       r13,[sp,12]
4000a15a:	42 c0                   	st_s       r0,[sp,8]
4000a15c:	2a 08 ef ff             	bl.d       40009984 <__pack_f>

4000a160:	83 40                   	mov_s      r0,sp
4000a162:	14 14 1f 30             	ld         blink,[sp,20]
4000a166:	10 14 0d 32             	ld.a       r13,[sp,16]
4000a16a:	e0 7f                   	j_s.d      [blink]
4000a16c:	a2 c0                   	add_s      sp,sp,8
4000a16e:	e0 78                   	nop_s      
4000a170:	ed 07 ef ff             	b.d        4000a15c <__floatunsisf+0x44>

4000a174:	00 1c 81 30             	st         2,[sp]
4000a178:	53 7a                   	neg_s      r2,r2
4000a17a:	44 22 fc 87             	and.f      lp_count,r2,31
4000a17e:	e8 20 e2 01             	lpnz       4000a18a <__floatunsisf+0x72>

4000a182:	00 23 c3 00             	add        r3,r3,r3
4000a186:	4a 26 00 70             	nop        
4000a18a:	69 6b                   	sub_s      r3,r3,1
4000a18c:	ab 7b                   	tst_s      r3,r13
4000a18e:	6c 71                   	mov_s      r3,1
4000a190:	ca 23 21 00             	mov.z      r3,0
4000a194:	4e 20 c0 07             	rsub       r0,r0,31
4000a198:	44 22 fc 87             	and.f      lp_count,r2,31
4000a19c:	e8 20 a2 01             	lpnz       4000a1a8 <__floatunsisf+0x90>

4000a1a0:	2f 25 42 13             	lsr        r13,r13
4000a1a4:	4a 26 00 70             	nop        
4000a1a8:	42 c0                   	st_s       r0,[sp,8]
4000a1aa:	65 7d                   	or_s       r13,r13,r3
4000a1ac:	b1 07 ef ff             	b.d        4000a15c <__floatunsisf+0x44>

4000a1b0:	43 c5                   	st_s       r13,[sp,12]
4000a1b2:	e0 78                   	nop_s      
4000a1b4:	a9 07 ef ff             	b.d        4000a15c <__floatunsisf+0x44>

4000a1b8:	43 c5                   	st_s       r13,[sp,12]
4000a1ba:	e0 78                   	nop_s      

4000a1bc <__fixsfsi>:
4000a1bc:	f1 c0                   	push_s     blink
4000a1be:	a5 c1                   	sub_s      sp,sp,20
4000a1c0:	85 c2                   	add_s      r2,sp,20
4000a1c2:	81 c1                   	add_s      r1,sp,4
4000a1c4:	ec 1a 08 80             	st.a       r0,[r2,-20]
4000a1c8:	f6 08 ef ff             	bl.d       40009abc <__unpack_f>

4000a1cc:	83 40                   	mov_s      r0,sp
4000a1ce:	01 c2                   	ld_s       r2,[sp,4]
4000a1d0:	55 0a d4 00             	brlo       r2,3,4000a224 <__fixsfsi+0x68>

4000a1d4:	15 0a 30 01             	breq.d     r2,4,4000a1e8 <__fixsfsi+0x2c>

4000a1d8:	03 c2                   	ld_s       r2,[sp,12]
4000a1da:	4f 0a 32 00             	brlt.d     r2,0,4000a226 <__fixsfsi+0x6a>

4000a1de:	0c 70                   	mov_s      r0,0
4000a1e0:	21 0a f2 07             	brlt.d     r2,31,4000a200 <__fixsfsi+0x44>

4000a1e4:	4e 22 82 07             	rsub       r2,r2,30
4000a1e8:	02 c2                   	ld_s       r2,[sp,8]
4000a1ea:	6f 20 43 00             	ror        r0,1
4000a1ee:	4b 7a                   	tst_s      r2,r2
4000a1f0:	ca 20 81 0f ff 7f ff ff 	mov.z      r0,0x7fffffff
4000a1f8:	14 14 1f 32             	ld.a       blink,[sp,20]
4000a1fc:	e0 7f                   	j_s.d      [blink]
4000a1fe:	87 74                   	add_s      sp,sp,4
4000a200:	04 c0                   	ld_s       r0,[sp,16]
4000a202:	44 22 fc 87             	and.f      lp_count,r2,31
4000a206:	e8 20 e2 01             	lpnz       4000a212 <__fixsfsi+0x56>

4000a20a:	2f 20 02 00             	lsr        r0,r0
4000a20e:	4a 26 00 70             	nop        
4000a212:	02 c2                   	ld_s       r2,[sp,8]
4000a214:	4b 7a                   	tst_s      r2,r2
4000a216:	ce 20 22 00             	rsub.nz    r0,r0,0
4000a21a:	14 14 1f 32             	ld.a       blink,[sp,20]
4000a21e:	e0 7f                   	j_s.d      [blink]
4000a220:	87 74                   	add_s      sp,sp,4
4000a222:	e0 78                   	nop_s      
4000a224:	0c 70                   	mov_s      r0,0
4000a226:	14 14 1f 32             	ld.a       blink,[sp,20]
4000a22a:	e0 7f                   	j_s.d      [blink]
4000a22c:	87 74                   	add_s      sp,sp,4
4000a22e:	e0 78                   	nop_s      

4000a230 <__negsf2>:
4000a230:	f1 c0                   	push_s     blink
4000a232:	a5 c1                   	sub_s      sp,sp,20
4000a234:	85 c2                   	add_s      r2,sp,20
4000a236:	81 c1                   	add_s      r1,sp,4
4000a238:	ec 1a 08 80             	st.a       r0,[r2,-20]
4000a23c:	82 08 ef ff             	bl.d       40009abc <__unpack_f>

4000a240:	83 40                   	mov_s      r0,sp
4000a242:	02 c2                   	ld_s       r2,[sp,8]
4000a244:	81 c0                   	add_s      r0,sp,4
4000a246:	4b 7a                   	tst_s      r2,r2
4000a248:	4c 71                   	mov_s      r2,1
4000a24a:	c0 7a                   	sub_s.ne   r2,r2,r2
4000a24c:	3a 0f af ff             	bl.d       40009984 <__pack_f>

4000a250:	42 c2                   	st_s       r2,[sp,8]
4000a252:	14 14 1f 32             	ld.a       blink,[sp,20]
4000a256:	e0 7f                   	j_s.d      [blink]
4000a258:	87 74                   	add_s      sp,sp,4
4000a25a:	e0 78                   	nop_s      

4000a25c <__make_fp>:
4000a25c:	f1 c0                   	push_s     blink
4000a25e:	a4 c1                   	sub_s      sp,sp,16
4000a260:	40 c0                   	st_s       r0,[sp,0]
4000a262:	41 c1                   	st_s       r1,[sp,4]
4000a264:	42 c2                   	st_s       r2,[sp,8]
4000a266:	43 c3                   	st_s       r3,[sp,12]
4000a268:	1e 0f af ff             	bl.d       40009984 <__pack_f>

4000a26c:	83 40                   	mov_s      r0,sp
4000a26e:	10 14 1f 32             	ld.a       blink,[sp,16]
4000a272:	e0 7f                   	j_s.d      [blink]
4000a274:	87 74                   	add_s      sp,sp,4
4000a276:	e0 78                   	nop_s      

4000a278 <__extendsfdf2>:
4000a278:	f1 c0                   	push_s     blink
4000a27a:	a5 c1                   	sub_s      sp,sp,20
4000a27c:	85 c2                   	add_s      r2,sp,20
4000a27e:	81 c1                   	add_s      r1,sp,4
4000a280:	ec 1a 08 80             	st.a       r0,[r2,-20]
4000a284:	3a 08 ef ff             	bl.d       40009abc <__unpack_f>

4000a288:	83 40                   	mov_s      r0,sp
4000a28a:	10 14 04 30             	ld         r4,[sp,16]
4000a28e:	01 c0                   	ld_s       r0,[sp,4]
4000a290:	02 c1                   	ld_s       r1,[sp,8]
4000a292:	80 43                   	mov_s      r3,r4
4000a294:	2f 24 02 01             	lsr        r4,r4
4000a298:	2f 24 02 01             	lsr        r4,r4
4000a29c:	44 23 c3 00             	and        r3,r3,3
4000a2a0:	2f 23 c3 00             	ror        r3,r3
4000a2a4:	2f 23 c3 00             	ror        r3,r3
4000a2a8:	66 0b af ff             	bl.d       4000960c <__make_dp>

4000a2ac:	03 c2                   	ld_s       r2,[sp,12]
4000a2ae:	14 14 1f 32             	ld.a       blink,[sp,20]
4000a2b2:	e0 7f                   	j_s.d      [blink]
4000a2b4:	87 74                   	add_s      sp,sp,4
4000a2b6:	e0 78                   	nop_s      

4000a2b8 <consoleOut>:
#include <console/ipm_console.h>

static struct device *ipm_console_device;

static int consoleOut(int character)
{
4000a2b8:	f1 c0                   	push_s     blink
4000a2ba:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000a2be:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a2c2:	08 45                   	mov_s      r13,r0
	if (character == '\r') {
4000a2c4:	1d 0d 70 13             	breq.d     r13,13,4000a2e0 <consoleOut+0x28>

4000a2c8:	9b 43                   	mov_s      fp,sp

	/*
	 * We just stash the character into the id field and don't supply
	 * any extra data
	 */
	ipm_send(ipm_console_device, 1, character, NULL, 0);
4000a2ca:	00 16 00 70 00 a8 d4 0d 	ld         r0,[0xa8000dd4]
			   const void *data, int size)
{
	struct ipm_driver_api *api;

	api = (struct ipm_driver_api *) ipmdev->driver_api;
	return api->send(ipmdev, wait, id, data, size);
4000a2d2:	a1 42                   	mov_s      r2,r13
4000a2d4:	21 80                   	ld_s       r1,[r0,4]
4000a2d6:	6c 70                   	mov_s      r3,0
4000a2d8:	80 81                   	ld_s       r12,[r1,0]
4000a2da:	8c 70                   	mov_s      r4,0
4000a2dc:	60 7c                   	jl_s.d     [r12]
4000a2de:	2c 71                   	mov_s      r1,1

	return character;
}
4000a2e0:	a1 40                   	mov_s      r0,r13
4000a2e2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a2e6:	04 14 1f 30             	ld         blink,[sp,4]
4000a2ea:	00 c5                   	ld_s       r13,[sp,0]
4000a2ec:	e0 7f                   	j_s.d      [blink]
4000a2ee:	a2 c0                   	add_s      sp,sp,8

4000a2f0 <ipm_console_sender_init>:

int ipm_console_sender_init(struct device *d)
{
	struct ipm_console_sender_config_info *config_info;

	config_info = d->config->config_info;
4000a2f0:	00 80                   	ld_s       r0,[r0,0]

extern void __printk_hook_install(int (*fn)(int));
extern void __stdout_hook_install(int (*fn)(int));

int ipm_console_sender_init(struct device *d)
{
4000a2f2:	f1 c0                   	push_s     blink
4000a2f4:	fc 1c 48 b3             	st.a       r13,[sp,-4]
	struct ipm_console_sender_config_info *config_info;

	config_info = d->config->config_info;
4000a2f8:	a2 80                   	ld_s       r13,[r0,8]

extern void __printk_hook_install(int (*fn)(int));
extern void __stdout_hook_install(int (*fn)(int));

int ipm_console_sender_init(struct device *d)
{
4000a2fa:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct ipm_console_sender_config_info *config_info;

	config_info = d->config->config_info;
	ipm_console_device = device_get_binding(config_info->bind_to);
4000a2fe:	00 85                   	ld_s       r0,[r13,0]
4000a300:	66 0b a0 00             	bl.d       4000b664 <device_get_binding>

4000a304:	9b 43                   	mov_s      fp,sp
4000a306:	00 1e 00 70 00 a8 d4 0d 	st         r0,[0xa8000dd4]

	if (!ipm_console_device) {
4000a30e:	8b e8                   	brne_s     r0,0,4000a322 <ipm_console_sender_init+0x32>

		printk("unable to bind IPM console sender to '%s'\n",
4000a310:	c3 40 00 40 c0 d8       	mov_s      r0,0x4000d8c0
4000a316:	36 0e a0 00             	bl.d       4000b948 <printk>

4000a31a:	20 85                   	ld_s       r1,[r13,0]
		       config_info->bind_to);
		return -EINVAL;
4000a31c:	8a 20 bf 0a             	mov        r0,-22
4000a320:	14 f0                   	b_s        4000a348 <ipm_console_sender_init+0x58>

	}

	if (config_info->flags & IPM_CONSOLE_STDOUT) {
4000a322:	01 85                   	ld_s       r0,[r13,4]
4000a324:	0f 08 1e 00             	bbit0      r0,0,4000a332 <ipm_console_sender_init+0x42>

		__stdout_hook_install(consoleOut);
4000a328:	c3 40 00 40 b8 a2       	mov_s      r0,0x4000a2b8
4000a32e:	ee 0a 40 00             	bl         4000ae18 <__stdout_hook_install>

	}
	if (config_info->flags & IPM_CONSOLE_PRINTK) {
4000a332:	21 85                   	ld_s       r1,[r13,4]
4000a334:	15 09 76 00             	bbit0.t.d  r1,1,4000a348 <ipm_console_sender_init+0x58>

4000a338:	44 21 80 00             	and        r0,r1,2
		__printk_hook_install(consoleOut);
4000a33c:	c3 40 00 40 b8 a2       	mov_s      r0,0x4000a2b8
4000a342:	f6 0d 80 00             	bl         4000b934 <__printk_hook_install>

	}

	return 0;
4000a346:	0c 70                   	mov_s      r0,0
}
4000a348:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a34c:	04 14 1f 30             	ld         blink,[sp,4]
4000a350:	00 c5                   	ld_s       r13,[sp,0]
4000a352:	e0 7f                   	j_s.d      [blink]
4000a354:	a2 c0                   	add_s      sp,sp,8
4000a356:	e0 78                   	nop_s      

4000a358 <_timer_int_handler>:
 * announces one tick.
 *
 * @return N/A
 */
void _timer_int_handler(void *unused)
{
4000a358:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a35c:	9b 43                   	mov_s      fp,sp
 *
 * @return N/A
 */
static ALWAYS_INLINE void timer0_control_register_set(uint32_t value)
{
	_arc_v2_aux_reg_write(_ARC_V2_TMR0_CONTROL, value);
4000a35e:	6b 26 80 78 00 00 03 00 	sr         3,[0x22]
	accumulated_cycle_count += (_sys_idle_elapsed_ticks * cycles_per_tick);
}
#else /* CONFIG_TICKLESS_IDLE */
static ALWAYS_INLINE void update_accumulated_count(void)
{
	accumulated_cycle_count += cycles_per_tick;
4000a366:	c3 40 00 a8 d8 0d       	mov_s      r0,0xa8000dd8
4000a36c:	00 16 02 70 00 a8 20 15 	ld         r2,[0xa8001520]
4000a374:	20 80                   	ld_s       r1,[r0,0]
4000a376:	59 61                   	add_s      r1,r1,r2
4000a378:	20 a0                   	st_s       r1,[r0,0]

	_sys_idle_elapsed_ticks = 1;
#endif

	update_accumulated_count();
	_sys_clock_tick_announce();
4000a37a:	00 16 00 70 00 a8 18 0d 	ld         r0,[0xa8000d18]
4000a382:	c1 05 60 00             	b.d        4000b140 <_nano_sys_clock_tick_announce>

4000a386:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a38a:	e0 78                   	nop_s      

4000a38c <_sys_clock_driver_init>:
 * rate specified via the 'sys_clock_us_per_tick' global variable.
 *
 * @return 0
 */
int _sys_clock_driver_init(struct device *device)
{
4000a38c:	f1 c0                   	push_s     blink
4000a38e:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000a392:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a396:	9b 43                   	mov_s      fp,sp
 *
 * @return N/A
 */
static ALWAYS_INLINE void timer0_control_register_set(uint32_t value)
{
	_arc_v2_aux_reg_write(_ARC_V2_TMR0_CONTROL, value);
4000a398:	6b 26 80 78 00 00 00 00 	sr         0,[0x22]
 *
 * @return N/A
 */
static ALWAYS_INLINE void timer0_count_register_set(uint32_t value)
{
	_arc_v2_aux_reg_write(_ARC_V2_TMR0_COUNT, value);
4000a3a0:	6b 26 40 78 00 00 00 00 	sr         0,[0x21]

	/* ensure that the timer will not generate interrupts */
	timer0_control_register_set(0);
	timer0_count_register_set(0);

	cycles_per_tick = sys_clock_hw_cycles_per_tick;
4000a3a8:	00 16 00 70 00 a8 1c 0d 	ld         r0,[0xa8000d1c]
4000a3b0:	cb 45 00 a8 20 15       	mov_s      r13,0xa8001520

	IRQ_CONNECT(CONFIG_ARCV2_TIMER0_INT_LVL, CONFIG_ARCV2_TIMER0_INT_PRI,
4000a3b6:	2c 70                   	mov_s      r1,0

	/* ensure that the timer will not generate interrupts */
	timer0_control_register_set(0);
	timer0_count_register_set(0);

	cycles_per_tick = sys_clock_hw_cycles_per_tick;
4000a3b8:	00 a5                   	st_s       r0,[r13,0]

	IRQ_CONNECT(CONFIG_ARCV2_TIMER0_INT_LVL, CONFIG_ARCV2_TIMER0_INT_PRI,
4000a3ba:	96 0b e0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a3be:	10 d8                   	mov_s      r0,16
	 * counter and interrupt generation.
	 */

	tickless_idle_init();

	timer0_limit_register_set(cycles_per_tick - 1);
4000a3c0:	00 85                   	ld_s       r0,[r13,0]
4000a3c2:	09 68                   	sub_s      r0,r0,1
 *
 * @return N/A
 */
static ALWAYS_INLINE void timer0_limit_register_set(uint32_t count)
{
	_arc_v2_aux_reg_write(_ARC_V2_TMR0_LIMIT, count);
4000a3c4:	6b 20 c0 08             	sr         r0,[0x23]
 *
 * @return N/A
 */
static ALWAYS_INLINE void timer0_control_register_set(uint32_t value)
{
	_arc_v2_aux_reg_write(_ARC_V2_TMR0_CONTROL, value);
4000a3c8:	6b 26 80 78 00 00 03 00 	sr         3,[0x22]
	timer0_limit_register_set(cycles_per_tick - 1);
	timer0_control_register_set(_ARC_V2_TMR_CTRL_NH | _ARC_V2_TMR_CTRL_IE);

	/* everything has been configured: safe to enable the interrupt */

	irq_enable(CONFIG_ARCV2_TIMER0_INT_LVL);
4000a3d0:	5e 0b e0 00             	bl.d       4000bf2c <_arch_irq_enable>

4000a3d4:	10 d8                   	mov_s      r0,16

	return 0;
}
4000a3d6:	0c 70                   	mov_s      r0,0
4000a3d8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a3dc:	04 14 1f 30             	ld         blink,[sp,4]
4000a3e0:	00 c5                   	ld_s       r13,[sp,0]
4000a3e2:	e0 7f                   	j_s.d      [blink]
4000a3e4:	a2 c0                   	add_s      sp,sp,8
4000a3e6:	e0 78                   	nop_s      

4000a3e8 <_arc_v2_irq_unit_init>:
 *
 * @return N/A
 */

void _arc_v2_irq_unit_init(void)
{
4000a3e8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	int irq; /* the interrupt index */

	for (irq = 16; irq < CONFIG_NUM_IRQS; irq++) {
4000a3ec:	4a 24 00 7d             	mov        lp_count,52
 *
 * @return N/A
 */

void _arc_v2_irq_unit_init(void)
{
4000a3f0:	9b 43                   	mov_s      fp,sp
	int irq; /* the interrupt index */

	for (irq = 16; irq < CONFIG_NUM_IRQS; irq++) {
4000a3f2:	10 d8                   	mov_s      r0,16
4000a3f4:	a8 20 40 04             	lp         4000a416 <_arc_v2_irq_unit_init+0x2e>

		_arc_v2_aux_reg_write(_ARC_V2_IRQ_SELECT, irq);
4000a3f8:	ab 20 d0 02             	sr         r0,[0x40b]
		_arc_v2_aux_reg_write(_ARC_V2_IRQ_PRIORITY,
4000a3fc:	ab 26 88 71 00 00 01 00 	sr         1,[0x206]
			 (CONFIG_NUM_IRQ_PRIO_LEVELS-1)); /* lowest priority */
		_arc_v2_aux_reg_write(_ARC_V2_IRQ_ENABLE, _ARC_V2_INT_DISABLE);
4000a404:	ab 26 10 73 00 00 00 00 	sr         0,[0x40c]
		_arc_v2_aux_reg_write(_ARC_V2_IRQ_TRIGGER, _ARC_V2_INT_LEVEL);
4000a40c:	ab 26 50 73 00 00 00 00 	sr         0,[0x40d]

void _arc_v2_irq_unit_init(void)
{
	int irq; /* the interrupt index */

	for (irq = 16; irq < CONFIG_NUM_IRQS; irq++) {
4000a414:	04 71                   	add_s      r0,r0,1
		_arc_v2_aux_reg_write(_ARC_V2_IRQ_PRIORITY,
			 (CONFIG_NUM_IRQ_PRIO_LEVELS-1)); /* lowest priority */
		_arc_v2_aux_reg_write(_ARC_V2_IRQ_ENABLE, _ARC_V2_INT_DISABLE);
		_arc_v2_aux_reg_write(_ARC_V2_IRQ_TRIGGER, _ARC_V2_INT_LEVEL);
	}
}
4000a416:	e0 7f                   	j_s.d      [blink]
4000a418:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000a41c <_gpio_enable_callback>:

	return gpio_add_callback(dev, &compat->d->cb);
}

void _gpio_enable_callback(struct device *dev, uint32_t pins)
{
4000a41c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a420:	9b 43                   	mov_s      fp,sp

static struct gpio_compat_cb *_gpio_compat_dev_lookup(struct device *dev)
{
	struct gpio_compat_cb *cb;

	for (cb = __gpio_compat_start; cb != __gpio_compat_end; cb++) {
4000a422:	c3 42 00 40 38 d3       	mov_s      r2,0x4000d338
4000a428:	1d 0a 80 0f 00 40 48 d3 	breq       r2,0x4000d348,4000a444 <_gpio_enable_callback+0x28>

		if (cb->dev == dev) {
4000a430:	60 82                   	ld_s       r3,[r2,0]
4000a432:	0b 0b 00 00             	breq       r3,r0,4000a43a <_gpio_enable_callback+0x1e>

4000a436:	08 e2                   	add_s      r2,r2,8
4000a438:	f8 f1                   	b_s        4000a428 <_gpio_enable_callback+0xc>


void _gpio_enable_callback(struct device *dev, uint32_t pins)
{
	struct gpio_compat_cb *compat = _gpio_compat_dev_lookup(dev);

	if (compat) {
4000a43a:	06 ea                   	breq_s     r2,0,4000a444 <_gpio_enable_callback+0x28>

		compat->d->cb.pin_mask |= pins;
4000a43c:	01 82                   	ld_s       r0,[r2,4]
4000a43e:	42 80                   	ld_s       r2,[r0,8]
4000a440:	25 7a                   	or_s       r2,r2,r1
4000a442:	42 a0                   	st_s       r2,[r0,8]
	}
}
4000a444:	e0 7f                   	j_s.d      [blink]
4000a446:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a44a:	e0 78                   	nop_s      

4000a44c <_gpio_disable_callback>:

void _gpio_disable_callback(struct device *dev, uint32_t pins)
{
4000a44c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a450:	9b 43                   	mov_s      fp,sp

static struct gpio_compat_cb *_gpio_compat_dev_lookup(struct device *dev)
{
	struct gpio_compat_cb *cb;

	for (cb = __gpio_compat_start; cb != __gpio_compat_end; cb++) {
4000a452:	c3 42 00 40 38 d3       	mov_s      r2,0x4000d338
4000a458:	1d 0a 80 0f 00 40 48 d3 	breq       r2,0x4000d348,4000a474 <_gpio_disable_callback+0x28>

		if (cb->dev == dev) {
4000a460:	60 82                   	ld_s       r3,[r2,0]
4000a462:	0b 0b 00 00             	breq       r3,r0,4000a46a <_gpio_disable_callback+0x1e>

4000a466:	08 e2                   	add_s      r2,r2,8
4000a468:	f8 f1                   	b_s        4000a458 <_gpio_disable_callback+0xc>


void _gpio_disable_callback(struct device *dev, uint32_t pins)
{
	struct gpio_compat_cb *compat = _gpio_compat_dev_lookup(dev);

	if (compat) {
4000a46a:	06 ea                   	breq_s     r2,0,4000a474 <_gpio_disable_callback+0x28>

		compat->d->cb.pin_mask &= ~(pins);
4000a46c:	01 82                   	ld_s       r0,[r2,4]
4000a46e:	42 80                   	ld_s       r2,[r0,8]
4000a470:	26 7a                   	bic_s      r2,r2,r1
4000a472:	42 a0                   	st_s       r2,[r0,8]
	}
}
4000a474:	e0 7f                   	j_s.d      [blink]
4000a476:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a47a:	e0 78                   	nop_s      

4000a47c <_gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void _gpio_fire_callbacks(sys_slist_t *list,
					struct device *port,
					uint32_t pins)
{
4000a47c:	f1 c0                   	push_s     blink
4000a47e:	fa 09 af fe             	bl.d       40007674 <__st_r13_to_r15>

4000a482:	a3 c1                   	sub_s      sp,sp,12
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void _gpio_fire_callbacks(sys_slist_t *list,
4000a484:	a0 80                   	ld_s       r13,[r0,0]
					struct device *port,
					uint32_t pins)
{
4000a486:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a48a:	9b 43                   	mov_s      fp,sp
4000a48c:	28 47                   	mov_s      r15,r1
4000a48e:	48 46                   	mov_s      r14,r2
	struct gpio_callback *cb;
	sys_snode_t *node;

	SYS_SLIST_FOR_EACH_NODE(list, node) {
4000a490:	0b ed                   	breq_s     r13,0,4000a4a6 <_gpio_fire_callbacks+0x2a>

		cb = (struct gpio_callback *)node;

		if (cb->pin_mask & pins) {
4000a492:	02 85                   	ld_s       r0,[r13,8]
4000a494:	0b 7e                   	tst_s      r14,r0
4000a496:	07 f2                   	beq_s      4000a4a2 <_gpio_fire_callbacks+0x26>

			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
4000a498:	61 85                   	ld_s       r3,[r13,4]
4000a49a:	e1 40                   	mov_s      r0,r15
4000a49c:	a1 41                   	mov_s      r1,r13
4000a49e:	60 7b                   	jl_s.d     [r3]
4000a4a0:	c1 42                   	mov_s      r2,r14
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return !node ? NULL : node->next;
4000a4a2:	a0 85                   	ld_s       r13,[r13,0]
4000a4a4:	f6 f1                   	b_s        4000a490 <_gpio_fire_callbacks+0x14>

		}
	}
}
4000a4a6:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a4aa:	0c dc                   	mov_s      r12,12
4000a4ac:	29 02 8f fe             	b          400076d4 <__ld_r13_to_r15_ret>


4000a4b0 <ss_gpio_qmsi_0_int_callback>:

#endif /* CONFIG_GPIO_QMSI_SS_1 */

static void ss_gpio_qmsi_callback(struct device *port, uint32_t status)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
4000a4b0:	c3 43 00 a8 70 0d       	mov_s      r3,0xa8000d70
4000a4b6:	02 83                   	ld_s       r0,[r3,8]
	}
}

#ifdef CONFIG_GPIO_QMSI_SS_0
static void ss_gpio_qmsi_0_int_callback(void *data, uint32_t status)
{
4000a4b8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
#endif /* CONFIG_GPIO_QMSI_SS_1 */

static void ss_gpio_qmsi_callback(struct device *port, uint32_t status)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
	const uint32_t enabled_mask = context->pin_callbacks & status;
4000a4bc:	42 80                   	ld_s       r2,[r0,8]
	}
}

#ifdef CONFIG_GPIO_QMSI_SS_0
static void ss_gpio_qmsi_0_int_callback(void *data, uint32_t status)
{
4000a4be:	9b 43                   	mov_s      fp,sp
static void ss_gpio_qmsi_callback(struct device *port, uint32_t status)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
	const uint32_t enabled_mask = context->pin_callbacks & status;

	if (enabled_mask) {
4000a4c0:	04 21 82 80             	and.f      r2,r1,r2
4000a4c4:	06 f2                   	beq_s      4000a4d0 <ss_gpio_qmsi_0_int_callback+0x20>

		_gpio_fire_callbacks(&context->callbacks, port, enabled_mask);
4000a4c6:	60 41                   	mov_s      r1,r3
4000a4c8:	b5 07 ef ff             	b.d        4000a47c <_gpio_fire_callbacks>

4000a4cc:	04 14 1b 34             	ld.ab      fp,[sp,4]
static void ss_gpio_qmsi_0_int_callback(void *data, uint32_t status)
{
	struct device *port = DEVICE_GET(ss_gpio_0);

	ss_gpio_qmsi_callback(port, status);
}
4000a4d0:	e0 7f                   	j_s.d      [blink]
4000a4d2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a4d6:	e0 78                   	nop_s      

4000a4d8 <ss_qmsi_write_bit>:
	ss_gpio_qmsi_callback(port, status);
}
#endif /* CONFIG_GPIO_QMSI_SS_1 */

static void ss_qmsi_write_bit(uint32_t *target, uint8_t bit, uint8_t value)
{
4000a4d8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a4dc:	9b 43                   	mov_s      fp,sp
	if (value) {
4000a4de:	0a ea                   	breq_s     r2,0,4000a4f0 <ss_qmsi_write_bit+0x18>

static ALWAYS_INLINE
	void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t reg = 0;

	__asm__ volatile("ld	%1, %0\n"
4000a4e0:	4c 70                   	mov_s      r2,0
4000a4e2:	00 10 02 00             	ld         r2,[r0,0]
4000a4e6:	0f 22 42 00             	bset       r2,r2,r1
4000a4ea:	00 18 80 00             	st         r2,[r0]
4000a4ee:	08 f0                   	b_s        4000a4fc <ss_qmsi_write_bit+0x24>

static ALWAYS_INLINE
	void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t reg = 0;

	__asm__ volatile("ld	%1, %0\n"
4000a4f0:	00 10 02 00             	ld         r2,[r0,0]
4000a4f4:	10 22 42 00             	bclr       r2,r2,r1
4000a4f8:	00 18 80 00             	st         r2,[r0]
		sys_set_bit((uintptr_t) target, bit);
	} else {
		sys_clear_bit((uintptr_t) target, bit);
	}
}
4000a4fc:	e0 7f                   	j_s.d      [blink]
4000a4fe:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a502:	e0 78                   	nop_s      

4000a504 <ss_gpio_qmsi_manage_callback>:

static inline int ss_gpio_qmsi_manage_callback(struct device *port,
					       struct gpio_callback *callback,
					       bool set)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
4000a504:	02 80                   	ld_s       r0,[r0,8]
}

static inline int ss_gpio_qmsi_manage_callback(struct device *port,
					       struct gpio_callback *callback,
					       bool set)
{
4000a506:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a50a:	4f 7a                   	exth_s     r2,r2
4000a50c:	9b 43                   	mov_s      fp,sp
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
4000a50e:	4b 7a                   	tst_s      r2,r2
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
4000a510:	40 80                   	ld_s       r2,[r0,0]
 * @param node A pointer on the node to remove from the list
 */
static inline void sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
4000a512:	ca 23 21 00             	mov.z      r3,0
4000a516:	0c f2                   	beq_s      4000a52c <ss_gpio_qmsi_manage_callback+0x28>

 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
4000a518:	40 a1                   	st_s       r2,[r1,0]
	list->head = node;

	if (!list->tail) {
4000a51a:	41 80                   	ld_s       r2,[r0,4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
4000a51c:	20 a0                   	st_s       r1,[r0,0]

	if (!list->tail) {
4000a51e:	98 ea                   	brne_s     r2,0,4000a54c <ss_gpio_qmsi_manage_callback+0x48>

		list->tail = list->head;
4000a520:	21 a0                   	st_s       r1,[r0,4]
4000a522:	16 f0                   	b_s        4000a54c <ss_gpio_qmsi_manage_callback+0x48>

{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
		if (test == node) {
4000a524:	0d 0a 40 00             	breq       r2,r1,4000a530 <ss_gpio_qmsi_manage_callback+0x2c>

4000a528:	40 43                   	mov_s      r3,r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return !node ? NULL : node->next;
4000a52a:	40 82                   	ld_s       r2,[r2,0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
4000a52c:	fc ea                   	brne_s     r2,0,4000a524 <ss_gpio_qmsi_manage_callback+0x20>

4000a52e:	10 f0                   	b_s        4000a54c <ss_gpio_qmsi_manage_callback+0x48>

4000a530:	81 80                   	ld_s       r12,[r0,4]
4000a532:	40 81                   	ld_s       r2,[r1,0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
4000a534:	86 eb                   	brne_s     r3,0,4000a540 <ss_gpio_qmsi_manage_callback+0x3c>

		list->head = node->next;

		/* Was node also the tail? */
		if (list->tail == node) {
4000a536:	15 0c 69 10             	brne.t.d   r12,r1,4000a548 <ss_gpio_qmsi_manage_callback+0x44>

4000a53a:	40 a0                   	st_s       r2,[r0,0]
			list->tail = list->head;
4000a53c:	41 a0                   	st_s       r2,[r0,4]
4000a53e:	06 f0                   	b_s        4000a548 <ss_gpio_qmsi_manage_callback+0x44>

		}
	} else {
		prev_node->next = node->next;

		/* Was node the tail? */
		if (list->tail == node) {
4000a540:	09 0c 69 10             	brne.t.d   r12,r1,4000a548 <ss_gpio_qmsi_manage_callback+0x44>

4000a544:	40 a3                   	st_s       r2,[r3,0]
			list->tail = prev_node;
4000a546:	61 a0                   	st_s       r3,[r0,4]
		}
	}

	node->next = NULL;
4000a548:	0c 70                   	mov_s      r0,0
4000a54a:	00 a1                   	st_s       r0,[r1,0]
	struct ss_gpio_qmsi_runtime *context = port->driver_data;

	_gpio_manage_callback(&context->callbacks, callback, set);

	return 0;
}
4000a54c:	0c 70                   	mov_s      r0,0
4000a54e:	e0 7f                   	j_s.d      [blink]
4000a550:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000a554 <ss_gpio_qmsi_init>:
		qm_ss_gpio_isr_1(NULL);
	}
}

static int ss_gpio_qmsi_init(struct device *port)
{
4000a554:	f1 c0                   	push_s     blink
4000a556:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000a55a:	08 45                   	mov_s      r13,r0
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
4000a55c:	00 80                   	ld_s       r0,[r0,0]
		qm_ss_gpio_isr_1(NULL);
	}
}

static int ss_gpio_qmsi_init(struct device *port)
{
4000a55e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	uint32_t *scss_intmask = NULL;

	switch (gpio_config->gpio) {
4000a562:	02 80                   	ld_s       r0,[r0,8]
		qm_ss_gpio_isr_1(NULL);
	}
}

static int ss_gpio_qmsi_init(struct device *port)
{
4000a564:	9b 43                   	mov_s      fp,sp
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	uint32_t *scss_intmask = NULL;

	switch (gpio_config->gpio) {
4000a566:	00 80                   	ld_s       r0,[r0,0]
4000a568:	17 e8                   	breq_s     r0,0,4000a596 <ss_gpio_qmsi_init+0x42>

4000a56a:	61 08 71 00             	brne.d     r0,1,4000a5c8 <ss_gpio_qmsi_init+0x74>

4000a56e:	2c 71                   	mov_s      r1,1
		*scss_intmask &= ~BIT(8);
		break;
#endif /* CONFIG_GPIO_QMSI_SS_0 */
#ifdef CONFIG_GPIO_QMSI_SS_1
	case QM_SS_GPIO_1:
		IRQ_CONNECT(IRQ_GPIO1_INTR,
4000a570:	de 09 e0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a574:	15 d8                   	mov_s      r0,21
			    CONFIG_GPIO_QMSI_SS_1_PRI, ss_gpio_isr,
			    DEVICE_GET(ss_gpio_1), 0);
		irq_enable(IRQ_GPIO1_INTR);
4000a576:	ba 09 e0 00             	bl.d       4000bf2c <_arch_irq_enable>

4000a57a:	15 d8                   	mov_s      r0,21

		ss_clk_gpio_enable(QM_SS_GPIO_1);
4000a57c:	e2 0d e0 00             	bl.d       4000c35c <ss_clk_gpio_enable>

4000a580:	0c 71                   	mov_s      r0,1

		scss_intmask =
			     (uint32_t *)&QM_SCSS_INT->int_ss_gpio_1_intr_mask;
		*scss_intmask &= ~BIT(8);
4000a582:	00 16 00 70 80 b0 0c 04 	ld         r0,[0xb080040c]
4000a58a:	a8 b8                   	bclr_s     r0,r0,8
4000a58c:	00 1e 00 70 80 b0 0c 04 	st         r0,[0xb080040c]
		break;
4000a594:	14 f0                   	b_s        4000a5bc <ss_gpio_qmsi_init+0x68>

	uint32_t *scss_intmask = NULL;

	switch (gpio_config->gpio) {
#ifdef CONFIG_GPIO_QMSI_SS_0
	case QM_SS_GPIO_0:
		IRQ_CONNECT(IRQ_GPIO0_INTR,
4000a596:	2c 71                   	mov_s      r1,1
4000a598:	b6 09 e0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a59c:	14 d8                   	mov_s      r0,20
			    CONFIG_GPIO_QMSI_SS_0_PRI, ss_gpio_isr,
			    DEVICE_GET(ss_gpio_0), 0);
		irq_enable(IRQ_GPIO0_INTR);
4000a59e:	92 09 e0 00             	bl.d       4000bf2c <_arch_irq_enable>

4000a5a2:	14 d8                   	mov_s      r0,20

		ss_clk_gpio_enable(QM_SS_GPIO_0);
4000a5a4:	ba 0d e0 00             	bl.d       4000c35c <ss_clk_gpio_enable>

4000a5a8:	0c 70                   	mov_s      r0,0

		scss_intmask =
			     (uint32_t *)&QM_SCSS_INT->int_ss_gpio_0_intr_mask;
		*scss_intmask &= ~BIT(8);
4000a5aa:	00 16 00 70 80 b0 08 04 	ld         r0,[0xb0800408]
4000a5b2:	a8 b8                   	bclr_s     r0,r0,8
4000a5b4:	00 1e 00 70 80 b0 08 04 	st         r0,[0xb0800408]
#endif /* CONFIG_GPIO_QMSI_SS_1 */
	default:
		return -EIO;
	}

	port->driver_api = &api_funcs;
4000a5bc:	c3 40 00 a8 c8 0c       	mov_s      r0,0xa8000cc8
4000a5c2:	01 a5                   	st_s       r0,[r13,4]
	return 0;
4000a5c4:	0c 70                   	mov_s      r0,0
4000a5c6:	04 f0                   	b_s        4000a5cc <ss_gpio_qmsi_init+0x78>

			     (uint32_t *)&QM_SCSS_INT->int_ss_gpio_1_intr_mask;
		*scss_intmask &= ~BIT(8);
		break;
#endif /* CONFIG_GPIO_QMSI_SS_1 */
	default:
		return -EIO;
4000a5c8:	8a 20 ff 0e             	mov        r0,-5
	}

	port->driver_api = &api_funcs;
	return 0;
}
4000a5cc:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a5d0:	04 14 1f 30             	ld         blink,[sp,4]
4000a5d4:	00 c5                   	ld_s       r13,[sp,0]
4000a5d6:	e0 7f                   	j_s.d      [blink]
4000a5d8:	a2 c0                   	add_s      sp,sp,8
4000a5da:	e0 78                   	nop_s      

4000a5dc <ss_gpio_qmsi_disable_callback>:
	return 0;
}

static inline int ss_gpio_qmsi_disable_callback(struct device *port,
						int access_op, uint32_t pin)
{
4000a5dc:	f1 c0                   	push_s     blink
4000a5de:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000a5e2:	41 c6                   	st_s       r14,[sp,4]
4000a5e4:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a5e8:	9b 43                   	mov_s      fp,sp
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
4000a5ea:	a2 80                   	ld_s       r13,[r0,8]

	if (access_op == GPIO_ACCESS_BY_PIN) {
4000a5ec:	8d e9                   	brne_s     r1,0,4000a606 <ss_gpio_qmsi_disable_callback+0x2a>

		_gpio_disable_callback(port, BIT(pin));
4000a5ee:	00 2e 8e 70 00 00 01 00 	asl        r14,1,r2
4000a5f6:	5a 0e ef ff             	bl.d       4000a44c <_gpio_disable_callback>

4000a5fa:	c1 41                   	mov_s      r1,r14
		context->pin_callbacks &= ~BIT(pin);
4000a5fc:	02 85                   	ld_s       r0,[r13,8]
4000a5fe:	06 20 8e 03             	bic        r14,r0,r14
4000a602:	c2 a5                   	st_s       r14,[r13,8]
4000a604:	06 f0                   	b_s        4000a610 <ss_gpio_qmsi_disable_callback+0x34>

	} else {
		_gpio_disable_callback(port, 0xffffffff);
4000a606:	4a 0e ef ff             	bl.d       4000a44c <_gpio_disable_callback>

4000a60a:	2c 77                   	mov_s      r1,-1
		context->pin_callbacks = 0;
4000a60c:	0c 70                   	mov_s      r0,0
4000a60e:	02 a5                   	st_s       r0,[r13,8]
	}

	return 0;
}
4000a610:	0c 70                   	mov_s      r0,0
4000a612:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a616:	08 dc                   	mov_s      r12,8
4000a618:	c1 00 8f fe             	b          400076d8 <__ld_r13_to_r14_ret>


4000a61c <ss_gpio_qmsi_enable_callback>:
	return 0;
}

static inline int ss_gpio_qmsi_enable_callback(struct device *port,
					       int access_op, uint32_t pin)
{
4000a61c:	f1 c0                   	push_s     blink
4000a61e:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000a622:	41 c6                   	st_s       r14,[sp,4]
4000a624:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a628:	9b 43                   	mov_s      fp,sp
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
4000a62a:	a2 80                   	ld_s       r13,[r0,8]

	if (access_op == GPIO_ACCESS_BY_PIN) {
4000a62c:	8c e9                   	brne_s     r1,0,4000a644 <ss_gpio_qmsi_enable_callback+0x28>

		_gpio_enable_callback(port, BIT(pin));
4000a62e:	00 2e 8e 70 00 00 01 00 	asl        r14,1,r2
4000a636:	ea 0d ef ff             	bl.d       4000a41c <_gpio_enable_callback>

4000a63a:	c1 41                   	mov_s      r1,r14
		context->pin_callbacks |= BIT(pin);
4000a63c:	02 85                   	ld_s       r0,[r13,8]
4000a63e:	05 7e                   	or_s       r14,r14,r0
4000a640:	c2 a5                   	st_s       r14,[r13,8]
4000a642:	07 f0                   	b_s        4000a64e <ss_gpio_qmsi_enable_callback+0x32>

	} else {
		_gpio_enable_callback(port, 0xffffffff);
4000a644:	da 0d ef ff             	bl.d       4000a41c <_gpio_enable_callback>

4000a648:	2c 77                   	mov_s      r1,-1
		context->pin_callbacks = 0xffffffff;
4000a64a:	0c 77                   	mov_s      r0,-1
4000a64c:	02 a5                   	st_s       r0,[r13,8]
	}

	return 0;
}
4000a64e:	0c 70                   	mov_s      r0,0
4000a650:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a654:	08 dc                   	mov_s      r12,8
4000a656:	85 00 8f fe             	b          400076d8 <__ld_r13_to_r14_ret>

4000a65a:	e0 78                   	nop_s      

4000a65c <ss_gpio_qmsi_read>:
}

static inline int ss_gpio_qmsi_read(struct device *port, int access_op,
				    uint32_t pin, uint32_t *value)
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
4000a65c:	00 80                   	ld_s       r0,[r0,0]
	return 0;
}

static inline int ss_gpio_qmsi_read(struct device *port, int access_op,
				    uint32_t pin, uint32_t *value)
{
4000a65e:	f1 c0                   	push_s     blink
4000a660:	fc 1c 48 b3             	st.a       r13,[sp,-4]
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
4000a664:	02 80                   	ld_s       r0,[r0,8]
	return 0;
}

static inline int ss_gpio_qmsi_read(struct device *port, int access_op,
				    uint32_t pin, uint32_t *value)
{
4000a666:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a66a:	9b 43                   	mov_s      fp,sp
4000a66c:	68 45                   	mov_s      r13,r3
4000a66e:	a1 c1                   	sub_s      sp,sp,4
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
4000a670:	00 80                   	ld_s       r0,[r0,0]
	qm_ss_gpio_state_t state;

	if (access_op == GPIO_ACCESS_BY_PIN) {
4000a672:	8b e9                   	brne_s     r1,0,4000a686 <ss_gpio_qmsi_read+0x2a>

		qm_ss_gpio_read_pin(gpio, pin, &state);
4000a674:	4f 79                   	exth_s     r1,r2
4000a676:	16 0e e0 00             	bl.d       4000c488 <qm_ss_gpio_read_pin>

4000a67a:	42 23 02 31             	sub        r2,fp,4
		*value = state;
4000a67e:	fc 13 00 b0             	ld         r0,[fp,-4]
4000a682:	00 a5                   	st_s       r0,[r13,0]
4000a684:	04 f0                   	b_s        4000a68c <ss_gpio_qmsi_read+0x30>

	} else {
		qm_ss_gpio_read_port(gpio, value);
4000a686:	7e 0e e0 00             	bl.d       4000c500 <qm_ss_gpio_read_port>

4000a68a:	60 41                   	mov_s      r1,r3
	}

	return 0;
}
4000a68c:	0c 70                   	mov_s      r0,0
4000a68e:	7b 44                   	mov_s      sp,fp
4000a690:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a694:	04 14 1f 30             	ld         blink,[sp,4]
4000a698:	00 c5                   	ld_s       r13,[sp,0]
4000a69a:	e0 7f                   	j_s.d      [blink]
4000a69c:	a2 c0                   	add_s      sp,sp,8
4000a69e:	e0 78                   	nop_s      

4000a6a0 <ss_gpio_qmsi_write>:
}

static inline int ss_gpio_qmsi_write(struct device *port, int access_op,
				     uint32_t pin, uint32_t value)
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
4000a6a0:	00 80                   	ld_s       r0,[r0,0]
	return 0;
}

static inline int ss_gpio_qmsi_write(struct device *port, int access_op,
				     uint32_t pin, uint32_t value)
{
4000a6a2:	f1 c0                   	push_s     blink
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
4000a6a4:	02 80                   	ld_s       r0,[r0,8]
	return 0;
}

static inline int ss_gpio_qmsi_write(struct device *port, int access_op,
				     uint32_t pin, uint32_t value)
{
4000a6a6:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a6aa:	9b 43                   	mov_s      fp,sp
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
4000a6ac:	00 80                   	ld_s       r0,[r0,0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
4000a6ae:	8a e9                   	brne_s     r1,0,4000a6c0 <ss_gpio_qmsi_write+0x20>

4000a6b0:	4f 79                   	exth_s     r1,r2
		if (value) {
4000a6b2:	05 eb                   	breq_s     r3,0,4000a6ba <ss_gpio_qmsi_write+0x1a>

			qm_ss_gpio_set_pin(gpio, pin);
4000a6b4:	fe 0d c0 00             	bl         4000c4b0 <qm_ss_gpio_set_pin>

4000a6b8:	07 f0                   	b_s        4000a6c6 <ss_gpio_qmsi_write+0x26>

		} else {
			qm_ss_gpio_clear_pin(gpio, pin);
4000a6ba:	1e 0e c0 00             	bl         4000c4d4 <qm_ss_gpio_clear_pin>

4000a6be:	05 f0                   	b_s        4000a6c6 <ss_gpio_qmsi_write+0x26>

		}
	} else {
		qm_ss_gpio_write_port(gpio, value);
4000a6c0:	62 0e e0 00             	bl.d       4000c520 <qm_ss_gpio_write_port>

4000a6c4:	60 41                   	mov_s      r1,r3
	}

	return 0;
}
4000a6c6:	0c 70                   	mov_s      r0,0
4000a6c8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a6cc:	d1 c0                   	pop_s      blink
4000a6ce:	e0 7e                   	j_s        [blink]

4000a6d0 <ss_gpio_isr>:
};

void ss_gpio_isr(void *arg)
{
	struct device *port = arg;
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
4000a6d0:	00 80                   	ld_s       r0,[r0,0]
	.enable_callback = ss_gpio_qmsi_enable_callback,
	.disable_callback = ss_gpio_qmsi_disable_callback,
};

void ss_gpio_isr(void *arg)
{
4000a6d2:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct device *port = arg;
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;

	if (gpio_config->gpio == QM_SS_GPIO_0) {
4000a6d6:	02 80                   	ld_s       r0,[r0,8]
	.enable_callback = ss_gpio_qmsi_enable_callback,
	.disable_callback = ss_gpio_qmsi_disable_callback,
};

void ss_gpio_isr(void *arg)
{
4000a6d8:	9b 43                   	mov_s      fp,sp
	struct device *port = arg;
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;

	if (gpio_config->gpio == QM_SS_GPIO_0) {
4000a6da:	00 80                   	ld_s       r0,[r0,0]
4000a6dc:	85 e8                   	brne_s     r0,0,4000a6e6 <ss_gpio_isr+0x16>

		qm_ss_gpio_isr_0(NULL);
4000a6de:	19 05 e0 00             	b.d        4000c3f4 <qm_ss_gpio_isr_0>

4000a6e2:	04 14 1b 34             	ld.ab      fp,[sp,4]
	} else {
		qm_ss_gpio_isr_1(NULL);
4000a6e6:	0c 70                   	mov_s      r0,0
4000a6e8:	1d 05 e0 00             	b.d        4000c404 <qm_ss_gpio_isr_1>

4000a6ec:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000a6f0 <ss_qmsi_pin_config.isra.1>:
	} else {
		sys_clear_bit((uintptr_t) target, bit);
	}
}

static inline void ss_qmsi_pin_config(struct device *port, uint32_t pin,
4000a6f0:	f1 c0                   	push_s     blink
				      int flags)
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
4000a6f2:	02 80                   	ld_s       r0,[r0,8]
	} else {
		sys_clear_bit((uintptr_t) target, bit);
	}
}

static inline void ss_qmsi_pin_config(struct device *port, uint32_t pin,
4000a6f4:	82 0f 6f fe             	bl.d       40007674 <__st_r13_to_r15>

4000a6f8:	a3 c1                   	sub_s      sp,sp,12
4000a6fa:	fc 1c c8 b6             	st.a       fp,[sp,-4]
				      int flags)
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
4000a6fe:	e0 80                   	ld_s       r15,[r0,0]
	} else {
		sys_clear_bit((uintptr_t) target, bit);
	}
}

static inline void ss_qmsi_pin_config(struct device *port, uint32_t pin,
4000a700:	9b 43                   	mov_s      fp,sp
4000a702:	28 45                   	mov_s      r13,r1
4000a704:	a7 c1                   	sub_s      sp,sp,28
4000a706:	48 46                   	mov_s      r14,r2
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	qm_ss_gpio_t gpio = gpio_config->gpio;
	uint32_t controller;

	qm_ss_gpio_port_config_t cfg = { 0 };
4000a708:	42 23 00 37             	sub        r0,fp,28
4000a70c:	2c 70                   	mov_s      r1,0
4000a70e:	66 0c 2f fb             	bl.d       40000b70 <memset>

4000a712:	1c da                   	mov_s      r2,28

	switch (gpio) {
4000a714:	07 ef                   	breq_s     r15,0,4000a722 <ss_qmsi_pin_config.isra.1+0x32>

4000a716:	b3 0f 51 10             	brne       r15,1,4000a7c6 <ss_qmsi_pin_config.isra.1+0xd6>

		controller = QM_SS_GPIO_0_BASE;
		break;
#endif /* CONFIG_GPIO_QMSI_SS_0 */
#ifdef CONFIG_GPIO_QMSI_SS_1
	case QM_SS_GPIO_1:
		controller = QM_SS_GPIO_1_BASE;
4000a71a:	c3 43 01 80 00 79       	mov_s      r3,0x80017900
4000a720:	04 f0                   	b_s        4000a728 <ss_qmsi_pin_config.isra.1+0x38>

	qm_ss_gpio_port_config_t cfg = { 0 };

	switch (gpio) {
#ifdef CONFIG_GPIO_QMSI_SS_0
	case QM_SS_GPIO_0:
		controller = QM_SS_GPIO_0_BASE;
4000a722:	c3 43 01 80 00 78       	mov_s      r3,0x80017800
#endif /* CONFIG_GPIO_QMSI_SS_1 */
	default:
		return;
	}

	cfg.direction = __builtin_arc_lr(controller + QM_SS_GPIO_SWPORTA_DDR);
4000a728:	01 6b                   	add_s      r0,r3,1
4000a72a:	2a 20 00 00             	lr         r0,[r0]
4000a72e:	e4 1b 00 b0             	st         r0,[fp,-28]
	cfg.int_en = __builtin_arc_lr(controller + QM_SS_GPIO_INTEN);
4000a732:	03 6b                   	add_s      r0,r3,3
4000a734:	2a 20 00 00             	lr         r0,[r0]
4000a738:	e8 1b 00 b0             	st         r0,[fp,-24]
	cfg.int_type = __builtin_arc_lr(controller + QM_SS_GPIO_INTTYPE_LEVEL);
4000a73c:	05 6b                   	add_s      r0,r3,5
4000a73e:	2a 20 00 00             	lr         r0,[r0]
4000a742:	ec 1b 00 b0             	st         r0,[fp,-20]
	cfg.int_polarity =
	    __builtin_arc_lr(controller + QM_SS_GPIO_INT_POLARITY);
4000a746:	06 6b                   	add_s      r0,r3,6
4000a748:	2a 20 00 00             	lr         r0,[r0]
	}

	cfg.direction = __builtin_arc_lr(controller + QM_SS_GPIO_SWPORTA_DDR);
	cfg.int_en = __builtin_arc_lr(controller + QM_SS_GPIO_INTEN);
	cfg.int_type = __builtin_arc_lr(controller + QM_SS_GPIO_INTTYPE_LEVEL);
	cfg.int_polarity =
4000a74c:	f0 1b 00 b0             	st         r0,[fp,-16]
	    __builtin_arc_lr(controller + QM_SS_GPIO_INT_POLARITY);
	cfg.int_debounce = __builtin_arc_lr(controller + QM_SS_GPIO_DEBOUNCE);
4000a750:	08 e3                   	add_s      r3,r3,8
4000a752:	2a 23 c0 00             	lr         r3,[r3]
4000a756:	c7 bd                   	bmsk_s     r13,r13,7
4000a758:	f4 1b c0 b0             	st         r3,[fp,-12]

	ss_qmsi_write_bit(&cfg.direction, pin, (flags & GPIO_DIR_MASK));
4000a75c:	42 23 00 37             	sub        r0,fp,28
4000a760:	a1 41                   	mov_s      r1,r13
4000a762:	7a 0d ef ff             	bl.d       4000a4d8 <ss_qmsi_write_bit>

4000a766:	44 26 42 10             	and        r2,r14,1

	if (flags & GPIO_INT) {
4000a76a:	3d 0e 76 10             	bbit0.t.d  r14,1,4000a7a4 <ss_qmsi_pin_config.isra.1+0xb4>

4000a76e:	42 23 00 35             	sub        r0,fp,20
		ss_qmsi_write_bit(&cfg.int_type, pin, (flags & GPIO_INT_EDGE));
4000a772:	a1 41                   	mov_s      r1,r13
4000a774:	66 0d ef ff             	bl.d       4000a4d8 <ss_qmsi_write_bit>

4000a778:	44 26 02 18             	and        r2,r14,32
		ss_qmsi_write_bit(&cfg.int_polarity, pin,
4000a77c:	42 23 00 34             	sub        r0,fp,16
4000a780:	a1 41                   	mov_s      r1,r13
4000a782:	5a 0d ef ff             	bl.d       4000a4d8 <ss_qmsi_write_bit>

4000a786:	44 26 02 11             	and        r2,r14,4
			       (flags & GPIO_INT_ACTIVE_HIGH));
		ss_qmsi_write_bit(&cfg.int_debounce, pin,
4000a78a:	42 23 00 33             	sub        r0,fp,12
4000a78e:	a1 41                   	mov_s      r1,r13
4000a790:	4a 0d ef ff             	bl.d       4000a4d8 <ss_qmsi_write_bit>

4000a794:	44 26 02 14             	and        r2,r14,16
			       (flags & GPIO_INT_DEBOUNCE));
		ss_qmsi_write_bit(&cfg.int_en, pin, 1);
4000a798:	42 23 00 36             	sub        r0,fp,24
4000a79c:	a1 41                   	mov_s      r1,r13
4000a79e:	3e 0d ef ff             	bl.d       4000a4d8 <ss_qmsi_write_bit>

4000a7a2:	4c 71                   	mov_s      r2,1
	}

	switch (gpio) {
4000a7a4:	07 ef                   	breq_s     r15,0,4000a7b2 <ss_qmsi_pin_config.isra.1+0xc2>

4000a7a6:	23 0f 51 10             	brne       r15,1,4000a7c6 <ss_qmsi_pin_config.isra.1+0xd6>

		cfg.callback = ss_gpio_qmsi_0_int_callback;
		break;
#endif /* CONFIG_GPIO_QMSI_SS_0 */
#ifdef CONFIG_GPIO_QMSI_SS_1
	case QM_SS_GPIO_1:
		cfg.callback = ss_gpio_qmsi_1_int_callback;
4000a7aa:	c3 40 00 40 2c a8       	mov_s      r0,0x4000a82c
4000a7b0:	04 f0                   	b_s        4000a7b8 <ss_qmsi_pin_config.isra.1+0xc8>

	}

	switch (gpio) {
#ifdef CONFIG_GPIO_QMSI_SS_0
	case QM_SS_GPIO_0:
		cfg.callback = ss_gpio_qmsi_0_int_callback;
4000a7b2:	c3 40 00 40 b0 a4       	mov_s      r0,0x4000a4b0
		break;
#endif /* CONFIG_GPIO_QMSI_SS_0 */
#ifdef CONFIG_GPIO_QMSI_SS_1
	case QM_SS_GPIO_1:
		cfg.callback = ss_gpio_qmsi_1_int_callback;
4000a7b8:	f8 1b 00 b0             	st         r0,[fp,-8]

	default:
		return;
	}

	qm_ss_gpio_set_config(gpio, &cfg);
4000a7bc:	42 23 01 37             	sub        r1,fp,28
4000a7c0:	56 0c e0 00             	bl.d       4000c414 <qm_ss_gpio_set_config>

4000a7c4:	e1 40                   	mov_s      r0,r15
}
4000a7c6:	7b 44                   	mov_s      sp,fp
4000a7c8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a7cc:	0c dc                   	mov_s      r12,12
4000a7ce:	09 07 4f fe             	b          400076d4 <__ld_r13_to_r15_ret>

4000a7d2:	e0 78                   	nop_s      

4000a7d4 <ss_gpio_qmsi_config>:
	}
}

static inline int ss_gpio_qmsi_config(struct device *port, int access_op,
				      uint32_t pin, int flags)
{
4000a7d4:	f1 c0                   	push_s     blink
4000a7d6:	9e 0e 6f fe             	bl.d       40007670 <__st_r13_to_r16>

4000a7da:	a4 c1                   	sub_s      sp,sp,16
4000a7dc:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a7e0:	08 46                   	mov_s      r14,r0
4000a7e2:	9b 43                   	mov_s      fp,sp
4000a7e4:	20 40                   	mov_s      r0,r1
4000a7e6:	40 41                   	mov_s      r1,r2
	if (((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) ||
4000a7e8:	44 23 c2 00             	and        r2,r3,3
4000a7ec:	33 0a f0 00             	breq.d     r2,3,4000a81e <ss_gpio_qmsi_config+0x4a>

4000a7f0:	68 47                   	mov_s      r15,r3
	    ((flags & GPIO_DIR_IN) && (flags & GPIO_DIR_OUT))) {
		return -EINVAL;
	}

	if (access_op == GPIO_ACCESS_BY_PIN) {
4000a7f2:	0b 78                   	tst_s      r0,r0
		ss_qmsi_pin_config(port, pin, flags);
4000a7f4:	00 86                   	ld_s       r0,[r14,0]
	if (((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) ||
	    ((flags & GPIO_DIR_IN) && (flags & GPIO_DIR_OUT))) {
		return -EINVAL;
	}

	if (access_op == GPIO_ACCESS_BY_PIN) {
4000a7f6:	06 f4                   	bne_s      4000a800 <ss_gpio_qmsi_config+0x2c>

		ss_qmsi_pin_config(port, pin, flags);
4000a7f8:	fa 0e ef ff             	bl.d       4000a6f0 <ss_qmsi_pin_config.isra.1>

4000a7fc:	60 42                   	mov_s      r2,r3
4000a7fe:	0f f0                   	b_s        4000a81a <ss_gpio_qmsi_config+0x46>

}

static inline void ss_qmsi_port_config(struct device *port, int flags)
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	uint8_t num_pins = gpio_config->num_pins;
4000a800:	02 80                   	ld_s       r0,[r0,8]
	int i;

	for (i = 0; i < num_pins; i++) {
4000a802:	ad 70                   	mov_s      r13,0
}

static inline void ss_qmsi_port_config(struct device *port, int flags)
{
	struct ss_gpio_qmsi_config *gpio_config = port->config->config_info;
	uint8_t num_pins = gpio_config->num_pins;
4000a804:	04 10 90 00             	ldb        r16,[r0,4]
	int i;

	for (i = 0; i < num_pins; i++) {
4000a808:	13 0d 03 14             	brge       r13,r16,4000a81a <ss_gpio_qmsi_config+0x46>

4000a80c:	00 86                   	ld_s       r0,[r14,0]
		ss_qmsi_pin_config(port, i, flags);
4000a80e:	a1 41                   	mov_s      r1,r13
4000a810:	e1 42                   	mov_s      r2,r15
4000a812:	e2 0e ef ff             	bl.d       4000a6f0 <ss_qmsi_pin_config.isra.1>

4000a816:	a5 71                   	add_s      r13,r13,1
4000a818:	f8 f1                   	b_s        4000a808 <ss_gpio_qmsi_config+0x34>

	if (access_op == GPIO_ACCESS_BY_PIN) {
		ss_qmsi_pin_config(port, pin, flags);
	} else {
		ss_qmsi_port_config(port, flags);
	}
	return 0;
4000a81a:	0c 70                   	mov_s      r0,0
4000a81c:	03 f0                   	b_s        4000a822 <ss_gpio_qmsi_config+0x4e>

static inline int ss_gpio_qmsi_config(struct device *port, int access_op,
				      uint32_t pin, int flags)
{
	if (((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) ||
	    ((flags & GPIO_DIR_IN) && (flags & GPIO_DIR_OUT))) {
		return -EINVAL;
4000a81e:	8a 20 bf 0a             	mov        r0,-22
		ss_qmsi_pin_config(port, pin, flags);
	} else {
		ss_qmsi_port_config(port, flags);
	}
	return 0;
}
4000a822:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a826:	10 dc                   	mov_s      r12,16
4000a828:	a9 06 4f fe             	b          400076d0 <__ld_r13_to_r16_ret>


4000a82c <ss_gpio_qmsi_1_int_callback>:

#endif /* CONFIG_GPIO_QMSI_SS_1 */

static void ss_gpio_qmsi_callback(struct device *port, uint32_t status)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
4000a82c:	c3 40 00 a8 70 0d       	mov_s      r0,0xa8000d70
4000a832:	05 80                   	ld_s       r0,[r0,20]
}
#endif /* CONFIG_GPIO_QMSI_SS_0 */

#ifdef CONFIG_GPIO_QMSI_SS_1
static void ss_gpio_qmsi_1_int_callback(void *data, uint32_t status)
{
4000a834:	fc 1c c8 b6             	st.a       fp,[sp,-4]
#endif /* CONFIG_GPIO_QMSI_SS_1 */

static void ss_gpio_qmsi_callback(struct device *port, uint32_t status)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
	const uint32_t enabled_mask = context->pin_callbacks & status;
4000a838:	42 80                   	ld_s       r2,[r0,8]
}
#endif /* CONFIG_GPIO_QMSI_SS_0 */

#ifdef CONFIG_GPIO_QMSI_SS_1
static void ss_gpio_qmsi_1_int_callback(void *data, uint32_t status)
{
4000a83a:	9b 43                   	mov_s      fp,sp
static void ss_gpio_qmsi_callback(struct device *port, uint32_t status)
{
	struct ss_gpio_qmsi_runtime *context = port->driver_data;
	const uint32_t enabled_mask = context->pin_callbacks & status;

	if (enabled_mask) {
4000a83c:	04 21 82 80             	and.f      r2,r1,r2
4000a840:	08 f2                   	beq_s      4000a850 <ss_gpio_qmsi_1_int_callback+0x24>

		_gpio_fire_callbacks(&context->callbacks, port, enabled_mask);
4000a842:	c3 41 00 a8 7c 0d       	mov_s      r1,0xa8000d7c
4000a848:	35 04 ef ff             	b.d        4000a47c <_gpio_fire_callbacks>

4000a84c:	04 14 1b 34             	ld.ab      fp,[sp,4]
static void ss_gpio_qmsi_1_int_callback(void *data, uint32_t status)
{
	struct device *port = DEVICE_GET(ss_gpio_1);

	ss_gpio_qmsi_callback(port, status);
}
4000a850:	e0 7f                   	j_s.d      [blink]
4000a852:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a856:	e0 78                   	nop_s      

4000a858 <i2c_qmsi_ss_suspend>:

	return 0;
}

static int i2c_qmsi_ss_suspend(struct device *dev)
{
4000a858:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(dev);
	return -ENODEV;
}
4000a85c:	8a 20 7f 0b             	mov        r0,-19

	return 0;
}

static int i2c_qmsi_ss_suspend(struct device *dev)
{
4000a860:	9b 43                   	mov_s      fp,sp
	ARG_UNUSED(dev);
	return -ENODEV;
}
4000a862:	e0 7f                   	j_s.d      [blink]
4000a864:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000a868 <i2c_qmsi_ss_resume>:

static int i2c_qmsi_ss_resume(struct device *dev)
{
4000a868:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(dev);
	return -ENODEV;
}
4000a86c:	8a 20 7f 0b             	mov        r0,-19
	ARG_UNUSED(dev);
	return -ENODEV;
}

static int i2c_qmsi_ss_resume(struct device *dev)
{
4000a870:	9b 43                   	mov_s      fp,sp
	ARG_UNUSED(dev);
	return -ENODEV;
}
4000a872:	e0 7f                   	j_s.d      [blink]
4000a874:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000a878 <i2c_qmsi_ss_config_irq_0>:

DEVICE_INIT(i2c_ss_0, CONFIG_I2C_0_NAME, i2c_qmsi_ss_init, &driver_data_0,
	    &config_info_0, SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);

static void i2c_qmsi_ss_config_irq_0(void)
{
4000a878:	f1 c0                   	push_s     blink
4000a87a:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a87e:	9b 43                   	mov_s      fp,sp
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("ld%U1	%0, %1;\n\t"
4000a880:	c3 40 80 b0 10 04       	mov_s      r0,0xb0800410
4000a886:	00 10 01 00             	ld         r1,[r0,0]
	/* Need to unmask the interrupts in System Control Subsystem (SCSS)
	 * so the interrupt controller can route these interrupts to
	 * the sensor subsystem.
	 */
	mask = sys_read32(SCSS_REGISTER_BASE + I2C_SS_0_ERR_MASK);
	mask &= INT_ENABLE_ARC;
4000a88a:	a8 b9                   	bclr_s     r1,r1,8
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("st%U1	%0, %1;\n\t"
4000a88c:	00 18 40 00             	st         r1,[r0]
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("ld%U1	%0, %1;\n\t"
4000a890:	c3 40 80 b0 18 04       	mov_s      r0,0xb0800418
4000a896:	00 10 01 00             	ld         r1,[r0,0]
	sys_write32(mask, SCSS_REGISTER_BASE + I2C_SS_0_ERR_MASK);

	mask = sys_read32(SCSS_REGISTER_BASE + I2C_SS_0_TX_MASK);
	mask &= INT_ENABLE_ARC;
4000a89a:	a8 b9                   	bclr_s     r1,r1,8
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("st%U1	%0, %1;\n\t"
4000a89c:	00 18 40 00             	st         r1,[r0]
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("ld%U1	%0, %1;\n\t"
4000a8a0:	c3 40 80 b0 14 04       	mov_s      r0,0xb0800414
4000a8a6:	00 10 01 00             	ld         r1,[r0,0]
	sys_write32(mask, SCSS_REGISTER_BASE + I2C_SS_0_TX_MASK);

	mask = sys_read32(SCSS_REGISTER_BASE + I2C_SS_0_RX_MASK);
	mask &= INT_ENABLE_ARC;
4000a8aa:	a8 b9                   	bclr_s     r1,r1,8
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("st%U1	%0, %1;\n\t"
4000a8ac:	00 18 40 00             	st         r1,[r0]
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("ld%U1	%0, %1;\n\t"
4000a8b0:	c3 40 80 b0 1c 04       	mov_s      r0,0xb080041c
4000a8b6:	00 10 01 00             	ld         r1,[r0,0]
	sys_write32(mask, SCSS_REGISTER_BASE + I2C_SS_0_RX_MASK);

	mask = sys_read32(SCSS_REGISTER_BASE + I2C_SS_0_STOP_MASK);
	mask &= INT_ENABLE_ARC;
4000a8ba:	a8 b9                   	bclr_s     r1,r1,8
}

static ALWAYS_INLINE
	void sys_write32(uint32_t data, mm_reg_t addr)
{
	__asm__ volatile("st%U1	%0, %1;\n\t"
4000a8bc:	00 18 40 00             	st         r1,[r0]
	sys_write32(mask, SCSS_REGISTER_BASE + I2C_SS_0_STOP_MASK);

	/* Connect the IRQs to ISR */
	IRQ_CONNECT(I2C_SS_0_ERR_VECTOR, 1, i2c_qmsi_ss_isr,
4000a8c0:	16 d8                   	mov_s      r0,22
4000a8c2:	8e 0e a0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a8c6:	2c 71                   	mov_s      r1,1
		    DEVICE_GET(i2c_ss_0), 0);
	IRQ_CONNECT(I2C_SS_0_RX_VECTOR, 1, i2c_qmsi_ss_isr,
4000a8c8:	17 d8                   	mov_s      r0,23
4000a8ca:	86 0e a0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a8ce:	2c 71                   	mov_s      r1,1
		    DEVICE_GET(i2c_ss_0), 0);
	IRQ_CONNECT(I2C_SS_0_TX_VECTOR, 1, i2c_qmsi_ss_isr,
4000a8d0:	18 d8                   	mov_s      r0,24
4000a8d2:	7e 0e a0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a8d6:	2c 71                   	mov_s      r1,1
		    DEVICE_GET(i2c_ss_0), 0);
	IRQ_CONNECT(I2C_SS_0_STOP_VECTOR, 1, i2c_qmsi_ss_isr,
4000a8d8:	2c 71                   	mov_s      r1,1
4000a8da:	76 0e a0 00             	bl.d       4000bf4c <_irq_priority_set>

4000a8de:	19 d8                   	mov_s      r0,25
		    DEVICE_GET(i2c_ss_0), 0);

	irq_enable(I2C_SS_0_ERR_VECTOR);
4000a8e0:	4e 0e a0 00             	bl.d       4000bf2c <_arch_irq_enable>

4000a8e4:	16 d8                   	mov_s      r0,22
	irq_enable(I2C_SS_0_RX_VECTOR);
4000a8e6:	4a 0e a0 00             	bl.d       4000bf2c <_arch_irq_enable>

4000a8ea:	17 d8                   	mov_s      r0,23
	irq_enable(I2C_SS_0_TX_VECTOR);
4000a8ec:	42 0e a0 00             	bl.d       4000bf2c <_arch_irq_enable>

4000a8f0:	18 d8                   	mov_s      r0,24
	irq_enable(I2C_SS_0_STOP_VECTOR);
4000a8f2:	19 d8                   	mov_s      r0,25
}
4000a8f4:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a8f8:	d1 c0                   	pop_s      blink
		    DEVICE_GET(i2c_ss_0), 0);

	irq_enable(I2C_SS_0_ERR_VECTOR);
	irq_enable(I2C_SS_0_RX_VECTOR);
	irq_enable(I2C_SS_0_TX_VECTOR);
	irq_enable(I2C_SS_0_STOP_VECTOR);
4000a8fa:	35 06 80 00             	b          4000bf2c <_arch_irq_enable>

4000a8fe:	e0 78                   	nop_s      

4000a900 <i2c_qmsi_ss_isr>:
static int i2c_qmsi_ss_init(struct device *dev);

static void i2c_qmsi_ss_isr(void *arg)
{
	struct device *dev = arg;
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000a900:	00 80                   	ld_s       r0,[r0,0]
};

static int i2c_qmsi_ss_init(struct device *dev);

static void i2c_qmsi_ss_isr(void *arg)
{
4000a902:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct device *dev = arg;
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000a906:	02 80                   	ld_s       r0,[r0,8]
};

static int i2c_qmsi_ss_init(struct device *dev);

static void i2c_qmsi_ss_isr(void *arg)
{
4000a908:	9b 43                   	mov_s      fp,sp
	struct device *dev = arg;
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);

	if (instance == QM_SS_I2C_0) {
4000a90a:	00 80                   	ld_s       r0,[r0,0]
4000a90c:	85 e8                   	brne_s     r0,0,4000a916 <i2c_qmsi_ss_isr+0x16>

		qm_ss_i2c_isr_0(NULL);
4000a90e:	ed 06 e0 00             	b.d        4000c7f8 <qm_ss_i2c_isr_0>

4000a912:	04 14 1b 34             	ld.ab      fp,[sp,4]
	} else {
		qm_ss_i2c_isr_1(NULL);
4000a916:	0c 70                   	mov_s      r0,0
4000a918:	f1 06 e0 00             	b.d        4000c808 <qm_ss_i2c_isr_1>

4000a91c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000a920 <transfer_complete>:
			uint32_t len)
{
	struct device *dev = data;
	struct i2c_qmsi_ss_driver_data *driver_data;

	driver_data = GET_DRIVER_DATA(dev);
4000a920:	02 80                   	ld_s       r0,[r0,8]
	return 0;
}

static void transfer_complete(void *data, int rc, qm_ss_i2c_status_t status,
			uint32_t len)
{
4000a922:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000a926:	9b 43                   	mov_s      fp,sp
	struct device *dev = data;
	struct i2c_qmsi_ss_driver_data *driver_data;

	driver_data = GET_DRIVER_DATA(dev);
	driver_data->transfer_status = rc;
4000a928:	23 a0                   	st_s       r1,[r0,12]
 *
 * @param sync A pointer to a valid device_sync_call_t
 */
static inline void device_sync_call_complete(device_sync_call_t *sync)
{
	nano_sem_give(&sync->f_sem);
4000a92a:	a1 04 60 00             	b.d        4000b5c8 <nano_sem_give>

4000a92e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000a932:	e0 78                   	nop_s      

4000a934 <i2c_qmsi_ss_transfer>:
	device_sync_call_complete(&driver_data->sync);
}

static int i2c_qmsi_ss_transfer(struct device *dev, struct i2c_msg *msgs,
			     uint8_t num_msgs, uint16_t addr)
{
4000a934:	f1 c0                   	push_s     blink
4000a936:	1e 0d 6f fe             	bl.d       40007650 <__st_r13_to_r24>

4000a93a:	ac c1                   	sub_s      sp,sp,48
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
4000a93c:	e2 80                   	ld_s       r15,[r0,8]
	device_sync_call_complete(&driver_data->sync);
}

static int i2c_qmsi_ss_transfer(struct device *dev, struct i2c_msg *msgs,
			     uint8_t num_msgs, uint16_t addr)
{
4000a93e:	10 40                   	mov_s      r16,r0
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000a940:	00 80                   	ld_s       r0,[r0,0]
	device_sync_call_complete(&driver_data->sync);
}

static int i2c_qmsi_ss_transfer(struct device *dev, struct i2c_msg *msgs,
			     uint8_t num_msgs, uint16_t addr)
{
4000a942:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000a946:	02 80                   	ld_s       r0,[r0,8]
	device_sync_call_complete(&driver_data->sync);
}

static int i2c_qmsi_ss_transfer(struct device *dev, struct i2c_msg *msgs,
			     uint8_t num_msgs, uint16_t addr)
{
4000a948:	9b 43                   	mov_s      fp,sp
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000a94a:	00 10 12 00             	ld         r18,[r0,0]
	device_sync_call_complete(&driver_data->sync);
}

static int i2c_qmsi_ss_transfer(struct device *dev, struct i2c_msg *msgs,
			     uint8_t num_msgs, uint16_t addr)
{
4000a94e:	a9 c1                   	sub_s      sp,sp,36
4000a950:	28 45                   	mov_s      r13,r1
4000a952:	2f 21 87 20             	extb       r17,r2
4000a956:	2f 27 c8 20             	exth       r23,r3
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
	qm_ss_i2c_status_t status;
	int rc;

	qm_ss_i2c_get_status(instance, &status);
4000a95a:	42 40                   	mov_s      r0,r18
4000a95c:	fe 0f e0 00             	bl.d       4000c958 <qm_ss_i2c_get_status>

4000a960:	42 23 01 38             	sub        r1,fp,32
	if (status != QM_I2C_IDLE) {
4000a964:	e0 13 00 b0             	ld         r0,[fp,-32]
4000a968:	af 08 11 00             	brne       r0,0,4000aa16 <i2c_qmsi_ss_transfer+0xe2>

		return -EBUSY;
	}

	if  (msgs == NULL || num_msgs == 0) {
4000a96c:	b1 0d 10 10             	breq       r13,0,4000aa1c <i2c_qmsi_ss_transfer+0xe8>

4000a970:	ad 09 30 20             	breq.d     r17,0,4000aa1c <i2c_qmsi_ss_transfer+0xe8>

4000a974:	cd 70                   	mov_s      r14,0
		} else {
			xfer.rx = buf;
			xfer.rx_len = len;
		}

		xfer.callback = transfer_complete;
4000a976:	0a 20 80 3f 00 40 20 a9 	mov        r24,0x4000a920
		xfer.callback_data = dev;
		xfer.stop = stop;

		nano_sem_take(&driver_data->sem, TICKS_UNLIMITED);
4000a97e:	40 27 13 14             	add        r19,r15,16

	if  (msgs == NULL || num_msgs == 0) {
		return -ENOTSUP;
	}

	for (int i = 0; i < num_msgs; i++) {
4000a982:	93 0e 43 14             	brge       r14,r17,4000aa12 <i2c_qmsi_ss_transfer+0xde>

4000a986:	60 85                   	ld_s       r3,[r13,0]
		uint8_t *buf = msgs[i].buf;
		uint32_t len = msgs[i].len;
		uint8_t op =  msgs[i].flags & I2C_MSG_RW_MASK;
4000a988:	08 15 94 10             	ldb        r20,[r13,8]
		return -ENOTSUP;
	}

	for (int i = 0; i < num_msgs; i++) {
		uint8_t *buf = msgs[i].buf;
		uint32_t len = msgs[i].len;
4000a98c:	04 15 16 10             	ld         r22,[r13,4]
		uint8_t op =  msgs[i].flags & I2C_MSG_RW_MASK;
		bool stop = (msgs[i].flags & I2C_MSG_STOP) == I2C_MSG_STOP;
		qm_ss_i2c_transfer_t xfer = { 0 };
4000a990:	42 23 00 37             	sub        r0,fp,28
4000a994:	dc 1b c0 b0             	st         r3,[fp,-36]
4000a998:	2c 70                   	mov_s      r1,0
4000a99a:	da 09 2f fb             	bl.d       40000b70 <memset>

4000a99e:	1c da                   	mov_s      r2,28
	}

	for (int i = 0; i < num_msgs; i++) {
		uint8_t *buf = msgs[i].buf;
		uint32_t len = msgs[i].len;
		uint8_t op =  msgs[i].flags & I2C_MSG_RW_MASK;
4000a9a0:	44 24 55 20             	and        r21,r20,1
		bool stop = (msgs[i].flags & I2C_MSG_STOP) == I2C_MSG_STOP;
		qm_ss_i2c_transfer_t xfer = { 0 };

		if (op == I2C_MSG_WRITE) {
4000a9a4:	dc 13 03 b0             	ld         r3,[fp,-36]

	for (int i = 0; i < num_msgs; i++) {
		uint8_t *buf = msgs[i].buf;
		uint32_t len = msgs[i].len;
		uint8_t op =  msgs[i].flags & I2C_MSG_RW_MASK;
		bool stop = (msgs[i].flags & I2C_MSG_STOP) == I2C_MSG_STOP;
4000a9a8:	41 2c 54 20             	lsr        r20,r20,1
		qm_ss_i2c_transfer_t xfer = { 0 };

		if (op == I2C_MSG_WRITE) {
4000a9ac:	13 0d 31 20             	brne.d     r21,0,4000a9be <i2c_qmsi_ss_transfer+0x8a>

4000a9b0:	44 24 54 20             	and        r20,r20,1
			xfer.tx = buf;
4000a9b4:	e4 1b c0 b0             	st         r3,[fp,-28]
			xfer.tx_len = len;
4000a9b8:	e8 1b 80 b5             	st         r22,[fp,-24]
4000a9bc:	05 f0                   	b_s        4000a9c6 <i2c_qmsi_ss_transfer+0x92>

		} else {
			xfer.rx = buf;
4000a9be:	ec 1b c0 b0             	st         r3,[fp,-20]
			xfer.rx_len = len;
4000a9c2:	f0 1b 80 b5             	st         r22,[fp,-16]

		xfer.callback = transfer_complete;
		xfer.callback_data = dev;
		xfer.stop = stop;

		nano_sem_take(&driver_data->sem, TICKS_UNLIMITED);
4000a9c6:	2c 77                   	mov_s      r1,-1
		} else {
			xfer.rx = buf;
			xfer.rx_len = len;
		}

		xfer.callback = transfer_complete;
4000a9c8:	f8 1b 00 b6             	st         r24,[fp,-8]
		xfer.callback_data = dev;
4000a9cc:	fc 1b 00 b4             	st         r16,[fp,-4]
		xfer.stop = stop;
4000a9d0:	f4 1b 02 b5             	stb        r20,[fp,-12]

		nano_sem_take(&driver_data->sem, TICKS_UNLIMITED);
4000a9d4:	22 0c 60 00             	bl.d       4000b5f4 <nano_sem_take>

4000a9d8:	62 40                   	mov_s      r0,r19
		rc = qm_ss_i2c_master_irq_transfer(instance, &xfer, addr);
4000a9da:	42 23 01 37             	sub        r1,fp,28
4000a9de:	e2 42                   	mov_s      r2,r23
4000a9e0:	ba 0f e0 00             	bl.d       4000c998 <qm_ss_i2c_master_irq_transfer>

4000a9e4:	42 40                   	mov_s      r0,r18
4000a9e6:	10 46                   	mov_s      r22,r0
		nano_sem_give(&driver_data->sem);
4000a9e8:	e2 0b 60 00             	bl.d       4000b5c8 <nano_sem_give>

4000a9ec:	62 40                   	mov_s      r0,r19
		if (rc != 0)
4000a9ee:	21 0e 11 20             	brne       r22,0,4000aa0c <i2c_qmsi_ss_transfer+0xd8>

			return -EIO;

		/* Block current thread until the I2C transfer completes. */
		if (stop || op != I2C_MSG_WRITE) {
4000a9f2:	0b 0d 11 20             	brne       r21,0,4000a9fa <i2c_qmsi_ss_transfer+0xc6>

4000a9f6:	13 0c 10 20             	breq       r20,0,4000aa06 <i2c_qmsi_ss_transfer+0xd2>

 *
 * @param sync A pointer to a valid device_sync_call_t
 */
static inline void device_sync_call_wait(device_sync_call_t *sync)
{
	nano_sem_take(&sync->f_sem, TICKS_UNLIMITED);
4000a9fa:	e1 40                   	mov_s      r0,r15
4000a9fc:	fa 0b 60 00             	bl.d       4000b5f4 <nano_sem_take>

4000aa00:	2c 77                   	mov_s      r1,-1
			device_sync_call_wait(&driver_data->sync);

			if (driver_data->transfer_status != 0)
4000aa02:	03 87                   	ld_s       r0,[r15,12]
4000aa04:	84 e8                   	brne_s     r0,0,4000aa0c <i2c_qmsi_ss_transfer+0xd8>


	if  (msgs == NULL || num_msgs == 0) {
		return -ENOTSUP;
	}

	for (int i = 0; i < num_msgs; i++) {
4000aa06:	c5 71                   	add_s      r14,r14,1
4000aa08:	0c e5                   	add_s      r13,r13,12
4000aa0a:	bd f1                   	b_s        4000a982 <i2c_qmsi_ss_transfer+0x4e>


		nano_sem_take(&driver_data->sem, TICKS_UNLIMITED);
		rc = qm_ss_i2c_master_irq_transfer(instance, &xfer, addr);
		nano_sem_give(&driver_data->sem);
		if (rc != 0)
			return -EIO;
4000aa0c:	8a 20 ff 0e             	mov        r0,-5
4000aa10:	08 f0                   	b_s        4000aa20 <i2c_qmsi_ss_transfer+0xec>

			if (driver_data->transfer_status != 0)
				return -EIO;
		}
	}

	return 0;
4000aa12:	0c 70                   	mov_s      r0,0
4000aa14:	06 f0                   	b_s        4000aa20 <i2c_qmsi_ss_transfer+0xec>

	qm_ss_i2c_status_t status;
	int rc;

	qm_ss_i2c_get_status(instance, &status);
	if (status != QM_I2C_IDLE) {
		return -EBUSY;
4000aa16:	8a 20 3f 0c             	mov        r0,-16
4000aa1a:	04 f0                   	b_s        4000aa20 <i2c_qmsi_ss_transfer+0xec>

	}

	if  (msgs == NULL || num_msgs == 0) {
		return -ENOTSUP;
4000aa1c:	8a 20 bd 0e             	mov        r0,-134
				return -EIO;
		}
	}

	return 0;
}
4000aa20:	7b 44                   	mov_s      sp,fp
4000aa22:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aa26:	30 dc                   	mov_s      r12,48
4000aa28:	89 04 4f fe             	b          400076b0 <__ld_r13_to_r24_ret>


4000aa2c <i2c_qmsi_ss_configure>:
	irq_enable(I2C_SS_1_STOP_VECTOR);
}
#endif /* CONFIG_I2C_1 */

static int i2c_qmsi_ss_configure(struct device *dev, uint32_t config)
{
4000aa2c:	f1 c0                   	push_s     blink
4000aa2e:	00 42                   	mov_s      r2,r0
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000aa30:	00 80                   	ld_s       r0,[r0,0]
	irq_enable(I2C_SS_1_STOP_VECTOR);
}
#endif /* CONFIG_I2C_1 */

static int i2c_qmsi_ss_configure(struct device *dev, uint32_t config)
{
4000aa32:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000aa36:	41 c6                   	st_s       r14,[sp,4]
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000aa38:	02 80                   	ld_s       r0,[r0,8]
	irq_enable(I2C_SS_1_STOP_VECTOR);
}
#endif /* CONFIG_I2C_1 */

static int i2c_qmsi_ss_configure(struct device *dev, uint32_t config)
{
4000aa3a:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000aa3e:	9b 43                   	mov_s      fp,sp
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
4000aa40:	c2 82                   	ld_s       r14,[r2,8]
	irq_enable(I2C_SS_1_STOP_VECTOR);
}
#endif /* CONFIG_I2C_1 */

static int i2c_qmsi_ss_configure(struct device *dev, uint32_t config)
{
4000aa42:	a2 c1                   	sub_s      sp,sp,8
	qm_ss_i2c_config_t qm_cfg;

	cfg.raw = config;

	/* This driver only supports master mode. */
	if (!cfg.bits.is_master_device) {
4000aa44:	2f 7a                   	exth_s     r2,r1
4000aa46:	4b 0a 3e 01             	bbit0.d    r2,4,4000aa8e <i2c_qmsi_ss_configure+0x62>

4000aa4a:	a0 80                   	ld_s       r13,[r0,0]
		return -EINVAL;
	}

	qm_cfg.address_mode = (cfg.bits.use_10_bit_addr) ? QM_SS_I2C_10_BIT :
4000aa4c:	c0 ba                   	bmsk_s     r2,r2,0
							   QM_SS_I2C_7_BIT;

	switch (cfg.bits.speed) {
4000aa4e:	3d 79                   	lsr_s      r1,r1
4000aa50:	c2 b9                   	bmsk_s     r1,r1,2
4000aa52:	0f 09 70 00             	breq.d     r1,1,4000aa5e <i2c_qmsi_ss_configure+0x32>

4000aa56:	fc 1b 80 b0             	st         r2,[fp,-4]
4000aa5a:	37 09 91 00             	brne       r1,2,4000aa8e <i2c_qmsi_ss_configure+0x62>

	case I2C_SPEED_STANDARD:
		qm_cfg.speed = QM_SS_I2C_SPEED_STD;
		break;
	case I2C_SPEED_FAST:
		qm_cfg.speed = QM_SS_I2C_SPEED_FAST;
4000aa5e:	f8 1b 40 b0             	st         r1,[fp,-8]
		break;
	default:
		return -EINVAL;
	}

	nano_sem_take(&driver_data->sem, TICKS_UNLIMITED);
4000aa62:	10 e6                   	add_s      r14,r14,16
4000aa64:	2c 77                   	mov_s      r1,-1
4000aa66:	92 0b 60 00             	bl.d       4000b5f4 <nano_sem_take>

4000aa6a:	c1 40                   	mov_s      r0,r14
	if (qm_ss_i2c_set_config(instance, &qm_cfg) != 0) {
4000aa6c:	a1 40                   	mov_s      r0,r13
4000aa6e:	ae 0d e0 00             	bl.d       4000c818 <qm_ss_i2c_set_config>

4000aa72:	42 23 01 32             	sub        r1,fp,8
4000aa76:	0a 25 00 90             	mov.f      r13,r0
		nano_sem_give(&driver_data->sem);
4000aa7a:	c1 40                   	mov_s      r0,r14
	default:
		return -EINVAL;
	}

	nano_sem_take(&driver_data->sem, TICKS_UNLIMITED);
	if (qm_ss_i2c_set_config(instance, &qm_cfg) != 0) {
4000aa7c:	06 f2                   	beq_s      4000aa88 <i2c_qmsi_ss_configure+0x5c>

		nano_sem_give(&driver_data->sem);
4000aa7e:	4e 0b 60 00             	bl.d       4000b5c8 <nano_sem_give>

4000aa82:	8a 25 ff 1e             	mov        r13,-5
		return -EIO;
4000aa86:	07 f0                   	b_s        4000aa92 <i2c_qmsi_ss_configure+0x66>

	}
	nano_sem_give(&driver_data->sem);
4000aa88:	42 0b 40 00             	bl         4000b5c8 <nano_sem_give>

	return 0;
4000aa8c:	03 f0                   	b_s        4000aa92 <i2c_qmsi_ss_configure+0x66>

		break;
	case I2C_SPEED_FAST:
		qm_cfg.speed = QM_SS_I2C_SPEED_FAST;
		break;
	default:
		return -EINVAL;
4000aa8e:	8a 25 bf 1a             	mov        r13,-22
		nano_sem_give(&driver_data->sem);
		return -EIO;
	}
	nano_sem_give(&driver_data->sem);
	return 0;
}
4000aa92:	a1 40                   	mov_s      r0,r13
4000aa94:	7b 44                   	mov_s      sp,fp
4000aa96:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aa9a:	08 dc                   	mov_s      r12,8
4000aa9c:	3d 04 4f fe             	b          400076d8 <__ld_r13_to_r14_ret>


4000aaa0 <i2c_qmsi_ss_init>:
	.suspend = i2c_qmsi_ss_suspend,
	.resume = i2c_qmsi_ss_resume,
};

static int i2c_qmsi_ss_init(struct device *dev)
{
4000aaa0:	f1 c0                   	push_s     blink
4000aaa2:	d2 0b 6f fe             	bl.d       40007670 <__st_r13_to_r16>

4000aaa6:	a4 c1                   	sub_s      sp,sp,16
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
4000aaa8:	e2 80                   	ld_s       r15,[r0,8]
	.suspend = i2c_qmsi_ss_suspend,
	.resume = i2c_qmsi_ss_resume,
};

static int i2c_qmsi_ss_init(struct device *dev)
{
4000aaaa:	08 45                   	mov_s      r13,r0
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	struct i2c_qmsi_ss_config_info *config = dev->config->config_info;
4000aaac:	00 80                   	ld_s       r0,[r0,0]
	.suspend = i2c_qmsi_ss_suspend,
	.resume = i2c_qmsi_ss_resume,
};

static int i2c_qmsi_ss_init(struct device *dev)
{
4000aaae:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	struct i2c_qmsi_ss_config_info *config = dev->config->config_info;
4000aab2:	c2 80                   	ld_s       r14,[r0,8]
	.suspend = i2c_qmsi_ss_suspend,
	.resume = i2c_qmsi_ss_resume,
};

static int i2c_qmsi_ss_init(struct device *dev)
{
4000aab4:	9b 43                   	mov_s      fp,sp
	struct i2c_qmsi_ss_driver_data *driver_data = GET_DRIVER_DATA(dev);
	struct i2c_qmsi_ss_config_info *config = dev->config->config_info;
	qm_ss_i2c_t instance = GET_CONTROLLER_INSTANCE(dev);
4000aab6:	00 86                   	ld_s       r0,[r14,0]
	int err;

	config->irq_cfg();
4000aab8:	22 86                   	ld_s       r1,[r14,8]
4000aaba:	fc 1b 00 b0             	st         r0,[fp,-4]
4000aabe:	60 79                   	jl_s.d     [r1]
4000aac0:	a1 c1                   	sub_s      sp,sp,4
	ss_clk_i2c_enable(instance);
4000aac2:	fc 13 00 b0             	ld         r0,[fp,-4]
4000aac6:	c2 08 e0 00             	bl.d       4000c384 <ss_clk_i2c_enable>

4000aaca:	40 27 10 14             	add        r16,r15,16

	nano_sem_init(&driver_data->sem);
4000aace:	ea 0a 60 00             	bl.d       4000b5b4 <nano_sem_init>

4000aad2:	02 40                   	mov_s      r0,r16
	nano_sem_give(&driver_data->sem);
4000aad4:	f6 0a 60 00             	bl.d       4000b5c8 <nano_sem_give>

4000aad8:	02 40                   	mov_s      r0,r16

	err = i2c_qmsi_ss_configure(dev, config->default_cfg.raw);
4000aada:	21 86                   	ld_s       r1,[r14,4]
4000aadc:	52 0f ef ff             	bl.d       4000aa2c <i2c_qmsi_ss_configure>

4000aae0:	a1 40                   	mov_s      r0,r13

	if (err < 0) {
4000aae2:	17 08 12 00             	brlt       r0,0,4000aaf6 <i2c_qmsi_ss_init+0x56>

 *
 * @param sync A pointer to a valid device_sync_call_t
 */
static inline void device_sync_call_init(device_sync_call_t *sync)
{
	nano_sem_init(&sync->f_sem);
4000aae6:	d2 0a 60 00             	bl.d       4000b5b4 <nano_sem_init>

4000aaea:	e1 40                   	mov_s      r0,r15
		return err;
	}

	device_sync_call_init(&driver_data->sync);
	dev->driver_api = &api;
4000aaec:	c3 40 00 a8 ec 0c       	mov_s      r0,0xa8000cec
4000aaf2:	01 a5                   	st_s       r0,[r13,4]
	return 0;
4000aaf4:	0c 70                   	mov_s      r0,0
}
4000aaf6:	7b 44                   	mov_s      sp,fp
4000aaf8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aafc:	10 dc                   	mov_s      r12,16
4000aafe:	d5 03 4f fe             	b          400076d0 <__ld_r13_to_r16_ret>

4000ab02:	e0 78                   	nop_s      

4000ab04 <quark_se_ipm_send>:


static int quark_se_ipm_send(struct device *d, int wait, uint32_t id,
			const void *data, int size)
{
	struct quark_se_ipm_config_info *config = d->config->config_info;
4000ab04:	00 80                   	ld_s       r0,[r0,0]
}


static int quark_se_ipm_send(struct device *d, int wait, uint32_t id,
			const void *data, int size)
{
4000ab06:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct quark_se_ipm_config_info *config = d->config->config_info;
4000ab0a:	02 80                   	ld_s       r0,[r0,8]
}


static int quark_se_ipm_send(struct device *d, int wait, uint32_t id,
			const void *data, int size)
{
4000ab0c:	9b 43                   	mov_s      fp,sp
	volatile struct quark_se_ipm *ipm = config->ipm;
	const uint8_t *data8;
	int i;
	int flags;

	if (id > QUARK_SE_IPM_MAX_ID_VAL) {
4000ab0e:	9d 0a 32 00             	brlt.d     r2,0,4000aba8 <quark_se_ipm_send+0xa4>

4000ab12:	82 80                   	ld_s       r12,[r0,8]
		return -EINVAL;
	}

	if (config->direction != QUARK_SE_IPM_OUTBOUND) {
4000ab14:	01 80                   	ld_s       r0,[r0,4]
4000ab16:	95 08 11 00             	brne       r0,0,4000aba8 <quark_se_ipm_send+0xa4>

		return -EINVAL;
	}

	if (size > QUARK_SE_IPM_DATA_BYTES) {
4000ab1a:	97 0c 55 04             	brhs.t     r4,17,4000abae <quark_se_ipm_send+0xaa>


static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000ab1e:	2f 27 bf 01             	clri       r6
		return -EMSGSIZE;
	}

	flags = irq_lock();

	if (ipm->sts.sts != 0) {
4000ab22:	14 14 85 10             	ldb        r5,[r12,20]
4000ab26:	1d 0d 3f 00             	bbit1.d    r5,0,4000ab40 <quark_se_ipm_send+0x3c>

4000ab2a:	84 71                   	add_s      r4,r4,1
4000ab2c:	ac 70                   	mov_s      r5,0
4000ab2e:	0a 24 00 71             	mov        lp_count,r4
4000ab32:	a8 20 00 06             	lp         4000ab60 <quark_se_ipm_send+0x5c>

4000ab36:	6b 26 80 70 00 40 4a ab 	sr         0x4000ab4a,[0x2]
4000ab3e:	10 f0                   	b_s        4000ab5c <quark_se_ipm_send+0x58>

 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000ab40:	2f 26 bf 01             	seti       r6
		irq_unlock(flags);
		return -EBUSY;
4000ab44:	8a 20 3f 0c             	mov        r0,-16
4000ab48:	35 f0                   	b_s        4000abb2 <quark_se_ipm_send+0xae>

4000ab4a:	00 23 44 01             	add        r4,r3,r5

	/* Populate the data, memcpy doesn't take volatiles */
	data8 = (const uint8_t *)data;

	for (i = 0; i < size; ++i) {
		ipm->data[i] = data8[i];
4000ab4e:	00 14 87 00             	ldb        r7,[r4,0]
4000ab52:	00 24 44 11             	add        r4,r12,r5
4000ab56:	04 1c c2 01             	stb        r7,[r4,4]
	}

	/* Populate the data, memcpy doesn't take volatiles */
	data8 = (const uint8_t *)data;

	for (i = 0; i < size; ++i) {
4000ab5a:	a4 71                   	add_s      r5,r5,1
4000ab5c:	4a 26 00 70             	nop        
		ipm->data[i] = data8[i];
	}
	ipm->ctrl.ctrl = id;
4000ab60:	00 14 84 10             	ldb        r4,[r12,0]
4000ab64:	40 ac                   	stb_s      r2,[r12,0]
4000ab66:	01 14 84 10             	ldb        r4,[r12,1]
4000ab6a:	53 22 83 07             	bmsk       r3,r2,30
4000ab6e:	41 2b 02 02             	lsr        r2,r3,8
4000ab72:	41 ac                   	stb_s      r2,[r12,1]
4000ab74:	02 14 84 10             	ldb        r4,[r12,2]
4000ab78:	41 2b 02 04             	lsr        r2,r3,16
4000ab7c:	42 ac                   	stb_s      r2,[r12,2]
4000ab7e:	41 2b 02 06             	lsr        r2,r3,24
4000ab82:	63 8c                   	ldb_s      r3,[r12,3]
4000ab84:	6c 23 83 01             	bmskn      r3,r3,6
4000ab88:	45 7b                   	or_s       r3,r3,r2
4000ab8a:	63 ac                   	stb_s      r3,[r12,3]

	/* Cause the interrupt to assert on the remote side */
	ipm->ctrl.irq = 1;
4000ab8c:	43 8c                   	ldb_s      r2,[r12,3]
4000ab8e:	85 22 3e 00             	or         r2,r2,-128
4000ab92:	43 ac                   	stb_s      r2,[r12,3]

	/* Wait for HW to set the sts bit */
	while (ipm->sts.sts == 0) {
4000ab94:	54 8c                   	ldb_s      r2,[r12,20]
4000ab96:	01 0a 1e 00             	bbit0      r2,0,4000ab94 <quark_se_ipm_send+0x90>

4000ab9a:	2f 26 bf 01             	seti       r6
	}
	irq_unlock(flags);

	if (wait) {
4000ab9e:	0b e9                   	breq_s     r1,0,4000abb2 <quark_se_ipm_send+0xae>

		/* Loop until remote clears the status bit */
		while (ipm->sts.sts != 0) {
4000aba0:	34 8c                   	ldb_s      r1,[r12,20]
4000aba2:	01 09 1f 00             	bbit1      r1,0,4000aba0 <quark_se_ipm_send+0x9c>

4000aba6:	07 f0                   	b_s        4000abb2 <quark_se_ipm_send+0xae>

	const uint8_t *data8;
	int i;
	int flags;

	if (id > QUARK_SE_IPM_MAX_ID_VAL) {
		return -EINVAL;
4000aba8:	8a 20 bf 0a             	mov        r0,-22
4000abac:	03 f0                   	b_s        4000abb2 <quark_se_ipm_send+0xae>

	if (config->direction != QUARK_SE_IPM_OUTBOUND) {
		return -EINVAL;
	}

	if (size > QUARK_SE_IPM_DATA_BYTES) {
		return -EMSGSIZE;
4000abae:	8a 20 be 01             	mov        r0,-122
		/* Loop until remote clears the status bit */
		while (ipm->sts.sts != 0) {
		}
	}
	return 0;
}
4000abb2:	e0 7f                   	j_s.d      [blink]
4000abb4:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000abb8 <quark_se_ipm_max_data_size_get>:


static int quark_se_ipm_max_data_size_get(struct device *d)
{
4000abb8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(d);

	return QUARK_SE_IPM_DATA_BYTES;
}
4000abbc:	10 d8                   	mov_s      r0,16
	return 0;
}


static int quark_se_ipm_max_data_size_get(struct device *d)
{
4000abbe:	9b 43                   	mov_s      fp,sp
	ARG_UNUSED(d);

	return QUARK_SE_IPM_DATA_BYTES;
}
4000abc0:	e0 7f                   	j_s.d      [blink]
4000abc2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000abc6:	e0 78                   	nop_s      

4000abc8 <quark_se_ipm_max_id_val_get>:


static uint32_t quark_se_ipm_max_id_val_get(struct device *d)
{
4000abc8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(d);

	return QUARK_SE_IPM_MAX_ID_VAL;
}
4000abcc:	c3 40 ff 7f ff ff       	mov_s      r0,0x7fffffff
	return QUARK_SE_IPM_DATA_BYTES;
}


static uint32_t quark_se_ipm_max_id_val_get(struct device *d)
{
4000abd2:	9b 43                   	mov_s      fp,sp
	ARG_UNUSED(d);

	return QUARK_SE_IPM_MAX_ID_VAL;
}
4000abd4:	e0 7f                   	j_s.d      [blink]
4000abd6:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000abda:	e0 78                   	nop_s      

4000abdc <quark_se_ipm_register_callback>:

static void quark_se_ipm_register_callback(struct device *d, ipm_callback_t cb,
				       void *context)
{
	struct quark_se_ipm_driver_data *driver_data = d->driver_data;
4000abdc:	02 80                   	ld_s       r0,[r0,8]
	return QUARK_SE_IPM_MAX_ID_VAL;
}

static void quark_se_ipm_register_callback(struct device *d, ipm_callback_t cb,
				       void *context)
{
4000abde:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000abe2:	9b 43                   	mov_s      fp,sp
	struct quark_se_ipm_driver_data *driver_data = d->driver_data;

	driver_data->callback = cb;
4000abe4:	20 a0                   	st_s       r1,[r0,0]
	driver_data->callback_ctx = context;
4000abe6:	41 a0                   	st_s       r2,[r0,4]
}
4000abe8:	e0 7f                   	j_s.d      [blink]
4000abea:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000abee:	e0 78                   	nop_s      

4000abf0 <quark_se_ipm_set_enabled>:


static int quark_se_ipm_set_enabled(struct device *d, int enable)
{
	struct quark_se_ipm_config_info *config_info = d->config->config_info;
4000abf0:	00 80                   	ld_s       r0,[r0,0]
	driver_data->callback_ctx = context;
}


static int quark_se_ipm_set_enabled(struct device *d, int enable)
{
4000abf2:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct quark_se_ipm_config_info *config_info = d->config->config_info;
4000abf6:	02 80                   	ld_s       r0,[r0,8]

	if (config_info->direction != QUARK_SE_IPM_INBOUND) {
4000abf8:	41 80                   	ld_s       r2,[r0,4]
4000abfa:	3f 0a 71 00             	brne.d     r2,1,4000ac36 <quark_se_ipm_set_enabled+0x46>

4000abfe:	9b 43                   	mov_s      fp,sp
}

static void set_channel_irq_state(int channel, int enable)
{
	mem_addr_t addr = QUARK_SE_IPM_MASK;
	int bit = channel + QUARK_SE_IPM_MASK_START_BIT;
4000ac00:	00 80                   	ld_s       r0,[r0,0]
4000ac02:	08 e0                   	add_s      r0,r0,8

	if (enable) {
4000ac04:	0d e9                   	breq_s     r1,0,4000ac1e <quark_se_ipm_set_enabled+0x2e>

static ALWAYS_INLINE
	void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t reg = 0;

	__asm__ volatile("ld	%1, %0\n"
4000ac06:	2c 70                   	mov_s      r1,0
4000ac08:	00 16 01 70 80 b0 a0 04 	ld         r1,[0xb08004a0]
4000ac10:	10 21 01 00             	bclr       r1,r1,r0
4000ac14:	00 1e 40 70 80 b0 a0 04 	st         r1,[0xb08004a0]
4000ac1c:	0b f0                   	b_s        4000ac32 <quark_se_ipm_set_enabled+0x42>

static ALWAYS_INLINE
	void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t reg = 0;

	__asm__ volatile("ld	%1, %0\n"
4000ac1e:	00 16 01 70 80 b0 a0 04 	ld         r1,[0xb08004a0]
4000ac26:	0f 21 01 00             	bset       r1,r1,r0
4000ac2a:	00 1e 40 70 80 b0 a0 04 	st         r1,[0xb08004a0]

	if (config_info->direction != QUARK_SE_IPM_INBOUND) {
		return -EINVAL;
	}
	set_channel_irq_state(config_info->channel, enable);
	return 0;
4000ac32:	0c 70                   	mov_s      r0,0
4000ac34:	03 f0                   	b_s        4000ac3a <quark_se_ipm_set_enabled+0x4a>

static int quark_se_ipm_set_enabled(struct device *d, int enable)
{
	struct quark_se_ipm_config_info *config_info = d->config->config_info;

	if (config_info->direction != QUARK_SE_IPM_INBOUND) {
		return -EINVAL;
4000ac36:	8a 20 bf 0a             	mov        r0,-22
	}
	set_channel_irq_state(config_info->channel, enable);
	return 0;
}
4000ac3a:	e0 7f                   	j_s.d      [blink]
4000ac3c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000ac40 <quark_se_ipm_isr>:
}


/* Interrupt handler, gets messages on all incoming enabled mailboxes */
void quark_se_ipm_isr(void *param)
{
4000ac40:	f1 c0                   	push_s     blink
4000ac42:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000ac46:	41 c6                   	st_s       r14,[sp,4]
4000ac48:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ac4c:	9b 43                   	mov_s      fp,sp
static ALWAYS_INLINE
	uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("ld%U1	%0, %1;\n\t"
4000ac4e:	00 16 0e 70 80 b0 c0 0a 	ld         r14,[0xb0800ac0]
static struct device *device_by_channel[QUARK_SE_IPM_CHANNELS];
static uint32_t inbound_channels;

static uint32_t quark_se_ipm_sts_get(void)
{
	return sys_read32(QUARK_SE_IPM_CHALL_STS) & inbound_channels;
4000ac56:	00 16 00 70 00 a8 50 0e 	ld         r0,[0xa8000e50]
4000ac5e:	04 7e                   	and_s      r14,r14,r0
#if defined(__GNUC__)
static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	unsigned int bit;

	__asm__ volatile(
4000ac60:	2f 2e 93 93             	fls.f      r14,r14
4000ac64:	c0 26 62 10             	add.nz     r14,r14,1

	ARG_UNUSED(param);
	sts = quark_se_ipm_sts_get();

	__ASSERT(sts, "spurious IPM interrupt");
	bit = find_msb_set(sts) - 1;
4000ac68:	c9 6e                   	sub_s      r14,r14,1
	channel = bit / 2;
4000ac6a:	41 2e c0 17             	lsr        r0,r14,31
4000ac6e:	1e 66                   	add_s      r14,r14,r0
4000ac70:	d9 6e                   	asr_s      r14,r14,1
	d = device_by_channel[channel];
4000ac72:	f0 26 80 73 00 a8 30 0e 	ld.as      r0,[0xa8000e30,r14]

	__ASSERT(d, "got IRQ on channel with no IPM device");
	config = d->config->config_info;
	driver_data = d->driver_data;
4000ac7a:	42 80                   	ld_s       r2,[r0,8]
	bit = find_msb_set(sts) - 1;
	channel = bit / 2;
	d = device_by_channel[channel];

	__ASSERT(d, "got IRQ on channel with no IPM device");
	config = d->config->config_info;
4000ac7c:	00 80                   	ld_s       r0,[r0,0]
	driver_data = d->driver_data;
	ipm = config->ipm;

	__ASSERT(driver_data->callback, "enabled IPM channel with no callback");
	driver_data->callback(driver_data->callback_ctx, ipm->ctrl.ctrl,
4000ac7e:	60 82                   	ld_s       r3,[r2,0]
	d = device_by_channel[channel];

	__ASSERT(d, "got IRQ on channel with no IPM device");
	config = d->config->config_info;
	driver_data = d->driver_data;
	ipm = config->ipm;
4000ac80:	02 80                   	ld_s       r0,[r0,8]
4000ac82:	a2 80                   	ld_s       r13,[r0,8]

	__ASSERT(driver_data->callback, "enabled IPM channel with no callback");
	driver_data->callback(driver_data->callback_ctx, ipm->ctrl.ctrl,
4000ac84:	20 8d                   	ldb_s      r1,[r13,0]
4000ac86:	01 8d                   	ldb_s      r0,[r13,1]
4000ac88:	82 8d                   	ldb_s      r12,[r13,2]
4000ac8a:	2f 79                   	exth_s     r1,r1
4000ac8c:	0f 78                   	exth_s     r0,r0
4000ac8e:	08 b8                   	asl_s      r0,r0,8
4000ac90:	25 78                   	or_s       r0,r0,r1
4000ac92:	8f 7c                   	exth_s     r12,r12
4000ac94:	23 8d                   	ldb_s      r1,[r13,3]
4000ac96:	10 bc                   	asl_s      r12,r12,16
4000ac98:	05 7c                   	or_s       r12,r12,r0
4000ac9a:	01 82                   	ld_s       r0,[r2,4]
4000ac9c:	c6 b9                   	bmsk_s     r1,r1,6
4000ac9e:	44 6d                   	add_s      r2,r13,4
4000aca0:	18 b9                   	asl_s      r1,r1,24
4000aca2:	60 7b                   	jl_s.d     [r3]
4000aca4:	85 79                   	or_s       r1,r1,r12

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000aca6:	2f 27 7f 00             	clri       r1
			      &ipm->data);

	key = irq_lock();

	ipm->sts.irq = 1; /* Clear the interrupt bit */
4000acaa:	14 8d                   	ldb_s      r0,[r13,20]
	ipm->sts.sts = 1; /* Clear channel status bit */

	/* Wait for the above register writes to clear the channel
	 * to propagate to the global channel status register
	 */
	while (quark_se_ipm_sts_get() & (0x3 << (channel * 2))) {
4000acac:	d1 6e                   	asl_s      r14,r14,1
	driver_data->callback(driver_data->callback_ctx, ipm->ctrl.ctrl,
			      &ipm->data);

	key = irq_lock();

	ipm->sts.irq = 1; /* Clear the interrupt bit */
4000acae:	81 b8                   	bset_s     r0,r0,1
4000acb0:	14 ad                   	stb_s      r0,[r13,20]
	ipm->sts.sts = 1; /* Clear channel status bit */
4000acb2:	14 8d                   	ldb_s      r0,[r13,20]

	/* Wait for the above register writes to clear the channel
	 * to propagate to the global channel status register
	 */
	while (quark_se_ipm_sts_get() & (0x3 << (channel * 2))) {
4000acb4:	00 2e 8e 73 00 00 03 00 	asl        r14,3,r14
			      &ipm->data);

	key = irq_lock();

	ipm->sts.irq = 1; /* Clear the interrupt bit */
	ipm->sts.sts = 1; /* Clear channel status bit */
4000acbc:	80 b8                   	bset_s     r0,r0,0
4000acbe:	14 ad                   	stb_s      r0,[r13,20]
4000acc0:	00 16 02 70 80 b0 c0 0a 	ld         r2,[0xb0800ac0]
static struct device *device_by_channel[QUARK_SE_IPM_CHANNELS];
static uint32_t inbound_channels;

static uint32_t quark_se_ipm_sts_get(void)
{
	return sys_read32(QUARK_SE_IPM_CHALL_STS) & inbound_channels;
4000acc8:	00 16 00 70 00 a8 50 0e 	ld         r0,[0xa8000e50]
4000acd0:	c4 78                   	and_s      r0,r0,r14
	ipm->sts.sts = 1; /* Clear channel status bit */

	/* Wait for the above register writes to clear the channel
	 * to propagate to the global channel status register
	 */
	while (quark_se_ipm_sts_get() & (0x3 << (channel * 2))) {
4000acd2:	4b 78                   	tst_s      r0,r2
4000acd4:	f6 f5                   	bne_s      4000acc0 <quark_se_ipm_isr+0x80>

 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000acd6:	2f 26 7f 00             	seti       r1
		/* Busy-wait */
	}
	irq_unlock(key);
}
4000acda:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000acde:	08 dc                   	mov_s      r12,8
4000ace0:	f9 01 4f fe             	b          400076d8 <__ld_r13_to_r14_ret>


4000ace4 <quark_se_ipm_controller_initialize>:
	.set_enabled = quark_se_ipm_set_enabled
};

int quark_se_ipm_controller_initialize(struct device *d)
{
	struct quark_se_ipm_controller_config_info *config = d->config->config_info;
4000ace4:	00 80                   	ld_s       r0,[r0,0]
	.max_id_val_get = quark_se_ipm_max_id_val_get,
	.set_enabled = quark_se_ipm_set_enabled
};

int quark_se_ipm_controller_initialize(struct device *d)
{
4000ace6:	fc 1c c8 b6             	st.a       fp,[sp,-4]
		ipm->sts.sts = 0;
		ipm->sts.irq = 0;
	}
#endif

	if (config->controller_init) {
4000acea:	02 80                   	ld_s       r0,[r0,8]
	.max_id_val_get = quark_se_ipm_max_id_val_get,
	.set_enabled = quark_se_ipm_set_enabled
};

int quark_se_ipm_controller_initialize(struct device *d)
{
4000acec:	9b 43                   	mov_s      fp,sp
		ipm->sts.sts = 0;
		ipm->sts.irq = 0;
	}
#endif

	if (config->controller_init) {
4000acee:	00 80                   	ld_s       r0,[r0,0]
4000acf0:	04 e8                   	breq_s     r0,0,4000acf8 <quark_se_ipm_controller_initialize+0x14>

		return config->controller_init();
4000acf2:	20 78                   	j_s.d      [r0]
4000acf4:	04 14 1b 34             	ld.ab      fp,[sp,4]
	}
	return 0;
}
4000acf8:	0c 70                   	mov_s      r0,0
4000acfa:	e0 7f                   	j_s.d      [blink]
4000acfc:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000ad00 <quark_se_ipm_initialize>:


int quark_se_ipm_initialize(struct device *d)
{
	struct quark_se_ipm_config_info *config = d->config->config_info;
4000ad00:	20 80                   	ld_s       r1,[r0,0]
	return 0;
}


int quark_se_ipm_initialize(struct device *d)
{
4000ad02:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct quark_se_ipm_config_info *config = d->config->config_info;
4000ad06:	42 81                   	ld_s       r2,[r1,8]

	device_by_channel[config->channel] = d;
4000ad08:	20 82                   	ld_s       r1,[r2,0]
4000ad0a:	15 26 43 70 00 a8 30 0e 	add2       r3,0xa8000e30,r1
4000ad12:	00 a3                   	st_s       r0,[r3,0]
	if (config->direction == QUARK_SE_IPM_INBOUND) {
4000ad14:	01 82                   	ld_s       r0,[r2,4]
4000ad16:	25 08 79 00             	brne.t.d   r0,1,4000ad38 <quark_se_ipm_initialize+0x38>

4000ad1a:	9b 43                   	mov_s      fp,sp
		inbound_channels |= (0x3 << (config->channel * 2));
4000ad1c:	00 16 00 70 00 a8 50 0e 	ld         r0,[0xa8000e50]
4000ad24:	31 69                   	asl_s      r1,r1,1
4000ad26:	00 2e 41 70 00 00 03 00 	asl        r1,3,r1
4000ad2e:	25 78                   	or_s       r0,r0,r1
4000ad30:	00 1e 00 70 00 a8 50 0e 	st         r0,[0xa8000e50]
	}

	return 0;
}
4000ad38:	0c 70                   	mov_s      r0,0
4000ad3a:	e0 7f                   	j_s.d      [blink]
4000ad3c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000ad40 <main>:
 * Nanokernel version of hello world demo
 */


void main(void)
{
4000ad40:	f1 c0                   	push_s     blink
4000ad42:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000ad46:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ad4a:	9b 43                   	mov_s      fp,sp
#if defined(CONFIG_GPIO_DW_0)
	printf("dw\n");
#elif defined(CONFIG_GPIO_QMSI_0)
	printf("qmsi\n");
#endif
	PRINT("Hello World from nanokernel!\n");
4000ad4c:	c3 40 00 40 04 d9       	mov_s      r0,0x4000d904
4000ad52:	de 0e ef fa             	bl.d       40000c2c <printf>

4000ad56:	a2 c1                   	sub_s      sp,sp,8
	//printf("malloced var: %d\n", a);
	mraa_init();
4000ad58:	e6 0c c0 00             	bl         4000ca3c <mraa_init>

	some_struct x =(some_struct) malloc(sizeof(struct _some_struct));
4000ad5c:	56 0d af fa             	bl.d       400002b0 <malloc>

4000ad60:	0c d8                   	mov_s      r0,12
4000ad62:	08 45                   	mov_s      r13,r0
	printf("a %d b %d c %d\n",x->a_num, x->b_num, x->c_num);
4000ad64:	20 85                   	ld_s       r1,[r13,0]
4000ad66:	41 85                   	ld_s       r2,[r13,4]
4000ad68:	c3 40 00 40 24 d9       	mov_s      r0,0x4000d924
4000ad6e:	c2 0e ef fa             	bl.d       40000c2c <printf>

4000ad72:	62 85                   	ld_s       r3,[r13,8]
	x->a_num = 1;
4000ad74:	0c 71                   	mov_s      r0,1
4000ad76:	00 a5                   	st_s       r0,[r13,0]
	x->b_num = 2;
4000ad78:	0c 72                   	mov_s      r0,2
4000ad7a:	01 a5                   	st_s       r0,[r13,4]
	x->c_num = 3;
4000ad7c:	0c 73                   	mov_s      r0,3
4000ad7e:	02 a5                   	st_s       r0,[r13,8]
	printf("a %d b %d c %d\n",x->a_num, x->b_num, x->c_num);
4000ad80:	6c 73                   	mov_s      r3,3
4000ad82:	4c 72                   	mov_s      r2,2
4000ad84:	c3 40 00 40 24 d9       	mov_s      r0,0x4000d924
4000ad8a:	a6 0e ef fa             	bl.d       40000c2c <printf>

4000ad8e:	2c 71                   	mov_s      r1,1
	void* dev = upm_ttp223_init(2);
4000ad90:	4e 0c 20 01             	bl.d       4000d1dc <upm_ttp223_init>

4000ad94:	0c 72                   	mov_s      r0,2
4000ad96:	08 45                   	mov_s      r13,r0
	//void* dev2 = upm_ttp223_init(4);
	//upm_mem_debug();
	PRINT("Hello World from nanokernel-after!\n");
4000ad98:	c3 40 00 40 34 d9       	mov_s      r0,0x4000d934
4000ad9e:	92 0e cf fa             	bl         40000c2c <printf>

	uint8_t val = 0;
4000ada2:	63 41                   	mov_s      r1,fp
4000ada4:	0c 70                   	mov_s      r0,0
4000ada6:	ff 19 0a 80             	stb.a      r0,[r1,-1]
	//while(1){
		printf("inside the loop\n");
4000adaa:	c3 40 00 40 58 d9       	mov_s      r0,0x4000d958
4000adb0:	7e 0e ef fa             	bl.d       40000c2c <printf>

4000adb4:	f8 1b 40 b0             	st         r1,[fp,-8]
		upm_delay_ms(500);
4000adb8:	c6 0c 20 01             	bl.d       4000d27c <upm_delay_ms>

4000adbc:	8a 20 07 0d             	mov        r0,0x1f4
		//upm_mem_debug();
		upm_ttp223_read(dev, &val, 1);
4000adc0:	f8 13 01 b0             	ld         r1,[fp,-8]
4000adc4:	4c 71                   	mov_s      r2,1
4000adc6:	e6 0b 20 01             	bl.d       4000d1a8 <upm_ttp223_read>

4000adca:	a1 40                   	mov_s      r0,r13
		printf("the value returned from the device: %d\n", val);
4000adcc:	c3 40 00 40 6c d9       	mov_s      r0,0x4000d96c
4000add2:	5e 0e ef fa             	bl.d       40000c2c <printf>

4000add6:	ff 13 81 b0             	ldb        r1,[fp,-1]
		upm_delay_ms(500);
4000adda:	a6 0c 20 01             	bl.d       4000d27c <upm_delay_ms>

4000adde:	8a 20 07 0d             	mov        r0,0x1f4
	//}
	upm_ttp223_close(dev);
4000ade2:	be 0b 20 01             	bl.d       4000d19c <upm_ttp223_close>

4000ade6:	a1 40                   	mov_s      r0,r13
}
4000ade8:	7b 44                   	mov_s      sp,fp
4000adea:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000adee:	04 14 1f 30             	ld         blink,[sp,4]
4000adf2:	00 c5                   	ld_s       r13,[sp,0]
4000adf4:	e0 7f                   	j_s.d      [blink]
4000adf6:	a2 c0                   	add_s      sp,sp,8

4000adf8 <_stdout_hook_default>:

static unsigned char *heap_base = UINT_TO_POINTER(USED_RAM_END_ADDR);
static unsigned int heap_sz;

static int _stdout_hook_default(int c)
{
4000adf8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
4000adfc:	0c 77                   	mov_s      r0,-1

static unsigned char *heap_base = UINT_TO_POINTER(USED_RAM_END_ADDR);
static unsigned int heap_sz;

static int _stdout_hook_default(int c)
{
4000adfe:	9b 43                   	mov_s      fp,sp
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
4000ae00:	e0 7f                   	j_s.d      [blink]
4000ae02:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ae06:	e0 78                   	nop_s      

4000ae08 <_stdin_hook_default>:
{
	_stdout_hook = hook;
}

static unsigned char _stdin_hook_default(void)
{
4000ae08:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	return 0;
}
4000ae0c:	0c 70                   	mov_s      r0,0
{
	_stdout_hook = hook;
}

static unsigned char _stdin_hook_default(void)
{
4000ae0e:	9b 43                   	mov_s      fp,sp
	return 0;
}
4000ae10:	e0 7f                   	j_s.d      [blink]
4000ae12:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ae16:	e0 78                   	nop_s      

4000ae18 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
4000ae18:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ae1c:	9b 43                   	mov_s      fp,sp
	_stdout_hook = hook;
4000ae1e:	00 1e 00 70 00 a8 14 0d 	st         r0,[0xa8000d14]
}
4000ae26:	e0 7f                   	j_s.d      [blink]
4000ae28:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000ae2c <_read>:
{
	_stdin_hook = hook;
}

int _read(int fd, char *buf, int nbytes)
{
4000ae2c:	f1 c0                   	push_s     blink
4000ae2e:	4a 08 6f fe             	bl.d       40007674 <__st_r13_to_r15>

4000ae32:	a3 c1                   	sub_s      sp,sp,12
4000ae34:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ae38:	9b 43                   	mov_s      fp,sp
4000ae3a:	28 46                   	mov_s      r14,r1
4000ae3c:	48 47                   	mov_s      r15,r2
	int i = 0;

	for (i = 0; i < nbytes; i++) {
4000ae3e:	ad 70                   	mov_s      r13,0
4000ae40:	21 0d e3 13             	brge.d     r13,r15,4000ae60 <_read+0x34>

4000ae44:	a1 40                   	mov_s      r0,r13
		*(buf + i) = _stdin_hook();
4000ae46:	00 16 00 70 00 a8 10 0d 	ld         r0,[0xa8000d10]
4000ae4e:	40 78                   	jl_s       [r0]
4000ae50:	b9 66                   	add_s      r1,r14,r13
4000ae52:	00 a9                   	stb_s      r0,[r1,0]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
4000ae54:	0b 08 70 03             	breq.d     r0,13,4000ae5e <_read+0x32>

4000ae58:	a5 71                   	add_s      r13,r13,1
4000ae5a:	e9 08 91 82             	brne       r0,10,4000ae40 <_read+0x14>

			i++;
			break;
		}
	}
	return i;
}
4000ae5e:	a1 40                   	mov_s      r0,r13
4000ae60:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ae64:	0c dc                   	mov_s      r12,12
4000ae66:	71 00 4f fe             	b          400076d4 <__ld_r13_to_r15_ret>

4000ae6a:	e0 78                   	nop_s      

4000ae6c <_write>:
FUNC_ALIAS(_read, read, int);

int _write(int fd, char *buf, int nbytes)
{
4000ae6c:	f1 c0                   	push_s     blink
4000ae6e:	06 08 6f fe             	bl.d       40007670 <__st_r13_to_r16>

4000ae72:	a4 c1                   	sub_s      sp,sp,16
4000ae74:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ae78:	9b 43                   	mov_s      fp,sp
4000ae7a:	28 47                   	mov_s      r15,r1
4000ae7c:	48 46                   	mov_s      r14,r2
	int i;

	for (i = 0; i < nbytes; i++) {
4000ae7e:	28 45                   	mov_s      r13,r1
4000ae80:	f0 4d                   	sub_s      r0,r13,r15
4000ae82:	2d 08 83 03             	brge       r0,r14,4000aeac <_write+0x40>

4000ae86:	00 8d                   	ldb_s      r0,[r13,0]
		if (*(buf + i) == '\n') {
4000ae88:	13 08 b9 02             	brne.t.d   r0,10,4000ae9a <_write+0x2e>

4000ae8c:	b1 40                   	mov_s      r16,r13
			_stdout_hook('\r');
4000ae8e:	00 16 01 70 00 a8 14 0d 	ld         r1,[0xa8000d14]
4000ae96:	60 79                   	jl_s.d     [r1]
4000ae98:	0d d8                   	mov_s      r0,13
		}
		_stdout_hook(*(buf + i));
4000ae9a:	00 10 80 20             	ldb        r0,[r16,0]
4000ae9e:	00 16 01 70 00 a8 14 0d 	ld         r1,[0xa8000d14]
4000aea6:	60 79                   	jl_s.d     [r1]
4000aea8:	a5 71                   	add_s      r13,r13,1
4000aeaa:	ec f1                   	b_s        4000ae80 <_write+0x14>

	}
	return nbytes;
}
4000aeac:	c1 40                   	mov_s      r0,r14
4000aeae:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aeb2:	10 dc                   	mov_s      r12,16
4000aeb4:	1d 00 4f fe             	b          400076d0 <__ld_r13_to_r16_ret>


4000aeb8 <_isatty>:
FUNC_ALIAS(_write, write, int);

int _isatty(int file)
{
4000aeb8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	return 1;
}
4000aebc:	0c 71                   	mov_s      r0,1
	return nbytes;
}
FUNC_ALIAS(_write, write, int);

int _isatty(int file)
{
4000aebe:	9b 43                   	mov_s      fp,sp
	return 1;
}
4000aec0:	e0 7f                   	j_s.d      [blink]
4000aec2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aec6:	e0 78                   	nop_s      

4000aec8 <_fstat>:
	return 0;
}
FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
4000aec8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	st->st_mode = S_IFCHR;
4000aecc:	c3 40 00 00 00 20       	mov_s      r0,0x2000
	return 0;
}
FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
4000aed2:	9b 43                   	mov_s      fp,sp
	st->st_mode = S_IFCHR;
4000aed4:	01 a1                   	st_s       r0,[r1,4]
	return 0;
}
4000aed6:	0c 70                   	mov_s      r0,0
4000aed8:	e0 7f                   	j_s.d      [blink]
4000aeda:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aede:	e0 78                   	nop_s      

4000aee0 <_close>:
	return -1;
}
FUNC_ALIAS(_open, open, int);

int _close(int file)
{
4000aee0:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	return -1;
}
4000aee4:	0c 77                   	mov_s      r0,-1
	return -1;
}
FUNC_ALIAS(_open, open, int);

int _close(int file)
{
4000aee6:	9b 43                   	mov_s      fp,sp
	return -1;
}
4000aee8:	e0 7f                   	j_s.d      [blink]
4000aeea:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aeee:	e0 78                   	nop_s      

4000aef0 <_lseek>:
FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
4000aef0:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	return 0;
}
4000aef4:	0c 70                   	mov_s      r0,0
	return -1;
}
FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
4000aef6:	9b 43                   	mov_s      fp,sp
	return 0;
}
4000aef8:	e0 7f                   	j_s.d      [blink]
4000aefa:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aefe:	e0 78                   	nop_s      

4000af00 <_sbrk>:
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
4000af00:	00 16 01 70 00 a8 54 0e 	ld         r1,[0xa8000e54]
	return 0;
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
4000af08:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	void *ptr = heap_base + heap_sz;

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
4000af0c:	38 60                   	add_s      r0,r0,r1
4000af0e:	c3 42 00 a8 00 64       	mov_s      r2,0xa8006400
	return 0;
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
4000af14:	9b 43                   	mov_s      fp,sp
	void *ptr = heap_base + heap_sz;

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
4000af16:	02 22 82 0f 00 a8 24 25 	sub        r2,r2,0xa8002524
4000af1e:	50 70                   	cmp_s      r0,r2
		heap_sz += count;
		return ptr;
	} else {
		return (void *)-1;
4000af20:	ca 20 86 0f ff ff ff ff 	mov.nc     r0,-1

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
4000af28:	49 f7                   	bhs_s      4000af3a <_sbrk+0x3a>

		heap_sz += count;
4000af2a:	00 1e 00 70 00 a8 54 0e 	st         r0,[0xa8000e54]
		return ptr;
4000af32:	00 21 80 0f 00 a8 24 25 	add        r0,r1,0xa8002524
	} else {
		return (void *)-1;
	}
}
4000af3a:	e0 7f                   	j_s.d      [blink]
4000af3c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000af40 <_nano_timeout_insert_point_test>:
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000af40:	40 81                   	ld_s       r2,[r1,0]
4000af42:	64 80                   	ld_s       r3,[r0,16]
 * since the timeout queue is a delta queue.  If it lower or equal, decrement
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
4000af44:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000af48:	0f 0b ab 00             	brge.t.d   r3,r2,4000af56 <_nano_timeout_insert_point_test+0x16>

4000af4c:	9b 43                   	mov_s      fp,sp
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000af4e:	62 7a                   	sub_s      r2,r2,r3
		return 0;
4000af50:	0c 70                   	mov_s      r0,0
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000af52:	40 a1                   	st_s       r2,[r1,0]
		return 0;
4000af54:	04 f0                   	b_s        4000af5c <_nano_timeout_insert_point_test+0x1c>

	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
4000af56:	52 4b                   	sub_s      r2,r3,r2
4000af58:	44 a0                   	st_s       r2,[r0,16]
	return 1;
4000af5a:	0c 71                   	mov_s      r0,1
}
4000af5c:	e0 7f                   	j_s.d      [blink]
4000af5e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000af62:	e0 78                   	nop_s      

4000af64 <_nano_timeout_insert_point_test>:
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000af64:	40 81                   	ld_s       r2,[r1,0]
4000af66:	64 80                   	ld_s       r3,[r0,16]
 * since the timeout queue is a delta queue.  If it lower or equal, decrement
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
4000af68:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000af6c:	0f 0b ab 00             	brge.t.d   r3,r2,4000af7a <_nano_timeout_insert_point_test+0x16>

4000af70:	9b 43                   	mov_s      fp,sp
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000af72:	62 7a                   	sub_s      r2,r2,r3
		return 0;
4000af74:	0c 70                   	mov_s      r0,0
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000af76:	40 a1                   	st_s       r2,[r1,0]
		return 0;
4000af78:	04 f0                   	b_s        4000af80 <_nano_timeout_insert_point_test+0x1c>

	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
4000af7a:	52 4b                   	sub_s      r2,r3,r2
4000af7c:	44 a0                   	st_s       r2,[r0,16]
	return 1;
4000af7e:	0c 71                   	mov_s      r0,1
}
4000af80:	e0 7f                   	j_s.d      [blink]
4000af82:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000af86:	e0 78                   	nop_s      

4000af88 <_nano_timeout_insert_point_test>:
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000af88:	40 81                   	ld_s       r2,[r1,0]
4000af8a:	64 80                   	ld_s       r3,[r0,16]
 * since the timeout queue is a delta queue.  If it lower or equal, decrement
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
4000af8c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000af90:	0f 0b ab 00             	brge.t.d   r3,r2,4000af9e <_nano_timeout_insert_point_test+0x16>

4000af94:	9b 43                   	mov_s      fp,sp
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000af96:	62 7a                   	sub_s      r2,r2,r3
		return 0;
4000af98:	0c 70                   	mov_s      r0,0
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000af9a:	40 a1                   	st_s       r2,[r1,0]
		return 0;
4000af9c:	04 f0                   	b_s        4000afa4 <_nano_timeout_insert_point_test+0x1c>

	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
4000af9e:	52 4b                   	sub_s      r2,r3,r2
4000afa0:	44 a0                   	st_s       r2,[r0,16]
	return 1;
4000afa2:	0c 71                   	mov_s      r0,1
}
4000afa4:	e0 7f                   	j_s.d      [blink]
4000afa6:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000afaa:	e0 78                   	nop_s      

4000afac <_nano_timeout_insert_point_test>:
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000afac:	40 81                   	ld_s       r2,[r1,0]
4000afae:	64 80                   	ld_s       r3,[r0,16]
 * since the timeout queue is a delta queue.  If it lower or equal, decrement
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
4000afb0:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000afb4:	0f 0b ab 00             	brge.t.d   r3,r2,4000afc2 <_nano_timeout_insert_point_test+0x16>

4000afb8:	9b 43                   	mov_s      fp,sp
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000afba:	62 7a                   	sub_s      r2,r2,r3
		return 0;
4000afbc:	0c 70                   	mov_s      r0,0
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000afbe:	40 a1                   	st_s       r2,[r1,0]
		return 0;
4000afc0:	04 f0                   	b_s        4000afc8 <_nano_timeout_insert_point_test+0x1c>

	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
4000afc2:	52 4b                   	sub_s      r2,r3,r2
4000afc4:	44 a0                   	st_s       r2,[r0,16]
	return 1;
4000afc6:	0c 71                   	mov_s      r0,1
}
4000afc8:	e0 7f                   	j_s.d      [blink]
4000afca:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000afce:	e0 78                   	nop_s      

4000afd0 <_nano_timeout_insert_point_test>:
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000afd0:	40 81                   	ld_s       r2,[r1,0]
4000afd2:	64 80                   	ld_s       r3,[r0,16]
 * since the timeout queue is a delta queue.  If it lower or equal, decrement
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
4000afd4:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000afd8:	0f 0b ab 00             	brge.t.d   r3,r2,4000afe6 <_nano_timeout_insert_point_test+0x16>

4000afdc:	9b 43                   	mov_s      fp,sp
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000afde:	62 7a                   	sub_s      r2,r2,r3
		return 0;
4000afe0:	0c 70                   	mov_s      r0,0
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000afe2:	40 a1                   	st_s       r2,[r1,0]
		return 0;
4000afe4:	04 f0                   	b_s        4000afec <_nano_timeout_insert_point_test+0x1c>

	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
4000afe6:	52 4b                   	sub_s      r2,r3,r2
4000afe8:	44 a0                   	st_s       r2,[r0,16]
	return 1;
4000afea:	0c 71                   	mov_s      r0,1
}
4000afec:	e0 7f                   	j_s.d      [blink]
4000afee:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000aff2:	e0 78                   	nop_s      

4000aff4 <_nano_timeout_insert_point_test>:
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000aff4:	40 81                   	ld_s       r2,[r1,0]
4000aff6:	64 80                   	ld_s       r3,[r0,16]
 * since the timeout queue is a delta queue.  If it lower or equal, decrement
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */
static int _nano_timeout_insert_point_test(sys_dnode_t *test, void *timeout)
{
4000aff8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
4000affc:	0f 0b ab 00             	brge.t.d   r3,r2,4000b00a <_nano_timeout_insert_point_test+0x16>

4000b000:	9b 43                   	mov_s      fp,sp
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000b002:	62 7a                   	sub_s      r2,r2,r3
		return 0;
4000b004:	0c 70                   	mov_s      r0,0
{
	struct _nano_timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
		*timeout_to_insert -= t->delta_ticks_from_prev;
4000b006:	40 a1                   	st_s       r2,[r1,0]
		return 0;
4000b008:	04 f0                   	b_s        4000b010 <_nano_timeout_insert_point_test+0x1c>

	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
4000b00a:	52 4b                   	sub_s      r2,r3,r2
4000b00c:	44 a0                   	st_s       r2,[r0,16]
	return 1;
4000b00e:	0c 71                   	mov_s      r0,1
}
4000b010:	e0 7f                   	j_s.d      [blink]
4000b012:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b016:	e0 78                   	nop_s      

4000b018 <_nano_fiber_ready>:
 * while this routine is executing!
 *
 * @return N/A
 */
void _nano_fiber_ready(struct tcs *tcs)
{
4000b018:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b01c:	9b 43                   	mov_s      fp,sp
	struct tcs *pQ = (struct tcs *)&_nanokernel.fiber;
4000b01e:	c3 42 00 a8 58 0e       	mov_s      r2,0xa8000e58
	/*
	 * Search until end of list or until a fiber with numerically
	 * higher priority is located.
	 */

	while (pQ->link && (tcs->prio >= pQ->link->prio)) {
4000b024:	20 82                   	ld_s       r1,[r2,0]
4000b026:	08 e9                   	breq_s     r1,0,4000b034 <_nano_fiber_ready+0x1c>

4000b028:	85 80                   	ld_s       r12,[r0,20]
4000b02a:	65 81                   	ld_s       r3,[r1,20]
4000b02c:	09 0c c2 10             	brlt       r12,r3,4000b034 <_nano_fiber_ready+0x1c>

4000b030:	20 42                   	mov_s      r2,r1
4000b032:	fa f1                   	b_s        4000b024 <_nano_fiber_ready+0xc>

		pQ = pQ->link;
	}

	/* Insert fiber, following any equal priority fibers */

	tcs->link = pQ->link;
4000b034:	20 a0                   	st_s       r1,[r0,0]
	pQ->link = tcs;
4000b036:	00 a2                   	st_s       r0,[r2,0]
}
4000b038:	e0 7f                   	j_s.d      [blink]
4000b03a:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b03e:	e0 78                   	nop_s      

4000b040 <_nano_fiber_swap>:
 * This routine can only be called from a fiber.
 *
 * @return This function never returns
 */
FUNC_NORETURN void _nano_fiber_swap(void)
{
4000b040:	f1 c0                   	push_s     blink
4000b042:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b046:	9b 43                   	mov_s      fp,sp

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b048:	2f 27 3f 00             	clri       
	 * switch to the highest priority fiber, or the highest priority task
	 * if there are no runnable fibers.
	 */

	imask = irq_lock();
	_Swap(imask);
4000b04c:	92 08 80 00             	bl         4000c0dc <_Swap>


4000b050 <fiber_abort>:
	CODE_UNREACHABLE;
}

#ifndef CONFIG_ARCH_HAS_NANO_FIBER_ABORT
FUNC_NORETURN void fiber_abort(void)
{
4000b050:	f1 c0                   	push_s     blink
4000b052:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	/* Do normal thread exit cleanup, then give up CPU control */

	_thread_exit(_nanokernel.current);
	_nano_fiber_swap();
4000b056:	ee 0f ef ff             	bl.d       4000b040 <_nano_fiber_swap>

4000b05a:	9b 43                   	mov_s      fp,sp

4000b05c <_nano_timeout_abort>:
 */
static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
4000b05c:	4b 80                   	ld_s       r2,[r0,44]
	}
}

/* abort a timeout for a specified fiber */
static inline int _nano_timeout_abort(struct tcs *tcs)
{
4000b05e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b062:	9b 43                   	mov_s      fp,sp
 */
static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
4000b064:	31 0a 80 0f ff ff ff ff 	breq       r2,-1,4000b094 <_nano_timeout_abort+0x38>

		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
4000b06c:	c3 43 00 a8 58 0e       	mov_s      r3,0xa8000e58
4000b072:	65 83                   	ld_s       r3,[r3,20]
4000b074:	bc 48                   	add_s      r1,r0,28
4000b076:	0f 0b 40 00             	breq       r3,r1,4000b082 <_nano_timeout_abort+0x26>

4000b07a:	27 80                   	ld_s       r1,[r0,28]
		struct _nano_timeout *next =
			(struct _nano_timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
4000b07c:	64 81                   	ld_s       r3,[r1,16]
4000b07e:	7a 62                   	add_s      r2,r2,r3
4000b080:	44 a1                   	st_s       r2,[r1,16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4000b082:	28 80                   	ld_s       r1,[r0,32]
4000b084:	47 80                   	ld_s       r2,[r0,28]
4000b086:	40 a1                   	st_s       r2,[r1,0]
	node->next->prev = node->prev;
4000b088:	47 80                   	ld_s       r2,[r0,28]
4000b08a:	21 a2                   	st_s       r1,[r2,4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
4000b08c:	2c 77                   	mov_s      r1,-1
4000b08e:	2b a0                   	st_s       r1,[r0,44]

	return 0;
4000b090:	0c 70                   	mov_s      r0,0
4000b092:	03 f0                   	b_s        4000b096 <_nano_timeout_abort+0x3a>

static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
		return -1;
4000b094:	0c 77                   	mov_s      r0,-1

/* abort a timeout for a specified fiber */
static inline int _nano_timeout_abort(struct tcs *tcs)
{
	return _do_nano_timeout_abort(&tcs->nano_timeout);
}
4000b096:	e0 7f                   	j_s.d      [blink]
4000b098:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b09c <_nano_timeout_abort>:
 */
static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
4000b09c:	4b 80                   	ld_s       r2,[r0,44]
	}
}

/* abort a timeout for a specified fiber */
static inline int _nano_timeout_abort(struct tcs *tcs)
{
4000b09e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b0a2:	9b 43                   	mov_s      fp,sp
 */
static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
4000b0a4:	31 0a 80 0f ff ff ff ff 	breq       r2,-1,4000b0d4 <_nano_timeout_abort+0x38>

		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
4000b0ac:	c3 43 00 a8 58 0e       	mov_s      r3,0xa8000e58
4000b0b2:	65 83                   	ld_s       r3,[r3,20]
4000b0b4:	bc 48                   	add_s      r1,r0,28
4000b0b6:	0f 0b 40 00             	breq       r3,r1,4000b0c2 <_nano_timeout_abort+0x26>

4000b0ba:	27 80                   	ld_s       r1,[r0,28]
		struct _nano_timeout *next =
			(struct _nano_timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
4000b0bc:	64 81                   	ld_s       r3,[r1,16]
4000b0be:	7a 62                   	add_s      r2,r2,r3
4000b0c0:	44 a1                   	st_s       r2,[r1,16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4000b0c2:	28 80                   	ld_s       r1,[r0,32]
4000b0c4:	47 80                   	ld_s       r2,[r0,28]
4000b0c6:	40 a1                   	st_s       r2,[r1,0]
	node->next->prev = node->prev;
4000b0c8:	47 80                   	ld_s       r2,[r0,28]
4000b0ca:	21 a2                   	st_s       r1,[r2,4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
4000b0cc:	2c 77                   	mov_s      r1,-1
4000b0ce:	2b a0                   	st_s       r1,[r0,44]

	return 0;
4000b0d0:	0c 70                   	mov_s      r0,0
4000b0d2:	03 f0                   	b_s        4000b0d6 <_nano_timeout_abort+0x3a>

static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
		return -1;
4000b0d4:	0c 77                   	mov_s      r0,-1

/* abort a timeout for a specified fiber */
static inline int _nano_timeout_abort(struct tcs *tcs)
{
	return _do_nano_timeout_abort(&tcs->nano_timeout);
}
4000b0d6:	e0 7f                   	j_s.d      [blink]
4000b0d8:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b0dc <_nano_timeout_abort>:
 */
static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
4000b0dc:	4b 80                   	ld_s       r2,[r0,44]
	}
}

/* abort a timeout for a specified fiber */
static inline int _nano_timeout_abort(struct tcs *tcs)
{
4000b0de:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b0e2:	9b 43                   	mov_s      fp,sp
 */
static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
4000b0e4:	31 0a 80 0f ff ff ff ff 	breq       r2,-1,4000b114 <_nano_timeout_abort+0x38>

		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
4000b0ec:	c3 43 00 a8 58 0e       	mov_s      r3,0xa8000e58
4000b0f2:	65 83                   	ld_s       r3,[r3,20]
4000b0f4:	bc 48                   	add_s      r1,r0,28
4000b0f6:	0f 0b 40 00             	breq       r3,r1,4000b102 <_nano_timeout_abort+0x26>

4000b0fa:	27 80                   	ld_s       r1,[r0,28]
		struct _nano_timeout *next =
			(struct _nano_timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
4000b0fc:	64 81                   	ld_s       r3,[r1,16]
4000b0fe:	7a 62                   	add_s      r2,r2,r3
4000b100:	44 a1                   	st_s       r2,[r1,16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4000b102:	28 80                   	ld_s       r1,[r0,32]
4000b104:	47 80                   	ld_s       r2,[r0,28]
4000b106:	40 a1                   	st_s       r2,[r1,0]
	node->next->prev = node->prev;
4000b108:	47 80                   	ld_s       r2,[r0,28]
4000b10a:	21 a2                   	st_s       r1,[r2,4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
4000b10c:	2c 77                   	mov_s      r1,-1
4000b10e:	2b a0                   	st_s       r1,[r0,44]

	return 0;
4000b110:	0c 70                   	mov_s      r0,0
4000b112:	03 f0                   	b_s        4000b116 <_nano_timeout_abort+0x3a>

static inline int _do_nano_timeout_abort(struct _nano_timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
		return -1;
4000b114:	0c 77                   	mov_s      r0,-1

/* abort a timeout for a specified fiber */
static inline int _nano_timeout_abort(struct tcs *tcs)
{
	return _do_nano_timeout_abort(&tcs->nano_timeout);
}
4000b116:	e0 7f                   	j_s.d      [blink]
4000b118:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b11c <sys_tick_get>:
 *
 * @return the current system tick count
 *
 */
int64_t sys_tick_get(void)
{
4000b11c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b120:	9b 43                   	mov_s      fp,sp
4000b122:	2f 27 3f 00             	clri       
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b126:	2f 26 3f 00             	seti       
	unsigned int imask = irq_lock();

	tmp_sys_clock_tick_count = _sys_clock_tick_count;
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
4000b12a:	00 16 00 70 00 a8 3c 14 	ld         r0,[0xa800143c]
4000b132:	00 16 01 70 00 a8 40 14 	ld         r1,[0xa8001440]
4000b13a:	e0 7f                   	j_s.d      [blink]
4000b13c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b140 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the fibers pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(int32_t ticks)
{
4000b140:	f1 c0                   	push_s     blink
4000b142:	2e 0d 2f fe             	bl.d       4000766c <__st_r13_to_r17>

4000b146:	a5 c1                   	sub_s      sp,sp,20
4000b148:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b14c:	9b 43                   	mov_s      fp,sp

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b14e:	2f 27 bf 03             	clri       r14
	unsigned int  key;

	key = irq_lock();
	_sys_clock_tick_count += ticks;
4000b152:	00 16 04 70 00 a8 3c 14 	ld         r4,[0xa800143c]
4000b15a:	00 16 05 70 00 a8 40 14 	ld         r5,[0xa8001440]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b162:	cb 47 00 a8 58 0e       	mov_s      r15,0xa8000e58
4000b168:	24 87                   	ld_s       r1,[r15,16]
4000b16a:	00 20 02 81             	add.f      r2,r0,r4
4000b16e:	42 28 c3 07             	asr        r3,r0,31
4000b172:	01 23 43 01             	adc        r3,r3,r5
4000b176:	00 1e 80 70 00 a8 3c 14 	st         r2,[0xa800143c]
 * @return a pointer to the head element from a node, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
4000b17e:	d3 71 00 a8 68 0e       	cmp_s      r1,0xa8000e68
4000b184:	00 1e c0 70 00 a8 40 14 	st         r3,[0xa8001440]
4000b18c:	4c 70                   	mov_s      r2,0
4000b18e:	40 43                   	mov_s      r3,r2
4000b190:	ca 23 42 00             	mov.nz     r3,r1
4000b194:	60 41                   	mov_s      r1,r3
static inline void handle_expired_nano_timeouts(int32_t ticks)
{
	struct _nano_timeout *head =
		(struct _nano_timeout *)sys_dlist_peek_head(&_nanokernel.timeout_q);

	_nanokernel.task_timeout = TICKS_UNLIMITED;
4000b196:	6c 77                   	mov_s      r3,-1
4000b198:	66 a7                   	st_s       r3,[r15,24]
	if (head) {
4000b19a:	89 e9                   	brne_s     r1,0,4000b1aa <_nano_sys_clock_tick_announce+0x6a>

 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b19c:	2f 26 bf 03             	seti       r14

	key = irq_lock();
	_sys_clock_tick_count += ticks;
	handle_expired_nano_timeouts(ticks);
	irq_unlock(key);
}
4000b1a0:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b1a4:	14 dc                   	mov_s      r12,20
4000b1a6:	29 05 0f fe             	b          400076cc <__ld_r13_to_r17_ret>

	struct _nano_timeout *head =
		(struct _nano_timeout *)sys_dlist_peek_head(&_nanokernel.timeout_q);

	_nanokernel.task_timeout = TICKS_UNLIMITED;
	if (head) {
		head->delta_ticks_from_prev -= ticks;
4000b1aa:	64 81                   	ld_s       r3,[r1,16]
static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
		return NULL;
4000b1ac:	0e 70                   	mov_s      r16,0
4000b1ae:	10 4b                   	sub_s      r0,r3,r0
4000b1b0:	04 a1                   	st_s       r0,[r1,16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b1b2:	04 87                   	ld_s       r0,[r15,16]
			_nano_fiber_ready(tcs);
		}
	} else if (t->func) {
		t->func(t);
	}
	t->delta_ticks_from_prev = -1;
4000b1b4:	2e 77                   	mov_s      r17,-1
 * @return a pointer to the head element from a node, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
4000b1b6:	d3 70 00 a8 68 0e       	cmp_s      r0,0xa8000e68
4000b1bc:	ca 22 02 00             	mov.nz     r2,r0
4000b1c0:	40 40                   	mov_s      r0,r2
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;
	struct _nano_timeout *next;

	next = (struct _nano_timeout *)sys_dlist_peek_head(timeout_q);
	while (next && next->delta_ticks_from_prev == 0) {
4000b1c2:	6e e8                   	breq_s     r0,0,4000b19c <_nano_sys_clock_tick_announce+0x5c>

4000b1c4:	04 80                   	ld_s       r0,[r0,16]
4000b1c6:	ec e8                   	brne_s     r0,0,4000b19c <_nano_sys_clock_tick_announce+0x5c>

 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b1c8:	a4 87                   	ld_s       r13,[r15,16]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
4000b1ca:	17 0d 80 1f 00 a8 68 0e 	breq       r13,0xa8000e68,4000b1de <_nano_sys_clock_tick_announce+0x9e>

 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
4000b1d2:	20 85                   	ld_s       r1,[r13,0]
4000b1d4:	01 85                   	ld_s       r0,[r13,4]
4000b1d6:	20 a0                   	st_s       r1,[r0,0]
	node->next->prev = node->prev;
4000b1d8:	20 85                   	ld_s       r1,[r13,0]
4000b1da:	01 a1                   	st_s       r0,[r1,4]
4000b1dc:	02 f0                   	b_s        4000b1e0 <_nano_sys_clock_tick_announce+0xa0>

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
		return NULL;
4000b1de:	ad 70                   	mov_s      r13,0

static inline struct _nano_timeout *_nano_timeout_handle_one_timeout(
	sys_dlist_t *timeout_q)
{
	struct _nano_timeout *t = (void *)sys_dlist_get(timeout_q);
	struct tcs *tcs = t->tcs;
4000b1e0:	22 85                   	ld_s       r1,[r13,8]

	if (tcs != NULL) {
4000b1e2:	24 e9                   	breq_s     r1,0,4000b228 <_nano_sys_clock_tick_announce+0xe8>

 */

static inline struct _nano_timeout *_nano_timeout_handle_one_timeout(
	sys_dlist_t *timeout_q)
{
	struct _nano_timeout *t = (void *)sys_dlist_get(timeout_q);
4000b1e4:	43 85                   	ld_s       r2,[r13,12]
 * @return N/A
 */
static inline void _nano_timeout_object_dequeue(
	struct tcs *tcs, struct _nano_timeout *t)
{
	if (t->wait_q) {
4000b1e6:	1e ea                   	breq_s     r2,0,4000b220 <_nano_sys_clock_tick_announce+0xe0>


#if defined(CONFIG_NANO_TIMEOUTS)
static inline void _nano_timeout_remove_tcs_from_wait_q(
	struct tcs *tcs, struct _nano_queue *wait_q)
{
	if (wait_q->head == tcs) {
4000b1e8:	00 82                   	ld_s       r0,[r2,0]
4000b1ea:	1b 08 49 00             	brne.t     r0,r1,4000b202 <_nano_sys_clock_tick_announce+0xc2>

4000b1ee:	01 82                   	ld_s       r0,[r2,4]
		if (wait_q->tail == wait_q->head) {
4000b1f0:	0d 08 49 00             	brne.t     r0,r1,4000b1fc <_nano_sys_clock_tick_announce+0xbc>

4000b1f4:	00 1a 00 04             	st         r16,[r2]

/* reset a wait queue, call during operation */
static inline void _nano_wait_q_reset(struct _nano_queue *wait_q)
{
	wait_q->head = (void *)0;
	wait_q->tail = (void *)&(wait_q->head);
4000b1f8:	41 a2                   	st_s       r2,[r2,4]
4000b1fa:	10 f0                   	b_s        4000b218 <_nano_sys_clock_tick_announce+0xd8>

{
	if (wait_q->head == tcs) {
		if (wait_q->tail == wait_q->head) {
			_nano_wait_q_reset(wait_q);
		} else {
			wait_q->head = tcs->link;
4000b1fc:	00 81                   	ld_s       r0,[r1,0]
4000b1fe:	00 a2                   	st_s       r0,[r2,0]
4000b200:	0c f0                   	b_s        4000b218 <_nano_sys_clock_tick_announce+0xd8>

		}
	} else {
		struct tcs *prev = wait_q->head;

		while (prev->link != tcs) {
4000b202:	60 80                   	ld_s       r3,[r0,0]
4000b204:	09 0b 40 00             	breq       r3,r1,4000b20c <_nano_sys_clock_tick_announce+0xcc>

4000b208:	60 40                   	mov_s      r0,r3
4000b20a:	fd f1                   	b_s        4000b202 <_nano_sys_clock_tick_announce+0xc2>

			prev = prev->link;
		}
		prev->link = tcs->link;
4000b20c:	60 81                   	ld_s       r3,[r1,0]
4000b20e:	60 a0                   	st_s       r3,[r0,0]
		if (wait_q->tail == tcs) {
4000b210:	61 82                   	ld_s       r3,[r2,4]
4000b212:	09 0b 49 00             	brne.t     r3,r1,4000b218 <_nano_sys_clock_tick_announce+0xd8>

4000b216:	01 a2                   	st_s       r0,[r2,4]
			wait_q->tail = prev;
		}
	}

	tcs->nano_timeout.wait_q = NULL;
4000b218:	28 19 00 04             	st         r16,[r1,40]
 *
 * @return N/A
 */
static ALWAYS_INLINE void fiberRtnValueSet(struct tcs *fiber, unsigned int value)
{
	fiber->return_value = value;
4000b21c:	10 19 00 04             	st         r16,[r1,16]
	if (tcs != NULL) {
		_nano_timeout_object_dequeue(tcs, t);
		if (_IS_MICROKERNEL_TASK(tcs)) {
			_NANO_TASK_READY(tcs);
		} else {
			_nano_fiber_ready(tcs);
4000b220:	fa 0d ef ff             	bl.d       4000b018 <_nano_fiber_ready>

4000b224:	20 40                   	mov_s      r0,r1
4000b226:	08 f0                   	b_s        4000b234 <_nano_sys_clock_tick_announce+0xf4>

		}
	} else if (t->func) {
4000b228:	25 85                   	ld_s       r1,[r13,20]
4000b22a:	2b 79                   	tst_s      r1,r1
		t->func(t);
4000b22c:	e3 20 42 00             	jlnz.d     [r1]
4000b230:	ca 20 42 03             	mov.nz     r0,r13
	}
	t->delta_ticks_from_prev = -1;
4000b234:	10 1d 40 14             	st         r17,[r13,16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b238:	04 87                   	ld_s       r0,[r15,16]
 * @return a pointer to the head element from a node, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
4000b23a:	02 41                   	mov_s      r1,r16
4000b23c:	d3 70 00 a8 68 0e       	cmp_s      r0,0xa8000e68
4000b242:	ca 21 02 00             	mov.nz     r1,r0
4000b246:	20 40                   	mov_s      r0,r1
4000b248:	bd f1                   	b_s        4000b1c2 <_nano_sys_clock_tick_announce+0x82>

4000b24a:	e0 78                   	nop_s      

4000b24c <sys_thread_self_get>:
#include <sys_clock.h>
#include <drivers/system_timer.h>


nano_thread_id_t sys_thread_self_get(void)
{
4000b24c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b250:	9b 43                   	mov_s      fp,sp
	return _nanokernel.current;
}
4000b252:	c3 40 00 a8 58 0e       	mov_s      r0,0xa8000e58
4000b258:	02 80                   	ld_s       r0,[r0,8]
4000b25a:	e0 7f                   	j_s.d      [blink]
4000b25c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b260 <sys_execution_context_type_get>:

nano_context_type_t sys_execution_context_type_get(void)
{
4000b260:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b264:	9b 43                   	mov_s      fp,sp
 *
 * @return 1 if interrupt handler is executed, 0 otherwise
 */
static ALWAYS_INLINE int _IS_IN_ISR(void)
{
	uint32_t act = _arc_v2_aux_reg_read(_ARC_V2_AUX_IRQ_ACT);
4000b266:	aa 20 c1 00             	lr         r0,[0x43]
	if (_arc_v2_aux_reg_read(_ARC_V2_STATUS32) & _ARC_V2_STATUS32_AE &&
	    _ARC_V2_ECR_VECTOR(_arc_v2_aux_reg_read(_ARC_V2_ECR)) == EXC_EV_TRAP) {
		return 1;
	}
#endif
	return ((act & 0xffff) != 0);
4000b26a:	cf b8                   	bmsk_s     r0,r0,15
	if (_IS_IN_ISR())
4000b26c:	0b 78                   	tst_s      r0,r0
		return NANO_CTX_ISR;
4000b26e:	c0 78                   	sub_s.ne   r0,r0,r0
	return _nanokernel.current;
}

nano_context_type_t sys_execution_context_type_get(void)
{
	if (_IS_IN_ISR())
4000b270:	0a f4                   	bne_s      4000b284 <sys_execution_context_type_get+0x24>

		return NANO_CTX_ISR;

	if ((_nanokernel.current->flags & TASK) == TASK)
4000b272:	c3 40 00 a8 58 0e       	mov_s      r0,0xa8000e58
4000b278:	02 80                   	ld_s       r0,[r0,8]
4000b27a:	21 80                   	ld_s       r1,[r0,4]
		return NANO_CTX_TASK;
4000b27c:	0c 72                   	mov_s      r0,2
4000b27e:	e0 b9                   	btst_s     r1,0
4000b280:	ca 20 61 00             	mov.z      r0,1

	return NANO_CTX_FIBER;
}
4000b284:	e0 7f                   	j_s.d      [blink]
4000b286:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b28a:	e0 78                   	nop_s      

4000b28c <_is_thread_essential>:
 *
 * @return Non-zero if current thread is essential, zero if it is not
 */
int _is_thread_essential(void)
{
	return _nanokernel.current->flags & ESSENTIAL;
4000b28c:	c3 40 00 a8 58 0e       	mov_s      r0,0xa8000e58
4000b292:	02 80                   	ld_s       r0,[r0,8]
 * thread.
 *
 * @return Non-zero if current thread is essential, zero if it is not
 */
int _is_thread_essential(void)
{
4000b294:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	return _nanokernel.current->flags & ESSENTIAL;
4000b298:	01 80                   	ld_s       r0,[r0,4]
 * thread.
 *
 * @return Non-zero if current thread is essential, zero if it is not
 */
int _is_thread_essential(void)
{
4000b29a:	9b 43                   	mov_s      fp,sp
	return _nanokernel.current->flags & ESSENTIAL;
}
4000b29c:	84 20 08 00             	and        r0,r0,0x200
4000b2a0:	e0 7f                   	j_s.d      [blink]
4000b2a2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b2a6:	e0 78                   	nop_s      

4000b2a8 <_thread_entry>:
 */
FUNC_NORETURN void _thread_entry(_thread_entry_t pEntry,
					_thread_arg_t parameter1,
					_thread_arg_t parameter2,
					_thread_arg_t parameter3)
{
4000b2a8:	f1 c0                   	push_s     blink
4000b2aa:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000b2ae:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b2b2:	08 44                   	mov_s      r12,r0
4000b2b4:	9b 43                   	mov_s      fp,sp
	/* Execute the "application" entry point function */

	pEntry(parameter1, parameter2, parameter3);
4000b2b6:	20 40                   	mov_s      r0,r1
4000b2b8:	40 41                   	mov_s      r1,r2
4000b2ba:	60 7c                   	jl_s.d     [r12]
4000b2bc:	60 42                   	mov_s      r2,r3

	/* Determine if thread can legally terminate itself via "return" */

	if (_is_thread_essential()) {
4000b2be:	d2 0f cf ff             	bl         4000b28c <_is_thread_essential>

4000b2c2:	12 e8                   	breq_s     r0,0,4000b2e4 <_thread_entry+0x3c>

		/*
		 * Nanokernel's background task must always be present,
		 * so if it has nothing left to do just let it idle forever
		 */

		while (((_nanokernel.current)->flags & TASK) == TASK) {
4000b2c4:	cb 45 00 a8 58 0e       	mov_s      r13,0xa8000e58
4000b2ca:	02 85                   	ld_s       r0,[r13,8]
4000b2cc:	01 80                   	ld_s       r0,[r0,4]
4000b2ce:	0d 08 1e 00             	bbit0      r0,0,4000b2d8 <_thread_entry+0x30>

			nano_cpu_idle();
4000b2d2:	a2 08 40 00             	bl         4000bb70 <nano_cpu_idle>

4000b2d6:	fb f1                   	b_s        4000b2ca <_thread_entry+0x22>

		}
#endif /*  CONFIG_NANOKERNEL */

		/* Loss of essential thread is a system fatal error */

		_NanoFatalErrorHandler(_NANO_ERR_INVALID_TASK_EXIT,
4000b2d8:	c3 41 00 40 80 db       	mov_s      r1,0x4000db80
4000b2de:	ca 0a 60 00             	bl.d       4000bda4 <_NanoFatalErrorHandler>

4000b2e2:	0c 71                   	mov_s      r0,1
		extern FUNC_NORETURN void _TaskAbort(void);
		_TaskAbort();
	} else
#endif /* CONFIG_MICROKERNEL */
	{
		fiber_abort();
4000b2e4:	6e 0d cf ff             	bl         4000b050 <fiber_abort>


4000b2e8 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void)
{
4000b2e8:	f1 c0                   	push_s     blink
4000b2ea:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b2ee:	9b 43                   	mov_s      fp,sp
	_sys_device_do_config_level(_SYS_INIT_LEVEL_SECONDARY);
4000b2f0:	3e 0b 20 00             	bl.d       4000b62c <_sys_device_do_config_level>

4000b2f4:	0c 71                   	mov_s      r0,1
	_sys_device_do_config_level(_SYS_INIT_LEVEL_NANOKERNEL);
4000b2f6:	3a 0b 20 00             	bl.d       4000b62c <_sys_device_do_config_level>

4000b2fa:	0c 72                   	mov_s      r0,2
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
4000b2fc:	32 0b 20 00             	bl.d       4000b62c <_sys_device_do_config_level>

4000b300:	0c 74                   	mov_s      r0,4
	__do_init_array_aux();
#endif

	extern void main(void);
	main();
}
4000b302:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b306:	d1 c0                   	pop_s      blink
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	extern void main(void);
	main();
4000b308:	39 02 cf ff             	b          4000ad40 <main>


4000b30c <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
4000b30c:	f1 c0                   	push_s     blink
4000b30e:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000b312:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b316:	9b 43                   	mov_s      fp,sp
	 * initialization.
	 * However, don't waste effort initializing the fields of the dummy
	 * thread beyond those needed to identify it as a dummy thread.
	 */

	_nanokernel.current = dummyOutContext;
4000b318:	42 23 00 3e             	sub        r0,fp,56
4000b31c:	cb 45 00 a8 58 0e       	mov_s      r13,0xa8000e58

	/*
	 * Do not insert dummy execution context in the list of fibers, so that
	 * it does not get scheduled back in once context-switched out.
	 */
	dummyOutContext->link = (struct tcs *)NULL;
4000b322:	2c 70                   	mov_s      r1,0
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
4000b324:	af c1                   	sub_s      sp,sp,60
	 * initialization.
	 * However, don't waste effort initializing the fields of the dummy
	 * thread beyond those needed to identify it as a dummy thread.
	 */

	_nanokernel.current = dummyOutContext;
4000b326:	02 a5                   	st_s       r0,[r13,8]
	 * background or idle task). The entry point for this thread is '_main'.
	 */

	_nanokernel.task = (struct tcs *) main_task_stack;

	_new_thread(main_task_stack,	/* pStackMem */
4000b328:	40 c1                   	st_s       r1,[sp,0]
	 * Do not insert dummy execution context in the list of fibers, so that
	 * it does not get scheduled back in once context-switched out.
	 */
	dummyOutContext->link = (struct tcs *)NULL;

	dummyOutContext->flags = FIBER | ESSENTIAL;
4000b32a:	8a 20 08 00             	mov        r0,0x200

	/*
	 * Do not insert dummy execution context in the list of fibers, so that
	 * it does not get scheduled back in once context-switched out.
	 */
	dummyOutContext->link = (struct tcs *)NULL;
4000b32e:	c8 1b 40 b0             	st         r1,[fp,-56]

	dummyOutContext->flags = FIBER | ESSENTIAL;
4000b332:	cc 1b 00 b0             	st         r0,[fp,-52]
	dummyOutContext->prio = 0;
4000b336:	dc 1b 40 b0             	st         r1,[fp,-36]
	/*
	 * Initialize the thread control block (TCS) for the main task (either
	 * background or idle task). The entry point for this thread is '_main'.
	 */

	_nanokernel.task = (struct tcs *) main_task_stack;
4000b33a:	c3 40 00 a8 24 15       	mov_s      r0,0xa8001524

	_new_thread(main_task_stack,	/* pStackMem */
4000b340:	8a 21 10 00             	mov        r1,0x400
	/*
	 * Initialize the thread control block (TCS) for the main task (either
	 * background or idle task). The entry point for this thread is '_main'.
	 */

	_nanokernel.task = (struct tcs *) main_task_stack;
4000b344:	01 a5                   	st_s       r0,[r13,4]

	_new_thread(main_task_stack,	/* pStackMem */
4000b346:	4c 70                   	mov_s      r2,0
4000b348:	c3 43 00 40 e8 b2       	mov_s      r3,0x4000b2e8
4000b34e:	8c 70                   	mov_s      r4,0
4000b350:	ac 70                   	mov_s      r5,0
4000b352:	cc 70                   	mov_s      r6,0
4000b354:	aa 0f 20 00             	bl.d       4000bafc <_new_thread>

4000b358:	ec 77                   	mov_s      r7,-1
	 *
	 * Warning: _thread_essential_set() doesn't do the same thing. That
	 * operates on _nanokernel.current, not _nanokernel.task ...
	 */

	_nanokernel.task->flags |= ESSENTIAL;
4000b35a:	01 85                   	ld_s       r0,[r13,4]
4000b35c:	21 80                   	ld_s       r1,[r0,4]
4000b35e:	89 b9                   	bset_s     r1,r1,9
4000b360:	21 a0                   	st_s       r1,[r0,4]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
4000b362:	c3 40 00 a8 68 0e       	mov_s      r0,0xa8000e68
4000b368:	04 a5                   	st_s       r0,[r13,16]
	list->tail = (sys_dnode_t *)list;
4000b36a:	05 a5                   	st_s       r0,[r13,20]

	initialize_nano_timeouts();
4000b36c:	0c 77                   	mov_s      r0,-1
4000b36e:	06 a5                   	st_s       r0,[r13,24]
		CACHE_DIRECT | /* direct mapping (one-way assoc.) */
		CACHE_ENABLE   /* i-cache enabled */
	);
	uint32_t val;

	val = _arc_v2_aux_reg_read(_ARC_V2_I_CACHE_BUILD);
4000b370:	aa 20 c1 0d             	lr         r0,[0x77]
	val &= 0xff;
4000b374:	c7 b8                   	bmsk_s     r0,r0,7
	if (val != 0) {
4000b376:	06 e8                   	breq_s     r0,0,4000b380 <_Cstart+0x74>

		/* configure i-cache if present */
		_arc_v2_aux_reg_write(_ARC_V2_IC_CTRL, icache_config);
4000b378:	6b 26 40 74 00 00 00 00 	sr         0,[0x11]
		_ARC_V2_AUX_IRQ_CTRL_LOOP_REGS | /* save lp_xxx registers */
		_ARC_V2_AUX_IRQ_CTRL_BLINK     | /* save blink */
		_ARC_V2_AUX_IRQ_CTRL_14_REGS     /* save r0 -> r13 (caller-saved) */
	);

	nano_cpu_sleep_mode = _ARC_V2_WAKE_IRQ_LEVEL;
4000b380:	0f d8                   	mov_s      r0,15
4000b382:	00 1e 00 70 00 a8 74 0e 	st         r0,[0xa8000e74]
	_arc_v2_aux_reg_write(_ARC_V2_AUX_IRQ_CTRL, aux_irq_ctrl_value);
4000b38a:	6b 26 80 73 00 00 07 06 	sr         0x607,[0xe]

	_nanokernel.rirq_sp = _interrupt_stack + CONFIG_ISR_STACK_SIZE;
4000b392:	c3 40 00 a8 24 21       	mov_s      r0,0xa8002124
	_firq_stack_setup();
4000b398:	d6 09 60 00             	bl.d       4000bd6c <_firq_stack_setup>

4000b39c:	03 a5                   	st_s       r0,[r13,12]

	nano_init((struct tcs *)&dummyTCS);

	/* perform basic hardware initialization */

	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRIMARY);
4000b39e:	92 0a 20 00             	bl.d       4000b62c <_sys_device_do_config_level>

4000b3a2:	0c 70                   	mov_s      r0,0

	PRINT_BOOT_BANNER();

	/* context switch to main task (entry function is _main()) */

	_nano_fiber_swap();
4000b3a4:	9e 0c cf ff             	bl         4000b040 <_nano_fiber_swap>


4000b3a8 <nano_task_sem_give>:

	irq_unlock(imask);
}

void nano_task_sem_give(struct nano_sem *sem)
{
4000b3a8:	f1 c0                   	push_s     blink
4000b3aa:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000b3ae:	41 c6                   	st_s       r14,[sp,4]
4000b3b0:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b3b4:	9b 43                   	mov_s      fp,sp
4000b3b6:	00 41                   	mov_s      r1,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b3b8:	2f 27 bf 03             	clri       r14
 * Remove first fiber from a wait queue and put it on the ready queue.
 * Abort and return NULL if the wait queue is empty.
 */
static inline struct tcs *_nano_wait_q_remove(struct _nano_queue *wait_q)
{
	return wait_q->head ? _nano_wait_q_remove_no_check(wait_q) : NULL;
4000b3bc:	a0 80                   	ld_s       r13,[r0,0]
4000b3be:	1f ed                   	breq_s     r13,0,4000b3fa <nano_task_sem_give+0x52>

static inline
struct tcs *_nano_wait_q_remove_no_check(struct _nano_queue *wait_q)
{
	struct tcs *tcs = wait_q->head;

	if (wait_q->tail == wait_q->head) {
4000b3c0:	01 80                   	ld_s       r0,[r0,4]
4000b3c2:	0f 08 49 03             	brne.t     r0,r13,4000b3ce <nano_task_sem_give+0x26>

4000b3c6:	0c 70                   	mov_s      r0,0

/* reset a wait queue, call during operation */
static inline void _nano_wait_q_reset(struct _nano_queue *wait_q)
{
	wait_q->head = (void *)0;
	wait_q->tail = (void *)&(wait_q->head);
4000b3c8:	21 a1                   	st_s       r1,[r1,4]
#endif

/* reset a wait queue, call during operation */
static inline void _nano_wait_q_reset(struct _nano_queue *wait_q)
{
	wait_q->head = (void *)0;
4000b3ca:	00 a1                   	st_s       r0,[r1,0]
4000b3cc:	03 f0                   	b_s        4000b3d2 <nano_task_sem_give+0x2a>

	struct tcs *tcs = wait_q->head;

	if (wait_q->tail == wait_q->head) {
		_nano_wait_q_reset(wait_q);
	} else {
		wait_q->head = tcs->link;
4000b3ce:	00 85                   	ld_s       r0,[r13,0]
4000b3d0:	00 a1                   	st_s       r0,[r1,0]
	}
	tcs->link = 0;
4000b3d2:	0c 70                   	mov_s      r0,0
4000b3d4:	00 a5                   	st_s       r0,[r13,0]

	_nano_fiber_ready(tcs);
4000b3d6:	46 0c ef ff             	bl.d       4000b018 <_nano_fiber_ready>

4000b3da:	a1 40                   	mov_s      r0,r13
	unsigned int imask;

	imask = irq_lock();
	tcs = _nano_wait_q_remove(&sem->wait_q);
	if (tcs) {
		_nano_timeout_abort(tcs);
4000b3dc:	02 0d ef ff             	bl.d       4000b0dc <_nano_timeout_abort>

4000b3e0:	a1 40                   	mov_s      r0,r13
 *
 * @return N/A
 */
static ALWAYS_INLINE void fiberRtnValueSet(struct tcs *fiber, unsigned int value)
{
	fiber->return_value = value;
4000b3e2:	0c 71                   	mov_s      r0,1
4000b3e4:	04 a5                   	st_s       r0,[r13,16]
		set_sem_available(tcs);
		_Swap(imask);
4000b3e6:	c1 40                   	mov_s      r0,r14

	sem->nsig++;
	_TASK_NANO_UNPEND_TASKS(&sem->task_q);

	irq_unlock(imask);
}
4000b3e8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b3ec:	00 c5                   	ld_s       r13,[sp,0]
4000b3ee:	01 c6                   	ld_s       r14,[sp,4]
4000b3f0:	08 14 1f 30             	ld         blink,[sp,8]
	imask = irq_lock();
	tcs = _nano_wait_q_remove(&sem->wait_q);
	if (tcs) {
		_nano_timeout_abort(tcs);
		set_sem_available(tcs);
		_Swap(imask);
4000b3f4:	e9 04 60 00             	b.d        4000c0dc <_Swap>

4000b3f8:	a3 c0                   	add_s      sp,sp,12
		return;
	}

	sem->nsig++;
4000b3fa:	02 80                   	ld_s       r0,[r0,8]
4000b3fc:	04 71                   	add_s      r0,r0,1
4000b3fe:	02 a1                   	st_s       r0,[r1,8]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b400:	2f 26 bf 03             	seti       r14
	_TASK_NANO_UNPEND_TASKS(&sem->task_q);

	irq_unlock(imask);
}
4000b404:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b408:	08 dc                   	mov_s      r12,8
4000b40a:	d1 02 0f fe             	b          400076d8 <__ld_r13_to_r14_ret>

4000b40e:	e0 78                   	nop_s      

4000b410 <nano_task_sem_take>:
 * INTERNAL
 * Since a task cannot pend on a nanokernel object, they poll the
 * sempahore object.
 */
int nano_task_sem_take(struct nano_sem *sem, int32_t timeout_in_ticks)
{
4000b410:	f1 c0                   	push_s     blink
4000b412:	5a 0a 2f fe             	bl.d       40007668 <__st_r13_to_r18>

4000b416:	a6 c1                   	sub_s      sp,sp,24
4000b418:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b41c:	9b 43                   	mov_s      fp,sp
4000b41e:	10 41                   	mov_s      r17,r0
4000b420:	28 45                   	mov_s      r13,r1

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b422:	2f 27 3f 04             	clri       r16
	int64_t cur_ticks;
	int64_t limit = 0x7fffffffffffffffll;
	unsigned int key;

	key = irq_lock();
	cur_ticks = _NANO_TIMEOUT_TICK_GET();
4000b426:	fa 0c cf ff             	bl         4000b11c <sys_tick_get>

	if (timeout_in_ticks != TICKS_UNLIMITED) {
4000b42a:	b5 77                   	cmp_s      r13,-1
	int64_t cur_ticks;
	int64_t limit = 0x7fffffffffffffffll;
	unsigned int key;

	key = irq_lock();
	cur_ticks = _NANO_TIMEOUT_TICK_GET();
4000b42c:	00 42                   	mov_s      r2,r0
4000b42e:	20 43                   	mov_s      r3,r1
	if (timeout_in_ticks != TICKS_UNLIMITED) {
4000b430:	08 f2                   	beq_s      4000b440 <nano_task_sem_take+0x30>

		limit = cur_ticks + timeout_in_ticks;
4000b432:	42 2d cf 17             	asr        r15,r13,31
4000b436:	00 25 0e 90             	add.f      r14,r13,r0
4000b43a:	01 27 4f 10             	adc        r15,r15,r1
4000b43e:	06 f0                   	b_s        4000b448 <nano_task_sem_take+0x38>

 * sempahore object.
 */
int nano_task_sem_take(struct nano_sem *sem, int32_t timeout_in_ticks)
{
	int64_t cur_ticks;
	int64_t limit = 0x7fffffffffffffffll;
4000b440:	cd 77                   	mov_s      r14,-1
4000b442:	cb 47 ff 7f ff ff       	mov_s      r15,0x7fffffff
			irq_unlock(key);
			return 1;
		}

		if (timeout_in_ticks != TICKS_NONE) {
			_NANO_OBJECT_WAIT(&sem->task_q, &sem->nsig,
4000b448:	0a 22 80 2f 00 a8 58 0e 	mov        r18,0xa8000e58
		 * Predict that the branch will be taken to break out of the
		 * loop.  There is little cost to a misprediction since that
		 * leads to idle.
		 */

		if (likely(sem->nsig > 0)) {
4000b450:	36 40                   	ld_s       r0,[r17,8]
4000b452:	15 08 72 00             	brlt.d     r0,1,4000b464 <nano_task_sem_take+0x54>

4000b456:	09 68                   	sub_s      r0,r0,1
			sem->nsig--;
4000b458:	08 19 00 20             	st         r0,[r17,8]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b45c:	2f 26 3f 04             	seti       r16
			irq_unlock(key);
			return 1;
4000b460:	0c 71                   	mov_s      r0,1
4000b462:	1a f0                   	b_s        4000b494 <nano_task_sem_take+0x84>

		}

		if (timeout_in_ticks != TICKS_NONE) {
4000b464:	0f ed                   	breq_s     r13,0,4000b482 <nano_task_sem_take+0x72>

			_NANO_OBJECT_WAIT(&sem->task_q, &sem->nsig,
4000b466:	18 1a 40 23             	st         r13,[r18,24]
4000b46a:	22 0f 20 00             	bl.d       4000bb88 <nano_cpu_atomic_idle>

4000b46e:	02 40                   	mov_s      r0,r16

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b470:	2f 27 3f 04             	clri       r16
					timeout_in_ticks, key);
			cur_ticks = _NANO_TIMEOUT_TICK_GET();
4000b474:	aa 0c cf ff             	bl         4000b11c <sys_tick_get>


			_NANO_TIMEOUT_UPDATE(timeout_in_ticks,
4000b478:	b5 77                   	cmp_s      r13,-1
		}

		if (timeout_in_ticks != TICKS_NONE) {
			_NANO_OBJECT_WAIT(&sem->task_q, &sem->nsig,
					timeout_in_ticks, key);
			cur_ticks = _NANO_TIMEOUT_TICK_GET();
4000b47a:	00 42                   	mov_s      r2,r0
4000b47c:	20 43                   	mov_s      r3,r1

			_NANO_TIMEOUT_UPDATE(timeout_in_ticks,
4000b47e:	03 f2                   	beq_s      4000b482 <nano_task_sem_take+0x72>

4000b480:	15 4e                   	sub_s      r13,r14,r0
						limit, cur_ticks);
		}
	} while (cur_ticks < limit);
4000b482:	d1 0b c2 83             	brlt       r3,r15,4000b450 <nano_task_sem_take+0x40>

4000b486:	0b 0f c1 10             	brne       r15,r3,4000b48e <nano_task_sem_take+0x7e>

4000b48a:	c9 0a 84 83             	brlo       r2,r14,4000b450 <nano_task_sem_take+0x40>

 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b48e:	2f 26 3f 04             	seti       r16

	irq_unlock(key);
	return 0;
4000b492:	0c 70                   	mov_s      r0,0
}
4000b494:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b498:	18 dc                   	mov_s      r12,24
4000b49a:	31 02 0f fe             	b          400076c8 <__ld_r13_to_r18_ret>

4000b49e:	e0 78                   	nop_s      

4000b4a0 <_sem_give_non_preemptible>:
 * ISR context.  However, the nano_isr_sem_give and nano_fiber_sem_give aliases
 * are created to support any required implementation differences in the future
 * without introducing a source code migration issue.
 */
void _sem_give_non_preemptible(struct nano_sem *sem)
{
4000b4a0:	f1 c0                   	push_s     blink
4000b4a2:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000b4a6:	41 c6                   	st_s       r14,[sp,4]
4000b4a8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b4ac:	9b 43                   	mov_s      fp,sp

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b4ae:	2f 27 bf 03             	clri       r14
 * Remove first fiber from a wait queue and put it on the ready queue.
 * Abort and return NULL if the wait queue is empty.
 */
static inline struct tcs *_nano_wait_q_remove(struct _nano_queue *wait_q)
{
	return wait_q->head ? _nano_wait_q_remove_no_check(wait_q) : NULL;
4000b4b2:	a0 80                   	ld_s       r13,[r0,0]
4000b4b4:	1b ed                   	breq_s     r13,0,4000b4ea <_sem_give_non_preemptible+0x4a>

static inline
struct tcs *_nano_wait_q_remove_no_check(struct _nano_queue *wait_q)
{
	struct tcs *tcs = wait_q->head;

	if (wait_q->tail == wait_q->head) {
4000b4b6:	21 80                   	ld_s       r1,[r0,4]
4000b4b8:	0d 09 69 03             	brne.t.d   r1,r13,4000b4c4 <_sem_give_non_preemptible+0x24>

4000b4bc:	2c 70                   	mov_s      r1,0

/* reset a wait queue, call during operation */
static inline void _nano_wait_q_reset(struct _nano_queue *wait_q)
{
	wait_q->head = (void *)0;
	wait_q->tail = (void *)&(wait_q->head);
4000b4be:	01 a0                   	st_s       r0,[r0,4]
#endif

/* reset a wait queue, call during operation */
static inline void _nano_wait_q_reset(struct _nano_queue *wait_q)
{
	wait_q->head = (void *)0;
4000b4c0:	20 a0                   	st_s       r1,[r0,0]
4000b4c2:	04 f0                   	b_s        4000b4c8 <_sem_give_non_preemptible+0x28>

	struct tcs *tcs = wait_q->head;

	if (wait_q->tail == wait_q->head) {
		_nano_wait_q_reset(wait_q);
	} else {
		wait_q->head = tcs->link;
4000b4c4:	20 85                   	ld_s       r1,[r13,0]
4000b4c6:	20 a0                   	st_s       r1,[r0,0]
	}
	tcs->link = 0;
4000b4c8:	0c 70                   	mov_s      r0,0
4000b4ca:	00 a5                   	st_s       r0,[r13,0]

	_nano_fiber_ready(tcs);
4000b4cc:	4e 0b ef ff             	bl.d       4000b018 <_nano_fiber_ready>

4000b4d0:	a1 40                   	mov_s      r0,r13
	tcs = _nano_wait_q_remove(&sem->wait_q);
	if (!tcs) {
		sem->nsig++;
		_NANO_UNPEND_TASKS(&sem->task_q);
	} else {
		_nano_timeout_abort(tcs);
4000b4d2:	0e 0c ef ff             	bl.d       4000b0dc <_nano_timeout_abort>

4000b4d6:	a1 40                   	mov_s      r0,r13
4000b4d8:	0c 71                   	mov_s      r0,1
4000b4da:	04 a5                   	st_s       r0,[r13,16]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b4dc:	2f 26 bf 03             	seti       r14
		set_sem_available(tcs);
	}

	irq_unlock(imask);
}
4000b4e0:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b4e4:	08 dc                   	mov_s      r12,8
4000b4e6:	f5 01 0f fe             	b          400076d8 <__ld_r13_to_r14_ret>

	unsigned int imask;

	imask = irq_lock();
	tcs = _nano_wait_q_remove(&sem->wait_q);
	if (!tcs) {
		sem->nsig++;
4000b4ea:	22 80                   	ld_s       r1,[r0,8]
4000b4ec:	24 71                   	add_s      r1,r1,1
4000b4ee:	22 a0                   	st_s       r1,[r0,8]
4000b4f0:	f6 f1                   	b_s        4000b4dc <_sem_give_non_preemptible+0x3c>

4000b4f2:	e0 78                   	nop_s      

4000b4f4 <_sem_take>:

FUNC_ALIAS(_sem_take, nano_isr_sem_take, int);
FUNC_ALIAS(_sem_take, nano_fiber_sem_take, int);

int _sem_take(struct nano_sem *sem, int32_t timeout_in_ticks)
{
4000b4f4:	f1 c0                   	push_s     blink
4000b4f6:	72 09 2f fe             	bl.d       40007664 <__st_r13_to_r19>

4000b4fa:	a7 c1                   	sub_s      sp,sp,28
4000b4fc:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b500:	9b 43                   	mov_s      fp,sp
4000b502:	10 41                   	mov_s      r17,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b504:	2f 27 bf 04             	clri       r18
	unsigned int key = irq_lock();

	if (likely(sem->nsig > 0)) {
4000b508:	02 80                   	ld_s       r0,[r0,8]
4000b50a:	15 08 72 00             	brlt.d     r0,1,4000b51c <_sem_take+0x28>

4000b50e:	09 68                   	sub_s      r0,r0,1
		sem->nsig--;
4000b510:	08 19 00 20             	st         r0,[r17,8]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b514:	2f 26 bf 04             	seti       r18
		irq_unlock(key);
		return 1;
4000b518:	0c 71                   	mov_s      r0,1
4000b51a:	48 f0                   	b_s        4000b5a8 <_sem_take+0xb4>

	}

	if (timeout_in_ticks != TICKS_NONE) {
4000b51c:	39 e9                   	breq_s     r1,0,4000b58e <_sem_take+0x9a>

		_NANO_TIMEOUT_ADD(&sem->wait_q, timeout_in_ticks);
4000b51e:	34 77                   	cmp_s      r1,-1
4000b520:	cb 47 00 a8 58 0e       	mov_s      r15,0xa8000e58
4000b526:	26 f2                   	beq_s      4000b570 <_sem_take+0x7c>

4000b528:	a2 87                   	ld_s       r13,[r15,8]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b52a:	c4 87                   	ld_s       r14,[r15,16]
				     struct _nano_queue *wait_q,
				     int32_t timeout)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	t->tcs = tcs;
4000b52c:	a9 a5                   	st_s       r13,[r13,36]
	t->delta_ticks_from_prev = timeout;
4000b52e:	2b a5                   	st_s       r1,[r13,44]
	t->wait_q = wait_q;
4000b530:	28 1d 40 14             	st         r17,[r13,40]
/* put a fiber on the timeout queue and record its wait queue */
static inline void _nano_timeout_add(struct tcs *tcs,
				     struct _nano_queue *wait_q,
				     int32_t timeout)
{
	_do_nano_timeout_add(tcs,  &tcs->nano_timeout, wait_q, timeout);
4000b534:	40 25 10 17             	add        r16,r13,28
	t->tcs = tcs;
	t->delta_ticks_from_prev = timeout;
	t->wait_q = wait_q;
	sys_dlist_insert_at(timeout_q, (void *)t,
						_nano_timeout_insert_point_test,
						&t->delta_ticks_from_prev);
4000b538:	40 25 13 1b             	add        r19,r13,44
 */

static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
	int (*cond)(sys_dnode_t *, void *), void *data)
{
	if (sys_dlist_is_empty(list)) {
4000b53c:	1f 0e 81 1f 00 a8 68 0e 	brne       r14,0xa8000e68,4000b55a <_sem_take+0x66>

 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
4000b544:	c7 a5                   	st_s       r14,[r13,28]
4000b546:	10 f0                   	b_s        4000b564 <_sem_take+0x70>

	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
4000b548:	c1 40                   	mov_s      r0,r14
4000b54a:	66 0a ef ff             	bl.d       4000afac <_nano_timeout_insert_point_test>

4000b54e:	62 41                   	mov_s      r1,r19
4000b550:	a3 e8                   	brne_s     r0,0,4000b596 <_sem_take+0xa2>

 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
4000b552:	05 87                   	ld_s       r0,[r15,20]
4000b554:	09 0e 00 10             	breq       r14,r0,4000b55c <_sem_take+0x68>

4000b558:	c0 86                   	ld_s       r14,[r14,0]
	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
4000b55a:	f8 ee                   	brne_s     r14,0,4000b548 <_sem_take+0x54>

 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
4000b55c:	c3 40 00 a8 68 0e       	mov_s      r0,0xa8000e68
4000b562:	07 a5                   	st_s       r0,[r13,28]
	node->prev = list->tail;
4000b564:	05 87                   	ld_s       r0,[r15,20]
4000b566:	08 a5                   	st_s       r0,[r13,32]

	list->tail->next = node;
4000b568:	00 18 00 04             	st         r16,[r0]
	list->tail = node;
4000b56c:	14 1f 00 14             	st         r16,[r15,20]
}

/* put current fiber on specified wait queue */
static inline void _nano_wait_q_put(struct _nano_queue *wait_q)
{
	((struct tcs *)wait_q->tail)->link = _nanokernel.current;
4000b570:	02 87                   	ld_s       r0,[r15,8]
4000b572:	2e 41                   	ld_s       r1,[r17,4]
4000b574:	00 a1                   	st_s       r0,[r1,0]
	wait_q->tail = _nanokernel.current;
4000b576:	04 19 00 20             	st         r0,[r17,4]
		_nano_wait_q_put(&sem->wait_q);
		return _Swap(key);
4000b57a:	42 40                   	mov_s      r0,r18
	}

	irq_unlock(key);
	return 0;
}
4000b57c:	1a 09 2f fe             	bl.d       40007694 <__ld_r13_to_r19>

4000b580:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b584:	1c 14 1f 30             	ld         blink,[sp,28]
	}

	if (timeout_in_ticks != TICKS_NONE) {
		_NANO_TIMEOUT_ADD(&sem->wait_q, timeout_in_ticks);
		_nano_wait_q_put(&sem->wait_q);
		return _Swap(key);
4000b588:	55 03 60 00             	b.d        4000c0dc <_Swap>

4000b58c:	a8 c0                   	add_s      sp,sp,32
4000b58e:	2f 26 bf 04             	seti       r18
	}

	irq_unlock(key);
	return 0;
4000b592:	0c 70                   	mov_s      r0,0
4000b594:	0a f0                   	b_s        4000b5a8 <_sem_take+0xb4>

	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
4000b596:	01 86                   	ld_s       r0,[r14,4]
		node->next = insert_point;
4000b598:	c7 a5                   	st_s       r14,[r13,28]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
4000b59a:	08 a5                   	st_s       r0,[r13,32]
		node->next = insert_point;
		insert_point->prev->next = node;
4000b59c:	01 86                   	ld_s       r0,[r14,4]
4000b59e:	00 18 00 04             	st         r16,[r0]
		insert_point->prev = node;
4000b5a2:	04 1e 00 14             	st         r16,[r14,4]
4000b5a6:	e6 f1                   	b_s        4000b570 <_sem_take+0x7c>

}
4000b5a8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b5ac:	1c dc                   	mov_s      r12,28
4000b5ae:	19 01 0f fe             	b          400076c4 <__ld_r13_to_r19_ret>

4000b5b2:	e0 78                   	nop_s      

4000b5b4 <nano_sem_init>:
 * Although the existing implementation will support invocation from an ISR
 * context, for future flexibility, this API will be restricted from ISR
 * level invocation.
 */
void nano_sem_init(struct nano_sem *sem)
{
4000b5b4:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	sem->nsig = 0;
4000b5b8:	2c 70                   	mov_s      r1,0
 * Although the existing implementation will support invocation from an ISR
 * context, for future flexibility, this API will be restricted from ISR
 * level invocation.
 */
void nano_sem_init(struct nano_sem *sem)
{
4000b5ba:	9b 43                   	mov_s      fp,sp
	sem->nsig = 0;
4000b5bc:	22 a0                   	st_s       r1,[r0,8]
#endif

/* reset a wait queue, call during operation */
static inline void _nano_wait_q_reset(struct _nano_queue *wait_q)
{
	wait_q->head = (void *)0;
4000b5be:	20 a0                   	st_s       r1,[r0,0]
	wait_q->tail = (void *)&(wait_q->head);
4000b5c0:	01 a0                   	st_s       r0,[r0,4]
	_nano_wait_q_init(&sem->wait_q);
	SYS_TRACING_OBJ_INIT(nano_sem, sem);
	_TASK_PENDQ_INIT(&sem->task_q);
}
4000b5c2:	e0 7f                   	j_s.d      [blink]
4000b5c4:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b5c8 <nano_sem_give>:

	irq_unlock(imask);
}

void nano_sem_give(struct nano_sem *sem)
{
4000b5c8:	f1 c0                   	push_s     blink
4000b5ca:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000b5ce:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b5d2:	08 45                   	mov_s      r13,r0
		nano_isr_sem_give,
		nano_fiber_sem_give,
		nano_task_sem_give
	};

	func[sys_execution_context_type_get()](sem);
4000b5d4:	8e 0c ef ff             	bl.d       4000b260 <sys_execution_context_type_get>

4000b5d8:	9b 43                   	mov_s      fp,sp
4000b5da:	f0 26 01 70 00 40 a0 d9 	ld.as      r1,[0x4000d9a0,r0]
4000b5e2:	a1 40                   	mov_s      r0,r13
}
4000b5e4:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b5e8:	04 14 1f 30             	ld         blink,[sp,4]
4000b5ec:	00 c5                   	ld_s       r13,[sp,0]
		nano_isr_sem_give,
		nano_fiber_sem_give,
		nano_task_sem_give
	};

	func[sys_execution_context_type_get()](sem);
4000b5ee:	20 79                   	j_s.d      [r1]
4000b5f0:	a2 c0                   	add_s      sp,sp,8
4000b5f2:	e0 78                   	nop_s      

4000b5f4 <nano_sem_take>:
	irq_unlock(key);
	return 0;
}

int nano_sem_take(struct nano_sem *sem, int32_t timeout)
{
4000b5f4:	f1 c0                   	push_s     blink
4000b5f6:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000b5fa:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b5fe:	9b 43                   	mov_s      fp,sp
4000b600:	08 45                   	mov_s      r13,r0
		nano_isr_sem_take,
		nano_fiber_sem_take,
		nano_task_sem_take
	};

	return func[sys_execution_context_type_get()](sem, timeout);
4000b602:	fc 1b 40 b0             	st         r1,[fp,-4]
4000b606:	5e 0c ef ff             	bl.d       4000b260 <sys_execution_context_type_get>

4000b60a:	a1 c1                   	sub_s      sp,sp,4
4000b60c:	fc 13 01 b0             	ld         r1,[fp,-4]
4000b610:	f0 26 02 70 00 40 94 d9 	ld.as      r2,[0x4000d994,r0]
4000b618:	a1 40                   	mov_s      r0,r13
}
4000b61a:	7b 44                   	mov_s      sp,fp
4000b61c:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b620:	04 14 1f 30             	ld         blink,[sp,4]
4000b624:	00 c5                   	ld_s       r13,[sp,0]
		nano_isr_sem_take,
		nano_fiber_sem_take,
		nano_task_sem_take
	};

	return func[sys_execution_context_type_get()](sem, timeout);
4000b626:	20 7a                   	j_s.d      [r2]
4000b628:	a2 c0                   	add_s      sp,sp,8
4000b62a:	e0 78                   	nop_s      

4000b62c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
4000b62c:	f1 c0                   	push_s     blink
4000b62e:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000b632:	41 c6                   	st_s       r14,[sp,4]
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
4000b634:	f0 26 0d 70 00 40 ac d9 	ld.as      r13,[0x4000d9ac,r0]
4000b63c:	f0 26 0e 70 00 40 b0 d9 	ld.as      r14,[0x4000d9b0,r0]
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
4000b644:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b648:	9b 43                   	mov_s      fp,sp
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
4000b64a:	13 0d 85 13             	brhs.t     r13,r14,4000b65a <_sys_device_do_config_level+0x2e>

4000b64e:	00 85                   	ld_s       r0,[r13,0]
		struct device_config *device = info->config;

		device->init(info);
4000b650:	21 80                   	ld_s       r1,[r0,4]
4000b652:	a1 40                   	mov_s      r0,r13
4000b654:	60 79                   	jl_s.d     [r1]
4000b656:	0c e5                   	add_s      r13,r13,12
4000b658:	f9 f1                   	b_s        4000b64a <_sys_device_do_config_level+0x1e>

	}
}
4000b65a:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b65e:	08 dc                   	mov_s      r12,8
4000b660:	79 00 0f fe             	b          400076d8 <__ld_r13_to_r14_ret>


4000b664 <device_get_binding>:

struct device *device_get_binding(char *name)
{
4000b664:	f1 c0                   	push_s     blink
4000b666:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000b66a:	41 c6                   	st_s       r14,[sp,4]
4000b66c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b670:	9b 43                   	mov_s      fp,sp
4000b672:	08 46                   	mov_s      r14,r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
4000b674:	cb 45 00 a8 40 0d       	mov_s      r13,0xa8000d40
4000b67a:	1f 0d 80 1f 00 a8 a0 0d 	breq       r13,0xa8000da0,4000b696 <device_get_binding+0x32>

		if (info->driver_api && !strcmp(name, info->config->name)) {
4000b682:	01 85                   	ld_s       r0,[r13,4]
4000b684:	07 e8                   	breq_s     r0,0,4000b692 <device_get_binding+0x2e>

4000b686:	20 85                   	ld_s       r1,[r13,0]
4000b688:	c1 40                   	mov_s      r0,r14
4000b68a:	1e 0e af fa             	bl.d       40000ca4 <strcmp>

4000b68e:	20 81                   	ld_s       r1,[r1,0]
4000b690:	05 e8                   	breq_s     r0,0,4000b69a <device_get_binding+0x36>


struct device *device_get_binding(char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
4000b692:	0c e5                   	add_s      r13,r13,12
4000b694:	f3 f1                   	b_s        4000b67a <device_get_binding+0x16>

		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
4000b696:	0c 70                   	mov_s      r0,0
4000b698:	02 f0                   	b_s        4000b69c <device_get_binding+0x38>

4000b69a:	a1 40                   	mov_s      r0,r13
}
4000b69c:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b6a0:	08 dc                   	mov_s      r12,8
4000b6a2:	39 00 0f fe             	b          400076d8 <__ld_r13_to_r14_ret>

4000b6a6:	e0 78                   	nop_s      

4000b6a8 <nano_isr_timer_test>:
	}
	return 0;
}

void *nano_isr_timer_test(struct nano_timer *timer, int32_t timeout_in_ticks)
{
4000b6a8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b6ac:	9b 43                   	mov_s      fp,sp
4000b6ae:	00 41                   	mov_s      r1,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b6b0:	2f 27 bf 00             	clri       r2
				    void **user_data_ptr)
{
	struct _nano_timeout *t = &timer->timeout_data;

	/* check if the timer has expired */
	if (t->delta_ticks_from_prev == -1) {
4000b6b4:	04 80                   	ld_s       r0,[r0,16]
4000b6b6:	14 77                   	cmp_s      r0,-1
		*user_data_ptr = timer->user_data;
		timer->user_data = NULL;
	/* if the thread should not wait, return immediately */
	} else if (timeout_in_ticks == TICKS_NONE) {
		*user_data_ptr = NULL;
4000b6b8:	c0 78                   	sub_s.ne   r0,r0,r0
				    void **user_data_ptr)
{
	struct _nano_timeout *t = &timer->timeout_data;

	/* check if the timer has expired */
	if (t->delta_ticks_from_prev == -1) {
4000b6ba:	05 f4                   	bne_s      4000b6c2 <nano_isr_timer_test+0x1a>

		*user_data_ptr = timer->user_data;
4000b6bc:	06 81                   	ld_s       r0,[r1,24]
		timer->user_data = NULL;
4000b6be:	6c 70                   	mov_s      r3,0
4000b6c0:	66 a1                   	st_s       r3,[r1,24]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b6c2:	2f 26 bf 00             	seti       r2
		/* since ISR can not wait, return NULL */
		user_data = NULL;
	}
	irq_unlock(key);
	return user_data;
}
4000b6c6:	e0 7f                   	j_s.d      [blink]
4000b6c8:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b6cc <nano_fiber_timer_test>:

void *nano_fiber_timer_test(struct nano_timer *timer, int32_t timeout_in_ticks)
{
4000b6cc:	f1 c0                   	push_s     blink
4000b6ce:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000b6d2:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b6d6:	9b 43                   	mov_s      fp,sp
4000b6d8:	08 45                   	mov_s      r13,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b6da:	2f 27 3f 00             	clri       
				    void **user_data_ptr)
{
	struct _nano_timeout *t = &timer->timeout_data;

	/* check if the timer has expired */
	if (t->delta_ticks_from_prev == -1) {
4000b6de:	44 85                   	ld_s       r2,[r13,16]
4000b6e0:	23 0a 80 0f ff ff ff ff 	breq       r2,-1,4000b702 <nano_fiber_timer_test+0x36>

		*user_data_ptr = timer->user_data;
		timer->user_data = NULL;
	/* if the thread should not wait, return immediately */
	} else if (timeout_in_ticks == TICKS_NONE) {
4000b6e8:	2b 79                   	tst_s      r1,r1
		*user_data_ptr = NULL;
4000b6ea:	ca 21 21 00             	mov.z      r1,0
	/* check if the timer has expired */
	if (t->delta_ticks_from_prev == -1) {
		*user_data_ptr = timer->user_data;
		timer->user_data = NULL;
	/* if the thread should not wait, return immediately */
	} else if (timeout_in_ticks == TICKS_NONE) {
4000b6ee:	0e f2                   	beq_s      4000b708 <nano_fiber_timer_test+0x3c>

	int key = irq_lock();
	struct _nano_timeout *t = &timer->timeout_data;
	void *user_data;

	if (_nano_timer_expire_wait(timer, timeout_in_ticks, &user_data)) {
		t->tcs = _nanokernel.current;
4000b6f0:	c3 41 00 a8 58 0e       	mov_s      r1,0xa8000e58
4000b6f6:	22 81                   	ld_s       r1,[r1,8]
		_Swap(key);
4000b6f8:	e6 09 60 00             	bl.d       4000c0dc <_Swap>

4000b6fc:	22 a5                   	st_s       r1,[r13,8]
4000b6fe:	2f 27 3f 00             	clri       
		key = irq_lock();
		user_data = timer->user_data;
4000b702:	26 85                   	ld_s       r1,[r13,24]
		timer->user_data = NULL;
4000b704:	4c 70                   	mov_s      r2,0
4000b706:	46 a5                   	st_s       r2,[r13,24]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b708:	2f 26 3f 00             	seti       
	}
	irq_unlock(key);
	return user_data;
}
4000b70c:	20 40                   	mov_s      r0,r1
4000b70e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b712:	04 14 1f 30             	ld         blink,[sp,4]
4000b716:	00 c5                   	ld_s       r13,[sp,0]
4000b718:	e0 7f                   	j_s.d      [blink]
4000b71a:	a2 c0                   	add_s      sp,sp,8

4000b71c <nano_timer_init>:
#include <nano_private.h>
#include <misc/debug/object_tracing_common.h>
#include <wait_q.h>

void nano_timer_init(struct nano_timer *timer, void *data)
{
4000b71c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = -1;
4000b720:	4c 77                   	mov_s      r2,-1
4000b722:	9b 43                   	mov_s      fp,sp
4000b724:	44 a0                   	st_s       r2,[r0,16]
	_nano_timeout_init(&timer->timeout_data, NULL);

	/* nano_timer_test() returns NULL on timer that was not started */
	timer->user_data = NULL;

	timer->user_data_backup = data;
4000b726:	27 a0                   	st_s       r1,[r0,28]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
4000b728:	4c 70                   	mov_s      r2,0
4000b72a:	43 a0                   	st_s       r2,[r0,12]

	/*
	 * Must be initialized here, so the _nano_timeout_handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->tcs = NULL;
4000b72c:	42 a0                   	st_s       r2,[r0,8]

	/*
	 * Set callback function
	 */
	t->func = func;
4000b72e:	45 a0                   	st_s       r2,[r0,20]
{
	/* initialize timeout_data */
	_nano_timeout_init(&timer->timeout_data, NULL);

	/* nano_timer_test() returns NULL on timer that was not started */
	timer->user_data = NULL;
4000b730:	46 a0                   	st_s       r2,[r0,24]

	timer->user_data_backup = data;

	SYS_TRACING_OBJ_INIT(nano_timer, timer);
}
4000b732:	e0 7f                   	j_s.d      [blink]
4000b734:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b738 <_timer_start>:
 * @param ticks The number of system ticks before expiration
 *
 * @return N/A
 */
void _timer_start(struct nano_timer *timer, int ticks)
{
4000b738:	f1 c0                   	push_s     blink
4000b73a:	36 0f ef fd             	bl.d       4000766c <__st_r13_to_r17>

4000b73e:	a5 c1                   	sub_s      sp,sp,20
4000b740:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b744:	9b 43                   	mov_s      fp,sp
4000b746:	08 45                   	mov_s      r13,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b748:	2f 27 3f 04             	clri       r16

	/*
	 * Once timer is started nano_timer_test() returns
	 * the pointer to user data
	 */
	timer->user_data = timer->user_data_backup;
4000b74c:	07 80                   	ld_s       r0,[r0,28]
				     int32_t timeout)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	t->tcs = tcs;
	t->delta_ticks_from_prev = timeout;
4000b74e:	24 a5                   	st_s       r1,[r13,16]
4000b750:	06 a5                   	st_s       r0,[r13,24]
				     struct _nano_queue *wait_q,
				     int32_t timeout)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	t->tcs = tcs;
4000b752:	0c 70                   	mov_s      r0,0
4000b754:	02 a5                   	st_s       r0,[r13,8]
	t->delta_ticks_from_prev = timeout;
	t->wait_q = wait_q;
4000b756:	03 a5                   	st_s       r0,[r13,12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b758:	c3 40 00 a8 58 0e       	mov_s      r0,0xa8000e58
4000b75e:	c4 80                   	ld_s       r14,[r0,16]
	sys_dlist_insert_at(timeout_q, (void *)t,
						_nano_timeout_insert_point_test,
						&t->delta_ticks_from_prev);
4000b760:	40 25 11 14             	add        r17,r13,16
4000b764:	08 47                   	mov_s      r15,r0
 */

static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
	int (*cond)(sys_dnode_t *, void *), void *data)
{
	if (sys_dlist_is_empty(list)) {
4000b766:	2b 0e 81 1f 00 a8 68 0e 	brne       r14,0xa8000e68,4000b78e <_timer_start+0x56>

 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
	node->prev = list->tail;
4000b76e:	25 80                   	ld_s       r1,[r0,20]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
4000b770:	c0 a5                   	st_s       r14,[r13,0]
	node->prev = list->tail;
4000b772:	21 a5                   	st_s       r1,[r13,4]

	list->tail->next = node;
4000b774:	25 80                   	ld_s       r1,[r0,20]
4000b776:	a0 a1                   	st_s       r13,[r1,0]
	list->tail = node;
4000b778:	a5 a0                   	st_s       r13,[r0,20]
4000b77a:	13 f0                   	b_s        4000b79e <_timer_start+0x66>

	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
4000b77c:	c1 40                   	mov_s      r0,r14
4000b77e:	7a 08 ef ff             	bl.d       4000aff4 <_nano_timeout_insert_point_test>

4000b782:	22 41                   	mov_s      r1,r17
4000b784:	87 e8                   	brne_s     r0,0,4000b792 <_timer_start+0x5a>

 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
4000b786:	05 87                   	ld_s       r0,[r15,20]
4000b788:	25 0e 00 10             	breq       r14,r0,4000b7ac <_timer_start+0x74>

4000b78c:	c0 86                   	ld_s       r14,[r14,0]
	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
4000b78e:	f8 ee                   	brne_s     r14,0,4000b77c <_timer_start+0x44>

4000b790:	0e f0                   	b_s        4000b7ac <_timer_start+0x74>

	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
4000b792:	01 86                   	ld_s       r0,[r14,4]
		node->next = insert_point;
4000b794:	c0 a5                   	st_s       r14,[r13,0]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
4000b796:	01 a5                   	st_s       r0,[r13,4]
		node->next = insert_point;
		insert_point->prev->next = node;
4000b798:	01 86                   	ld_s       r0,[r14,4]
4000b79a:	a0 a0                   	st_s       r13,[r0,0]
		insert_point->prev = node;
4000b79c:	a1 a6                   	st_s       r13,[r14,4]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b79e:	2f 26 3f 04             	seti       r16
	_nano_timer_timeout_add(&timer->timeout_data,
				NULL, ticks);
	irq_unlock(key);
}
4000b7a2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b7a6:	14 dc                   	mov_s      r12,20
4000b7a8:	25 07 cf fd             	b          400076cc <__ld_r13_to_r17_ret>

 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
4000b7ac:	c3 40 00 a8 68 0e       	mov_s      r0,0xa8000e68
4000b7b2:	00 a5                   	st_s       r0,[r13,0]
	node->prev = list->tail;
4000b7b4:	05 87                   	ld_s       r0,[r15,20]
4000b7b6:	01 a5                   	st_s       r0,[r13,4]

	list->tail->next = node;
4000b7b8:	05 87                   	ld_s       r0,[r15,20]
4000b7ba:	a0 a0                   	st_s       r13,[r0,0]
	list->tail = node;
4000b7bc:	a5 a7                   	st_s       r13,[r15,20]
4000b7be:	f1 f1                   	b_s        4000b79e <_timer_start+0x66>


4000b7c0 <nano_timer_test>:
	irq_unlock(key);
	return user_data;
}

void *nano_timer_test(struct nano_timer *timer, int32_t timeout_in_ticks)
{
4000b7c0:	f1 c0                   	push_s     blink
4000b7c2:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000b7c6:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b7ca:	9b 43                   	mov_s      fp,sp
4000b7cc:	08 45                   	mov_s      r13,r0
		nano_isr_timer_test,
		nano_fiber_timer_test,
		nano_task_timer_test,
	};

	return func[sys_execution_context_type_get()](timer, timeout_in_ticks);
4000b7ce:	fc 1b 40 b0             	st         r1,[fp,-4]
4000b7d2:	92 0a ef ff             	bl.d       4000b260 <sys_execution_context_type_get>

4000b7d6:	a1 c1                   	sub_s      sp,sp,4
4000b7d8:	fc 13 01 b0             	ld         r1,[fp,-4]
4000b7dc:	f0 26 02 70 00 40 c4 d9 	ld.as      r2,[0x4000d9c4,r0]
4000b7e4:	a1 40                   	mov_s      r0,r13
}
4000b7e6:	7b 44                   	mov_s      sp,fp
4000b7e8:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b7ec:	04 14 1f 30             	ld         blink,[sp,4]
4000b7f0:	00 c5                   	ld_s       r13,[sp,0]
		nano_isr_timer_test,
		nano_fiber_timer_test,
		nano_task_timer_test,
	};

	return func[sys_execution_context_type_get()](timer, timeout_in_ticks);
4000b7f2:	20 7a                   	j_s.d      [r2]
4000b7f4:	a2 c0                   	add_s      sp,sp,8
4000b7f6:	e0 78                   	nop_s      

4000b7f8 <nano_timer_ticks_remain>:
}

int32_t nano_timer_ticks_remain(struct nano_timer *timer)
{
4000b7f8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b7fc:	9b 43                   	mov_s      fp,sp
4000b7fe:	00 42                   	mov_s      r2,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b800:	2f 27 3f 03             	clri       r12
	int32_t remaining_ticks;
	struct _nano_timeout *t = &timer->timeout_data;
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;
	struct _nano_timeout *iterator;

	if (t->delta_ticks_from_prev == -1) {
4000b804:	04 80                   	ld_s       r0,[r0,16]
4000b806:	3b 08 80 0f ff ff ff ff 	breq       r0,-1,4000b83e <nano_timer_ticks_remain+0x46>

 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
4000b80e:	c3 43 00 a8 58 0e       	mov_s      r3,0xa8000e58
4000b814:	24 83                   	ld_s       r1,[r3,16]
 * @return a pointer to the head element from a node, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
4000b816:	0c 70                   	mov_s      r0,0
4000b818:	d3 71 00 a8 68 0e       	cmp_s      r1,0xa8000e68
int32_t nano_timer_ticks_remain(struct nano_timer *timer)
{
	int key = irq_lock();
	int32_t remaining_ticks;
	struct _nano_timeout *t = &timer->timeout_data;
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;
4000b81e:	14 13 04 00             	ld         r4,[r3,20]
4000b822:	ca 20 42 00             	mov.nz     r0,r1
4000b826:	00 41                   	mov_s      r1,r0
		 * and accumulate all the delta_ticks_from_prev values up to
		 * the timer.
		 */
		iterator =
			(struct _nano_timeout *)sys_dlist_peek_head(timeout_q);
		remaining_ticks = iterator->delta_ticks_from_prev;
4000b828:	04 80                   	ld_s       r0,[r0,16]
		while (iterator != t) {
4000b82a:	19 09 80 00             	breq       r1,r2,4000b840 <nano_timer_ticks_remain+0x48>

 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
4000b82e:	0b 09 00 01             	breq       r1,r4,4000b836 <nano_timer_ticks_remain+0x3e>

4000b832:	20 81                   	ld_s       r1,[r1,0]
4000b834:	02 f0                   	b_s        4000b838 <nano_timer_ticks_remain+0x40>

4000b836:	2c 70                   	mov_s      r1,0
			iterator = (struct _nano_timeout *)sys_dlist_peek_next(
				timeout_q, &iterator->node);
			remaining_ticks += iterator->delta_ticks_from_prev;
4000b838:	64 81                   	ld_s       r3,[r1,16]
4000b83a:	78 60                   	add_s      r0,r0,r3
4000b83c:	f7 f1                   	b_s        4000b82a <nano_timer_ticks_remain+0x32>

	struct _nano_timeout *t = &timer->timeout_data;
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;
	struct _nano_timeout *iterator;

	if (t->delta_ticks_from_prev == -1) {
		remaining_ticks = 0;
4000b83e:	0c 70                   	mov_s      r0,0
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b840:	2f 26 3f 03             	seti       r12
		}
	}

	irq_unlock(key);
	return remaining_ticks;
}
4000b844:	e0 7f                   	j_s.d      [blink]
4000b846:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b84a:	e0 78                   	nop_s      

4000b84c <nano_task_timer_test>:
#else
#define NANO_TASK_TIMER_PEND(timer, key)  IDLE_TASK_TIMER_PEND(timer, key)
#endif

void *nano_task_timer_test(struct nano_timer *timer, int32_t timeout_in_ticks)
{
4000b84c:	f1 c0                   	push_s     blink
4000b84e:	2a 0e ef fd             	bl.d       40007674 <__st_r13_to_r15>

4000b852:	a3 c1                   	sub_s      sp,sp,12
4000b854:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b858:	9b 43                   	mov_s      fp,sp
4000b85a:	08 45                   	mov_s      r13,r0

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000b85c:	2f 27 bf 03             	clri       r14
				    void **user_data_ptr)
{
	struct _nano_timeout *t = &timer->timeout_data;

	/* check if the timer has expired */
	if (t->delta_ticks_from_prev == -1) {
4000b860:	04 80                   	ld_s       r0,[r0,16]
4000b862:	35 08 80 0f ff ff ff ff 	breq       r0,-1,4000b894 <nano_task_timer_test+0x48>

		*user_data_ptr = timer->user_data;
		timer->user_data = NULL;
	/* if the thread should not wait, return immediately */
	} else if (timeout_in_ticks == TICKS_NONE) {
4000b86a:	2b 79                   	tst_s      r1,r1
	void *user_data;

	if (_nano_timer_expire_wait(timer, timeout_in_ticks, &user_data)) {
		/* task goes to busy waiting loop */
		while (t->delta_ticks_from_prev != -1) {
			NANO_TASK_TIMER_PEND(timer, key);
4000b86c:	ca 27 82 1f 00 a8 58 0e 	mov.nz     r15,0xa8000e58
	/* check if the timer has expired */
	if (t->delta_ticks_from_prev == -1) {
		*user_data_ptr = timer->user_data;
		timer->user_data = NULL;
	/* if the thread should not wait, return immediately */
	} else if (timeout_in_ticks == TICKS_NONE) {
4000b874:	1a f2                   	beq_s      4000b8a8 <nano_task_timer_test+0x5c>

	struct _nano_timeout *t = &timer->timeout_data;
	void *user_data;

	if (_nano_timer_expire_wait(timer, timeout_in_ticks, &user_data)) {
		/* task goes to busy waiting loop */
		while (t->delta_ticks_from_prev != -1) {
4000b876:	04 85                   	ld_s       r0,[r13,16]
4000b878:	1d 08 80 0f ff ff ff ff 	breq       r0,-1,4000b894 <nano_task_timer_test+0x48>

			NANO_TASK_TIMER_PEND(timer, key);
4000b880:	7a 0f ef ff             	bl.d       4000b7f8 <nano_timer_ticks_remain>

4000b884:	a1 40                   	mov_s      r0,r13
4000b886:	06 a7                   	st_s       r0,[r15,24]
4000b888:	02 0b 20 00             	bl.d       4000bb88 <nano_cpu_atomic_idle>

4000b88c:	c1 40                   	mov_s      r0,r14
4000b88e:	2f 27 bf 03             	clri       r14
4000b892:	f3 f1                   	b_s        4000b876 <nano_task_timer_test+0x2a>

		}
		user_data = timer->user_data;
4000b894:	06 85                   	ld_s       r0,[r13,24]
		timer->user_data = NULL;
4000b896:	2c 70                   	mov_s      r1,0
4000b898:	26 a5                   	st_s       r1,[r13,24]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000b89a:	2f 26 bf 03             	seti       r14
	}
	irq_unlock(key);
	return user_data;
}
4000b89e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b8a2:	0c dc                   	mov_s      r12,12
4000b8a4:	31 06 cf fd             	b          400076d4 <__ld_r13_to_r15_ret>

	if (t->delta_ticks_from_prev == -1) {
		*user_data_ptr = timer->user_data;
		timer->user_data = NULL;
	/* if the thread should not wait, return immediately */
	} else if (timeout_in_ticks == TICKS_NONE) {
		*user_data_ptr = NULL;
4000b8a8:	0c 70                   	mov_s      r0,0
4000b8aa:	f9 f1                   	b_s        4000b89a <nano_task_timer_test+0x4e>


4000b8ac <_nop_char_out>:
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
4000b8ac:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
4000b8b0:	0c 70                   	mov_s      r0,0
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
4000b8b2:	9b 43                   	mov_s      fp,sp
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
4000b8b4:	e0 7f                   	j_s.d      [blink]
4000b8b6:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b8ba:	e0 78                   	nop_s      

4000b8bc <_printk_dec_ulong>:
 * @param num Number to output
 *
 * @return N/A
 */
static void _printk_dec_ulong(const unsigned long num)
{
4000b8bc:	f1 c0                   	push_s     blink
4000b8be:	b2 0d ef fd             	bl.d       4000766c <__st_r13_to_r17>

4000b8c2:	a5 c1                   	sub_s      sp,sp,20
4000b8c4:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b8c8:	9b 43                   	mov_s      fp,sp
4000b8ca:	08 45                   	mov_s      r13,r0
	unsigned long pos = 999999999;
	unsigned long remainder = num;
4000b8cc:	09 df                   	mov_s      r15,9
	int found_largest_digit = 0;
4000b8ce:	0e 70                   	mov_s      r16,0
 *
 * @return N/A
 */
static void _printk_dec_ulong(const unsigned long num)
{
	unsigned long pos = 999999999;
4000b8d0:	cb 46 9a 3b ff c9       	mov_s      r14,0x3b9ac9ff
	unsigned long remainder = num;
	int found_largest_digit = 0;

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
4000b8d6:	15 0e 64 13             	brlo.d     r14,r13,4000b8e8 <_printk_dec_ulong+0x2c>

4000b8da:	40 26 51 10             	add        r17,r14,1
4000b8de:	0b 20 00 a4             	tst        r16,r16
4000b8e2:	ca 20 21 20             	mov.z      r16,0
4000b8e6:	0d f2                   	beq_s      4000b8fe <_printk_dec_ulong+0x42>

			found_largest_digit = 1;
			_char_out((int)((remainder / (pos + 1)) + 48));
4000b8e8:	22 41                   	mov_s      r1,r17
4000b8ea:	9e 0c ef fd             	bl.d       40007584 <__udivsi3>

4000b8ee:	a1 40                   	mov_s      r0,r13
4000b8f0:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000b8f8:	30 e0                   	add_s      r0,r0,48
4000b8fa:	60 79                   	jl_s.d     [r1]
4000b8fc:	0e 71                   	mov_s      r16,1
		}
		remainder %= (pos + 1);
4000b8fe:	a1 40                   	mov_s      r0,r13
4000b900:	a6 0c ef fd             	bl.d       400075a4 <__umodsi3>

4000b904:	22 41                   	mov_s      r1,r17
		pos /= 10;
4000b906:	0a d9                   	mov_s      r1,10
	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
			_char_out((int)((remainder / (pos + 1)) + 48));
		}
		remainder %= (pos + 1);
4000b908:	08 45                   	mov_s      r13,r0
		pos /= 10;
4000b90a:	7e 0c ef fd             	bl.d       40007584 <__udivsi3>

4000b90e:	c1 40                   	mov_s      r0,r14
{
	unsigned long pos = 999999999;
	unsigned long remainder = num;
	int found_largest_digit = 0;

	while (pos >= 9) {
4000b910:	80 27 ff 9f             	add.f      r15,r15,-1
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
			_char_out((int)((remainder / (pos + 1)) + 48));
		}
		remainder %= (pos + 1);
		pos /= 10;
4000b914:	08 46                   	mov_s      r14,r0
{
	unsigned long pos = 999999999;
	unsigned long remainder = num;
	int found_largest_digit = 0;

	while (pos >= 9) {
4000b916:	e1 f5                   	bne_s      4000b8d6 <_printk_dec_ulong+0x1a>

			_char_out((int)((remainder / (pos + 1)) + 48));
		}
		remainder %= (pos + 1);
		pos /= 10;
	}
	_char_out((int)(remainder + 48));
4000b918:	68 4d                   	add_s      r0,r13,48
4000b91a:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
}
4000b922:	7e 0d ef fd             	bl.d       4000769c <__ld_r13_to_r17>

4000b926:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000b92a:	14 14 1f 30             	ld         blink,[sp,20]
			_char_out((int)((remainder / (pos + 1)) + 48));
		}
		remainder %= (pos + 1);
		pos /= 10;
	}
	_char_out((int)(remainder + 48));
4000b92e:	20 79                   	j_s.d      [r1]
4000b930:	a6 c0                   	add_s      sp,sp,24
4000b932:	e0 78                   	nop_s      

4000b934 <__printk_hook_install>:
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
4000b934:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b938:	9b 43                   	mov_s      fp,sp
	_char_out = fn;
4000b93a:	00 1e 00 70 00 a8 20 0d 	st         r0,[0xa8000d20]
}
4000b942:	e0 7f                   	j_s.d      [blink]
4000b944:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000b948 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
4000b948:	a7 c1                   	sub_s      sp,sp,28
4000b94a:	f1 c0                   	push_s     blink
4000b94c:	22 0d ef fd             	bl.d       4000766c <__st_r13_to_r17>

4000b950:	a5 c1                   	sub_s      sp,sp,20
4000b952:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000b956:	9b 43                   	mov_s      fp,sp
4000b958:	1c 1b 40 30             	st         r1,[fp,28]
4000b95c:	20 1b 80 30             	st         r2,[fp,32]
4000b960:	24 1b c0 30             	st         r3,[fp,36]
4000b964:	28 1b 00 31             	st         r4,[fp,40]
4000b968:	2c 1b 40 31             	st         r5,[fp,44]
4000b96c:	30 1b 80 31             	st         r6,[fp,48]
4000b970:	34 1b c0 31             	st         r7,[fp,52]
	va_list ap;

	va_start(ap, fmt);
4000b974:	40 23 0d 37             	add        r13,fp,28
4000b978:	42 20 4f 00             	sub        r15,r0,1
 *
 * @return N/A
 */
static inline void _vprintk(const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
4000b97c:	cd 70                   	mov_s      r14,0
{
	int size = sizeof(num) * 2;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
		nibble += nibble > 9 ? 87 : 48;
4000b97e:	8a 20 c1 25             	mov        r16,87
{
	int might_format = 0; /* 1 if encountered a '%' */

	/* fmt has already been adjusted if needed */

	while (*fmt) {
4000b982:	01 17 80 12             	ldb.a      r0,[r15,1]
4000b986:	14 70                   	cmp_s      r0,0
4000b988:	12 01 01 00             	bz         4000ba9a <printk+0x152>

		if (!might_format) {
4000b98c:	8b ee                   	brne_s     r14,0,4000b9a2 <printk+0x5a>

			if (*fmt != '%') {
4000b98e:	a5 e0                   	cmp_s      r0,37
				_char_out((int)*fmt);
			} else {
				might_format = 1;
4000b990:	ca 26 61 10             	mov.z      r14,1

	/* fmt has already been adjusted if needed */

	while (*fmt) {
		if (!might_format) {
			if (*fmt != '%') {
4000b994:	f7 f3                   	beq_s      4000b982 <printk+0x3a>

				_char_out((int)*fmt);
4000b996:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000b99e:	40 79                   	jl_s       [r1]
4000b9a0:	f1 f1                   	b_s        4000b982 <printk+0x3a>

			} else {
				might_format = 1;
			}
		} else {
			switch (*fmt) {
4000b9a2:	61 08 80 0f 00 00 69 00 	breq       r0,105,4000ba00 <printk+0xb8>

4000b9aa:	37 0e 04 70 00 00 69 00 	brlo       105,r0,4000b9de <printk+0x96>

4000b9b2:	77 08 80 0f 00 00 58 00 	breq       r0,88,4000ba26 <printk+0xde>

4000b9ba:	15 0e 04 70 00 00 58 00 	brlo       88,r0,4000b9cc <printk+0x84>

4000b9c2:	a5 e0                   	cmp_s      r0,37

				_char_out(c);
				break;
			}
			case '%': {
				_char_out((int)'%');
4000b9c4:	ca 20 61 09             	mov.z      r0,37
				_char_out((int)*fmt);
			} else {
				might_format = 1;
			}
		} else {
			switch (*fmt) {
4000b9c8:	5f f2                   	beq_s      4000ba86 <printk+0x13e>

4000b9ca:	58 f0                   	b_s        4000ba78 <printk+0x130>

4000b9cc:	9d 08 80 0f 00 00 63 00 	breq       r0,99,4000ba68 <printk+0x120>

4000b9d4:	2d 08 80 0f 00 00 64 00 	breq       r0,100,4000ba00 <printk+0xb8>

4000b9dc:	4e f0                   	b_s        4000ba78 <printk+0x130>

4000b9de:	75 08 80 0f 00 00 73 00 	breq       r0,115,4000ba50 <printk+0x108>

4000b9e6:	0f 0e 04 70 00 00 73 00 	brlo       115,r0,4000b9f2 <printk+0xaa>

4000b9ee:	f0 e0                   	cmp_s      r0,112
4000b9f0:	06 f0                   	b_s        4000b9fc <printk+0xb4>

4000b9f2:	2b 08 80 0f 00 00 75 00 	breq       r0,117,4000ba1a <printk+0xd2>

4000b9fa:	f8 e0                   	cmp_s      r0,120
4000b9fc:	15 f2                   	beq_s      4000ba26 <printk+0xde>

4000b9fe:	3e f0                   	b_s        4000ba78 <printk+0x130>

			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
4000ba00:	c4 6d                   	add_s      r14,r13,4
4000ba02:	a0 85                   	ld_s       r13,[r13,0]

				if (d < 0) {
4000ba04:	13 0d 1b 10             	brge.t     r13,0,4000ba16 <printk+0xce>

4000ba08:	2d d8                   	mov_s      r0,45
					_char_out((int)'-');
4000ba0a:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000ba12:	60 79                   	jl_s.d     [r1]
4000ba14:	b3 7d                   	neg_s      r13,r13
					d = -d;
				}
				_printk_dec_ulong(d);
4000ba16:	a1 40                   	mov_s      r0,r13
4000ba18:	03 f0                   	b_s        4000ba1e <printk+0xd6>

				break;
			}
			case 'u': {
				unsigned long u = va_arg(
					ap, unsigned long);
				_printk_dec_ulong(u);
4000ba1a:	00 85                   	ld_s       r0,[r13,0]
				}
				_printk_dec_ulong(d);
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
4000ba1c:	c4 6d                   	add_s      r14,r13,4
					ap, unsigned long);
				_printk_dec_ulong(u);
4000ba1e:	a2 0e ef ff             	bl.d       4000b8bc <_printk_dec_ulong>

4000ba22:	c9 45                   	mov_s      r13,r14
4000ba24:	39 f0                   	b_s        4000ba96 <printk+0x14e>

				break;
			}
			case 'x':
			case 'X':
			case 'p': {
				unsigned long x = va_arg(
4000ba26:	c4 6d                   	add_s      r14,r13,4
4000ba28:	00 15 11 10             	ld         r17,[r13,0]
 *
 * @return N/A
 */
static void _printk_hex_ulong(const unsigned long num)
{
	int size = sizeof(num) * 2;
4000ba2c:	08 dd                   	mov_s      r13,8

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
4000ba2e:	a9 6d                   	sub_s      r13,r13,1
		nibble += nibble > 9 ? 87 : 48;
4000ba30:	02 41                   	mov_s      r1,r16
static void _printk_hex_ulong(const unsigned long num)
{
	int size = sizeof(num) * 2;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
4000ba32:	12 6d                   	asl_s      r0,r13,2
4000ba34:	01 29 00 20             	lsr        r0,r17,r0
4000ba38:	c3 b8                   	bmsk_s     r0,r0,3
		nibble += nibble > 9 ? 87 : 48;
4000ba3a:	8a e0                   	cmp_s      r0,10
4000ba3c:	ca 21 25 0c             	mov.c      r1,48
		_char_out((int)nibble);
4000ba40:	38 60                   	add_s      r0,r0,r1
4000ba42:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000ba4a:	40 79                   	jl_s       [r1]
 */
static void _printk_hex_ulong(const unsigned long num)
{
	int size = sizeof(num) * 2;

	for (; size; size--) {
4000ba4c:	f1 ed                   	brne_s     r13,0,4000ba2e <printk+0xe6>

4000ba4e:	24 f0                   	b_s        4000ba94 <printk+0x14c>

					ap, unsigned long);
				_printk_hex_ulong(x);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
4000ba50:	c4 6d                   	add_s      r14,r13,4
4000ba52:	a0 85                   	ld_s       r13,[r13,0]
4000ba54:	a9 6d                   	sub_s      r13,r13,1

				while (*s)
4000ba56:	01 15 80 12             	ldb.a      r0,[r13,1]
4000ba5a:	1e e8                   	breq_s     r0,0,4000ba94 <printk+0x14c>

					_char_out((int)(*s++));
4000ba5c:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000ba64:	40 79                   	jl_s       [r1]
4000ba66:	f9 f1                   	b_s        4000ba56 <printk+0x10e>

				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				_char_out(c);
4000ba68:	00 85                   	ld_s       r0,[r13,0]
4000ba6a:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000ba72:	60 79                   	jl_s.d     [r1]
4000ba74:	c4 6d                   	add_s      r14,r13,4
4000ba76:	10 f0                   	b_s        4000ba94 <printk+0x14c>

			case '%': {
				_char_out((int)'%');
				break;
			}
			default:
				_char_out((int)'%');
4000ba78:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000ba80:	60 79                   	jl_s.d     [r1]
4000ba82:	25 d8                   	mov_s      r0,37
				_char_out((int)*fmt);
4000ba84:	00 8f                   	ldb_s      r0,[r15,0]
4000ba86:	00 16 01 70 00 a8 20 0d 	ld         r1,[0xa8000d20]
4000ba8e:	60 79                   	jl_s.d     [r1]
4000ba90:	cd 70                   	mov_s      r14,0
4000ba92:	79 f1                   	b_s        4000b982 <printk+0x3a>

				break;
			}
			case 'x':
			case 'X':
			case 'p': {
				unsigned long x = va_arg(
4000ba94:	c9 45                   	mov_s      r13,r14
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
4000ba96:	cd 70                   	mov_s      r14,0
4000ba98:	75 f1                   	b_s        4000b982 <printk+0x3a>

	va_list ap;

	va_start(ap, fmt);
	_vprintk(fmt, ap);
	va_end(ap);
}
4000ba9a:	06 0c ef fd             	bl.d       4000769c <__ld_r13_to_r17>

4000ba9e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000baa2:	14 14 1f 30             	ld         blink,[sp,20]
4000baa6:	e0 7f                   	j_s.d      [blink]
4000baa8:	ad c0                   	add_s      sp,sp,52
4000baaa:	e0 78                   	nop_s      

4000baac <_ConfigAbsSyms>:
/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
4000baac:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000bab0:	9b 43                   	mov_s      fp,sp
GEN_ABSOLUTE_SYM(CONFIG_CROSS_COMPILE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC, 1);
GEN_ABSOLUTE_SYM(CONFIG_GPIO_QMSI_SS_1, 1);
GEN_ABSOLUTE_SYM(CONFIG_DCCM_SIZE, 8);

GEN_ABS_SYM_END
4000bab2:	e0 7f                   	j_s.d      [blink]
4000bab4:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000bab8 <quark_se_arc_init>:
 * - interrupt unit
 *
 * RETURNS: N/A
 */
static int quark_se_arc_init(struct device *arg)
{
4000bab8:	f1 c0                   	push_s     blink
4000baba:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(arg);

	_arc_v2_irq_unit_init();
4000babe:	2e 09 6f ff             	bl.d       4000a3e8 <_arc_v2_irq_unit_init>

4000bac2:	9b 43                   	mov_s      fp,sp
	shared_data->flags |= ARC_READY;
4000bac4:	c3 40 00 a8 00 00       	mov_s      r0,0xa8000000
4000baca:	21 80                   	ld_s       r1,[r0,4]
4000bacc:	80 b9                   	bset_s     r1,r1,0
4000bace:	21 a0                   	st_s       r1,[r0,4]
	return 0;
}
4000bad0:	0c 70                   	mov_s      r0,0
4000bad2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000bad6:	d1 c0                   	pop_s      blink
4000bad8:	e0 7e                   	j_s        [blink]
4000bada:	e0 78                   	nop_s      

4000badc <arc_quark_se_ipm_init>:
#if CONFIG_IPM_QUARK_SE
#include <ipm.h>
#include <ipm/ipm_quark_se.h>

static int arc_quark_se_ipm_init(void)
{
4000badc:	f1 c0                   	push_s     blink
4000bade:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000bae2:	9b 43                   	mov_s      fp,sp
	IRQ_CONNECT(QUARK_SE_IPM_INTERRUPT, QUARK_SE_IPM_INTERRUPT_PRI,
4000bae4:	2c 72                   	mov_s      r1,2
4000bae6:	6a 0c 20 00             	bl.d       4000bf4c <_irq_priority_set>

4000baea:	39 d8                   	mov_s      r0,57
		    quark_se_ipm_isr, NULL, 0);
	irq_enable(QUARK_SE_IPM_INTERRUPT);
4000baec:	42 0c 20 00             	bl.d       4000bf2c <_arch_irq_enable>

4000baf0:	39 d8                   	mov_s      r0,57
	return 0;
}
4000baf2:	0c 70                   	mov_s      r0,0
4000baf4:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000baf8:	d1 c0                   	pop_s      blink
4000bafa:	e0 7e                   	j_s        [blink]

4000bafc <_new_thread>:
 */
void _new_thread(char *pStackMem, unsigned stackSize,
		 void *uk_task_ptr, _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
4000bafc:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	char *stackEnd = pStackMem + stackSize;
4000bb00:	19 61                   	add_s      r1,r1,r0
	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct init_stack_frame *)(STACK_ROUND_DOWN(stackEnd) -
				       sizeof(struct init_stack_frame));

	pInitCtx->pc = ((uint32_t)_thread_entry_wrapper);
4000bb02:	cb 44 00 40 5c bb       	mov_s      r12,0x4000bb5c
	memset(pStackMem, 0xaa, stackSize);
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct init_stack_frame *)(STACK_ROUND_DOWN(stackEnd) -
4000bb08:	6c 21 41 00             	bmskn      r1,r1,1
				       sizeof(struct init_stack_frame));

	pInitCtx->pc = ((uint32_t)_thread_entry_wrapper);
4000bb0c:	e8 19 00 83             	st         r12,[r1,-24]
	pInitCtx->r0 = (uint32_t)pEntry;
4000bb10:	fc 19 c0 80             	st         r3,[r1,-4]
	memset(pStackMem, 0xaa, stackSize);
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct init_stack_frame *)(STACK_ROUND_DOWN(stackEnd) -
4000bb14:	42 21 02 06             	sub        r2,r1,24
	 */
#ifdef CONFIG_ARC_STACK_CHECKING
	pInitCtx->status32 = _ARC_V2_STATUS32_SC | _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
	tcs->stack_top = (uint32_t) stackEnd;
#else
	pInitCtx->status32 = _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
4000bb18:	1e db                   	mov_s      r3,30
	pInitCtx = (struct init_stack_frame *)(STACK_ROUND_DOWN(stackEnd) -
				       sizeof(struct init_stack_frame));

	pInitCtx->pc = ((uint32_t)_thread_entry_wrapper);
	pInitCtx->r0 = (uint32_t)pEntry;
	pInitCtx->r1 = (uint32_t)parameter1;
4000bb1a:	10 1a 00 01             	st         r4,[r2,16]
	 */
#ifdef CONFIG_ARC_STACK_CHECKING
	pInitCtx->status32 = _ARC_V2_STATUS32_SC | _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
	tcs->stack_top = (uint32_t) stackEnd;
#else
	pInitCtx->status32 = _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
4000bb1e:	61 a2                   	st_s       r3,[r2,4]
				       sizeof(struct init_stack_frame));

	pInitCtx->pc = ((uint32_t)_thread_entry_wrapper);
	pInitCtx->r0 = (uint32_t)pEntry;
	pInitCtx->r1 = (uint32_t)parameter1;
	pInitCtx->r2 = (uint32_t)parameter2;
4000bb20:	0c 1a 40 01             	st         r5,[r2,12]
	pInitCtx->r3 = (uint32_t)parameter3;
4000bb24:	08 1a 80 01             	st         r6,[r2,8]
	tcs->stack_top = (uint32_t) stackEnd;
#else
	pInitCtx->status32 = _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
#endif
	tcs->link = NULL;
	tcs->flags = priority == -1 ? TASK | PREEMPTIBLE : FIBER;
4000bb28:	f4 77                   	cmp_s      r7,-1
4000bb2a:	21 db                   	mov_s      r3,33
4000bb2c:	c2 23 c2 00             	sub.nz     r3,r3,r3
	 * dst[31:6] dst[5] dst[4]       dst[3:0]
	 *    26'd0    1    STATUS32.IE  STATUS32.E[3:0]
	 */
	tcs->intlock_key = 0x3F;
	tcs->relinquish_cause = _CAUSE_COOP;
	tcs->preempReg.sp = (uint32_t)pInitCtx - __tCalleeSaved_SIZEOF;
4000bb30:	82 21 01 06             	sub        r1,r1,88
	tcs->stack_top = (uint32_t) stackEnd;
#else
	pInitCtx->status32 = _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
#endif
	tcs->link = NULL;
	tcs->flags = priority == -1 ? TASK | PREEMPTIBLE : FIBER;
4000bb34:	61 a0                   	st_s       r3,[r0,4]
	 * intlock_key is constructed based on ARCv2 ISA Programmer's
	 * Reference Manual CLRI instruction description:
	 * dst[31:6] dst[5] dst[4]       dst[3:0]
	 *    26'd0    1    STATUS32.IE  STATUS32.E[3:0]
	 */
	tcs->intlock_key = 0x3F;
4000bb36:	3f db                   	mov_s      r3,63
	pInitCtx->status32 = _ARC_V2_STATUS32_SC | _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
	tcs->stack_top = (uint32_t) stackEnd;
#else
	pInitCtx->status32 = _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
#endif
	tcs->link = NULL;
4000bb38:	4c 70                   	mov_s      r2,0
	 * intlock_key is constructed based on ARCv2 ISA Programmer's
	 * Reference Manual CLRI instruction description:
	 * dst[31:6] dst[5] dst[4]       dst[3:0]
	 *    26'd0    1    STATUS32.IE  STATUS32.E[3:0]
	 */
	tcs->intlock_key = 0x3F;
4000bb3a:	62 a0                   	st_s       r3,[r0,8]
	tcs->relinquish_cause = _CAUSE_COOP;
	tcs->preempReg.sp = (uint32_t)pInitCtx - __tCalleeSaved_SIZEOF;
4000bb3c:	26 a0                   	st_s       r1,[r0,24]
	 * Reference Manual CLRI instruction description:
	 * dst[31:6] dst[5] dst[4]       dst[3:0]
	 *    26'd0    1    STATUS32.IE  STATUS32.E[3:0]
	 */
	tcs->intlock_key = 0x3F;
	tcs->relinquish_cause = _CAUSE_COOP;
4000bb3e:	6c 71                   	mov_s      r3,1
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = -1;
4000bb40:	2c 77                   	mov_s      r1,-1
 */
void _new_thread(char *pStackMem, unsigned stackSize,
		 void *uk_task_ptr, _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
4000bb42:	9b 43                   	mov_s      fp,sp
	pInitCtx->status32 = _ARC_V2_STATUS32_SC | _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
	tcs->stack_top = (uint32_t) stackEnd;
#else
	pInitCtx->status32 = _ARC_V2_STATUS32_E(_ARC_V2_DEF_IRQ_LEVEL);
#endif
	tcs->link = NULL;
4000bb44:	40 a0                   	st_s       r2,[r0,0]
	tcs->flags = priority == -1 ? TASK | PREEMPTIBLE : FIBER;
	tcs->prio = priority;
4000bb46:	14 18 c0 01             	st         r7,[r0,20]
	 * Reference Manual CLRI instruction description:
	 * dst[31:6] dst[5] dst[4]       dst[3:0]
	 *    26'd0    1    STATUS32.IE  STATUS32.E[3:0]
	 */
	tcs->intlock_key = 0x3F;
	tcs->relinquish_cause = _CAUSE_COOP;
4000bb4a:	63 a0                   	st_s       r3,[r0,12]
4000bb4c:	2b a0                   	st_s       r1,[r0,44]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
4000bb4e:	4a a0                   	st_s       r2,[r0,40]

	/*
	 * Must be initialized here, so the _nano_timeout_handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->tcs = NULL;
4000bb50:	49 a0                   	st_s       r2,[r0,36]

	/*
	 * Set callback function
	 */
	t->func = func;
4000bb52:	4c a0                   	st_s       r2,[r0,48]
	_nano_timeout_tcs_init(tcs);

	/* initial values in all other registers/TCS entries are irrelevant */

	THREAD_MONITOR_INIT(tcs);
}
4000bb54:	e0 7f                   	j_s.d      [blink]
4000bb56:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000bb5a:	e0 78                   	nop_s      

4000bb5c <_thread_entry_wrapper>:
 * @return N/A
 */

SECTION_FUNC(TEXT, _thread_entry_wrapper)

	pop_s r3
4000bb5c:	c1 c3                   	pop_s      r3
	pop_s r2
4000bb5e:	c1 c2                   	pop_s      r2
	pop_s r1
4000bb60:	c1 c1                   	pop_s      r1
	pop_s r0
4000bb62:	c1 c0                   	pop_s      r0
	j _thread_entry
4000bb64:	20 20 80 0f 00 40 a8 b2 	j          4000b2a8 <_thread_entry>

	nop
4000bb6c:	4a 26 00 70             	nop        

4000bb70 <nano_cpu_idle>:
	jl    _sys_k_event_logger_enter_sleep
	pop_s blink
#endif
	enter_tickless_idle

	ld r1, [nano_cpu_sleep_mode]
4000bb70:	00 16 01 70 00 a8 74 0e 	ld         r1,[0xa8000e74]
	or r1, r1, (1 << 4) /* set IRQ-enabled bit */
4000bb78:	45 21 01 04             	or         r1,r1,16
	sleep r1
4000bb7c:	2f 21 7f 00             	sleep      r1
	j_s [blink]
4000bb80:	e0 7e                   	j_s        [blink]
	nop
4000bb82:	4a 26 00 70             	nop        
4000bb86:	e0 78                   	nop_s      

4000bb88 <nano_cpu_atomic_idle>:
	pop_s blink
#endif

	enter_tickless_idle

	ld r1, [nano_cpu_sleep_mode]
4000bb88:	00 16 01 70 00 a8 74 0e 	ld         r1,[0xa8000e74]
	or r1, r1, (1 << 4) /* set IRQ-enabled bit */
4000bb90:	45 21 01 04             	or         r1,r1,16
	sleep r1
4000bb94:	2f 21 7f 00             	sleep      r1
	j_s.d [blink]
4000bb98:	e0 7f                   	j_s.d      [blink]
	seti r0
4000bb9a:	2f 26 3f 00             	seti       
4000bb9e:	e0 78                   	nop_s      

4000bba0 <_firq_enter>:
	/*
	 * Save LP_START/LP_COUNT/LP_END because called handler might use.
	 * Save these in callee saved registers to avoid using memory.
	 * These will be saved by the compiler if it needs to spill them.
	 */
	mov r23,lp_count
4000bba0:	0a 27 00 2f             	mov        r23,lp_count
	lr r24, [_ARC_V2_LP_START]
4000bba4:	6a 20 80 30             	lr         r24,[0x2]
	lr r25, [_ARC_V2_LP_END]
4000bba8:	6a 21 c0 30             	lr         r25,[0x3]
#endif

	j @_isr_demux
4000bbac:	20 20 80 0f 00 40 b0 bf 	j          4000bfb0 <_isr_demux>


4000bbb4 <_firq_exit>:

SECTION_FUNC(TEXT, _firq_exit)

#ifndef CONFIG_FIRQ_NO_LPCC
	/* restore lp_count, lp_start, lp_end from r23-r25 */
	mov lp_count,r23
4000bbb4:	0a 24 c0 75             	mov        lp_count,r23
	sr r24, [_ARC_V2_LP_START]
4000bbb8:	6b 20 80 30             	sr         r24,[0x2]
	sr r25, [_ARC_V2_LP_END]
4000bbbc:	6b 21 c0 30             	sr         r25,[0x3]
#endif

	mov_s r1, _nanokernel
4000bbc0:	c3 41 00 a8 58 0e       	mov_s      r1,0xa8000e58
	ld_s r2, [r1, __tNANO_current_OFFSET]
4000bbc6:	42 81                   	ld_s       r2,[r1,8]

#if CONFIG_NUM_IRQ_PRIO_LEVELS > 1
	/* check if we're a nested interrupt: if so, let the interrupted
	 * interrupt handle the reschedule */

	lr r3, [_ARC_V2_AUX_IRQ_ACT]
4000bbc8:	aa 23 c1 00             	lr         r3,[0x43]
	/* the OS on ARCv2 always runs in kernel mode, so assume bit31 [U] in
	 * AUX_IRQ_ACT is always 0: if the contents of AUX_IRQ_ACT is not 1, it
	 * means that another bit is set so an interrupt was interrupted.
	 */

	breq r3, 1, _check_if_current_is_the_task
4000bbcc:	09 0b 50 00             	breq       r3,1,4000bbd4 <_check_if_current_is_the_task>


	rtie
4000bbd0:	6f 24 3f 00             	rtie       

4000bbd4 <_check_if_current_is_the_task>:
#endif

.balign 4
_check_if_current_is_the_task:

	ld_s r0, [r2, __tTCS_flags_OFFSET]
4000bbd4:	01 82                   	ld_s       r0,[r2,4]
	and.f r0, r0, PREEMPTIBLE
4000bbd6:	44 20 00 88             	and.f      r0,r0,32
	bnz _check_if_a_fiber_is_ready
4000bbda:	0c 00 02 00             	bnz        4000bbe4 <_check_if_a_fiber_is_ready>

	rtie
4000bbde:	6f 24 3f 00             	rtie       
4000bbe2:	e0 78                   	nop_s      

4000bbe4 <_check_if_a_fiber_is_ready>:

.balign 4
_check_if_a_fiber_is_ready:
	ld_s r0, [r1, __tNANO_fiber_OFFSET] /* incoming fiber in r0 */
4000bbe4:	00 81                   	ld_s       r0,[r1,0]
	brne r0, 0, _firq_reschedule
4000bbe6:	0d 08 11 00             	brne       r0,0,4000bbf0 <_firq_reschedule>

	rtie
4000bbea:	6f 24 3f 00             	rtie       
4000bbee:	e0 78                   	nop_s      

4000bbf0 <_firq_reschedule>:
	 * point, so when switching back to register bank 0, it will contain the
	 * registers from the interrupted thread.
	 */

	/* chose register bank #0 */
	lr r0, [_ARC_V2_STATUS32]
4000bbf0:	6a 20 80 02             	lr         r0,[0xa]
	and r0, r0, ~_ARC_V2_STATUS32_RB(7)
4000bbf4:	04 20 80 0f f8 ff ff ff 	and        r0,r0,0xfff8ffff
	kflag r0
4000bbfc:	29 20 00 80             	kflag      r0

	/* we're back on the outgoing thread's stack */
	_create_irq_stack_frame
4000bc00:	b4 c1                   	sub_s      sp,sp,80
4000bc02:	38 1c c0 37             	st         blink,[sp,56]
4000bc06:	4d c5                   	st_s       r13,[sp,52]
4000bc08:	4c c4                   	st_s       r12,[sp,48]
4000bc0a:	2c 1c c0 32             	st         r11,[sp,44]
4000bc0e:	28 1c 80 32             	st         r10,[sp,40]
4000bc12:	24 1c 40 32             	st         r9,[sp,36]
4000bc16:	20 1c 00 32             	st         r8,[sp,32]
4000bc1a:	1c 1c c0 31             	st         r7,[sp,28]
4000bc1e:	18 1c 80 31             	st         r6,[sp,24]
4000bc22:	14 1c 40 31             	st         r5,[sp,20]
4000bc26:	10 1c 00 31             	st         r4,[sp,16]
4000bc2a:	43 c3                   	st_s       r3,[sp,12]
4000bc2c:	42 c2                   	st_s       r2,[sp,8]
4000bc2e:	41 c1                   	st_s       r1,[sp,4]
4000bc30:	40 c0                   	st_s       r0,[sp,0]
4000bc32:	0a 20 00 0f             	mov        r0,lp_count
4000bc36:	51 c0                   	st_s       r0,[sp,68]
4000bc38:	6a 21 80 00             	lr         r1,[0x2]
4000bc3c:	6a 20 c0 00             	lr         r0,[0x3]
4000bc40:	50 c1                   	st_s       r1,[sp,64]
4000bc42:	4f c0                   	st_s       r0,[sp,60]
	/*
	 * In a FIRQ, STATUS32 of the outgoing thread is in STATUS32_P0 and the
	 * PC in ILINK: save them in status32/pc respectively.
	 */

	lr r0, [_ARC_V2_STATUS32_P0]
4000bc44:	6a 20 c0 02             	lr         r0,[0xb]
	st_s r0, [sp, __tISF_status32_OFFSET]
4000bc48:	53 c0                   	st_s       r0,[sp,76]

	st ilink, [sp, __tISF_pc_OFFSET] /* ilink into pc */
4000bc4a:	48 1c 40 37             	st         ilink1,[sp,72]

	mov_s r1, _nanokernel
4000bc4e:	c3 41 00 a8 58 0e       	mov_s      r1,0xa8000e58
	ld_s r2, [r1, __tNANO_current_OFFSET]
4000bc54:	42 81                   	ld_s       r2,[r1,8]

	_save_callee_saved_regs
4000bc56:	b0 c1                   	sub_s      sp,sp,64
4000bc58:	40 c5                   	st_s       r13,[sp,0]
4000bc5a:	41 c6                   	st_s       r14,[sp,4]
4000bc5c:	42 c7                   	st_s       r15,[sp,8]
4000bc5e:	0c 1c 00 34             	st         r16,[sp,12]
4000bc62:	10 1c 40 34             	st         r17,[sp,16]
4000bc66:	14 1c 80 34             	st         r18,[sp,20]
4000bc6a:	18 1c c0 34             	st         r19,[sp,24]
4000bc6e:	1c 1c 00 35             	st         r20,[sp,28]
4000bc72:	20 1c 40 35             	st         r21,[sp,32]
4000bc76:	24 1c 80 35             	st         r22,[sp,36]
4000bc7a:	28 1c c0 35             	st         r23,[sp,40]
4000bc7e:	2c 1c 00 36             	st         r24,[sp,44]
4000bc82:	30 1c 40 36             	st         r25,[sp,48]
4000bc86:	34 1c 80 36             	st         gp,[sp,52]
4000bc8a:	38 1c c0 36             	st         fp,[sp,56]
4000bc8e:	3c 1c 80 37             	st         ilink2,[sp,60]
4000bc92:	18 1a 00 07             	st         sp,[r2,24]

	st _CAUSE_FIRQ, [r2, __tTCS_relinquish_cause_OFFSET]
4000bc96:	0c 1a c1 00             	st         3,[r2,12]

	ld_s r2, [r1, __tNANO_fiber_OFFSET]
4000bc9a:	40 81                   	ld_s       r2,[r1,0]

	st_s r2, [r1, __tNANO_current_OFFSET]
4000bc9c:	42 a1                   	st_s       r2,[r1,8]
	ld_s r3, [r2, __tTCS_link_OFFSET]
4000bc9e:	60 82                   	ld_s       r3,[r2,0]
	st_s r3, [r1, __tNANO_fiber_OFFSET]
4000bca0:	60 a1                   	st_s       r3,[r1,0]
#endif
	/*
	 * _load_callee_saved_regs expects incoming thread in r2.
	 * _load_callee_saved_regs restores the stack pointer.
	 */
	_load_callee_saved_regs
4000bca2:	18 12 1c 00             	ld         sp,[r2,24]
4000bca6:	00 c5                   	ld_s       r13,[sp,0]
4000bca8:	01 c6                   	ld_s       r14,[sp,4]
4000bcaa:	02 c7                   	ld_s       r15,[sp,8]
4000bcac:	0c 14 10 30             	ld         r16,[sp,12]
4000bcb0:	10 14 11 30             	ld         r17,[sp,16]
4000bcb4:	14 14 12 30             	ld         r18,[sp,20]
4000bcb8:	18 14 13 30             	ld         r19,[sp,24]
4000bcbc:	1c 14 14 30             	ld         r20,[sp,28]
4000bcc0:	20 14 15 30             	ld         r21,[sp,32]
4000bcc4:	24 14 16 30             	ld         r22,[sp,36]
4000bcc8:	28 14 17 30             	ld         r23,[sp,40]
4000bccc:	2c 14 18 30             	ld         r24,[sp,44]
4000bcd0:	30 14 19 30             	ld         r25,[sp,48]
4000bcd4:	34 14 1a 30             	ld         gp,[sp,52]
4000bcd8:	38 14 1b 30             	ld         fp,[sp,56]
4000bcdc:	3c 14 1e 30             	ld         ilink2,[sp,60]
4000bce0:	b0 c0                   	add_s      sp,sp,64

	ld_s r3, [r2, __tTCS_relinquish_cause_OFFSET]
4000bce2:	63 82                   	ld_s       r3,[r2,12]

	breq r3, _CAUSE_RIRQ, _firq_return_from_rirq
4000bce4:	35 0b 90 00             	breq       r3,2,4000bd18 <_firq_return_from_firq>

	nop
4000bce8:	4a 26 00 70             	nop        
	breq r3, _CAUSE_FIRQ, _firq_return_from_firq
4000bcec:	2d 0b d0 00             	breq       r3,3,4000bd18 <_firq_return_from_firq>

	nop
4000bcf0:	4a 26 00 70             	nop        

4000bcf4 <_firq_return_from_coop>:
	/* fall through */

.balign 4
_firq_return_from_coop:

	ld_s r3, [r2, __tTCS_intlock_key_OFFSET]
4000bcf4:	62 82                   	ld_s       r3,[r2,8]
	st  0, [r2, __tTCS_intlock_key_OFFSET]
4000bcf6:	08 1a 01 00             	st         0,[r2,8]

	/* pc into ilink */
	pop_s r0
4000bcfa:	c1 c0                   	pop_s      r0
	mov ilink, r0
4000bcfc:	0a 25 00 30             	mov        ilink1,r0

	pop_s r0 /* status32 into r0 */
4000bd00:	c1 c0                   	pop_s      r0
	 * entering _Swap(), they are always locked, so the IE bit is unset in
	 * status32. If the incoming thread had them locked recursively, it
	 * means that the IE bit should stay unset. The only time the bit
	 * has to change is if they were not locked recursively.
	 */
	and.f r3, r3, (1 << 4)
4000bd02:	44 23 03 84             	and.f      r3,r3,16
	or.nz r0, r0, _ARC_V2_STATUS32_IE
4000bd06:	c5 20 82 0f 00 80 00 00 	or.nz      r0,r0,0x80000000
	sr r0, [_ARC_V2_STATUS32_P0]
4000bd0e:	6b 20 c0 02             	sr         r0,[0xb]

	ld_s r0, [r2, __tTCS_return_value_OFFSET]
4000bd12:	04 82                   	ld_s       r0,[r2,16]
	rtie
4000bd14:	6f 24 3f 00             	rtie       

4000bd18 <_firq_return_from_firq>:

.balign 4
_firq_return_from_rirq:
_firq_return_from_firq:

	_pop_irq_stack_frame
4000bd18:	38 14 1f 30             	ld         blink,[sp,56]
4000bd1c:	11 c0                   	ld_s       r0,[sp,68]
4000bd1e:	0a 24 00 70             	mov        lp_count,r0
4000bd22:	10 c1                   	ld_s       r1,[sp,64]
4000bd24:	0f c0                   	ld_s       r0,[sp,60]
4000bd26:	6b 21 80 00             	sr         r1,[0x2]
4000bd2a:	6b 20 c0 00             	sr         r0,[0x3]
4000bd2e:	0d c5                   	ld_s       r13,[sp,52]
4000bd30:	0c c4                   	ld_s       r12,[sp,48]
4000bd32:	2c 14 0b 30             	ld         r11,[sp,44]
4000bd36:	28 14 0a 30             	ld         r10,[sp,40]
4000bd3a:	24 14 09 30             	ld         r9,[sp,36]
4000bd3e:	20 14 08 30             	ld         r8,[sp,32]
4000bd42:	1c 14 07 30             	ld         r7,[sp,28]
4000bd46:	18 14 06 30             	ld         r6,[sp,24]
4000bd4a:	14 14 05 30             	ld         r5,[sp,20]
4000bd4e:	10 14 04 30             	ld         r4,[sp,16]
4000bd52:	03 c3                   	ld_s       r3,[sp,12]
4000bd54:	02 c2                   	ld_s       r2,[sp,8]
4000bd56:	01 c1                   	ld_s       r1,[sp,4]
4000bd58:	00 c0                   	ld_s       r0,[sp,0]
	 *
	 * The pc and status32 values will still be on the stack. We cannot
	 * pop them yet because the callers of _pop_irq_stack_frame must reload
	 * status32 differently depending on the execution context they are running
	 * in (_Swap(), firq or exception).
	 */
4000bd5a:	b4 c0                   	add_s      sp,sp,80

	ld ilink, [sp, -4] /* status32 into ilink */
4000bd5c:	fc 14 1d b0             	ld         ilink1,[sp,-4]
	sr ilink, [_ARC_V2_STATUS32_P0]
4000bd60:	6b 25 c0 32             	sr         ilink1,[0xb]
	ld ilink, [sp, -8] /* pc into ilink */
4000bd64:	f8 14 1d b0             	ld         ilink1,[sp,-8]

4000bd68 <_firq_no_reschedule>:

.balign 4
_firq_no_reschedule:

	/* LP registers are already restored, just switch back to bank 0 */
	rtie
4000bd68:	6f 24 3f 00             	rtie       

4000bd6c <_firq_stack_setup>:
 * @return N/A
 */

SECTION_FUNC(TEXT, _firq_stack_setup)

	lr r0, [_ARC_V2_STATUS32]
4000bd6c:	6a 20 80 02             	lr         r0,[0xa]
	and r0, r0, ~_ARC_V2_STATUS32_RB(7)
4000bd70:	04 20 80 0f f8 ff ff ff 	and        r0,r0,0xfff8ffff
	or r0, r0, _ARC_V2_STATUS32_RB(1)
4000bd78:	05 20 80 0f 01 00 00 00 	or         r0,r0,0x10000
	kflag r0
4000bd80:	29 20 00 80             	kflag      r0

	mov sp, _firq_stack
4000bd84:	0a 24 80 3f 00 a8 24 21 	mov        sp,0xa8002124
	add sp, sp, CONFIG_FIRQ_STACK_SIZE
4000bd8c:	80 24 10 30             	add        sp,sp,0x400

	/*
	 * We have to reload r0 here, because it is bank1 r0 which contains
	 * garbage, not bank0 r0 containing the previous value of status32.
	 */
	lr r0, [_ARC_V2_STATUS32]
4000bd90:	6a 20 80 02             	lr         r0,[0xa]
	and r0, r0, ~_ARC_V2_STATUS32_RB(7)
4000bd94:	04 20 80 0f f8 ff ff ff 	and        r0,r0,0xfff8ffff
	kflag r0
4000bd9c:	29 20 00 80             	kflag      r0

	j_s [blink]
4000bda0:	e0 7e                   	j_s        [blink]
4000bda2:	e0 78                   	nop_s      

4000bda4 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
							const NANO_ESF *pEsf)
{
4000bda4:	f1 c0                   	push_s     blink
4000bda6:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000bdaa:	41 c6                   	st_s       r14,[sp,4]
4000bdac:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000bdb0:	9b 43                   	mov_s      fp,sp
4000bdb2:	08 45                   	mov_s      r13,r0
	switch (reason) {
4000bdb4:	13 08 70 00             	breq.d     r0,1,4000bdc6 <_NanoFatalErrorHandler+0x22>

4000bdb8:	28 46                   	mov_s      r14,r1
4000bdba:	1b 0d d1 10             	brne       r13,3,4000bdd2 <_NanoFatalErrorHandler+0x2e>

		PR_EXC("***** Stack Check Fail! *****\n");
		break;
#endif

	case _NANO_ERR_ALLOCATION_FAIL:
		PR_EXC("**** Kernel Allocation Failure! ****\n");
4000bdbe:	c3 40 00 40 18 da       	mov_s      r0,0x4000da18
4000bdc4:	04 f0                   	b_s        4000bdcc <_NanoFatalErrorHandler+0x28>

FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
							const NANO_ESF *pEsf)
{
	switch (reason) {
	case _NANO_ERR_INVALID_TASK_EXIT:
		PR_EXC("***** Invalid Exit Software Error! *****\n");
4000bdc6:	c3 40 00 40 ec d9       	mov_s      r0,0x4000d9ec
		PR_EXC("***** Stack Check Fail! *****\n");
		break;
#endif

	case _NANO_ERR_ALLOCATION_FAIL:
		PR_EXC("**** Kernel Allocation Failure! ****\n");
4000bdcc:	7e 0b cf ff             	bl         4000b948 <printk>

		break;
4000bdd0:	07 f0                   	b_s        4000bdde <_NanoFatalErrorHandler+0x3a>


	default:
		PR_EXC("**** Unknown Fatal Error %d! ****\n", reason);
4000bdd2:	c3 40 00 40 40 da       	mov_s      r0,0x4000da40
4000bdd8:	72 0b ef ff             	bl.d       4000b948 <printk>

4000bddc:	a1 41                   	mov_s      r1,r13
		break;
	}
	PR_EXC("Current thread ID = 0x%x\n"
4000bdde:	72 0c 8f ff             	bl         4000b24c <sys_thread_self_get>

4000bde2:	00 41                   	mov_s      r1,r0
4000bde4:	aa 22 10 00             	lr         r2,[0x400]
4000bde8:	c3 40 00 40 64 da       	mov_s      r0,0x4000da64
4000bdee:	5e 0b cf ff             	bl         4000b948 <printk>

	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
4000bdf2:	a1 40                   	mov_s      r0,r13
4000bdf4:	42 0c 20 00             	bl.d       4000c234 <_SysFatalErrorHandler>

4000bdf8:	c1 41                   	mov_s      r1,r14
4000bdfa:	01 f0                   	b_s        4000bdfa <_NanoFatalErrorHandler+0x56>


4000bdfc <_FaultDump>:
 * (short form).
 *
 * @return N/A
 */
void _FaultDump(const NANO_ESF *esf, int fault)
{
4000bdfc:	f1 c0                   	push_s     blink
4000bdfe:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000be02:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000be06:	9b 43                   	mov_s      fp,sp
	ARG_UNUSED(esf);
#ifdef CONFIG_PRINTK
	uint32_t exc_addr = _arc_v2_aux_reg_read(_ARC_V2_EFA);
4000be08:	aa 25 10 11             	lr         r13,[0x404]
	uint32_t ecr = _arc_v2_aux_reg_read(_ARC_V2_ECR);
4000be0c:	aa 23 d0 00             	lr         r3,[0x403]

	PR_EXC("Exception vector: 0x%x, cause code: 0x%x, parameter 0x%x\n",
4000be10:	c3 40 00 40 a4 da       	mov_s      r0,0x4000daa4
4000be16:	04 23 81 0f ff 00 00 00 	and        r1,r3,0x00ff0000
4000be1e:	04 23 82 0f 00 00 00 ff 	and        r2,r3,0xff00
4000be26:	30 b9                   	lsr_s      r1,r1,16
4000be28:	28 ba                   	lsr_s      r2,r2,8
4000be2a:	22 0b ef ff             	bl.d       4000b948 <printk>

4000be2e:	6f 7b                   	exth_s     r3,r3
	       _ARC_V2_ECR_VECTOR(ecr),
	       _ARC_V2_ECR_CODE(ecr),
	       _ARC_V2_ECR_PARAMETER(ecr));
	PR_EXC("Address 0x%x\n", exc_addr);
4000be30:	c3 40 00 40 e0 da       	mov_s      r0,0x4000dae0
4000be36:	a1 41                   	mov_s      r1,r13
#endif
}
4000be38:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000be3c:	04 14 1f 30             	ld         blink,[sp,4]
4000be40:	00 c5                   	ld_s       r13,[sp,0]

	PR_EXC("Exception vector: 0x%x, cause code: 0x%x, parameter 0x%x\n",
	       _ARC_V2_ECR_VECTOR(ecr),
	       _ARC_V2_ECR_CODE(ecr),
	       _ARC_V2_ECR_PARAMETER(ecr));
	PR_EXC("Address 0x%x\n", exc_addr);
4000be42:	09 03 ef ff             	b.d        4000b948 <printk>

4000be46:	a2 c0                   	add_s      sp,sp,8

4000be48 <_Fault>:
 * responsible for implementing the error handling policy.
 *
 * @return This function does not return.
 */
void _Fault(void)
{
4000be48:	f1 c0                   	push_s     blink
4000be4a:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000be4e:	9b 43                   	mov_s      fp,sp
	uint32_t ecr = _arc_v2_aux_reg_read(_ARC_V2_ECR);
4000be50:	aa 21 d0 00             	lr         r1,[0x403]

	FAULT_DUMP(&_default_esf, ecr);
4000be54:	c3 40 00 40 80 db       	mov_s      r0,0x4000db80
4000be5a:	a6 0f cf ff             	bl         4000bdfc <_FaultDump>


	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, &_default_esf);
4000be5e:	0c 70                   	mov_s      r0,0
4000be60:	c3 41 00 40 80 db       	mov_s      r1,0x4000db80
}
4000be66:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000be6a:	d1 c0                   	pop_s      blink
{
	uint32_t ecr = _arc_v2_aux_reg_read(_ARC_V2_ECR);

	FAULT_DUMP(&_default_esf, ecr);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, &_default_esf);
4000be6c:	c9 03 00 00             	b          4000c234 <_SysFatalErrorHandler>


4000be70 <__ev_dc_error>:
	bclr r2, r2, _ARC_V2_STATUS32_SC_BIT
	kflag r2
	pop_s r2
#endif

	st sp, [saved_stack_pointer]
4000be70:	00 1e 00 77 00 a8 78 0e 	st         sp,[0xa8000e78]
	mov_s sp, _firq_stack
4000be78:	db 44 00 a8 24 21       	mov_s      sp,0xa8002124
	add sp, sp, CONFIG_FIRQ_STACK_SIZE
4000be7e:	80 24 10 30             	add        sp,sp,0x400

	/* save caller saved registers */
	_create_irq_stack_frame
4000be82:	b4 c1                   	sub_s      sp,sp,80
4000be84:	38 1c c0 37             	st         blink,[sp,56]
4000be88:	4d c5                   	st_s       r13,[sp,52]
4000be8a:	4c c4                   	st_s       r12,[sp,48]
4000be8c:	2c 1c c0 32             	st         r11,[sp,44]
4000be90:	28 1c 80 32             	st         r10,[sp,40]
4000be94:	24 1c 40 32             	st         r9,[sp,36]
4000be98:	20 1c 00 32             	st         r8,[sp,32]
4000be9c:	1c 1c c0 31             	st         r7,[sp,28]
4000bea0:	18 1c 80 31             	st         r6,[sp,24]
4000bea4:	14 1c 40 31             	st         r5,[sp,20]
4000bea8:	10 1c 00 31             	st         r4,[sp,16]
4000beac:	43 c3                   	st_s       r3,[sp,12]
4000beae:	42 c2                   	st_s       r2,[sp,8]
4000beb0:	41 c1                   	st_s       r1,[sp,4]
4000beb2:	40 c0                   	st_s       r0,[sp,0]
4000beb4:	0a 20 00 0f             	mov        r0,lp_count
4000beb8:	51 c0                   	st_s       r0,[sp,68]
4000beba:	6a 21 80 00             	lr         r1,[0x2]
4000bebe:	6a 20 c0 00             	lr         r0,[0x3]
4000bec2:	50 c1                   	st_s       r1,[sp,64]
4000bec4:	4f c0                   	st_s       r0,[sp,60]

	lr r0,[_ARC_V2_ERSTATUS]
4000bec6:	aa 20 90 00             	lr         r0,[0x402]
	st_s r0, [sp, __tISF_status32_OFFSET]
4000beca:	53 c0                   	st_s       r0,[sp,76]
	lr r0,[_ARC_V2_ERET]
4000becc:	aa 20 10 00             	lr         r0,[0x400]
	st_s r0, [sp, __tISF_pc_OFFSET] /* eret into pc */
4000bed0:	52 c0                   	st_s       r0,[sp,72]

	jl _Fault
4000bed2:	22 20 80 0f 00 40 48 be 	jl         4000be48 <_Fault>


	/* if _Fault returns, restore the registers */
	_pop_irq_stack_frame
4000beda:	38 14 1f 30             	ld         blink,[sp,56]
4000bede:	11 c0                   	ld_s       r0,[sp,68]
4000bee0:	0a 24 00 70             	mov        lp_count,r0
4000bee4:	10 c1                   	ld_s       r1,[sp,64]
4000bee6:	0f c0                   	ld_s       r0,[sp,60]
4000bee8:	6b 21 80 00             	sr         r1,[0x2]
4000beec:	6b 20 c0 00             	sr         r0,[0x3]
4000bef0:	0d c5                   	ld_s       r13,[sp,52]
4000bef2:	0c c4                   	ld_s       r12,[sp,48]
4000bef4:	2c 14 0b 30             	ld         r11,[sp,44]
4000bef8:	28 14 0a 30             	ld         r10,[sp,40]
4000befc:	24 14 09 30             	ld         r9,[sp,36]
4000bf00:	20 14 08 30             	ld         r8,[sp,32]
4000bf04:	1c 14 07 30             	ld         r7,[sp,28]
4000bf08:	18 14 06 30             	ld         r6,[sp,24]
4000bf0c:	14 14 05 30             	ld         r5,[sp,20]
4000bf10:	10 14 04 30             	ld         r4,[sp,16]
4000bf14:	03 c3                   	ld_s       r3,[sp,12]
4000bf16:	02 c2                   	ld_s       r2,[sp,8]
4000bf18:	01 c1                   	ld_s       r1,[sp,4]
4000bf1a:	00 c0                   	ld_s       r0,[sp,0]
4000bf1c:	b4 c0                   	add_s      sp,sp,80

	/* now restore the stack */
	ld sp,[saved_stack_pointer]
4000bf1e:	00 16 1c 70 00 a8 78 0e 	ld         sp,[0xa8000e78]
	rtie
4000bf26:	6f 24 3f 00             	rtie       
4000bf2a:	e0 78                   	nop_s      

4000bf2c <_arch_irq_enable>:
 *
 * @return N/A
 */

void _arch_irq_enable(unsigned int irq)
{
4000bf2c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000bf30:	9b 43                   	mov_s      fp,sp

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000bf32:	2f 27 7f 00             	clri       r1
static inline void _arc_v2_irq_unit_irq_enable_set(
	int irq,
	unsigned char enable
	)
{
	_arc_v2_aux_reg_write(_ARC_V2_IRQ_SELECT, irq);
4000bf36:	ab 20 d0 02             	sr         r0,[0x40b]
	_arc_v2_aux_reg_write(_ARC_V2_IRQ_ENABLE, enable);
4000bf3a:	ab 26 10 73 00 00 01 00 	sr         1,[0x40c]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000bf42:	2f 26 7f 00             	seti       r1
	int key = irq_lock();

	_arc_v2_irq_unit_int_enable(irq);
	irq_unlock(key);
}
4000bf46:	e0 7f                   	j_s.d      [blink]
4000bf48:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000bf4c <_irq_priority_set>:

void _irq_priority_set(
	unsigned int irq,
	unsigned int prio
)
{
4000bf4c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000bf50:	9b 43                   	mov_s      fp,sp

static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

	__asm__ volatile("clri %0" : "=r"(key));
4000bf52:	2f 27 bf 00             	clri       r2
 * @return N/A
 */

static inline void _arc_v2_irq_unit_prio_set(int irq, unsigned char prio)
{
	_arc_v2_aux_reg_write(_ARC_V2_IRQ_SELECT, irq);
4000bf56:	ab 20 d0 02             	sr         r0,[0x40b]
4000bf5a:	c7 b9                   	bmsk_s     r1,r1,7
	_arc_v2_aux_reg_write(_ARC_V2_IRQ_PRIORITY, prio);
4000bf5c:	ab 21 88 01             	sr         r1,[0x206]
 * @return N/A
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
	__asm__ volatile("seti %0" : : "ir"(key));
4000bf60:	2f 26 bf 00             	seti       r2

	__ASSERT(prio >= 0 && prio < CONFIG_NUM_IRQ_PRIO_LEVELS,
			 "invalid priority!");
	_arc_v2_irq_unit_prio_set(irq, prio);
	irq_unlock(key);
}
4000bf64:	e0 7f                   	j_s.d      [blink]
4000bf66:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000bf6a:	e0 78                   	nop_s      

4000bf6c <_irq_spurious>:
 * @return N/A
 */

#include <misc/printk.h>
void _irq_spurious(void *unused)
{
4000bf6c:	f1 c0                   	push_s     blink
4000bf6e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	ARG_UNUSED(unused);
	printk("_irq_spurious(). Spinning...\n");
4000bf72:	c3 40 00 40 f0 da       	mov_s      r0,0x4000daf0
4000bf78:	d2 09 ef ff             	bl.d       4000b948 <printk>

4000bf7c:	9b 43                   	mov_s      fp,sp
4000bf7e:	01 f0                   	b_s        4000bf7e <_irq_spurious+0x12>


4000bf80 <_isr_enter>:
    Both types of IRQs already have an IRQ stack frame: simply return from
    interrupt.
 */

SECTION_FUNC(TEXT, _isr_enter)
	lr r0, [_ARC_V2_AUX_IRQ_ACT]
4000bf80:	aa 20 c1 00             	lr         r0,[0x43]
	ffs r0, r0
4000bf84:	2f 28 12 00             	ffs        r0,r0
	cmp r0, 0
4000bf88:	4c 20 00 80             	cmp        r0,0

	mov.z r3, _firq_exit
4000bf8c:	ca 23 81 0f 00 40 b4 bb 	mov.z      r3,0x4000bbb4
	mov.z r2, _firq_enter
4000bf94:	ca 22 81 0f 00 40 a0 bb 	mov.z      r2,0x4000bba0
	mov.nz r3, _rirq_exit
4000bf9c:	ca 23 82 0f 00 40 f0 bf 	mov.nz     r3,0x4000bff0
	mov.nz r2, _rirq_enter
4000bfa4:	ca 22 82 0f 00 40 d4 bf 	mov.nz     r2,0x4000bfd4

	j_s [r2]
4000bfac:	00 7a                   	j_s        [r2]
4000bfae:	e0 78                   	nop_s      

4000bfb0 <_isr_demux>:
	#define exit_tickless_idle
#endif

/* when getting here, r3 contains the interrupt exit stub to call */
SECTION_FUNC(TEXT, _isr_demux)
	push_s r3
4000bfb0:	e1 c3                   	push_s     r3
	/* r0 is available to be stomped here, and exit_tickless_idle uses it */
	exit_tickless_idle
	log_interrupt_k_event
	log_sleep_k_event

	lr r0, [_ARC_V2_ICAUSE]
4000bfb2:	aa 20 90 02             	lr         r0,[0x40a]
	sub r0, r0, 16
4000bfb6:	42 20 00 04             	sub        r0,r0,16

	mov r1, _sw_isr_table
4000bfba:	0a 21 80 0f 00 40 10 01 	mov        r1,0x40000110
	add3 r0, r1, r0   /* table entries are 8-bytes wide */
4000bfc2:	16 21 00 00             	add3       r0,r1,r0

	ld_s r1, [r0, 4] /* ISR into r1 */
4000bfc6:	21 80                   	ld_s       r1,[r0,4]
	jl_s.d [r1]
4000bfc8:	60 79                   	jl_s.d     [r1]
	ld_s r0, [r0] /* delay slot: ISR parameter into r0  */
4000bfca:	00 80                   	ld_s       r0,[r0,0]

	/* back from ISR, jump to exit stub */
	pop_s r3
4000bfcc:	c1 c3                   	pop_s      r3
	j_s [r3]
4000bfce:	00 7b                   	j_s        [r3]
	nop
4000bfd0:	4a 26 00 70             	nop        

4000bfd4 <_rirq_enter>:
 * @return N/A
 */

SECTION_FUNC(TEXT, _rirq_enter)

	mov r1, _nanokernel
4000bfd4:	0a 21 80 0f 00 a8 58 0e 	mov        r1,0xa8000e58
	/* disable stack checking */
	lr r2, [_ARC_V2_STATUS32]
	bclr r2, r2, _ARC_V2_STATUS32_SC_BIT
	kflag r2
#endif
	ld_s r2, [r1, __tNANO_current_OFFSET]
4000bfdc:	42 81                   	ld_s       r2,[r1,8]
#if CONFIG_NUM_REGULAR_IRQ_PRIO_LEVELS == 1
	st sp, [r2, __tTCS_preempReg_OFFSET + __tPreempt_sp_OFFSET]
4000bfde:	18 1a 00 07             	st         sp,[r2,24]
	ld sp, [r1, __tNANO_rirq_sp_OFFSET]
4000bfe2:	0c 11 1c 00             	ld         sp,[r1,12]
#else
#error regular irq nesting is not implemented
#endif
	j _isr_demux
4000bfe6:	20 20 80 0f 00 40 b0 bf 	j          4000bfb0 <_isr_demux>

4000bfee:	e0 78                   	nop_s      

4000bff0 <_rirq_exit>:
 * @return N/A
 */

SECTION_FUNC(TEXT, _rirq_exit)

	mov r1, _nanokernel
4000bff0:	0a 21 80 0f 00 a8 58 0e 	mov        r1,0xa8000e58
	ld_s r2, [r1, __tNANO_current_OFFSET]
4000bff8:	42 81                   	ld_s       r2,[r1,8]
	 *
	 * a) needs to load it to save outgoing context.
	 * b) needs to load it to restore the interrupted context.
	 */

	ld_s r0, [r2, __tTCS_flags_OFFSET]
4000bffa:	01 82                   	ld_s       r0,[r2,4]
	and.f r0, r0, PREEMPTIBLE
4000bffc:	44 20 00 88             	and.f      r0,r0,32
	bz.d _rirq_no_reschedule
4000c000:	d8 00 21 00             	bz.d       4000c0d8 <_rirq_no_reschedule>

	ld sp, [r2, __tTCS_preempReg_OFFSET + __tPreempt_sp_OFFSET]
4000c004:	18 12 1c 00             	ld         sp,[r2,24]

	ld_s r0, [r1, __tNANO_fiber_OFFSET] /* incoming fiber in r0 */
4000c008:	00 81                   	ld_s       r0,[r1,0]
	cmp r0, 0
4000c00a:	4c 20 00 80             	cmp        r0,0
	bz.d _rirq_no_reschedule
4000c00e:	cc 00 21 00             	bz.d       4000c0d8 <_rirq_no_reschedule>

	ld sp, [r2, __tTCS_preempReg_OFFSET + __tPreempt_sp_OFFSET]
4000c012:	18 12 1c 00             	ld         sp,[r2,24]
4000c016:	e0 78                   	nop_s      

4000c018 <_rirq_reschedule>:

.balign 4
_rirq_reschedule:

	/* _save_callee_saved_regs expects outgoing thread in r2 */
	_save_callee_saved_regs
4000c018:	b0 c1                   	sub_s      sp,sp,64
4000c01a:	40 c5                   	st_s       r13,[sp,0]
4000c01c:	41 c6                   	st_s       r14,[sp,4]
4000c01e:	42 c7                   	st_s       r15,[sp,8]
4000c020:	0c 1c 00 34             	st         r16,[sp,12]
4000c024:	10 1c 40 34             	st         r17,[sp,16]
4000c028:	14 1c 80 34             	st         r18,[sp,20]
4000c02c:	18 1c c0 34             	st         r19,[sp,24]
4000c030:	1c 1c 00 35             	st         r20,[sp,28]
4000c034:	20 1c 40 35             	st         r21,[sp,32]
4000c038:	24 1c 80 35             	st         r22,[sp,36]
4000c03c:	28 1c c0 35             	st         r23,[sp,40]
4000c040:	2c 1c 00 36             	st         r24,[sp,44]
4000c044:	30 1c 40 36             	st         r25,[sp,48]
4000c048:	34 1c 80 36             	st         gp,[sp,52]
4000c04c:	38 1c c0 36             	st         fp,[sp,56]
4000c050:	3c 1c 80 37             	st         ilink2,[sp,60]
4000c054:	18 1a 00 07             	st         sp,[r2,24]

	st _CAUSE_RIRQ, [r2, __tTCS_relinquish_cause_OFFSET]
4000c058:	0c 1a 81 00             	st         2,[r2,12]

	/* incoming fiber is in r0: it becomes the new 'current' */
	mov r2, r0
4000c05c:	0a 22 00 00             	mov        r2,r0
	st_s r2, [r1, __tNANO_current_OFFSET]
4000c060:	42 a1                   	st_s       r2,[r1,8]
	ld_s r3, [r2, __tTCS_link_OFFSET]
4000c062:	60 82                   	ld_s       r3,[r2,0]
	st_s r3, [r1, __tNANO_fiber_OFFSET]
4000c064:	60 a1                   	st_s       r3,[r1,0]

4000c066 <_rirq_common_interrupt_swap>:
#endif
	/*
	 * _load_callee_saved_regs expects incoming thread in r2.
	 * _load_callee_saved_regs restores the stack pointer.
	 */
	_load_callee_saved_regs
4000c066:	18 12 1c 00             	ld         sp,[r2,24]
4000c06a:	00 c5                   	ld_s       r13,[sp,0]
4000c06c:	01 c6                   	ld_s       r14,[sp,4]
4000c06e:	02 c7                   	ld_s       r15,[sp,8]
4000c070:	0c 14 10 30             	ld         r16,[sp,12]
4000c074:	10 14 11 30             	ld         r17,[sp,16]
4000c078:	14 14 12 30             	ld         r18,[sp,20]
4000c07c:	18 14 13 30             	ld         r19,[sp,24]
4000c080:	1c 14 14 30             	ld         r20,[sp,28]
4000c084:	20 14 15 30             	ld         r21,[sp,32]
4000c088:	24 14 16 30             	ld         r22,[sp,36]
4000c08c:	28 14 17 30             	ld         r23,[sp,40]
4000c090:	2c 14 18 30             	ld         r24,[sp,44]
4000c094:	30 14 19 30             	ld         r25,[sp,48]
4000c098:	34 14 1a 30             	ld         gp,[sp,52]
4000c09c:	38 14 1b 30             	ld         fp,[sp,56]
4000c0a0:	3c 14 1e 30             	ld         ilink2,[sp,60]
4000c0a4:	b0 c0                   	add_s      sp,sp,64

	ld_s r3, [r2, __tTCS_relinquish_cause_OFFSET]
4000c0a6:	63 82                   	ld_s       r3,[r2,12]

	breq r3, _CAUSE_RIRQ, _rirq_return_from_rirq
4000c0a8:	31 0b 90 00             	breq       r3,2,4000c0d8 <_rirq_no_reschedule>

	nop
4000c0ac:	4a 26 00 70             	nop        
	breq r3, _CAUSE_FIRQ, _rirq_return_from_firq
4000c0b0:	29 0b d0 00             	breq       r3,3,4000c0d8 <_rirq_no_reschedule>

	nop
4000c0b4:	4a 26 00 70             	nop        

4000c0b8 <_rirq_return_from_coop>:
_rirq_return_from_coop:

	/* status32 and pc (blink) are already on the stack in the right order */

	/* update status32.ie (explanation in firq_exit:_firq_return_from_coop) */
	ld_s r0, [sp, 4]
4000c0b8:	01 c0                   	ld_s       r0,[sp,4]
	ld_s r3, [r2, __tTCS_intlock_key_OFFSET]
4000c0ba:	62 82                   	ld_s       r3,[r2,8]
	st  0, [r2, __tTCS_intlock_key_OFFSET]
4000c0bc:	08 1a 01 00             	st         0,[r2,8]
	cmp r3, 0
4000c0c0:	4c 23 00 80             	cmp        r3,0
	or.ne r0, r0, _ARC_V2_STATUS32_IE
4000c0c4:	c5 20 82 0f 00 80 00 00 	or.nz      r0,r0,0x80000000
	st_s r0, [sp, 4]
4000c0cc:	41 c0                   	st_s       r0,[sp,4]

	/* carve fake stack */

	sub sp, sp, (__tISF_SIZEOF - 12) /* a) status32/pc are already on the stack
4000c0ce:	82 24 01 31             	sub        sp,sp,68
	                                  * b) a real value will be pushed in r0 */

	/* push return value on stack */
	ld_s r0, [r2, __tTCS_return_value_OFFSET]
4000c0d2:	04 82                   	ld_s       r0,[r2,16]
	push_s r0
4000c0d4:	e1 c0                   	push_s     r0
	 * r13 is part of both the callee and caller-saved register sets because
	 * the processor is only able to save registers in pair in the regular
	 * IRQ prologue. r13 thus has to be set to its correct value in the IRQ
	 * stack frame.
	 */
	st_s r13, [sp, __tISF_r13_OFFSET]
4000c0d6:	4d c5                   	st_s       r13,[sp,52]

4000c0d8 <_rirq_no_reschedule>:
	/* fall through to rtie instruction */

.balign 4
_rirq_no_reschedule:

	rtie
4000c0d8:	6f 24 3f 00             	rtie       

4000c0dc <_Swap>:

SECTION_FUNC(TEXT, _Swap)

	/* interrupts are locked, interrupt key is in r0 */

	mov r1, _nanokernel
4000c0dc:	0a 21 80 0f 00 a8 58 0e 	mov        r1,0xa8000e58
	ld_s r2, [r1, __tNANO_current_OFFSET]
4000c0e4:	42 81                   	ld_s       r2,[r1,8]

	/* save intlock key */
	st_s r0, [r2, __tTCS_intlock_key_OFFSET]
4000c0e6:	02 a2                   	st_s       r0,[r2,8]
	st _CAUSE_COOP, [r2, __tTCS_relinquish_cause_OFFSET]
4000c0e8:	0c 1a 41 00             	st         1,[r2,12]

	/*
	 * Save status32 and blink on the stack before the callee-saved registers.
	 * This is the same layout as the start of an IRQ stack frame.
	 */
	lr r3, [_ARC_V2_STATUS32]
4000c0ec:	6a 23 80 02             	lr         r3,[0xa]
	push_s r3
4000c0f0:	e1 c3                   	push_s     r3
#ifdef CONFIG_ARC_STACK_CHECKING
	/* disable stack checking during swap */
	bclr r3, r3, _ARC_V2_STATUS32_SC_BIT
	kflag r3
#endif
	push_s blink
4000c0f2:	f1 c0                   	push_s     blink

	_save_callee_saved_regs
4000c0f4:	b0 c1                   	sub_s      sp,sp,64
4000c0f6:	40 c5                   	st_s       r13,[sp,0]
4000c0f8:	41 c6                   	st_s       r14,[sp,4]
4000c0fa:	42 c7                   	st_s       r15,[sp,8]
4000c0fc:	0c 1c 00 34             	st         r16,[sp,12]
4000c100:	10 1c 40 34             	st         r17,[sp,16]
4000c104:	14 1c 80 34             	st         r18,[sp,20]
4000c108:	18 1c c0 34             	st         r19,[sp,24]
4000c10c:	1c 1c 00 35             	st         r20,[sp,28]
4000c110:	20 1c 40 35             	st         r21,[sp,32]
4000c114:	24 1c 80 35             	st         r22,[sp,36]
4000c118:	28 1c c0 35             	st         r23,[sp,40]
4000c11c:	2c 1c 00 36             	st         r24,[sp,44]
4000c120:	30 1c 40 36             	st         r25,[sp,48]
4000c124:	34 1c 80 36             	st         gp,[sp,52]
4000c128:	38 1c c0 36             	st         fp,[sp,56]
4000c12c:	3c 1c 80 37             	st         ilink2,[sp,60]
4000c130:	18 1a 00 07             	st         sp,[r2,24]

	ld_s r2, [r1, __tNANO_fiber_OFFSET]
4000c134:	40 81                   	ld_s       r2,[r1,0]
	breq r2, 0, _swap_to_the_task
4000c136:	11 0a 10 00             	breq       r2,0,4000c144 <_swap_to_the_task>

4000c13a:	e0 78                   	nop_s      

4000c13c <_swap_to_a_fiber>:

.balign 4
_swap_to_a_fiber:

	ld_s r3, [r2, __tTCS_link_OFFSET]
4000c13c:	60 82                   	ld_s       r3,[r2,0]
	b.d _finish_swapping_to_thread    /* always execute delay slot */
4000c13e:	0d 00 20 00             	b.d        4000c148 <_finish_swapping_to_thread>

	st_s r3, [r1, __tNANO_fiber_OFFSET] /* delay slot */
4000c142:	60 a1                   	st_s       r3,[r1,0]

4000c144 <_swap_to_the_task>:

.balign 4
_swap_to_the_task:

	ld_s r2, [r1, __tNANO_task_OFFSET]
4000c144:	41 81                   	ld_s       r2,[r1,4]
4000c146:	e0 78                   	nop_s      

4000c148 <_finish_swapping_to_thread>:
	sr r3, [_ARC_V2_KSTACK_TOP]
	ld_s r3, [r2, __tTCS_stack_top_OFFSET]
	sr r3, [_ARC_V2_KSTACK_BASE]
#endif
	/* XXX - can be moved to delay slot of _CAUSE_RIRQ ? */
	st_s r2, [r1, __tNANO_current_OFFSET]
4000c148:	42 a1                   	st_s       r2,[r1,8]

	_load_callee_saved_regs
4000c14a:	18 12 1c 00             	ld         sp,[r2,24]
4000c14e:	00 c5                   	ld_s       r13,[sp,0]
4000c150:	01 c6                   	ld_s       r14,[sp,4]
4000c152:	02 c7                   	ld_s       r15,[sp,8]
4000c154:	0c 14 10 30             	ld         r16,[sp,12]
4000c158:	10 14 11 30             	ld         r17,[sp,16]
4000c15c:	14 14 12 30             	ld         r18,[sp,20]
4000c160:	18 14 13 30             	ld         r19,[sp,24]
4000c164:	1c 14 14 30             	ld         r20,[sp,28]
4000c168:	20 14 15 30             	ld         r21,[sp,32]
4000c16c:	24 14 16 30             	ld         r22,[sp,36]
4000c170:	28 14 17 30             	ld         r23,[sp,40]
4000c174:	2c 14 18 30             	ld         r24,[sp,44]
4000c178:	30 14 19 30             	ld         r25,[sp,48]
4000c17c:	34 14 1a 30             	ld         gp,[sp,52]
4000c180:	38 14 1b 30             	ld         fp,[sp,56]
4000c184:	3c 14 1e 30             	ld         ilink2,[sp,60]
4000c188:	b0 c0                   	add_s      sp,sp,64

	ld_s r3, [r2, __tTCS_relinquish_cause_OFFSET]
4000c18a:	63 82                   	ld_s       r3,[r2,12]

	breq r3, _CAUSE_RIRQ, _swap_return_from_rirq
4000c18c:	31 0b 90 00             	breq       r3,2,4000c1bc <_swap_return_from_firq>

	nop
4000c190:	4a 26 00 70             	nop        
	breq r3, _CAUSE_FIRQ, _swap_return_from_firq
4000c194:	29 0b d0 00             	breq       r3,3,4000c1bc <_swap_return_from_firq>

	nop
4000c198:	4a 26 00 70             	nop        

4000c19c <_swap_return_from_coop>:
	/* fall through to _swap_return_from_coop */

.balign 4
_swap_return_from_coop:

	ld_s r1, [r2, __tTCS_intlock_key_OFFSET]
4000c19c:	22 82                   	ld_s       r1,[r2,8]
	st  0, [r2, __tTCS_intlock_key_OFFSET]
4000c19e:	08 1a 01 00             	st         0,[r2,8]
	ld_s r0, [r2, __tTCS_return_value_OFFSET]
4000c1a2:	04 82                   	ld_s       r0,[r2,16]

	lr ilink, [_ARC_V2_STATUS32]
4000c1a4:	6a 25 80 32             	lr         ilink1,[0xa]
	bbit1 ilink, _ARC_V2_STATUS32_AE_BIT, _return_from_exc
4000c1a8:	77 0d 5f 31             	bbit1      ilink1,5,4000c21e <_return_from_exc>


	pop_s blink /* pc into blink */
4000c1ac:	d1 c0                   	pop_s      blink
	pop_s r3    /* status32 into r3 */
4000c1ae:	c1 c3                   	pop_s      r3
	kflag r3    /* write status32 */
4000c1b0:	29 20 c0 80             	kflag      r3

	j_s.d [blink] /* always execute delay slot */
4000c1b4:	e0 7f                   	j_s.d      [blink]
	seti r1       /* delay slot */
4000c1b6:	2f 26 7f 00             	seti       r1
4000c1ba:	e0 78                   	nop_s      

4000c1bc <_swap_return_from_firq>:

.balign 4
_swap_return_from_rirq:
_swap_return_from_firq:

	lr r3, [_ARC_V2_STATUS32]
4000c1bc:	6a 23 80 02             	lr         r3,[0xa]
	bbit1 r3, _ARC_V2_STATUS32_AE_BIT, _return_from_exc_irq
4000c1c0:	19 0b 5f 01             	bbit1      r3,5,4000c1d8 <_return_from_exc_irq>


	/* pretend interrupt happened to use rtie instruction */
	lr r3, [_ARC_V2_AUX_IRQ_ACT]
4000c1c4:	aa 23 c1 00             	lr         r3,[0x43]
	brne r3,0,_swap_already_in_irq
4000c1c8:	0d 0b 11 00             	brne       r3,0,4000c1d4 <_swap_already_in_irq>


	or r3,r3,(1<<(CONFIG_NUM_IRQ_PRIO_LEVELS-1)) /* use lowest */
4000c1cc:	45 23 83 00             	or         r3,r3,2
	sr r3, [_ARC_V2_AUX_IRQ_ACT]
4000c1d0:	ab 23 c1 00             	sr         r3,[0x43]

4000c1d4 <_swap_already_in_irq>:

_swap_already_in_irq:
	rtie
4000c1d4:	6f 24 3f 00             	rtie       

4000c1d8 <_return_from_exc_irq>:

.balign 4
_return_from_exc_irq:
	_pop_irq_stack_frame
4000c1d8:	38 14 1f 30             	ld         blink,[sp,56]
4000c1dc:	11 c0                   	ld_s       r0,[sp,68]
4000c1de:	0a 24 00 70             	mov        lp_count,r0
4000c1e2:	10 c1                   	ld_s       r1,[sp,64]
4000c1e4:	0f c0                   	ld_s       r0,[sp,60]
4000c1e6:	6b 21 80 00             	sr         r1,[0x2]
4000c1ea:	6b 20 c0 00             	sr         r0,[0x3]
4000c1ee:	0d c5                   	ld_s       r13,[sp,52]
4000c1f0:	0c c4                   	ld_s       r12,[sp,48]
4000c1f2:	2c 14 0b 30             	ld         r11,[sp,44]
4000c1f6:	28 14 0a 30             	ld         r10,[sp,40]
4000c1fa:	24 14 09 30             	ld         r9,[sp,36]
4000c1fe:	20 14 08 30             	ld         r8,[sp,32]
4000c202:	1c 14 07 30             	ld         r7,[sp,28]
4000c206:	18 14 06 30             	ld         r6,[sp,24]
4000c20a:	14 14 05 30             	ld         r5,[sp,20]
4000c20e:	10 14 04 30             	ld         r4,[sp,16]
4000c212:	03 c3                   	ld_s       r3,[sp,12]
4000c214:	02 c2                   	ld_s       r2,[sp,8]
4000c216:	01 c1                   	ld_s       r1,[sp,4]
4000c218:	00 c0                   	ld_s       r0,[sp,0]
4000c21a:	b4 c0                   	add_s      sp,sp,80
	sub_s sp, sp, 8
4000c21c:	a2 c1                   	sub_s      sp,sp,8

4000c21e <_return_from_exc>:

_return_from_exc:

	/* put the return address to eret */
	ld ilink, [sp] /* pc into ilink */
4000c21e:	00 14 1d 30             	ld         ilink1,[sp,0]
	sr ilink, [_ARC_V2_ERET]
4000c222:	ab 25 10 30             	sr         ilink1,[0x400]

	/* put status32 into estatus */
	ld ilink, [sp, 4] /* status32 into ilink */
4000c226:	04 14 1d 30             	ld         ilink1,[sp,4]
	sr ilink, [_ARC_V2_ERSTATUS]
4000c22a:	ab 25 90 30             	sr         ilink1,[0x402]
	add_s sp, sp, 8
4000c22e:	a2 c0                   	add_s      sp,sp,8
	rtie
4000c230:	6f 24 3f 00             	rtie       

4000c234 <_SysFatalErrorHandler>:
 * @param pEsf pointer to exception stack frame
 *
 * @return N/A
 */
void _SysFatalErrorHandler(unsigned int reason, const NANO_ESF * pEsf)
{
4000c234:	f1 c0                   	push_s     blink
4000c236:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000c23a:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	nano_context_type_t curCtx = sys_execution_context_type_get();
4000c23e:	26 08 af ff             	bl.d       4000b260 <sys_execution_context_type_get>

4000c242:	9b 43                   	mov_s      fp,sp

	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

	if ((curCtx == NANO_CTX_ISR) || _is_thread_essential()) {
4000c244:	0a 25 00 90             	mov.f      r13,r0
		PRINTK("Fatal fault in %s ! Spinning...\n",
4000c248:	ca 21 81 0f 00 40 20 db 	mov.z      r1,0x4000db20
	nano_context_type_t curCtx = sys_execution_context_type_get();

	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

	if ((curCtx == NANO_CTX_ISR) || _is_thread_essential()) {
4000c250:	0c f2                   	beq_s      4000c268 <_SysFatalErrorHandler+0x34>

4000c252:	3e 08 8f ff             	bl         4000b28c <_is_thread_essential>

4000c256:	10 e8                   	breq_s     r0,0,4000c274 <_SysFatalErrorHandler+0x40>

		PRINTK("Fatal fault in %s ! Spinning...\n",
4000c258:	c3 41 00 40 24 db       	mov_s      r1,0x4000db24
4000c25e:	b5 71                   	cmp_s      r13,1
4000c260:	ca 21 82 0f 00 40 10 db 	mov.nz     r1,0x4000db10
4000c268:	c3 40 00 40 34 db       	mov_s      r0,0x4000db34
4000c26e:	de 0e 8f ff             	bl         4000b948 <printk>

4000c272:	01 f0                   	b_s        4000c272 <_SysFatalErrorHandler+0x3e>

							  : "essential task");
		for (;;)
			; /* spin forever */
	}

	if (NANO_CTX_FIBER == curCtx) {
4000c274:	1f 0d 51 10             	brne       r13,1,4000c292 <_SysFatalErrorHandler+0x5e>

		PRINTK("Fatal fault in fiber ! Aborting fiber.\n");
4000c278:	c3 40 00 40 58 db       	mov_s      r0,0x4000db58
4000c27e:	ce 0e 8f ff             	bl         4000b948 <printk>

		fiber_abort();
		return;
	}

	NON_ESSENTIAL_TASK_ABORT();
}
4000c282:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c286:	04 14 1f 30             	ld         blink,[sp,4]
4000c28a:	00 c5                   	ld_s       r13,[sp,0]
			; /* spin forever */
	}

	if (NANO_CTX_FIBER == curCtx) {
		PRINTK("Fatal fault in fiber ! Aborting fiber.\n");
		fiber_abort();
4000c28c:	c5 05 6f ff             	b.d        4000b050 <fiber_abort>

4000c290:	a2 c0                   	add_s      sp,sp,8
		return;
	}

	NON_ESSENTIAL_TASK_ABORT();
}
4000c292:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c296:	04 14 1f 30             	ld         blink,[sp,4]
4000c29a:	00 c5                   	ld_s       r13,[sp,0]
4000c29c:	e0 7f                   	j_s.d      [blink]
4000c29e:	a2 c0                   	add_s      sp,sp,8

4000c2a0 <_PrepC>:

static void disable_icache(void)
{
	unsigned int val;

	val = _arc_v2_aux_reg_read(_ARC_V2_I_CACHE_BUILD);
4000c2a0:	aa 20 c1 0d             	lr         r0,[0x77]
	val &= 0xff; /* version field */
4000c2a4:	c7 b8                   	bmsk_s     r0,r0,7
	if (val == 0) {
4000c2a6:	0c e8                   	breq_s     r0,0,4000c2bc <_PrepC+0x1c>

		return; /* skip if i-cache is not present */
	}
	_arc_v2_aux_reg_write(_ARC_V2_IC_IVIC, 0);
4000c2a8:	6b 26 00 74 00 00 00 00 	sr         0,[0x10]
	__asm__ __volatile__ ("nop");
4000c2b0:	4a 26 00 70             	nop        
	_arc_v2_aux_reg_write(_ARC_V2_IC_CTRL, 1);
4000c2b4:	6b 26 40 74 00 00 01 00 	sr         1,[0x11]

static void invalidate_dcache(void)
{
	unsigned int val;

	val = _arc_v2_aux_reg_read(_ARC_V2_D_CACHE_BUILD);
4000c2bc:	aa 20 81 0c             	lr         r0,[0x72]
	val &= 0xff; /* version field */
4000c2c0:	c7 b8                   	bmsk_s     r0,r0,7
	if (val == 0) {
4000c2c2:	06 e8                   	breq_s     r0,0,4000c2cc <_PrepC+0x2c>

		return; /* skip if d-cache is not present */
	}
	_arc_v2_aux_reg_write(_ARC_V2_DC_IVDC, 1);
4000c2c4:	ab 26 c1 71 00 00 01 00 	sr         1,[0x47]
	unsigned int vbr;
	/* if the compiled-in vector table is different
	 * from the base address known by the ARC CPU,
	 * set the vector base to the compiled-in address.
	 */
	vbr = _arc_v2_aux_reg_read(_ARC_V2_IRQ_VECT_BASE);
4000c2cc:	6a 20 40 09             	lr         r0,[0x25]
	vbr &= 0xfffffc00;
4000c2d0:	6c 20 40 02             	bmskn      r0,r0,9
	if (vbr != (unsigned int)&_VectorTable) {
4000c2d4:	11 08 80 0f 00 40 00 00 	breq       r0,0x40000000,4000c2e4 <_PrepC+0x44>

		_arc_v2_aux_reg_write(_ARC_V2_IRQ_VECT_BASE,
4000c2dc:	6b 26 40 79 00 40 00 00 	sr         0x40000000,[0x25]
4000c2e4:	c3 40 00 a8 a0 0d       	mov_s      r0,0xa8000da0
4000c2ea:	c3 41 00 00 e0 01       	mov_s      r1,0x1e0
{
	volatile uint32_t *pBSS = (uint32_t *)&__bss_start;
	unsigned int n;

	for (n = 0; n < (unsigned int)&__bss_num_words; n++) {
		pBSS[n] = 0;
4000c2f0:	4c 70                   	mov_s      r2,0
4000c2f2:	15 20 41 00             	add2       r1,r0,r1
static void bssZero(void)
{
	volatile uint32_t *pBSS = (uint32_t *)&__bss_start;
	unsigned int n;

	for (n = 0; n < (unsigned int)&__bss_num_words; n++) {
4000c2f6:	0d 08 40 00             	breq       r0,r1,4000c300 <_PrepC+0x60>

		pBSS[n] = 0;
4000c2fa:	04 18 90 00             	st.ab      r2,[r0,4]
4000c2fe:	fd f1                   	b_s        4000c2f6 <_PrepC+0x56>

4000c300:	c3 41 00 00 68 02       	mov_s      r1,0x268
4000c306:	5a 21 01 01             	mpy        r1,r1,4
static void bssZero(void)
{
	volatile uint32_t *pBSS = (uint32_t *)&__bss_start;
	unsigned int n;

	for (n = 0; n < (unsigned int)&__bss_num_words; n++) {
4000c30a:	0c 70                   	mov_s      r0,0
{
	volatile uint32_t *pROM = (uint32_t *)&__data_rom_start;
	volatile uint32_t *pRAM = (uint32_t *)&__data_ram_start;
	unsigned int n;

	for (n = 0; n < (unsigned int)&__data_num_words; n++) {
4000c30c:	1b 08 40 00             	breq       r0,r1,4000c326 <_PrepC+0x86>

		pRAM[n] = pROM[n];
4000c310:	30 20 83 0f 00 40 18 e0 	ld         r3,[r0,0x4000e018]
4000c318:	00 20 82 0f 00 a8 00 04 	add        r2,r0,0xa8000400
4000c320:	04 74                   	add_s      r0,r0,4
4000c322:	60 a2                   	st_s       r3,[r2,0]
4000c324:	f4 f1                   	b_s        4000c30c <_PrepC+0x6c>

 *
 * @return N/A
 */

void _PrepC(void)
{
4000c326:	f1 c0                   	push_s     blink
4000c328:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	disable_icache();
	invalidate_dcache();
	adjust_vector_table_base();
	bssZero();
	dataCopy();
	_Cstart();
4000c32c:	e2 0f 6f ff             	bl.d       4000b30c <_Cstart>

4000c330:	9b 43                   	mov_s      fp,sp
4000c332:	e0 78                   	nop_s      

4000c334 <__reset>:

SECTION_FUNC(TEXT,__reset)
SECTION_FUNC(TEXT,__start)

	/* lock interrupts: will get unlocked when switch to main task */
	clri
4000c334:	6f 27 3f 00             	clri       

	/* setup a stack at the end of MEMORY */
	mov sp, _TOP_OF_MEMORY
4000c338:	0a 24 80 3f 00 a8 00 64 	mov        sp,0xa8006400

	j @_PrepC
4000c340:	20 20 80 0f 00 40 a0 c2 	j          4000c2a0 <_PrepC>


4000c348 <clk_sys_get_ticks_per_us>:

	return 0;
}

uint32_t clk_sys_get_ticks_per_us(void)
{
4000c348:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	return ticks_per_us;
}
4000c34c:	00 16 00 70 00 a8 3c 0d 	ld         r0,[0xa8000d3c]

	return 0;
}

uint32_t clk_sys_get_ticks_per_us(void)
{
4000c354:	9b 43                   	mov_s      fp,sp
	return ticks_per_us;
}
4000c356:	e0 7f                   	j_s.d      [blink]
4000c358:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c35c <ss_clk_gpio_enable>:

#include "qm_common.h"
#include "ss_clk.h"

int ss_clk_gpio_enable(const qm_ss_gpio_t gpio)
{
4000c35c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	int addr =
4000c360:	0b 78                   	tst_s      r0,r0

#include "qm_common.h"
#include "ss_clk.h"

int ss_clk_gpio_enable(const qm_ss_gpio_t gpio)
{
4000c362:	9b 43                   	mov_s      fp,sp
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	int addr =
4000c364:	c3 41 01 80 00 78       	mov_s      r1,0x80017800
4000c36a:	ca 21 82 0f 01 80 00 79 	mov.nz     r1,0x80017900
	    (gpio == QM_SS_GPIO_0) ? QM_SS_GPIO_0_BASE : QM_SS_GPIO_1_BASE;
	__builtin_arc_sr(QM_SS_GPIO_LS_SYNC_CLK_EN |
			     QM_SS_GPIO_LS_SYNC_SYNC_LVL,
			 addr + QM_SS_GPIO_LS_SYNC);
4000c372:	0b e1                   	add_s      r1,r1,11
int ss_clk_gpio_enable(const qm_ss_gpio_t gpio)
{
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	int addr =
	    (gpio == QM_SS_GPIO_0) ? QM_SS_GPIO_0_BASE : QM_SS_GPIO_1_BASE;
	__builtin_arc_sr(QM_SS_GPIO_LS_SYNC_CLK_EN |
4000c374:	2b 26 40 70 00 80 01 00 	sr         0x80000001,[r1]
			     QM_SS_GPIO_LS_SYNC_SYNC_LVL,
			 addr + QM_SS_GPIO_LS_SYNC);
	return 0;
}
4000c37c:	0c 70                   	mov_s      r0,0
4000c37e:	e0 7f                   	j_s.d      [blink]
4000c380:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c384 <ss_clk_i2c_enable>:
	QM_SS_REG_AUX_NAND(addr + QM_SS_SPI_CTRL, QM_SS_SPI_CTRL_CLK_ENA);
	return 0;
}

int ss_clk_i2c_enable(const qm_ss_i2c_t i2c)
{
4000c384:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	QM_CHECK(i2c < QM_SS_I2C_NUM, -EINVAL);
	int addr = (i2c == QM_SS_I2C_0) ? QM_SS_I2C_0_BASE : QM_SS_I2C_1_BASE;
4000c388:	0b 78                   	tst_s      r0,r0
	QM_SS_REG_AUX_NAND(addr + QM_SS_SPI_CTRL, QM_SS_SPI_CTRL_CLK_ENA);
	return 0;
}

int ss_clk_i2c_enable(const qm_ss_i2c_t i2c)
{
4000c38a:	9b 43                   	mov_s      fp,sp
	QM_CHECK(i2c < QM_SS_I2C_NUM, -EINVAL);
	int addr = (i2c == QM_SS_I2C_0) ? QM_SS_I2C_0_BASE : QM_SS_I2C_1_BASE;
4000c38c:	c3 41 01 80 00 20       	mov_s      r1,0x80012000
4000c392:	ca 21 82 0f 01 80 00 21 	mov.nz     r1,0x80012100
	QM_SS_REG_AUX_OR(addr + QM_SS_I2C_CON, QM_SS_I2C_CON_CLK_ENA);
4000c39a:	2a 20 40 00             	lr         r0,[r1]
4000c39e:	9f b8                   	bset_s     r0,r0,31
4000c3a0:	2b 20 40 00             	sr         r0,[r1]
	return 0;
}
4000c3a4:	0c 70                   	mov_s      r0,0
4000c3a6:	e0 7f                   	j_s.d      [blink]
4000c3a8:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c3ac <ss_gpio_isr_handler>:

static uint32_t gpio_base[QM_SS_GPIO_NUM] = {QM_SS_GPIO_0_BASE,
					     QM_SS_GPIO_1_BASE};

static void ss_gpio_isr_handler(qm_ss_gpio_t gpio)
{
4000c3ac:	f1 c0                   	push_s     blink
4000c3ae:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000c3b2:	41 c6                   	st_s       r14,[sp,4]
	uint32_t int_status = 0;
	uint32_t controller = gpio_base[gpio];
4000c3b4:	12 68                   	asl_s      r0,r0,2
4000c3b6:	30 20 8e 0f 00 40 84 db 	ld         r14,[r0,0x4000db84]

static uint32_t gpio_base[QM_SS_GPIO_NUM] = {QM_SS_GPIO_0_BASE,
					     QM_SS_GPIO_1_BASE};

static void ss_gpio_isr_handler(qm_ss_gpio_t gpio)
{
4000c3be:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c3c2:	9b 43                   	mov_s      fp,sp
	uint32_t int_status = 0;
	uint32_t controller = gpio_base[gpio];

	int_status = __builtin_arc_lr(controller + QM_SS_GPIO_INTSTATUS);
4000c3c4:	a7 6e                   	add_s      r13,r14,7
4000c3c6:	2a 25 40 13             	lr         r13,[r13]

	if (callback[gpio]) {
4000c3ca:	30 20 82 0f 00 a8 84 0e 	ld         r2,[r0,0xa8000e84]
		callback[gpio](callback_data, int_status);
	}

	__builtin_arc_sr(int_status, controller + QM_SS_GPIO_PORTA_EOI);
4000c3d2:	09 e6                   	add_s      r14,r14,9
	uint32_t int_status = 0;
	uint32_t controller = gpio_base[gpio];

	int_status = __builtin_arc_lr(controller + QM_SS_GPIO_INTSTATUS);

	if (callback[gpio]) {
4000c3d4:	4b 7a                   	tst_s      r2,r2
		callback[gpio](callback_data, int_status);
4000c3d6:	ca 20 82 0f 00 a8 7c 0e 	mov.nz     r0,0xa8000e7c
4000c3de:	e3 20 82 00             	jlnz.d     [r2]
4000c3e2:	ca 21 42 03             	mov.nz     r1,r13
	}

	__builtin_arc_sr(int_status, controller + QM_SS_GPIO_PORTA_EOI);
4000c3e6:	2b 25 80 13             	sr         r13,[r14]
}
4000c3ea:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c3ee:	08 dc                   	mov_s      r12,8
4000c3f0:	e9 02 8f fd             	b          400076d8 <__ld_r13_to_r14_ret>


4000c3f4 <qm_ss_gpio_isr_0>:

QM_ISR_DECLARE(qm_ss_gpio_isr_0)
{
4000c3f4:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c3f8:	9b 43                   	mov_s      fp,sp
	ss_gpio_isr_handler(QM_SS_GPIO_0);
4000c3fa:	0c 70                   	mov_s      r0,0
4000c3fc:	b1 07 ef ff             	b.d        4000c3ac <ss_gpio_isr_handler>

4000c400:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c404 <qm_ss_gpio_isr_1>:
}

QM_ISR_DECLARE(qm_ss_gpio_isr_1)
{
4000c404:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c408:	9b 43                   	mov_s      fp,sp
	ss_gpio_isr_handler(QM_SS_GPIO_1);
4000c40a:	0c 71                   	mov_s      r0,1
4000c40c:	a1 07 ef ff             	b.d        4000c3ac <ss_gpio_isr_handler>

4000c410:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c414 <qm_ss_gpio_set_config>:
}

int qm_ss_gpio_set_config(const qm_ss_gpio_t gpio,
			  const qm_ss_gpio_port_config_t *const cfg)
{
4000c414:	fc 1c 48 b3             	st.a       r13,[sp,-4]
	uint32_t controller;
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	controller = gpio_base[gpio];
4000c418:	12 68                   	asl_s      r0,r0,2
4000c41a:	30 20 82 0f 00 40 84 db 	ld         r2,[r0,0x4000db84]
	ss_gpio_isr_handler(QM_SS_GPIO_1);
}

int qm_ss_gpio_set_config(const qm_ss_gpio_t gpio,
			  const qm_ss_gpio_port_config_t *const cfg)
{
4000c422:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c426:	9b 43                   	mov_s      fp,sp
	uint32_t controller;
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	controller = gpio_base[gpio];
	__builtin_arc_sr(0xFFFFFFFF, controller + QM_SS_GPIO_INTMASK);
4000c428:	64 6a                   	add_s      r3,r2,4
4000c42a:	2b 26 c0 70 ff ff ff ff 	sr         -1,[r3]

	__builtin_arc_sr(cfg->direction, controller + QM_SS_GPIO_SWPORTA_DDR);
4000c432:	a0 81                   	ld_s       r13,[r1,0]
4000c434:	81 6a                   	add_s      r12,r2,1
4000c436:	2b 25 00 13             	sr         r13,[r12]
	__builtin_arc_sr(cfg->int_type, controller + QM_SS_GPIO_INTTYPE_LEVEL);
4000c43a:	a2 81                   	ld_s       r13,[r1,8]
4000c43c:	85 6a                   	add_s      r12,r2,5
4000c43e:	2b 25 00 13             	sr         r13,[r12]
	__builtin_arc_sr(cfg->int_polarity,
4000c442:	a3 81                   	ld_s       r13,[r1,12]
4000c444:	86 6a                   	add_s      r12,r2,6
4000c446:	2b 25 00 13             	sr         r13,[r12]
			 controller + QM_SS_GPIO_INT_POLARITY);
	__builtin_arc_sr(cfg->int_debounce, controller + QM_SS_GPIO_DEBOUNCE);
4000c44a:	a4 81                   	ld_s       r13,[r1,16]
4000c44c:	40 22 0c 02             	add        r12,r2,8
4000c450:	2b 25 00 13             	sr         r13,[r12]

	callback[gpio] = cfg->callback;
4000c454:	85 81                   	ld_s       r12,[r1,20]
4000c456:	00 20 84 0f 00 a8 84 0e 	add        r4,r0,0xa8000e84
4000c45e:	00 1c 00 03             	st         r12,[r4]
	callback_data[gpio] = cfg->callback_data;
4000c462:	86 81                   	ld_s       r12,[r1,24]
4000c464:	c3 70 00 a8 7c 0e       	add_s      r0,r0,0xa8000e7c
4000c46a:	80 a0                   	st_s       r12,[r0,0]
	__builtin_arc_sr(cfg->int_en, controller + QM_SS_GPIO_INTEN);
4000c46c:	01 81                   	ld_s       r0,[r1,4]
4000c46e:	44 73                   	add_s      r2,r2,3
4000c470:	2b 20 80 00             	sr         r0,[r2]

	__builtin_arc_sr(~cfg->int_en, controller + QM_SS_GPIO_INTMASK);
4000c474:	12 78                   	not_s      r0,r0
4000c476:	2b 20 c0 00             	sr         r0,[r3]

	return 0;
}
4000c47a:	0c 70                   	mov_s      r0,0
4000c47c:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c480:	00 c5                   	ld_s       r13,[sp,0]
4000c482:	e0 7f                   	j_s.d      [blink]
4000c484:	87 74                   	add_s      sp,sp,4
4000c486:	e0 78                   	nop_s      

4000c488 <qm_ss_gpio_read_pin>:
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);
	QM_CHECK(state != NULL, -EINVAL);

	*state =
	    ((__builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_EXT_PORTA) >> pin) &
4000c488:	f0 26 00 70 00 40 84 db 	ld.as      r0,[0x4000db84,r0]
	return 0;
}

int qm_ss_gpio_read_pin(const qm_ss_gpio_t gpio, const uint8_t pin,
			qm_ss_gpio_state_t *const state)
{
4000c490:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c494:	9b 43                   	mov_s      fp,sp
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);
	QM_CHECK(state != NULL, -EINVAL);

	*state =
	    ((__builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_EXT_PORTA) >> pin) &
4000c496:	0a e0                   	add_s      r0,r0,10
4000c498:	2a 20 00 00             	lr         r0,[r0]
4000c49c:	01 28 41 00             	lsr        r1,r0,r1
4000c4a0:	44 21 40 00             	and        r0,r1,1
{
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);
	QM_CHECK(state != NULL, -EINVAL);

	*state =
4000c4a4:	00 a2                   	st_s       r0,[r2,0]
	    ((__builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_EXT_PORTA) >> pin) &
	     1);

	return 0;
}
4000c4a6:	0c 70                   	mov_s      r0,0
4000c4a8:	e0 7f                   	j_s.d      [blink]
4000c4aa:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c4ae:	e0 78                   	nop_s      

4000c4b0 <qm_ss_gpio_set_pin>:
{
	uint32_t val;
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);

	val = __builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR) |
4000c4b0:	f0 26 00 70 00 40 84 db 	ld.as      r0,[0x4000db84,r0]

	return 0;
}

int qm_ss_gpio_set_pin(const qm_ss_gpio_t gpio, const uint8_t pin)
{
4000c4b8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c4bc:	9b 43                   	mov_s      fp,sp
4000c4be:	2f 79                   	exth_s     r1,r1
	uint32_t val;
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);

	val = __builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR) |
4000c4c0:	2a 22 00 00             	lr         r2,[r0]
4000c4c4:	0f 22 41 00             	bset       r1,r2,r1
	      BIT(pin);
	__builtin_arc_sr(val, gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR);
4000c4c8:	2b 21 00 00             	sr         r1,[r0]

	return 0;
}
4000c4cc:	0c 70                   	mov_s      r0,0
4000c4ce:	e0 7f                   	j_s.d      [blink]
4000c4d0:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c4d4 <qm_ss_gpio_clear_pin>:
{
	uint32_t val;
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);

	val = __builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR);
4000c4d4:	f0 26 00 70 00 40 84 db 	ld.as      r0,[0x4000db84,r0]

	return 0;
}

int qm_ss_gpio_clear_pin(const qm_ss_gpio_t gpio, const uint8_t pin)
{
4000c4dc:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c4e0:	9b 43                   	mov_s      fp,sp
4000c4e2:	2f 79                   	exth_s     r1,r1
	uint32_t val;
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(pin <= QM_SS_GPIO_NUM_PINS, -EINVAL);

	val = __builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR);
4000c4e4:	2a 22 00 00             	lr         r2,[r0]
	val &= ~BIT(pin);
4000c4e8:	00 2e 41 70 00 00 01 00 	asl        r1,1,r1
4000c4f0:	06 22 41 00             	bic        r1,r2,r1
	__builtin_arc_sr(val, gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR);
4000c4f4:	2b 21 00 00             	sr         r1,[r0]

	return 0;
}
4000c4f8:	0c 70                   	mov_s      r0,0
4000c4fa:	e0 7f                   	j_s.d      [blink]
4000c4fc:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c500 <qm_ss_gpio_read_port>:
int qm_ss_gpio_read_port(const qm_ss_gpio_t gpio, uint32_t *const port)
{
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(port != NULL, -EINVAL);

	*port = (__builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_EXT_PORTA));
4000c500:	f0 26 00 70 00 40 84 db 	ld.as      r0,[0x4000db84,r0]

	return 0;
}

int qm_ss_gpio_read_port(const qm_ss_gpio_t gpio, uint32_t *const port)
{
4000c508:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c50c:	9b 43                   	mov_s      fp,sp
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);
	QM_CHECK(port != NULL, -EINVAL);

	*port = (__builtin_arc_lr(gpio_base[gpio] + QM_SS_GPIO_EXT_PORTA));
4000c50e:	0a e0                   	add_s      r0,r0,10
4000c510:	2a 20 00 00             	lr         r0,[r0]
4000c514:	00 a1                   	st_s       r0,[r1,0]

	return 0;
}
4000c516:	0c 70                   	mov_s      r0,0
4000c518:	e0 7f                   	j_s.d      [blink]
4000c51a:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c51e:	e0 78                   	nop_s      

4000c520 <qm_ss_gpio_write_port>:

int qm_ss_gpio_write_port(const qm_ss_gpio_t gpio, const uint32_t val)
{
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);

	__builtin_arc_sr(val, gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR);
4000c520:	f0 26 02 70 00 40 84 db 	ld.as      r2,[0x4000db84,r0]

	return 0;
}

int qm_ss_gpio_write_port(const qm_ss_gpio_t gpio, const uint32_t val)
{
4000c528:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c52c:	9b 43                   	mov_s      fp,sp
	QM_CHECK(gpio < QM_SS_GPIO_NUM, -EINVAL);

	__builtin_arc_sr(val, gpio_base[gpio] + QM_SS_GPIO_SWPORTA_DR);
4000c52e:	2b 21 80 00             	sr         r1,[r2]

	return 0;
}
4000c532:	0c 70                   	mov_s      r0,0
4000c534:	e0 7f                   	j_s.d      [blink]
4000c536:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c53a:	e0 78                   	nop_s      

4000c53c <controller_disable>:
	}
}

static void controller_disable(const qm_ss_i2c_t i2c)
{
	uint32_t controller = i2c_base[i2c];
4000c53c:	f0 26 00 70 00 40 8c db 	ld.as      r0,[0x4000db8c,r0]
			;
	}
}

static void controller_disable(const qm_ss_i2c_t i2c)
{
4000c544:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c548:	9b 43                   	mov_s      fp,sp
	uint32_t controller = i2c_base[i2c];
	if (__builtin_arc_lr(controller + QM_SS_I2C_ENABLE_STATUS) &
4000c54a:	a9 48                   	add_s      r1,r0,17
4000c54c:	2a 22 40 00             	lr         r2,[r1]
4000c550:	17 0a 1e 00             	bbit0      r2,0,4000c566 <controller_disable+0x2a>

	    QM_SS_I2C_ENABLE_STATUS_IC_EN) {
		/* disable controller */
		QM_SS_REG_AUX_NAND((controller + QM_SS_I2C_CON),
4000c554:	2a 22 00 00             	lr         r2,[r0]
4000c558:	a0 ba                   	bclr_s     r2,r2,0
4000c55a:	2b 22 00 00             	sr         r2,[r0]
				   QM_SS_I2C_CON_ENABLE);

		/* wait until controller is disabled */
		while ((__builtin_arc_lr(controller + QM_SS_I2C_ENABLE_STATUS) &
4000c55e:	2a 20 40 00             	lr         r0,[r1]
4000c562:	ff 08 1f 80             	bbit1      r0,0,4000c55e <controller_disable+0x22>

			QM_SS_I2C_ENABLE_STATUS_IC_EN))
			;
	}
}
4000c566:	e0 7f                   	j_s.d      [blink]
4000c568:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c56c <qm_ss_i2c_isr_handler>:

static void controller_enable(const qm_ss_i2c_t i2c);
static void controller_disable(const qm_ss_i2c_t i2c);

static void qm_ss_i2c_isr_handler(const qm_ss_i2c_t i2c)
{
4000c56c:	f1 c0                   	push_s     blink
4000c56e:	f6 08 af fd             	bl.d       40007660 <__st_r13_to_r20>

4000c572:	a8 c1                   	sub_s      sp,sp,32
	uint32_t controller = i2c_base[i2c], data_cmd = 0,
4000c574:	d2 68                   	asl_s      r14,r0,2
4000c576:	30 26 8d 1f 00 40 8c db 	ld         r13,[r14,0x4000db8c]

static void controller_enable(const qm_ss_i2c_t i2c);
static void controller_disable(const qm_ss_i2c_t i2c);

static void qm_ss_i2c_isr_handler(const qm_ss_i2c_t i2c)
{
4000c57e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c582:	9b 43                   	mov_s      fp,sp
4000c584:	08 47                   	mov_s      r15,r0
	QM_ASSERT(!(__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
		    QM_SS_I2C_INTR_STAT_RX_UNDER));
	QM_ASSERT(!(__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
		    QM_SS_I2C_INTR_STAT_RX_OVER));

	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
4000c586:	40 25 91 11             	add        r17,r13,6
4000c58a:	2a 20 40 04             	lr         r0,[r17]
4000c58e:	47 08 b6 01             	bbit0.t.d  r0,6,4000c5d2 <qm_ss_i2c_isr_handler+0x66>

4000c592:	40 25 c2 13             	add        r2,r13,15
		QM_ASSERT(
		    !(__builtin_arc_lr(controller + QM_SS_I2C_TX_ABRT_SOURCE) &
		      QM_SS_I2C_TX_ABRT_SBYTE_NORSTRT));

		status =
		    (__builtin_arc_lr(controller + QM_SS_I2C_TX_ABRT_SOURCE) &
4000c596:	2a 22 80 00             	lr         r2,[r2]
		     QM_SS_I2C_TX_ABRT_SOURCE_ALL_MASK);

		/* clear intr */
		__builtin_arc_sr(QM_SS_I2C_INTR_CLR_TX_ABRT,
4000c59a:	1a 4d                   	add_s      r0,r13,10
4000c59c:	2b 26 00 70 00 00 40 00 	sr         64,[r0]
				 controller + QM_SS_I2C_INTR_CLR);

		/* mask interrupts */
		__builtin_arc_sr(QM_SS_I2C_INTR_MASK_ALL,
4000c5a4:	07 6d                   	add_s      r0,r13,7
4000c5a6:	2b 26 00 70 00 00 00 00 	sr         0,[r0]
				 controller + QM_SS_I2C_INTR_MASK);

		rc = (status & QM_I2C_TX_ABRT_USER_ABRT) ? -ECANCELED : -EIO;

		if (i2c_transfer[i2c].callback) {
4000c5ae:	5a 27 00 17             	mpy        r0,r15,28
4000c5b2:	c3 70 00 a8 94 0e       	add_s      r0,r0,0xa8000e94
4000c5b8:	85 80                   	ld_s       r12,[r0,20]

		/* mask interrupts */
		__builtin_arc_sr(QM_SS_I2C_INTR_MASK_ALL,
				 controller + QM_SS_I2C_INTR_MASK);

		rc = (status & QM_I2C_TX_ABRT_USER_ABRT) ? -ECANCELED : -EIO;
4000c5ba:	f0 ba                   	btst_s     r2,16
4000c5bc:	8a 21 3d 0d             	mov        r1,-140
4000c5c0:	ca 21 81 0f ff ff fb ff 	mov.z      r1,-5

		if (i2c_transfer[i2c].callback) {
4000c5c8:	05 ec                   	breq_s     r12,0,4000c5d2 <qm_ss_i2c_isr_handler+0x66>

			i2c_transfer[i2c].callback(
4000c5ca:	06 80                   	ld_s       r0,[r0,24]
4000c5cc:	d0 ba                   	bmsk_s     r2,r2,16
4000c5ce:	60 7c                   	jl_s.d     [r12]
4000c5d0:	6c 70                   	mov_s      r3,0
			    i2c_transfer[i2c].callback_data, rc, status, 0);
		}
	}

	/* RX read from buffer */
	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
4000c5d2:	2a 20 40 04             	lr         r0,[r17]
4000c5d6:	bf 08 be 00             	bbit0.d    r0,2,4000c692 <qm_ss_i2c_isr_handler+0x126>

4000c5da:	5a 27 10 17             	mpy        r16,r15,28
		while (i2c_read_buffer_remaining[i2c] &&
		       (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR))) {
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
					 controller + QM_SS_I2C_DATA_CMD);
			/* IC_DATA_CMD[7:0] contains received data */
			i2c_transfer[i2c].rx[i2c_read_pos[i2c]] =
4000c5de:	00 20 90 2f 00 a8 94 0e 	add        r16,r16,0xa8000e94

	/* RX read from buffer */
	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
	     QM_SS_I2C_INTR_STAT_RX_FULL)) {

		while (i2c_read_buffer_remaining[i2c] &&
4000c5e6:	00 26 92 1f 00 a8 8c 0e 	add        r18,r14,0xa8000e8c

				if (i2c_transfer[i2c].stop) {
					controller_disable(i2c);
				}

				if (i2c_transfer[i2c].callback) {
4000c5ee:	12 44                   	mov_s      r20,r16
		while (i2c_read_buffer_remaining[i2c] &&
		       (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR))) {
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
					 controller + QM_SS_I2C_DATA_CMD);
			/* IC_DATA_CMD[7:0] contains received data */
			i2c_transfer[i2c].rx[i2c_read_pos[i2c]] =
4000c5f0:	00 26 93 1f 00 a8 cc 0e 	add        r19,r14,0xa8000ecc
	/* RX read from buffer */
	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
	     QM_SS_I2C_INTR_STAT_RX_FULL)) {

		while (i2c_read_buffer_remaining[i2c] &&
		       (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR))) {
4000c5f8:	40 25 43 13             	add        r3,r13,13
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
4000c5fc:	01 6d                   	add_s      r0,r13,1

	/* RX read from buffer */
	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
	     QM_SS_I2C_INTR_STAT_RX_FULL)) {

		while (i2c_read_buffer_remaining[i2c] &&
4000c5fe:	00 12 01 20             	ld         r1,[r18,0]
4000c602:	96 e9                   	brne_s     r1,0,4000c62c <qm_ss_i2c_isr_handler+0xc0>

					    i2c_transfer[i2c].callback_data, 0,
					    QM_I2C_IDLE, i2c_read_pos[i2c]);
				}
			}
		}
		if (i2c_read_buffer_remaining[i2c] > 0 &&
4000c604:	30 26 81 1f 00 a8 8c 0e 	ld         r1,[r14,0xa8000e8c]
4000c60c:	29 69                   	sub_s      r1,r1,1
4000c60e:	87 09 7d 01             	brhs.d     r1,5,4000c692 <qm_ss_i2c_isr_handler+0x126>

4000c612:	18 4d                   	add_s      r0,r13,8
		    i2c_read_buffer_remaining[i2c] < (RX_TL + 1)) {
			/* Adjust the RX threshold so the next 'RX_FULL'
			 * interrupt is generated when all the remaining
			 * data are received.
			 */
			QM_SS_REG_AUX_NAND((controller + QM_SS_I2C_TL),
4000c614:	2a 22 00 00             	lr         r2,[r0]
4000c618:	6c 22 c2 01             	bmskn      r2,r2,7
4000c61c:	2b 22 00 00             	sr         r2,[r0]
					   QM_SS_I2C_TL_RX_TL_MASK);
			QM_SS_REG_AUX_OR((controller + QM_SS_I2C_TL),
4000c620:	2a 22 00 00             	lr         r2,[r0]
4000c624:	45 79                   	or_s       r1,r1,r2
4000c626:	2b 21 00 00             	sr         r1,[r0]
4000c62a:	35 f0                   	b_s        4000c692 <qm_ss_i2c_isr_handler+0x126>

	/* RX read from buffer */
	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
	     QM_SS_I2C_INTR_STAT_RX_FULL)) {

		while (i2c_read_buffer_remaining[i2c] &&
		       (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR))) {
4000c62c:	2a 21 c0 00             	lr         r1,[r3]

	/* RX read from buffer */
	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
	     QM_SS_I2C_INTR_STAT_RX_FULL)) {

		while (i2c_read_buffer_remaining[i2c] &&
4000c630:	6a e9                   	breq_s     r1,0,4000c604 <qm_ss_i2c_isr_handler+0x98>

		       (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR))) {
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
4000c632:	2b 26 00 70 00 80 00 00 	sr         0x80000000,[r0]
					 controller + QM_SS_I2C_DATA_CMD);
			/* IC_DATA_CMD[7:0] contains received data */
			i2c_transfer[i2c].rx[i2c_read_pos[i2c]] =
4000c63a:	16 42                   	ld_s       r2,[r16,8]
4000c63c:	00 13 01 20             	ld         r1,[r19,0]
4000c640:	59 61                   	add_s      r1,r1,r2
			    __builtin_arc_lr(controller + QM_SS_I2C_DATA_CMD);
4000c642:	2a 22 00 00             	lr         r2,[r0]
		while (i2c_read_buffer_remaining[i2c] &&
		       (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR))) {
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
					 controller + QM_SS_I2C_DATA_CMD);
			/* IC_DATA_CMD[7:0] contains received data */
			i2c_transfer[i2c].rx[i2c_read_pos[i2c]] =
4000c646:	40 a9                   	stb_s      r2,[r1,0]
			    __builtin_arc_lr(controller + QM_SS_I2C_DATA_CMD);
			i2c_read_buffer_remaining[i2c]--;
4000c648:	00 12 01 20             	ld         r1,[r18,0]
			i2c_read_pos[i2c]++;
4000c64c:	00 13 02 20             	ld         r2,[r19,0]
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
					 controller + QM_SS_I2C_DATA_CMD);
			/* IC_DATA_CMD[7:0] contains received data */
			i2c_transfer[i2c].rx[i2c_read_pos[i2c]] =
			    __builtin_arc_lr(controller + QM_SS_I2C_DATA_CMD);
			i2c_read_buffer_remaining[i2c]--;
4000c650:	29 69                   	sub_s      r1,r1,1
			i2c_read_pos[i2c]++;
4000c652:	44 71                   	add_s      r2,r2,1
			__builtin_arc_sr(QM_SS_I2C_DATA_CMD_POP,
					 controller + QM_SS_I2C_DATA_CMD);
			/* IC_DATA_CMD[7:0] contains received data */
			i2c_transfer[i2c].rx[i2c_read_pos[i2c]] =
			    __builtin_arc_lr(controller + QM_SS_I2C_DATA_CMD);
			i2c_read_buffer_remaining[i2c]--;
4000c654:	00 1a 40 20             	st         r1,[r18]
			i2c_read_pos[i2c]++;
4000c658:	00 1b 80 20             	st         r2,[r19]

			if (i2c_read_buffer_remaining[i2c] == 0) {
4000c65c:	d1 e9                   	brne_s     r1,0,4000c5fe <qm_ss_i2c_isr_handler+0x92>

				/* mask rx full interrupt if transfer
				 * complete
				 */
				QM_SS_REG_AUX_NAND(
4000c65e:	07 6d                   	add_s      r0,r13,7
4000c660:	2a 21 00 00             	lr         r1,[r0]
4000c664:	a2 b9                   	bclr_s     r1,r1,2
4000c666:	2b 21 00 00             	sr         r1,[r0]
				    (controller + QM_SS_I2C_INTR_MASK),
				    QM_SS_I2C_INTR_MASK_RX_FULL);

				if (i2c_transfer[i2c].stop) {
4000c66a:	10 10 80 20             	ldb        r0,[r16,16]
4000c66e:	0b 78                   	tst_s      r0,r0
					controller_disable(i2c);
4000c670:	cc 0e e2 ff             	blnz.d     4000c53c <controller_disable>

4000c674:	ca 20 c2 03             	mov.nz     r0,r15
				}

				if (i2c_transfer[i2c].callback) {
4000c678:	14 14 0c 20             	ld         r12,[r20,20]
4000c67c:	7d 0c 10 90             	breq       r12,0,4000c5f8 <qm_ss_i2c_isr_handler+0x8c>

					i2c_transfer[i2c].callback(
4000c680:	16 44                   	ld_s       r0,[r16,24]
4000c682:	30 26 83 1f 00 a8 cc 0e 	ld         r3,[r14,0xa8000ecc]
4000c68a:	2c 70                   	mov_s      r1,0
4000c68c:	60 7c                   	jl_s.d     [r12]
4000c68e:	4c 70                   	mov_s      r2,0
4000c690:	b0 f1                   	b_s        4000c5f0 <qm_ss_i2c_isr_handler+0x84>

		/* RX_FULL INTR is autocleared when the buffer
		 * levels goes below the threshold
		 */
	}

	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
4000c692:	2a 21 40 24             	lr         r17,[r17]
4000c696:	51 21 00 a1             	btst       r17,4
4000c69a:	24 01 21 00             	bz.d       4000c7bc <qm_ss_i2c_isr_handler+0x250>

4000c69e:	1b 4d                   	add_s      r0,r13,11
	     QM_SS_I2C_INTR_STAT_TX_EMPTY)) {

		if ((__builtin_arc_lr(controller + QM_SS_I2C_STATUS) &
4000c6a0:	2a 20 00 00             	lr         r0,[r0]
4000c6a4:	57 08 be 00             	bbit0.d    r0,2,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

4000c6a8:	5a 27 11 17             	mpy        r17,r15,28
		     QM_SS_I2C_STATUS_TFE) &&
		    (i2c_transfer[i2c].tx != NULL) &&
4000c6ac:	00 21 90 2f 00 a8 94 0e 	add        r16,r17,0xa8000e94

	if ((__builtin_arc_lr(controller + QM_SS_I2C_INTR_STAT) &
	     QM_SS_I2C_INTR_STAT_TX_EMPTY)) {

		if ((__builtin_arc_lr(controller + QM_SS_I2C_STATUS) &
		     QM_SS_I2C_STATUS_TFE) &&
4000c6b4:	00 10 00 20             	ld         r0,[r16,0]
4000c6b8:	21 e8                   	breq_s     r0,0,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

		    (i2c_transfer[i2c].tx != NULL) &&
4000c6ba:	0e 40                   	ld_s       r0,[r16,4]
4000c6bc:	9f e8                   	brne_s     r0,0,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

		    (i2c_transfer[i2c].tx_len == 0) &&
4000c6be:	1e 40                   	ld_s       r0,[r16,12]
4000c6c0:	9d e8                   	brne_s     r0,0,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

		    (i2c_transfer[i2c].rx_len == 0)) {

			QM_SS_REG_AUX_NAND((controller + QM_SS_I2C_INTR_MASK),
4000c6c2:	07 6d                   	add_s      r0,r13,7
4000c6c4:	2a 21 00 00             	lr         r1,[r0]
4000c6c8:	a4 b9                   	bclr_s     r1,r1,4
4000c6ca:	2b 21 00 00             	sr         r1,[r0]
					   QM_SS_I2C_INTR_MASK_TX_EMPTY);

			/* if this is not a combined
			 * transaction, disable the controller now
			 */
			if ((i2c_read_buffer_remaining[i2c] == 0) &&
4000c6ce:	30 26 80 1f 00 a8 8c 0e 	ld         r0,[r14,0xa8000e8c]
4000c6d6:	93 e8                   	brne_s     r0,0,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

4000c6d8:	10 10 80 20             	ldb        r0,[r16,16]
4000c6dc:	0f e8                   	breq_s     r0,0,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

			    i2c_transfer[i2c].stop) {
				controller_disable(i2c);
4000c6de:	62 0e ef ff             	bl.d       4000c53c <controller_disable>

4000c6e2:	e1 40                   	mov_s      r0,r15

				/* callback */
				if (i2c_transfer[i2c].callback) {
4000c6e4:	14 10 0c 20             	ld         r12,[r16,20]
4000c6e8:	09 ec                   	breq_s     r12,0,4000c6fa <qm_ss_i2c_isr_handler+0x18e>

					i2c_transfer[i2c].callback(
4000c6ea:	16 44                   	ld_s       r0,[r16,24]
4000c6ec:	30 26 83 1f 00 a8 d4 0e 	ld         r3,[r14,0xa8000ed4]
4000c6f4:	2c 70                   	mov_s      r1,0
4000c6f6:	60 7c                   	jl_s.d     [r12]
4000c6f8:	4c 70                   	mov_s      r2,0

				data_cmd |= QM_SS_I2C_DATA_CMD_STOP;
			}

			/* write data */
			__builtin_arc_sr(data_cmd,
4000c6fa:	2c 76                   	mov_s      r1,6
					QM_I2C_IDLE, i2c_write_pos[i2c]);
				}
			}
		}

		while ((count_tx) && i2c_transfer[i2c].tx_len) {
4000c6fc:	00 21 80 2f 00 a8 94 0e 	add        r0,r17,0xa8000e94
			count_tx--;

			/* write command -IC_DATA_CMD[8] = 0 */
			/* fill IC_DATA_CMD[7:0] with the data */
			data_cmd = QM_SS_I2C_DATA_CMD_PUSH |
				   i2c_transfer[i2c].tx[i2c_write_pos[i2c]];
4000c704:	c3 76 00 a8 d4 0e       	add_s      r14,r14,0xa8000ed4

				data_cmd |= QM_SS_I2C_DATA_CMD_STOP;
			}

			/* write data */
			__builtin_arc_sr(data_cmd,
4000c70a:	81 6d                   	add_s      r12,r13,1
4000c70c:	4a 24 80 71             	mov        lp_count,6
					QM_I2C_IDLE, i2c_write_pos[i2c]);
				}
			}
		}

		while ((count_tx) && i2c_transfer[i2c].tx_len) {
4000c710:	21 80                   	ld_s       r1,[r0,4]
4000c712:	1e e9                   	breq_s     r1,0,4000c74c <qm_ss_i2c_isr_handler+0x1e0>

			count_tx--;

			/* write command -IC_DATA_CMD[8] = 0 */
			/* fill IC_DATA_CMD[7:0] with the data */
			data_cmd = QM_SS_I2C_DATA_CMD_PUSH |
				   i2c_transfer[i2c].tx[i2c_write_pos[i2c]];
4000c714:	60 80                   	ld_s       r3,[r0,0]
4000c716:	40 86                   	ld_s       r2,[r14,0]
			i2c_transfer[i2c].tx_len--;

			/* if transfer is a combined transfer, only
			 * send stop at
			 * end of the transfer sequence */
			if (i2c_transfer[i2c].stop &&
4000c718:	f0 88                   	ldb_s      r15,[r0,16]
			count_tx--;

			/* write command -IC_DATA_CMD[8] = 0 */
			/* fill IC_DATA_CMD[7:0] with the data */
			data_cmd = QM_SS_I2C_DATA_CMD_PUSH |
				   i2c_transfer[i2c].tx[i2c_write_pos[i2c]];
4000c71a:	7a 62                   	add_s      r2,r2,r3
		while ((count_tx) && i2c_transfer[i2c].tx_len) {
			count_tx--;

			/* write command -IC_DATA_CMD[8] = 0 */
			/* fill IC_DATA_CMD[7:0] with the data */
			data_cmd = QM_SS_I2C_DATA_CMD_PUSH |
4000c71c:	60 8a                   	ldb_s      r3,[r2,0]
				   i2c_transfer[i2c].tx[i2c_write_pos[i2c]];
			i2c_transfer[i2c].tx_len--;
4000c71e:	29 69                   	sub_s      r1,r1,1
4000c720:	21 a0                   	st_s       r1,[r0,4]
		while ((count_tx) && i2c_transfer[i2c].tx_len) {
			count_tx--;

			/* write command -IC_DATA_CMD[8] = 0 */
			/* fill IC_DATA_CMD[7:0] with the data */
			data_cmd = QM_SS_I2C_DATA_CMD_PUSH |
4000c722:	05 23 82 0f 00 c0 00 00 	or         r2,r3,0xc0000000
			i2c_transfer[i2c].tx_len--;

			/* if transfer is a combined transfer, only
			 * send stop at
			 * end of the transfer sequence */
			if (i2c_transfer[i2c].stop &&
4000c72a:	09 ef                   	breq_s     r15,0,4000c73a <qm_ss_i2c_isr_handler+0x1ce>

4000c72c:	87 e9                   	brne_s     r1,0,4000c73a <qm_ss_i2c_isr_handler+0x1ce>

			    (i2c_transfer[i2c].tx_len == 0) &&
4000c72e:	23 80                   	ld_s       r1,[r0,12]
4000c730:	85 e9                   	brne_s     r1,0,4000c73a <qm_ss_i2c_isr_handler+0x1ce>

			    (i2c_transfer[i2c].rx_len == 0)) {

				data_cmd |= QM_SS_I2C_DATA_CMD_STOP;
4000c732:	05 23 82 0f 00 c0 00 02 	or         r2,r3,0xc0000200
			}

			/* write data */
			__builtin_arc_sr(data_cmd,
4000c73a:	2b 22 00 03             	sr         r2,[r12]
					 controller + QM_SS_I2C_DATA_CMD);
			i2c_write_pos[i2c]++;
4000c73e:	20 86                   	ld_s       r1,[r14,0]
4000c740:	24 71                   	add_s      r1,r1,1
4000c742:	20 a6                   	st_s       r1,[r14,0]
					QM_I2C_IDLE, i2c_write_pos[i2c]);
				}
			}
		}

		while ((count_tx) && i2c_transfer[i2c].tx_len) {
4000c744:	cd 0c 71 f0             	brne.d     lp_count,1,4000c710 <qm_ss_i2c_isr_handler+0x1a4>

4000c748:	42 24 7c 70             	sub        lp_count,lp_count,1
		}

		/* TX read command */
		count_tx =
		    QM_SS_I2C_FIFO_SIZE -
		    (__builtin_arc_lr(controller + QM_SS_I2C_TXFLR) +
4000c74c:	1c 4d                   	add_s      r0,r13,12
4000c74e:	2a 20 00 00             	lr         r0,[r0]
		     (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR) + 1));
4000c752:	9d 4d                   	add_s      r1,r13,13
4000c754:	2a 21 40 00             	lr         r1,[r1]
4000c758:	19 61                   	add_s      r1,r1,r0
4000c75a:	41 6d                   	add_s      r2,r13,1
4000c75c:	4e 21 3c 02             	rsub       lp_count,r1,8

		while (i2c_transfer[i2c].rx_len &&
4000c760:	00 21 80 2f 00 a8 94 0e 	add        r0,r17,0xa8000e94
4000c768:	a8 20 80 02             	lp         4000c77c <qm_ss_i2c_isr_handler+0x210>

4000c76c:	6b 26 80 70 00 40 7e c7 	sr         0x4000c77e,[0x2]
4000c774:	23 80                   	ld_s       r1,[r0,12]
4000c776:	14 e9                   	breq_s     r1,0,4000c79c <qm_ss_i2c_isr_handler+0x230>

4000c778:	61 80                   	ld_s       r3,[r0,4]
4000c77a:	92 eb                   	brne_s     r3,0,4000c79c <qm_ss_i2c_isr_handler+0x230>

		       (i2c_transfer[i2c].tx_len == 0) && count_tx) {
4000c77c:	10 f0                   	b_s        4000c79c <qm_ss_i2c_isr_handler+0x230>


			/* if transfer is a combined transfer, only
			 * send stop at
			 * end of
			 * the transfer sequence */
			if (i2c_transfer[i2c].stop &&
4000c77e:	70 88                   	ldb_s      r3,[r0,16]
		     (__builtin_arc_lr(controller + QM_SS_I2C_RXFLR) + 1));

		while (i2c_transfer[i2c].rx_len &&
		       (i2c_transfer[i2c].tx_len == 0) && count_tx) {
			count_tx--;
			i2c_transfer[i2c].rx_len--;
4000c780:	29 69                   	sub_s      r1,r1,1
4000c782:	23 a0                   	st_s       r1,[r0,12]

			/* if transfer is a combined transfer, only
			 * send stop at
			 * end of
			 * the transfer sequence */
			if (i2c_transfer[i2c].stop &&
4000c784:	07 eb                   	breq_s     r3,0,4000c792 <qm_ss_i2c_isr_handler+0x226>

4000c786:	87 e9                   	brne_s     r1,0,4000c792 <qm_ss_i2c_isr_handler+0x226>

			    (i2c_transfer[i2c].rx_len == 0) &&
			    (i2c_transfer[i2c].tx_len == 0)) {

				__builtin_arc_sr((QM_SS_I2C_DATA_CMD_CMD |
4000c788:	2b 26 80 70 00 c0 00 03 	sr         0xc0000300,[r2]
4000c790:	f2 f1                   	b_s        4000c774 <qm_ss_i2c_isr_handler+0x208>

						  QM_SS_I2C_DATA_CMD_STOP),
						 controller +
						     QM_SS_I2C_DATA_CMD);
			} else {

				__builtin_arc_sr((QM_SS_I2C_DATA_CMD_CMD |
4000c792:	2b 26 80 70 00 c0 00 01 	sr         0xc0000100,[r2]
4000c79a:	ee f1                   	b_s        4000c774 <qm_ss_i2c_isr_handler+0x208>

			}
		}

		/* generate a tx_empty interrupt when tx fifo is fully
		 * empty */
		if ((i2c_transfer[i2c].tx_len == 0) &&
4000c79c:	00 21 91 2f 00 a8 94 0e 	add        r17,r17,0xa8000e94
4000c7a4:	2e 40                   	ld_s       r0,[r17,4]
4000c7a6:	8c e8                   	brne_s     r0,0,4000c7bc <qm_ss_i2c_isr_handler+0x250>

4000c7a8:	8a e9                   	brne_s     r1,0,4000c7bc <qm_ss_i2c_isr_handler+0x250>

		    (i2c_transfer[i2c].rx_len == 0)) {
			QM_SS_REG_AUX_NAND((controller + QM_SS_I2C_TL),
4000c7aa:	08 e5                   	add_s      r13,r13,8
4000c7ac:	2a 20 40 03             	lr         r0,[r13]
4000c7b0:	04 20 80 0f 00 ff ff ff 	and        r0,r0,0xff00ffff
4000c7b8:	2b 20 40 03             	sr         r0,[r13]
					   QM_SS_I2C_TL_TX_TL_MASK);
		}
	}
}
4000c7bc:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c7c0:	20 dc                   	mov_s      r12,32
4000c7c2:	01 07 4f fd             	b          400076c0 <__ld_r13_to_r20_ret>

4000c7c6:	e0 78                   	nop_s      

4000c7c8 <controller_enable>:
	return 0;
}

static void controller_enable(const qm_ss_i2c_t i2c)
{
	uint32_t controller = i2c_base[i2c];
4000c7c8:	f0 26 00 70 00 40 8c db 	ld.as      r0,[0x4000db8c,r0]

	return 0;
}

static void controller_enable(const qm_ss_i2c_t i2c)
{
4000c7d0:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c7d4:	9b 43                   	mov_s      fp,sp
	uint32_t controller = i2c_base[i2c];
	if (!(__builtin_arc_lr(controller + QM_SS_I2C_ENABLE_STATUS) &
4000c7d6:	a9 48                   	add_s      r1,r0,17
4000c7d8:	2a 22 40 00             	lr         r2,[r1]
4000c7dc:	17 0a 1f 00             	bbit1      r2,0,4000c7f2 <controller_enable+0x2a>

	      QM_SS_I2C_ENABLE_STATUS_IC_EN)) {
		/* enable controller */
		QM_SS_REG_AUX_OR((controller + QM_SS_I2C_CON),
4000c7e0:	2a 22 00 00             	lr         r2,[r0]
4000c7e4:	80 ba                   	bset_s     r2,r2,0
4000c7e6:	2b 22 00 00             	sr         r2,[r0]
				 QM_SS_I2C_CON_ENABLE);
		/* wait until controller is enabled */
		while (
		    !(__builtin_arc_lr(controller + QM_SS_I2C_ENABLE_STATUS) &
4000c7ea:	2a 20 40 00             	lr         r0,[r1]
	      QM_SS_I2C_ENABLE_STATUS_IC_EN)) {
		/* enable controller */
		QM_SS_REG_AUX_OR((controller + QM_SS_I2C_CON),
				 QM_SS_I2C_CON_ENABLE);
		/* wait until controller is enabled */
		while (
4000c7ee:	ff 08 1e 80             	bbit0      r0,0,4000c7ea <controller_enable+0x22>

		    !(__builtin_arc_lr(controller + QM_SS_I2C_ENABLE_STATUS) &
		      QM_SS_I2C_ENABLE_STATUS_IC_EN))
			;
	}
}
4000c7f2:	e0 7f                   	j_s.d      [blink]
4000c7f4:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c7f8 <qm_ss_i2c_isr_0>:
		}
	}
}

QM_ISR_DECLARE(qm_ss_i2c_isr_0)
{
4000c7f8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c7fc:	9b 43                   	mov_s      fp,sp
	qm_ss_i2c_isr_handler(QM_SS_I2C_0);
4000c7fe:	0c 70                   	mov_s      r0,0
4000c800:	6d 05 ef ff             	b.d        4000c56c <qm_ss_i2c_isr_handler>

4000c804:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c808 <qm_ss_i2c_isr_1>:
}

QM_ISR_DECLARE(qm_ss_i2c_isr_1)
{
4000c808:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c80c:	9b 43                   	mov_s      fp,sp
	qm_ss_i2c_isr_handler(QM_SS_I2C_1);
4000c80e:	0c 71                   	mov_s      r0,1
4000c810:	5d 05 ef ff             	b.d        4000c56c <qm_ss_i2c_isr_handler>

4000c814:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000c818 <qm_ss_i2c_set_config>:
		 QM_SS_I2C_CON_SPKLEN_OFFSET));
}

int qm_ss_i2c_set_config(const qm_ss_i2c_t i2c,
			 const qm_ss_i2c_config_t *const cfg)
{
4000c818:	f1 c0                   	push_s     blink
4000c81a:	56 0e 6f fd             	bl.d       4000766c <__st_r13_to_r17>

4000c81e:	a5 c1                   	sub_s      sp,sp,20
	uint32_t controller = i2c_base[i2c], lcnt = 0, hcnt = 0, full_cnt = 0,
4000c820:	f0 26 0d 70 00 40 8c db 	ld.as      r13,[0x4000db8c,r0]
		 QM_SS_I2C_CON_SPKLEN_OFFSET));
}

int qm_ss_i2c_set_config(const qm_ss_i2c_t i2c,
			 const qm_ss_i2c_config_t *const cfg)
{
4000c828:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c82c:	9b 43                   	mov_s      fp,sp
4000c82e:	28 47                   	mov_s      r15,r1
	uint32_t controller = i2c_base[i2c], lcnt = 0, hcnt = 0, full_cnt = 0,
		 min_lcnt = 0, lcnt_diff = 0,
		 con = (__builtin_arc_lr(controller + QM_SS_I2C_CON) &
4000c830:	2a 26 40 13             	lr         r14,[r13]
			QM_SS_I2C_CON_CLK_ENA);
	QM_CHECK(i2c < QM_SS_I2C_NUM, -EINVAL);
	QM_CHECK(cfg != NULL, -EINVAL);

	/* mask all interrupts */
	__builtin_arc_sr(QM_SS_I2C_INTR_MASK_ALL,
4000c834:	27 6d                   	add_s      r1,r13,7
4000c836:	2b 26 40 70 00 00 00 00 	sr         0,[r1]
			 controller + QM_SS_I2C_INTR_MASK);

	/* disable controller */
	controller_disable(i2c);
4000c83e:	02 0d cf ff             	bl         4000c53c <controller_disable>


	/* set mode */
	con |= QM_SS_I2C_CON_RESTART_EN |
	       /* set 7/10 bit address mode */
	       (cfg->address_mode << QM_SS_I2C_CON_IC_10BITADDR_OFFSET);
4000c842:	21 87                   	ld_s       r1,[r15,4]
int qm_ss_i2c_set_config(const qm_ss_i2c_t i2c,
			 const qm_ss_i2c_config_t *const cfg)
{
	uint32_t controller = i2c_base[i2c], lcnt = 0, hcnt = 0, full_cnt = 0,
		 min_lcnt = 0, lcnt_diff = 0,
		 con = (__builtin_arc_lr(controller + QM_SS_I2C_CON) &
4000c844:	6c 26 80 17             	bmskn      r0,r14,30
	controller_disable(i2c);

	/* set mode */
	con |= QM_SS_I2C_CON_RESTART_EN |
	       /* set 7/10 bit address mode */
	       (cfg->address_mode << QM_SS_I2C_CON_IC_10BITADDR_OFFSET);
4000c848:	35 69                   	asl_s      r1,r1,5

	/* disable controller */
	controller_disable(i2c);

	/* set mode */
	con |= QM_SS_I2C_CON_RESTART_EN |
4000c84a:	25 78                   	or_s       r0,r0,r1
	 *    speed at 50% duty cycle
	 * 2. adjust the hi/lo count to ensure that minimum hi/lo
	 *    timings are guaranteed as per spec.
	 */

	switch (cfg->speed) {
4000c84c:	20 87                   	ld_s       r1,[r15,0]
4000c84e:	4d 09 50 00             	breq       r1,1,4000c898 <qm_ss_i2c_set_config+0x80>

4000c852:	b3 09 91 00             	brne       r1,2,4000c902 <qm_ss_i2c_set_config+0xea>

		lcnt = get_lo_cnt(QM_I2C_SS_50_DC_NS);
		hcnt = get_hi_cnt(i2c, QM_I2C_SS_50_DC_NS);
		break;

	case QM_SS_I2C_SPEED_FAST:
		con |= QM_SS_I2C_CON_SPEED_FS |
4000c856:	05 20 80 0f 80 00 90 00 	or         r0,r0,0x00800090
		       SPK_LEN_FS << QM_SS_I2C_CON_SPKLEN_OFFSET;

		__builtin_arc_sr(con, controller + QM_SS_I2C_CON);
4000c85e:	2b 20 40 03             	sr         r0,[r13]
	qm_ss_i2c_isr_handler(QM_SS_I2C_1);
}

static uint32_t get_lo_cnt(uint32_t lo_time_ns)
{
	return (((clk_sys_get_ticks_per_us() * lo_time_ns) / 1000) - 1);
4000c862:	ea 0a cf ff             	bl         4000c348 <clk_sys_get_ticks_per_us>

4000c866:	9a 20 14 05             	mpy        r0,r0,0x514
4000c86a:	1e 0d 6f fd             	bl.d       40007584 <__udivsi3>

4000c86e:	8a 21 0f 0a             	mov        r1,0x3e8
4000c872:	da 0a ef ff             	bl.d       4000c348 <clk_sys_get_ticks_per_us>

4000c876:	42 20 50 00             	sub        r16,r0,1
4000c87a:	9a 20 93 08             	mpy        r0,r0,0x4e2
4000c87e:	0a 0d 6f fd             	bl.d       40007584 <__udivsi3>

4000c882:	8a 21 0f 0a             	mov        r1,0x3e8

static uint32_t get_hi_cnt(qm_ss_i2c_t i2c, uint32_t hi_time_ns)
{
	uint32_t controller = i2c_base[i2c];

	return (((clk_sys_get_ticks_per_us() * hi_time_ns) / 1000) - 7 -
4000c886:	c6 0a ef ff             	bl.d       4000c348 <clk_sys_get_ticks_per_us>

4000c88a:	42 20 4e 00             	sub        r14,r0,1
		((__builtin_arc_lr(controller + QM_SS_I2C_CON) &
4000c88e:	2a 21 40 23             	lr         r17,[r13]

static uint32_t get_hi_cnt(qm_ss_i2c_t i2c, uint32_t hi_time_ns)
{
	uint32_t controller = i2c_base[i2c];

	return (((clk_sys_get_ticks_per_us() * hi_time_ns) / 1000) - 7 -
4000c892:	9a 20 93 08             	mpy        r0,r0,0x4e2
4000c896:	28 f0                   	b_s        4000c8e4 <qm_ss_i2c_set_config+0xcc>

	 */

	switch (cfg->speed) {
	case QM_SS_I2C_SPEED_STD:

		con |= QM_SS_I2C_CON_SPEED_SS |
4000c898:	05 20 80 0f 40 00 88 00 	or         r0,r0,0x00400088
		       SPK_LEN_SS << QM_SS_I2C_CON_SPKLEN_OFFSET;

		__builtin_arc_sr(con, controller + QM_SS_I2C_CON);
4000c8a0:	2b 20 40 03             	sr         r0,[r13]
	qm_ss_i2c_isr_handler(QM_SS_I2C_1);
}

static uint32_t get_lo_cnt(uint32_t lo_time_ns)
{
	return (((clk_sys_get_ticks_per_us() * lo_time_ns) / 1000) - 1);
4000c8a4:	a6 0a cf ff             	bl         4000c348 <clk_sys_get_ticks_per_us>

4000c8a8:	1a 20 80 0f 00 00 5c 12 	mpy        r0,r0,0x125c
4000c8b0:	d6 0c 6f fd             	bl.d       40007584 <__udivsi3>

4000c8b4:	8a 21 0f 0a             	mov        r1,0x3e8
4000c8b8:	92 0a ef ff             	bl.d       4000c348 <clk_sys_get_ticks_per_us>

4000c8bc:	42 20 50 00             	sub        r16,r0,1
4000c8c0:	1a 20 80 0f 00 00 88 13 	mpy        r0,r0,0x1388
4000c8c8:	be 0c 6f fd             	bl.d       40007584 <__udivsi3>

4000c8cc:	8a 21 0f 0a             	mov        r1,0x3e8

static uint32_t get_hi_cnt(qm_ss_i2c_t i2c, uint32_t hi_time_ns)
{
	uint32_t controller = i2c_base[i2c];

	return (((clk_sys_get_ticks_per_us() * hi_time_ns) / 1000) - 7 -
4000c8d0:	7a 0a ef ff             	bl.d       4000c348 <clk_sys_get_ticks_per_us>

4000c8d4:	42 20 4e 00             	sub        r14,r0,1
		((__builtin_arc_lr(controller + QM_SS_I2C_CON) &
4000c8d8:	2a 21 40 23             	lr         r17,[r13]

static uint32_t get_hi_cnt(qm_ss_i2c_t i2c, uint32_t hi_time_ns)
{
	uint32_t controller = i2c_base[i2c];

	return (((clk_sys_get_ticks_per_us() * hi_time_ns) / 1000) - 7 -
4000c8dc:	1a 20 80 0f 00 00 88 13 	mpy        r0,r0,0x1388
4000c8e4:	a2 0c 6f fd             	bl.d       40007584 <__udivsi3>

4000c8e8:	8a 21 0f 0a             	mov        r1,0x3e8
		((__builtin_arc_lr(controller + QM_SS_I2C_CON) &
4000c8ec:	04 21 91 2f c0 3f 00 00 	and        r17,r17,0x3fc00000

static uint32_t get_hi_cnt(qm_ss_i2c_t i2c, uint32_t hi_time_ns)
{
	uint32_t controller = i2c_base[i2c];

	return (((clk_sys_get_ticks_per_us() * hi_time_ns) / 1000) - 7 -
4000c8f4:	42 20 c0 01             	sub        r0,r0,7
		((__builtin_arc_lr(controller + QM_SS_I2C_CON) &
		  QM_SS_I2C_CON_SPKLEN_MASK) >>
4000c8f8:	41 29 91 25             	lsr        r17,r17,22

static uint32_t get_hi_cnt(qm_ss_i2c_t i2c, uint32_t hi_time_ns)
{
	uint32_t controller = i2c_base[i2c];

	return (((clk_sys_get_ticks_per_us() * hi_time_ns) / 1000) - 7 -
4000c8fc:	02 20 42 04             	sub        r2,r0,r17
		__builtin_arc_sr(con, controller + QM_SS_I2C_CON);

		min_lcnt = get_lo_cnt(QM_I2C_MIN_FS_NS);
		lcnt = get_lo_cnt(QM_I2C_FS_50_DC_NS);
		hcnt = get_hi_cnt(i2c, QM_I2C_FS_50_DC_NS);
		break;
4000c900:	04 f0                   	b_s        4000c908 <qm_ss_i2c_set_config+0xf0>


int qm_ss_i2c_set_config(const qm_ss_i2c_t i2c,
			 const qm_ss_i2c_config_t *const cfg)
{
	uint32_t controller = i2c_base[i2c], lcnt = 0, hcnt = 0, full_cnt = 0,
		 min_lcnt = 0, lcnt_diff = 0,
4000c902:	0e 70                   	mov_s      r16,0
}

int qm_ss_i2c_set_config(const qm_ss_i2c_t i2c,
			 const qm_ss_i2c_config_t *const cfg)
{
	uint32_t controller = i2c_base[i2c], lcnt = 0, hcnt = 0, full_cnt = 0,
4000c904:	4c 70                   	mov_s      r2,0
4000c906:	cd 70                   	mov_s      r14,0
		lcnt = get_lo_cnt(QM_I2C_FS_50_DC_NS);
		hcnt = get_hi_cnt(i2c, QM_I2C_FS_50_DC_NS);
		break;
	}

	if (hcnt > QM_SS_I2C_IC_HCNT_MAX || hcnt < QM_SS_I2C_IC_HCNT_MIN) {
4000c908:	42 22 80 01             	sub        r0,r2,6
4000c90c:	3f 0e 04 70 00 00 ef ff 	brlo       0xffef,r0,4000c94a <qm_ss_i2c_set_config+0x132>

		return -EINVAL;
	}

	if (lcnt > QM_SS_I2C_IC_LCNT_MAX || lcnt < QM_SS_I2C_IC_LCNT_MIN) {
4000c914:	42 26 00 12             	sub        r0,r14,8
4000c918:	33 0e 04 70 00 00 ed ff 	brlo       0xffed,r0,4000c94a <qm_ss_i2c_set_config+0x132>

	}

	full_cnt = (lcnt & 0xFFFF) |
		   (hcnt & 0xFFFF) << QM_SS_I2C_SS_FS_SCL_CNT_HCNT_OFFSET;

	if (QM_SS_I2C_SPEED_STD == cfg->speed) {
4000c920:	00 87                   	ld_s       r0,[r15,0]
	if (lcnt > QM_SS_I2C_IC_LCNT_MAX || lcnt < QM_SS_I2C_IC_LCNT_MIN) {
		return -EINVAL;
	}

	/* Increment minimum low count to account for rounding down */
	min_lcnt++;
4000c922:	06 71                   	add_s      r16,r16,1
	if (lcnt < min_lcnt) {
4000c924:	12 76                   	cmp_s      r14,r16
		lcnt_diff = (min_lcnt - lcnt);
4000c926:	ce 26 05 14             	rsub.c     r14,r14,r16
		lcnt += (lcnt_diff);
		hcnt -= (lcnt_diff);
4000c92a:	c2 22 85 03             	sub.c      r2,r2,r14
4000c92e:	ca 26 05 14             	mov.c      r14,r16
	}

	full_cnt = (lcnt & 0xFFFF) |
		   (hcnt & 0xFFFF) << QM_SS_I2C_SS_FS_SCL_CNT_HCNT_OFFSET;
4000c932:	10 ba                   	asl_s      r2,r2,16

	if (QM_SS_I2C_SPEED_STD == cfg->speed) {
4000c934:	14 71                   	cmp_s      r0,1
		lcnt_diff = (min_lcnt - lcnt);
		lcnt += (lcnt_diff);
		hcnt -= (lcnt_diff);
	}

	full_cnt = (lcnt & 0xFFFF) |
4000c936:	cf be                   	bmsk_s     r14,r14,15
		   (hcnt & 0xFFFF) << QM_SS_I2C_SS_FS_SCL_CNT_HCNT_OFFSET;

	if (QM_SS_I2C_SPEED_STD == cfg->speed) {
		__builtin_arc_sr(full_cnt, controller + QM_SS_I2C_SS_SCL_CNT);
4000c938:	c0 25 a1 10             	add.z      r13,r13,2
		lcnt_diff = (min_lcnt - lcnt);
		lcnt += (lcnt_diff);
		hcnt -= (lcnt_diff);
	}

	full_cnt = (lcnt & 0xFFFF) |
4000c93c:	c5 7a                   	or_s       r2,r2,r14

	if (QM_SS_I2C_SPEED_STD == cfg->speed) {
		__builtin_arc_sr(full_cnt, controller + QM_SS_I2C_SS_SCL_CNT);

	} else {
		__builtin_arc_sr(full_cnt, controller + QM_SS_I2C_FS_SCL_CNT);
4000c93e:	c0 25 22 11             	add.nz     r13,r13,4
4000c942:	2b 22 40 03             	sr         r2,[r13]
	}

	return 0;
4000c946:	0c 70                   	mov_s      r0,0
4000c948:	03 f0                   	b_s        4000c94e <qm_ss_i2c_set_config+0x136>

		hcnt = get_hi_cnt(i2c, QM_I2C_FS_50_DC_NS);
		break;
	}

	if (hcnt > QM_SS_I2C_IC_HCNT_MAX || hcnt < QM_SS_I2C_IC_HCNT_MIN) {
		return -EINVAL;
4000c94a:	8a 20 bf 0a             	mov        r0,-22
	} else {
		__builtin_arc_sr(full_cnt, controller + QM_SS_I2C_FS_SCL_CNT);
	}

	return 0;
}
4000c94e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c952:	14 dc                   	mov_s      r12,20
4000c954:	79 05 4f fd             	b          400076cc <__ld_r13_to_r17_ret>


4000c958 <qm_ss_i2c_get_status>:
}

int qm_ss_i2c_get_status(const qm_ss_i2c_t i2c,
			 qm_ss_i2c_status_t *const status)
{
	uint32_t controller = i2c_base[i2c];
4000c958:	f0 26 00 70 00 40 8c db 	ld.as      r0,[0x4000db8c,r0]
	return 0;
}

int qm_ss_i2c_get_status(const qm_ss_i2c_t i2c,
			 qm_ss_i2c_status_t *const status)
{
4000c960:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	uint32_t controller = i2c_base[i2c];
	QM_CHECK(status != NULL, -EINVAL);

	*status = 0;
4000c964:	4c 70                   	mov_s      r2,0
	return 0;
}

int qm_ss_i2c_get_status(const qm_ss_i2c_t i2c,
			 qm_ss_i2c_status_t *const status)
{
4000c966:	9b 43                   	mov_s      fp,sp
	uint32_t controller = i2c_base[i2c];
	QM_CHECK(status != NULL, -EINVAL);

	*status = 0;
4000c968:	40 a1                   	st_s       r2,[r1,0]

	/* check if slave or master are active */
	if (__builtin_arc_lr(controller + QM_SS_I2C_STATUS) &
4000c96a:	40 20 c2 02             	add        r2,r0,11
4000c96e:	2a 22 80 00             	lr         r2,[r2]
4000c972:	4b 22 40 88             	tst        r2,33
4000c976:	06 f2                   	beq_s      4000c980 <qm_ss_i2c_get_status+0x28>

	    QM_SS_I2C_STATUS_BUSY_MASK) {
		*status |= QM_I2C_BUSY;
4000c978:	c3 42 02 00 00 00       	mov_s      r2,0x00020000
4000c97e:	40 a1                   	st_s       r2,[r1,0]
	}

	/* check for abort status */
	*status |= (__builtin_arc_lr(controller + QM_SS_I2C_TX_ABRT_SOURCE) &
4000c980:	40 81                   	ld_s       r2,[r1,0]
4000c982:	0f e0                   	add_s      r0,r0,15
4000c984:	2a 20 00 00             	lr         r0,[r0]
4000c988:	d0 b8                   	bmsk_s     r0,r0,16
4000c98a:	05 7a                   	or_s       r2,r2,r0
		    QM_SS_I2C_TX_ABRT_SOURCE_ALL_MASK);

	return 0;
}
4000c98c:	0c 70                   	mov_s      r0,0
	    QM_SS_I2C_STATUS_BUSY_MASK) {
		*status |= QM_I2C_BUSY;
	}

	/* check for abort status */
	*status |= (__builtin_arc_lr(controller + QM_SS_I2C_TX_ABRT_SOURCE) &
4000c98e:	40 a1                   	st_s       r2,[r1,0]
		    QM_SS_I2C_TX_ABRT_SOURCE_ALL_MASK);

	return 0;
}
4000c990:	e0 7f                   	j_s.d      [blink]
4000c992:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000c996:	e0 78                   	nop_s      

4000c998 <qm_ss_i2c_master_irq_transfer>:
}

int qm_ss_i2c_master_irq_transfer(const qm_ss_i2c_t i2c,
				  const qm_ss_i2c_transfer_t *const xfer,
				  const uint16_t slave_addr)
{
4000c998:	f1 c0                   	push_s     blink
4000c99a:	a3 c1                   	sub_s      sp,sp,12
4000c99c:	da 0c 6f fd             	bl.d       40007674 <__st_r13_to_r15>

4000c9a0:	72 68                   	asl_s      r3,r0,2
	uint32_t controller = i2c_base[i2c],
4000c9a2:	30 23 8d 0f 00 40 8c db 	ld         r13,[r3,0x4000db8c]
}

int qm_ss_i2c_master_irq_transfer(const qm_ss_i2c_t i2c,
				  const qm_ss_i2c_transfer_t *const xfer,
				  const uint16_t slave_addr)
{
4000c9aa:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000c9ae:	9b 43                   	mov_s      fp,sp
4000c9b0:	08 46                   	mov_s      r14,r0
4000c9b2:	28 47                   	mov_s      r15,r1
4000c9b4:	50 7a                   	exth_s     r2,r2
	uint32_t controller = i2c_base[i2c],
		 con = __builtin_arc_lr(controller + QM_SS_I2C_CON);
4000c9b6:	2a 20 40 03             	lr         r0,[r13]
	QM_CHECK(i2c < QM_SS_I2C_NUM, -EINVAL);
	QM_CHECK(NULL != xfer, -EINVAL);

	/* write slave address to TAR */
	con &= ~QM_SS_I2C_CON_TAR_SAR_MASK;
4000c9ba:	04 20 80 0f f8 ff ff 01 	and        r0,r0,0xfff801ff
	con |= (slave_addr & QM_SS_I2C_CON_TAR_SAR_10_BIT_MASK)
4000c9c2:	4f 7a                   	exth_s     r2,r2
	       << QM_SS_I2C_CON_TAR_SAR_OFFSET;
4000c9c4:	09 ba                   	asl_s      r2,r2,9
	QM_CHECK(i2c < QM_SS_I2C_NUM, -EINVAL);
	QM_CHECK(NULL != xfer, -EINVAL);

	/* write slave address to TAR */
	con &= ~QM_SS_I2C_CON_TAR_SAR_MASK;
	con |= (slave_addr & QM_SS_I2C_CON_TAR_SAR_10_BIT_MASK)
4000c9c6:	45 78                   	or_s       r0,r0,r2
	       << QM_SS_I2C_CON_TAR_SAR_OFFSET;
	__builtin_arc_sr(con, controller + QM_SS_I2C_CON);
4000c9c8:	2b 20 40 03             	sr         r0,[r13]

	i2c_write_pos[i2c] = 0;
4000c9cc:	0c 70                   	mov_s      r0,0
4000c9ce:	00 23 82 0f 00 a8 d4 0e 	add        r2,r3,0xa8000ed4
4000c9d6:	00 a2                   	st_s       r0,[r2,0]
	i2c_read_pos[i2c] = 0;
4000c9d8:	00 23 82 0f 00 a8 cc 0e 	add        r2,r3,0xa8000ecc
4000c9e0:	00 a2                   	st_s       r0,[r2,0]
	i2c_read_buffer_remaining[i2c] = xfer->rx_len;
4000c9e2:	03 81                   	ld_s       r0,[r1,12]
4000c9e4:	c3 73 00 a8 8c 0e       	add_s      r3,r3,0xa8000e8c
4000c9ea:	00 a3                   	st_s       r0,[r3,0]
	memcpy(&i2c_transfer[i2c], xfer, sizeof(i2c_transfer[i2c]));
4000c9ec:	5a 26 00 17             	mpy        r0,r14,28
4000c9f0:	c3 70 00 a8 94 0e       	add_s      r0,r0,0xa8000e94
4000c9f6:	f2 08 2f fa             	bl.d       40000ae4 <memcpy>

4000c9fa:	1c da                   	mov_s      r2,28

	/* set threshold */
	if (xfer->rx_len > 0 && xfer->rx_len < (RX_TL + 1)) {
4000c9fc:	23 87                   	ld_s       r1,[r15,12]
4000c9fe:	29 69                   	sub_s      r1,r1,1
4000ca00:	0f 09 7d 01             	brhs.d     r1,5,4000ca0e <qm_ss_i2c_master_irq_transfer+0x76>

4000ca04:	18 4d                   	add_s      r0,r13,8
		/* If 'rx_len' is less than the default threshold, we have to
		 * change the threshold value so the 'RX FULL' interrupt is
		 * generated once all data from the transfer is received.
		 */
		__builtin_arc_sr(
4000ca06:	91 b9                   	bset_s     r1,r1,17
4000ca08:	2b 21 00 00             	sr         r1,[r0]
4000ca0c:	05 f0                   	b_s        4000ca16 <qm_ss_i2c_master_irq_transfer+0x7e>

		    ((TX_TL << QM_SS_I2C_TL_TX_TL_OFFSET) | (xfer->rx_len - 1)),
		    controller + QM_SS_I2C_TL);
	} else {
		__builtin_arc_sr(((TX_TL << QM_SS_I2C_TL_TX_TL_OFFSET) | RX_TL),
4000ca0e:	2b 26 00 70 02 00 05 00 	sr         0x00020005,[r0]
				 controller + QM_SS_I2C_TL);
	}

	/* mask interrupts */
	__builtin_arc_sr(QM_SS_I2C_INTR_MASK_ALL,
4000ca16:	07 e5                   	add_s      r13,r13,7
4000ca18:	2b 26 40 73 00 00 00 00 	sr         0,[r13]
			 controller + QM_SS_I2C_INTR_MASK);

	/* enable controller */
	controller_enable(i2c);
4000ca20:	aa 0d ef ff             	bl.d       4000c7c8 <controller_enable>

4000ca24:	c1 40                   	mov_s      r0,r14

	/* unmask interrupts */
	__builtin_arc_sr(
4000ca26:	2b 26 40 73 00 00 5f 00 	sr         95,[r13]
	     QM_SS_I2C_INTR_MASK_TX_OVER | QM_SS_I2C_INTR_MASK_RX_FULL |
	     QM_SS_I2C_INTR_MASK_RX_OVER | QM_SS_I2C_INTR_MASK_RX_UNDER),
	    controller + QM_SS_I2C_INTR_MASK);

	return 0;
}
4000ca2e:	0c 70                   	mov_s      r0,0
4000ca30:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ca34:	0c dc                   	mov_s      r12,12
4000ca36:	a1 04 4f fd             	b          400076d4 <__ld_r13_to_r15_ret>

4000ca3a:	e0 78                   	nop_s      

4000ca3c <mraa_init>:
mraa_board_t* plat = NULL;
struct _gpio _internalgpios[4];

mraa_result_t
mraa_init()
{
4000ca3c:	f1 c0                   	push_s     blink
4000ca3e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
#if defined(CONFIG_BOARD_ARDUINO_101)
    plat = mraa_intel_arduino_101();
#elif defined(CONFIG_BOARD_ARDUINO_101_SSS)
    plat = mraa_intel_arduino_101_sss();
4000ca42:	0e 0d 20 00             	bl.d       4000cf4c <mraa_intel_arduino_101_sss>

4000ca46:	9b 43                   	mov_s      fp,sp
4000ca48:	00 1e 00 70 00 a8 dc 0e 	st         r0,[0xa8000edc]
#elif defined(CONFIG_BOARD_QUARK_D2000_CRB)
    plat = mraa_intel_d2k_crb();
#endif
    printf("mraa_board_t = %d bytes\n", sizeof(mraa_board_t));
4000ca50:	c3 40 00 40 94 db       	mov_s      r0,0x4000db94
4000ca56:	da 09 2f fa             	bl.d       40000c2c <printf>

4000ca5a:	8a 21 cc 07             	mov        r1,0x31f
    return plat != NULL ? MRAA_SUCCESS : MRAA_ERROR_NO_RESOURCES;
4000ca5e:	00 16 01 70 00 a8 dc 0e 	ld         r1,[0xa8000edc]
4000ca66:	0c 70                   	mov_s      r0,0
4000ca68:	2b 79                   	tst_s      r1,r1
4000ca6a:	ca 20 a1 01             	mov.z      r0,6
}
4000ca6e:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ca72:	d1 c0                   	pop_s      blink
4000ca74:	e0 7e                   	j_s        [blink]
4000ca76:	e0 78                   	nop_s      

4000ca78 <mraa_setup_mux_mapped>:
    return false;
}

mraa_result_t
mraa_setup_mux_mapped(mraa_pin_t meta)
{
4000ca78:	f1 c0                   	push_s     blink
4000ca7a:	f6 0b 6f fd             	bl.d       4000766c <__st_r13_to_r17>

4000ca7e:	a5 c1                   	sub_s      sp,sp,20
4000ca80:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ca84:	9b 43                   	mov_s      fp,sp
4000ca86:	f4 1b 00 b0             	st         r0,[fp,-12]
4000ca8a:	f8 1b 40 b0             	st         r1,[fp,-8]
4000ca8e:	fc 1b 80 b0             	st         r2,[fp,-4]
4000ca92:	a3 c1                   	sub_s      sp,sp,12
4000ca94:	42 23 d0 31             	sub        r16,fp,7
    int mi;
    mraa_result_t ret;
    mraa_gpio_context mux_i = NULL;
    int last_pin = -1;
4000ca98:	ed 77                   	mov_s      r15,-1
mraa_result_t
mraa_setup_mux_mapped(mraa_pin_t meta)
{
    int mi;
    mraa_result_t ret;
    mraa_gpio_context mux_i = NULL;
4000ca9a:	ad 70                   	mov_s      r13,0
    int last_pin = -1;

    for (mi = 0; mi < meta.mux_total; mi++) {
4000ca9c:	2e 70                   	mov_s      r17,0
4000ca9e:	f6 13 80 b0             	ldb        r0,[fp,-10]
4000caa2:	0c 21 00 a0             	cmp        r17,r0
4000caa6:	4a 01 0a 00             	bge        4000cbee <mraa_setup_mux_mapped+0x176>


        switch(meta.mux[mi].pincmd) {
4000caaa:	fe 10 80 a0             	ldb        r0,[r16,-2]
4000caae:	14 75                   	cmp_s      r0,5
4000cab0:	38 01 0d 00             	bhi        4000cbe8 <mraa_setup_mux_mapped+0x170>

4000cab4:	32 26 00 70 00 40 ca ca 	ldb        r0,[0x4000caca,r0]
4000cabc:	ff 10 8e a0             	ldb        r14,[r16,-1]
4000cac0:	c3 70 00 40 ca ca       	add_s      r0,r0,0x4000caca
                    return MRAA_ERROR_INVALID_RESOURCE;
                }
                break;

            case PINCMD_SET_MODE:
                if(meta.mux[mi].pin != last_pin) {
4000cac6:	f1 76                   	cmp_s      r14,r15
    mraa_gpio_context mux_i = NULL;
    int last_pin = -1;

    for (mi = 0; mi < meta.mux_total; mi++) {

        switch(meta.mux[mi].pincmd) {
4000cac8:	00 78                   	j_s        [r0]
4000caca:	06 34 56 82             	fsmsub.f   r22,r4,r9
4000cace:	a8 de                   	mov_s      r14,168
            case PINCMD_UNDEFINED:              // used for backward compatibility
                if(meta.mux[mi].pin != last_pin) {
4000cad0:	12 f2                   	beq_s      4000caf4 <mraa_setup_mux_mapped+0x7c>

                    if (mux_i != NULL) {
4000cad2:	09 ed                   	breq_s     r13,0,4000cae2 <mraa_setup_mux_mapped+0x6a>

                        mraa_gpio_owner(mux_i, 0);
4000cad4:	a1 40                   	mov_s      r0,r13
4000cad6:	42 0c 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cada:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cadc:	62 0c 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cae0:	a1 40                   	mov_s      r0,r13
                    }
                    mux_i = mraa_gpio_init_raw(meta.mux[mi].pin);
4000cae2:	b2 09 20 00             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cae6:	c1 40                   	mov_s      r0,r14
                    if (mux_i == NULL) return MRAA_ERROR_INVALID_HANDLE;
4000cae8:	0a 25 00 90             	mov.f      r13,r0
4000caec:	03 f4                   	bne_s      4000caf2 <mraa_setup_mux_mapped+0x7a>

4000caee:	0c 75                   	mov_s      r0,5
4000caf0:	88 f0                   	b_s        4000cc00 <mraa_setup_mux_mapped+0x188>

4000caf2:	c9 47                   	mov_s      r15,r14
                    last_pin = meta.mux[mi].pin;
                }
                // this function will sometimes fail, however this is not critical as
                // long as the write succeeds - Test case galileo gen2 pin2
                mraa_gpio_dir(mux_i, MRAA_GPIO_OUT);
4000caf4:	a1 40                   	mov_s      r0,r13
4000caf6:	de 0a 20 00             	bl.d       4000cdd0 <mraa_gpio_dir>

4000cafa:	2c 70                   	mov_s      r1,0
4000cafc:	50 f0                   	b_s        4000cb9c <mraa_setup_mux_mapped+0x124>

                    return MRAA_ERROR_INVALID_RESOURCE;
                }
                break;

            case PINCMD_SET_VALUE:
                if(meta.mux[mi].pin != last_pin) {
4000cafe:	50 f2                   	beq_s      4000cb9c <mraa_setup_mux_mapped+0x124>

                    if (mux_i != NULL) {
4000cb00:	08 ed                   	breq_s     r13,0,4000cb10 <mraa_setup_mux_mapped+0x98>

                        mraa_gpio_owner(mux_i, 0);
4000cb02:	a1 40                   	mov_s      r0,r13
4000cb04:	12 0c 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cb08:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cb0a:	36 0c 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cb0e:	a1 40                   	mov_s      r0,r13
                    }
                    mux_i = mraa_gpio_init_raw(meta.mux[mi].pin);
4000cb10:	82 09 20 00             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cb14:	c1 40                   	mov_s      r0,r14
                    if (mux_i == NULL) return MRAA_ERROR_INVALID_HANDLE;
4000cb16:	0a 25 00 90             	mov.f      r13,r0
4000cb1a:	eb f3                   	beq_s      4000caee <mraa_setup_mux_mapped+0x76>

4000cb1c:	c9 47                   	mov_s      r15,r14
4000cb1e:	40 f0                   	b_s        4000cb9c <mraa_setup_mux_mapped+0x124>

                    return MRAA_ERROR_INVALID_RESOURCE;
                }
                break;

            case PINCMD_SET_DIRECTION:
                if(meta.mux[mi].pin != last_pin) {
4000cb20:	10 f2                   	beq_s      4000cb40 <mraa_setup_mux_mapped+0xc8>

                    if (mux_i != NULL) {
4000cb22:	09 ed                   	breq_s     r13,0,4000cb32 <mraa_setup_mux_mapped+0xba>

                        mraa_gpio_owner(mux_i, 0);
4000cb24:	a1 40                   	mov_s      r0,r13
4000cb26:	f2 0b 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cb2a:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cb2c:	12 0c 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cb30:	a1 40                   	mov_s      r0,r13
                    }
                    mux_i = mraa_gpio_init_raw(meta.mux[mi].pin);
4000cb32:	62 09 20 00             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cb36:	c1 40                   	mov_s      r0,r14
                    if (mux_i == NULL) return MRAA_ERROR_INVALID_HANDLE;
4000cb38:	0a 25 00 90             	mov.f      r13,r0
4000cb3c:	d9 f3                   	beq_s      4000caee <mraa_setup_mux_mapped+0x76>

4000cb3e:	c9 47                   	mov_s      r15,r14
                    last_pin = meta.mux[mi].pin;
                }

                ret = mraa_gpio_dir(mux_i, meta.mux[mi].value);
4000cb40:	00 10 81 20             	ldb        r1,[r16,0]
4000cb44:	8e 0a 20 00             	bl.d       4000cdd0 <mraa_gpio_dir>

4000cb48:	a1 40                   	mov_s      r0,r13
4000cb4a:	45 f0                   	b_s        4000cbd2 <mraa_setup_mux_mapped+0x15a>

                    return MRAA_ERROR_INVALID_RESOURCE;
                }
                break;

            case PINCMD_SET_IN_VALUE:
                if(meta.mux[mi].pin != last_pin) {
4000cb4c:	10 f2                   	beq_s      4000cb6c <mraa_setup_mux_mapped+0xf4>

                    if (mux_i != NULL) {
4000cb4e:	09 ed                   	breq_s     r13,0,4000cb5e <mraa_setup_mux_mapped+0xe6>

                        mraa_gpio_owner(mux_i, 0);
4000cb50:	a1 40                   	mov_s      r0,r13
4000cb52:	c6 0b 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cb56:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cb58:	e6 0b 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cb5c:	a1 40                   	mov_s      r0,r13
                    }
                    mux_i = mraa_gpio_init_raw(meta.mux[mi].pin);
4000cb5e:	36 09 20 00             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cb62:	c1 40                   	mov_s      r0,r14
                    if (mux_i == NULL) return MRAA_ERROR_INVALID_HANDLE;
4000cb64:	0a 25 00 90             	mov.f      r13,r0
4000cb68:	c3 f3                   	beq_s      4000caee <mraa_setup_mux_mapped+0x76>

4000cb6a:	c9 47                   	mov_s      r15,r14
                    last_pin = meta.mux[mi].pin;
                }

                ret = mraa_gpio_dir(mux_i, MRAA_GPIO_IN);
4000cb6c:	a1 40                   	mov_s      r0,r13
4000cb6e:	2c 71                   	mov_s      r1,1
4000cb70:	13 f0                   	b_s        4000cb96 <mraa_setup_mux_mapped+0x11e>

                    return MRAA_ERROR_INVALID_RESOURCE;
                }
                break;

            case PINCMD_SET_OUT_VALUE:
                if(meta.mux[mi].pin != last_pin) {
4000cb72:	11 f2                   	beq_s      4000cb92 <mraa_setup_mux_mapped+0x11a>

                    if (mux_i != NULL) {
4000cb74:	08 ed                   	breq_s     r13,0,4000cb84 <mraa_setup_mux_mapped+0x10c>

                        mraa_gpio_owner(mux_i, 0);
4000cb76:	a1 40                   	mov_s      r0,r13
4000cb78:	9e 0b 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cb7c:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cb7e:	c2 0b 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cb82:	a1 40                   	mov_s      r0,r13
                    }
                    mux_i = mraa_gpio_init_raw(meta.mux[mi].pin);
4000cb84:	0e 09 20 00             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cb88:	c1 40                   	mov_s      r0,r14
                    if (mux_i == NULL) return MRAA_ERROR_INVALID_HANDLE;
4000cb8a:	0a 25 00 90             	mov.f      r13,r0
4000cb8e:	b1 f3                   	beq_s      4000caee <mraa_setup_mux_mapped+0x76>

4000cb90:	c9 47                   	mov_s      r15,r14
                    last_pin = meta.mux[mi].pin;
                }

                ret = mraa_gpio_dir(mux_i, MRAA_GPIO_OUT);
4000cb92:	a1 40                   	mov_s      r0,r13
4000cb94:	2c 70                   	mov_s      r1,0
4000cb96:	3e 0a 00 00             	bl         4000cdd0 <mraa_gpio_dir>


                if(ret == MRAA_SUCCESS)
4000cb9a:	9e e8                   	brne_s     r0,0,4000cbd4 <mraa_setup_mux_mapped+0x15c>

                    ret = mraa_gpio_write(mux_i, meta.mux[mi].value);
4000cb9c:	00 10 81 20             	ldb        r1,[r16,0]
4000cba0:	32 0b 20 00             	bl.d       4000ced0 <mraa_gpio_write>

4000cba4:	a1 40                   	mov_s      r0,r13
4000cba6:	17 f0                   	b_s        4000cbd2 <mraa_setup_mux_mapped+0x15a>

                    return MRAA_ERROR_INVALID_RESOURCE;
                }
                break;

            case PINCMD_SET_MODE:
                if(meta.mux[mi].pin != last_pin) {
4000cba8:	10 f2                   	beq_s      4000cbc8 <mraa_setup_mux_mapped+0x150>

                    if (mux_i != NULL) {
4000cbaa:	09 ed                   	breq_s     r13,0,4000cbba <mraa_setup_mux_mapped+0x142>

                        mraa_gpio_owner(mux_i, 0);
4000cbac:	a1 40                   	mov_s      r0,r13
4000cbae:	6a 0b 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cbb2:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cbb4:	8a 0b 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cbb8:	a1 40                   	mov_s      r0,r13
                    }
                    mux_i = mraa_gpio_init_raw(meta.mux[mi].pin);
4000cbba:	da 08 20 00             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cbbe:	c1 40                   	mov_s      r0,r14
                    if (mux_i == NULL) return MRAA_ERROR_INVALID_HANDLE;
4000cbc0:	0a 25 00 90             	mov.f      r13,r0
4000cbc4:	95 f3                   	beq_s      4000caee <mraa_setup_mux_mapped+0x76>

4000cbc6:	c9 47                   	mov_s      r15,r14
                    last_pin = meta.mux[mi].pin;
                }

                ret = mraa_gpio_mode(mux_i, meta.mux[mi].value);
4000cbc8:	00 10 81 20             	ldb        r1,[r16,0]
4000cbcc:	62 0b 20 00             	bl.d       4000cf2c <mraa_gpio_mode>

4000cbd0:	a1 40                   	mov_s      r0,r13

                if(ret != MRAA_SUCCESS) {
4000cbd2:	0c e8                   	breq_s     r0,0,4000cbe8 <mraa_setup_mux_mapped+0x170>

                    if (mux_i != NULL) {
4000cbd4:	08 ed                   	breq_s     r13,0,4000cbe4 <mraa_setup_mux_mapped+0x16c>

                        mraa_gpio_owner(mux_i, 0);
4000cbd6:	a1 40                   	mov_s      r0,r13
4000cbd8:	3e 0b 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cbdc:	2c 70                   	mov_s      r1,0
                        mraa_gpio_close(mux_i);
4000cbde:	62 0b 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cbe2:	a1 40                   	mov_s      r0,r13
                    }
                    return MRAA_ERROR_INVALID_RESOURCE;
4000cbe4:	07 d8                   	mov_s      r0,7
4000cbe6:	0e f0                   	b_s        4000cc00 <mraa_setup_mux_mapped+0x188>

    int mi;
    mraa_result_t ret;
    mraa_gpio_context mux_i = NULL;
    int last_pin = -1;

    for (mi = 0; mi < meta.mux_total; mi++) {
4000cbe8:	26 71                   	add_s      r17,r17,1
4000cbea:	06 73                   	add_s      r16,r16,3
4000cbec:	59 f1                   	b_s        4000ca9e <mraa_setup_mux_mapped+0x26>

                // syslog(LOG_NOTICE, "mraa_setup_mux_mapped: wrong command %d on pin %d with value %d", meta.mux[mi].pincmd, meta.mux[mi].pin, meta.mux[mi].value);
                break;
        }
    }

    if (mux_i != NULL) {
4000cbee:	09 ed                   	breq_s     r13,0,4000cbfe <mraa_setup_mux_mapped+0x186>

        mraa_gpio_owner(mux_i, 0);
4000cbf0:	a1 40                   	mov_s      r0,r13
4000cbf2:	26 0b 20 00             	bl.d       4000cf14 <mraa_gpio_owner>

4000cbf6:	2c 70                   	mov_s      r1,0
        mraa_gpio_close(mux_i);
4000cbf8:	46 0b 20 00             	bl.d       4000cf3c <mraa_gpio_close>

4000cbfc:	a1 40                   	mov_s      r0,r13
    }
    return MRAA_SUCCESS;
4000cbfe:	0c 70                   	mov_s      r0,0
}
4000cc00:	7b 44                   	mov_s      sp,fp
4000cc02:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cc06:	14 dc                   	mov_s      r12,20
4000cc08:	c5 02 4f fd             	b          400076cc <__ld_r13_to_r17_ret>


4000cc0c <mraa_set_pininfo>:

// Internal functions
mraa_result_t
mraa_set_pininfo(mraa_board_t* board, int mraa_pin, int zephyr_pin, char* name, mraa_pincapabilities_t caps)
{
    mraa_pininfo_t* pin_info = &board->pins[mraa_pin];
4000cc0c:	5a 21 81 09             	mpy        r1,r1,38


// Internal functions
mraa_result_t
mraa_set_pininfo(mraa_board_t* board, int mraa_pin, int zephyr_pin, char* name, mraa_pincapabilities_t caps)
{
4000cc10:	fc 1c c8 b6             	st.a       fp,[sp,-4]
    mraa_pininfo_t* pin_info = &board->pins[mraa_pin];
4000cc14:	24 e1                   	add_s      r1,r1,36
4000cc16:	38 60                   	add_s      r0,r0,r1
    pin_info->gpio.pinmap = zephyr_pin;
    pin_info->gpio.mux_total = 0;
4000cc18:	2c 70                   	mov_s      r1,0
    pin_info->name = name;
4000cc1a:	63 a8                   	stb_s      r3,[r0,3]

// Internal functions
mraa_result_t
mraa_set_pininfo(mraa_board_t* board, int mraa_pin, int zephyr_pin, char* name, mraa_pincapabilities_t caps)
{
    mraa_pininfo_t* pin_info = &board->pins[mraa_pin];
4000cc1c:	83 68                   	add_s      r12,r0,3
    pin_info->gpio.pinmap = zephyr_pin;
4000cc1e:	48 a8                   	stb_s      r2,[r0,8]
    pin_info->gpio.mux_total = 0;
4000cc20:	2a a8                   	stb_s      r1,[r0,10]
    pin_info->name = name;
4000cc22:	41 2b 00 02             	lsr        r0,r3,8
4000cc26:	01 ac                   	stb_s      r0,[r12,1]
4000cc28:	41 2b 00 04             	lsr        r0,r3,16


// Internal functions
mraa_result_t
mraa_set_pininfo(mraa_board_t* board, int mraa_pin, int zephyr_pin, char* name, mraa_pincapabilities_t caps)
{
4000cc2c:	9b 43                   	mov_s      fp,sp
    mraa_pininfo_t* pin_info = &board->pins[mraa_pin];
    pin_info->gpio.pinmap = zephyr_pin;
    pin_info->gpio.mux_total = 0;
    pin_info->name = name;
4000cc2e:	02 ac                   	stb_s      r0,[r12,2]
4000cc30:	38 bb                   	lsr_s      r3,r3,24
    pin_info->capabilites = caps;
    return MRAA_SUCCESS;
}
4000cc32:	0c 70                   	mov_s      r0,0
mraa_set_pininfo(mraa_board_t* board, int mraa_pin, int zephyr_pin, char* name, mraa_pincapabilities_t caps)
{
    mraa_pininfo_t* pin_info = &board->pins[mraa_pin];
    pin_info->gpio.pinmap = zephyr_pin;
    pin_info->gpio.mux_total = 0;
    pin_info->name = name;
4000cc34:	63 ac                   	stb_s      r3,[r12,3]
    pin_info->capabilites = caps;
4000cc36:	04 1c 02 11             	stb        r4,[r12,4]
    return MRAA_SUCCESS;
}
4000cc3a:	e0 7f                   	j_s.d      [blink]
4000cc3c:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000cc40 <mraa_set_board_config>:


void
mraa_set_board_config(mraa_board_t* board)
{
4000cc40:	f1 c0                   	push_s     blink
4000cc42:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000cc46:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000cc4a:	08 45                   	mov_s      r13,r0
4000cc4c:	9b 43                   	mov_s      fp,sp
    memset(board, 0, sizeof(mraa_board_t));
4000cc4e:	2c 70                   	mov_s      r1,0
4000cc50:	22 0f ef f9             	bl.d       40000b70 <memset>

4000cc54:	8a 22 cc 07             	mov        r2,0x31f
    board->phy_pin_count = CONFIG_MRAA_PIN_COUNT;
4000cc58:	14 d8                   	mov_s      r0,20
    board->gpio_count = CONFIG_MRAA_GPIO_COUNT;
    board->aio_count = CONFIG_MRAA_AIO_COUNT;
    board->i2c_bus_count = CONFIG_MRAA_I2C_COUNT;
4000cc5a:	2c 71                   	mov_s      r1,1

void
mraa_set_board_config(mraa_board_t* board)
{
    memset(board, 0, sizeof(mraa_board_t));
    board->phy_pin_count = CONFIG_MRAA_PIN_COUNT;
4000cc5c:	00 ad                   	stb_s      r0,[r13,0]
    board->gpio_count = CONFIG_MRAA_GPIO_COUNT;
4000cc5e:	01 ad                   	stb_s      r0,[r13,1]
    board->aio_count = CONFIG_MRAA_AIO_COUNT;
    board->i2c_bus_count = CONFIG_MRAA_I2C_COUNT;
4000cc60:	23 ad                   	stb_s      r1,[r13,3]
mraa_set_board_config(mraa_board_t* board)
{
    memset(board, 0, sizeof(mraa_board_t));
    board->phy_pin_count = CONFIG_MRAA_PIN_COUNT;
    board->gpio_count = CONFIG_MRAA_GPIO_COUNT;
    board->aio_count = CONFIG_MRAA_AIO_COUNT;
4000cc62:	0c 70                   	mov_s      r0,0
4000cc64:	02 ad                   	stb_s      r0,[r13,2]
    board->i2c_bus_count = CONFIG_MRAA_I2C_COUNT;
    board->spi_bus_count = CONFIG_MRAA_SPI_COUNT;
4000cc66:	08 ad                   	stb_s      r0,[r13,8]
    board->uart_dev_count= CONFIG_MRAA_UART_COUNT;
4000cc68:	0d ad                   	stb_s      r0,[r13,13]
}
4000cc6a:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cc6e:	04 14 1f 30             	ld         blink,[sp,4]
4000cc72:	00 c5                   	ld_s       r13,[sp,0]
4000cc74:	e0 7f                   	j_s.d      [blink]
4000cc76:	a2 c0                   	add_s      sp,sp,8

4000cc78 <gpio_pin_configure>:
 * @param pin Pin number to configure.
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
4000cc78:	40 43                   	mov_s      r3,r2
4000cc7a:	20 42                   	mov_s      r2,r1
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
4000cc7c:	21 80                   	ld_s       r1,[r0,4]
 * @param pin Pin number to configure.
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
4000cc7e:	fc 1c c8 b6             	st.a       fp,[sp,-4]
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
4000cc82:	80 81                   	ld_s       r12,[r1,0]
 * @param pin Pin number to configure.
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
4000cc84:	9b 43                   	mov_s      fp,sp
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
4000cc86:	2c 70                   	mov_s      r1,0
4000cc88:	20 7c                   	j_s.d      [r12]
4000cc8a:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cc8e:	e0 78                   	nop_s      

4000cc90 <mraa_gpio_init_raw>:
    return dev;
}

mraa_gpio_context
mraa_gpio_init_raw(int gpiopin)
{
4000cc90:	f1 c0                   	push_s     blink
4000cc92:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000cc96:	fc 1c c8 b6             	st.a       fp,[sp,-4]
    mraa_gpio_context dev = &tmp_context;
    dev->phy_pin = gpiopin;
4000cc9a:	cb 45 00 a8 fc 10       	mov_s      r13,0xa80010fc
4000cca0:	01 ad                   	stb_s      r0,[r13,1]
    dev->zdev = device_get_binding(GPIO_DRV_NAME);
4000cca2:	c3 40 00 40 f4 d8       	mov_s      r0,0x4000d8f4
4000cca8:	be 09 6f ff             	bl.d       4000b664 <device_get_binding>

4000ccac:	9b 43                   	mov_s      fp,sp
4000ccae:	41 28 02 02             	lsr        r2,r0,8
4000ccb2:	43 ad                   	stb_s      r2,[r13,3]
4000ccb4:	41 28 02 04             	lsr        r2,r0,16
4000ccb8:	02 ad                   	stb_s      r0,[r13,2]
4000ccba:	44 ad                   	stb_s      r2,[r13,4]
4000ccbc:	41 28 02 06             	lsr        r2,r0,24
4000ccc0:	45 ad                   	stb_s      r2,[r13,5]
    if (dev->zdev == NULL)
4000ccc2:	15 e8                   	breq_s     r0,0,4000ccea <mraa_gpio_init_raw+0x5a>

        return NULL;
    int ret = gpio_pin_configure(dev->zdev, dev->phy_pin, GPIO_DIR_OUT);
4000ccc4:	21 8d                   	ldb_s      r1,[r13,1]
4000ccc6:	b6 0f ef ff             	bl.d       4000cc78 <gpio_pin_configure>

4000ccca:	4c 71                   	mov_s      r2,1
    if (ret) {
4000cccc:	0a 21 00 80             	mov.f      r1,r0
        printf("Error %d configuring %s pin %d\n", ret, GPIO_DRV_NAME, dev->phy_pin);
        return NULL;
    }
    return dev;
4000ccd0:	ca 20 41 03             	mov.z      r0,r13
    dev->phy_pin = gpiopin;
    dev->zdev = device_get_binding(GPIO_DRV_NAME);
    if (dev->zdev == NULL)
        return NULL;
    int ret = gpio_pin_configure(dev->zdev, dev->phy_pin, GPIO_DIR_OUT);
    if (ret) {
4000ccd4:	0c f2                   	beq_s      4000ccec <mraa_gpio_init_raw+0x5c>

        printf("Error %d configuring %s pin %d\n", ret, GPIO_DRV_NAME, dev->phy_pin);
4000ccd6:	c3 40 00 40 c0 db       	mov_s      r0,0x4000dbc0
4000ccdc:	c3 42 00 40 f4 d8       	mov_s      r2,0x4000d8f4
4000cce2:	4e 0f ef f9             	bl.d       40000c2c <printf>

4000cce6:	01 15 c3 10             	ldb.x      r3,[r13,1]
{
    mraa_gpio_context dev = &tmp_context;
    dev->phy_pin = gpiopin;
    dev->zdev = device_get_binding(GPIO_DRV_NAME);
    if (dev->zdev == NULL)
        return NULL;
4000ccea:	0c 70                   	mov_s      r0,0
    if (ret) {
        printf("Error %d configuring %s pin %d\n", ret, GPIO_DRV_NAME, dev->phy_pin);
        return NULL;
    }
    return dev;
}
4000ccec:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ccf0:	04 14 1f 30             	ld         blink,[sp,4]
4000ccf4:	00 c5                   	ld_s       r13,[sp,0]
4000ccf6:	e0 7f                   	j_s.d      [blink]
4000ccf8:	a2 c0                   	add_s      sp,sp,8
4000ccfa:	e0 78                   	nop_s      

4000ccfc <mraa_gpio_init>:
        dev->isr(dev->isr_args);
}

mraa_gpio_context
mraa_gpio_init(int pin)
{
4000ccfc:	f1 c0                   	push_s     blink
4000ccfe:	76 09 6f fd             	bl.d       40007670 <__st_r13_to_r16>

4000cd02:	a4 c1                   	sub_s      sp,sp,16
    mraa_board_t* board = plat;
4000cd04:	00 16 0e 70 00 a8 dc 0e 	ld         r14,[0xa8000edc]
        dev->isr(dev->isr_args);
}

mraa_gpio_context
mraa_gpio_init(int pin)
{
4000cd0c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000cd10:	9b 43                   	mov_s      fp,sp
    mraa_board_t* board = plat;
    if (board == NULL) {
4000cd12:	88 ee                   	brne_s     r14,0,4000cd20 <mraa_gpio_init+0x24>

	printf("gpio: platform not initialised\n");
4000cd14:	c3 40 00 40 e0 db       	mov_s      r0,0x4000dbe0
4000cd1a:	16 0f cf f9             	bl         40000c2c <printf>

4000cd1e:	53 f0                   	b_s        4000cdc2 <mraa_gpio_init+0xc6>

4000cd20:	08 45                   	mov_s      r13,r0
        //syslog(LOG_ERR, "gpio: platform not initialised");
        return NULL;
    }

    if (pin < 0 || pin >= board->phy_pin_count) {
4000cd22:	0d 0d 12 10             	brlt       r13,0,4000cd2c <mraa_gpio_init+0x30>

4000cd26:	00 8e                   	ldb_s      r0,[r14,0]
4000cd28:	0d 0d 02 10             	brlt       r13,r0,4000cd34 <mraa_gpio_init+0x38>

	printf("gpio: pin %i beyond platform definition\n", pin);
4000cd2c:	c3 40 00 40 00 dc       	mov_s      r0,0x4000dc00
4000cd32:	0e f0                   	b_s        4000cd4c <mraa_gpio_init+0x50>

        //syslog(LOG_ERR, "gpio: pin %i beyond platform definition", pin);
        return NULL;
    }
    if (board->pins[pin].capabilites.gpio != 1) {
4000cd34:	5a 25 90 19             	mpy        r16,r13,38
4000cd38:	00 26 00 14             	add        r0,r14,r16
4000cd3c:	40 20 03 0a             	add        r3,r0,40
4000cd40:	23 8b                   	ldb_s      r1,[r3,3]
4000cd42:	15 09 5f 00             	bbit1      r1,1,4000cd54 <mraa_gpio_init+0x58>

	printf("gpio: pin %i not capable of gpio\n", pin);
4000cd46:	c3 40 00 40 2c dc       	mov_s      r0,0x4000dc2c
4000cd4c:	e2 0e ef f9             	bl.d       40000c2c <printf>

4000cd50:	a1 41                   	mov_s      r1,r13
4000cd52:	39 f0                   	b_s        4000cdc2 <mraa_gpio_init+0xc6>

            printf("error2\n");
            return NULL;
	}
    }
#endif
    if (board->pins[pin].gpio.mux_total > 0) {
4000cd54:	2e 10 80 00             	ldb        r0,[r0,46]
4000cd58:	93 e8                   	brne_s     r0,0,4000cd7e <mraa_gpio_init+0x82>

        if (mraa_setup_mux_mapped(board->pins[pin].gpio) != MRAA_SUCCESS) {
            return NULL;
        }
    }
    mraa_gpio_context dev = &_internalgpios[pin];
    mraa_gpio_context tmp = mraa_gpio_init_raw(board->pins[pin].gpio.pinmap);
4000cd5a:	02 76                   	add_s      r14,r14,r16
4000cd5c:	2c 16 80 10             	ldb        r0,[r14,44]
4000cd60:	32 0f ef ff             	bl.d       4000cc90 <mraa_gpio_init_raw>

4000cd64:	5a 25 cf 16             	mpy        r15,r13,27
    if (board->pins[pin].gpio.mux_total > 0) {
        if (mraa_setup_mux_mapped(board->pins[pin].gpio) != MRAA_SUCCESS) {
            return NULL;
        }
    }
    mraa_gpio_context dev = &_internalgpios[pin];
4000cd68:	c3 77 00 a8 e0 0e       	add_s      r15,r15,0xa8000ee0
    mraa_gpio_context tmp = mraa_gpio_init_raw(board->pins[pin].gpio.pinmap);
4000cd6e:	00 41                   	mov_s      r1,r0
    memcpy(dev, tmp, sizeof(struct _gpio));
4000cd70:	1b da                   	mov_s      r2,27
4000cd72:	76 0d ef f9             	bl.d       40000ae4 <memcpy>

4000cd76:	e1 40                   	mov_s      r0,r15
    dev->pin = pin;
    return dev;
4000cd78:	e1 40                   	mov_s      r0,r15
        }
    }
    mraa_gpio_context dev = &_internalgpios[pin];
    mraa_gpio_context tmp = mraa_gpio_init_raw(board->pins[pin].gpio.pinmap);
    memcpy(dev, tmp, sizeof(struct _gpio));
    dev->pin = pin;
4000cd7a:	a0 af                   	stb_s      r13,[r15,0]
    return dev;
4000cd7c:	24 f0                   	b_s        4000cdc4 <mraa_gpio_init+0xc8>

            return NULL;
	}
    }
#endif
    if (board->pins[pin].gpio.mux_total > 0) {
        if (mraa_setup_mux_mapped(board->pins[pin].gpio) != MRAA_SUCCESS) {
4000cd7e:	24 8b                   	ldb_s      r1,[r3,4]
4000cd80:	05 8b                   	ldb_s      r0,[r3,5]
4000cd82:	48 8b                   	ldb_s      r2,[r3,8]
4000cd84:	08 b8                   	asl_s      r0,r0,8
4000cd86:	25 78                   	or_s       r0,r0,r1
4000cd88:	29 8b                   	ldb_s      r1,[r3,9]
4000cd8a:	06 13 84 00             	ldb        r4,[r3,6]
4000cd8e:	ea 8b                   	ldb_s      r15,[r3,10]
4000cd90:	8d 8b                   	ldb_s      r12,[r3,13]
4000cd92:	08 b9                   	asl_s      r1,r1,8
4000cd94:	45 79                   	or_s       r1,r1,r2
4000cd96:	4c 8b                   	ldb_s      r2,[r3,12]
4000cd98:	40 2c 04 04             	asl        r4,r4,16
4000cd9c:	10 bf                   	asl_s      r15,r15,16
4000cd9e:	05 24 04 00             	or         r4,r4,r0
4000cda2:	25 7f                   	or_s       r15,r15,r1
4000cda4:	07 8b                   	ldb_s      r0,[r3,7]
4000cda6:	2b 8b                   	ldb_s      r1,[r3,11]
4000cda8:	08 bc                   	asl_s      r12,r12,8
4000cdaa:	45 7c                   	or_s       r12,r12,r2
4000cdac:	4e 8b                   	ldb_s      r2,[r3,14]
4000cdae:	18 b8                   	asl_s      r0,r0,24
4000cdb0:	18 b9                   	asl_s      r1,r1,24
4000cdb2:	10 ba                   	asl_s      r2,r2,16
4000cdb4:	05 20 00 01             	or         r0,r0,r4
4000cdb8:	e5 79                   	or_s       r1,r1,r15
4000cdba:	c2 0c ef ff             	bl.d       4000ca78 <mraa_setup_mux_mapped>

4000cdbe:	85 7a                   	or_s       r2,r2,r12
4000cdc0:	4d e8                   	breq_s     r0,0,4000cd5a <mraa_gpio_init+0x5e>

            return NULL;
4000cdc2:	0c 70                   	mov_s      r0,0
    mraa_gpio_context dev = &_internalgpios[pin];
    mraa_gpio_context tmp = mraa_gpio_init_raw(board->pins[pin].gpio.pinmap);
    memcpy(dev, tmp, sizeof(struct _gpio));
    dev->pin = pin;
    return dev;
}
4000cdc4:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cdc8:	10 dc                   	mov_s      r12,16
4000cdca:	09 01 4f fd             	b          400076d0 <__ld_r13_to_r16_ret>

4000cdce:	e0 78                   	nop_s      

4000cdd0 <mraa_gpio_dir>:
    return dev;
}

mraa_result_t
mraa_gpio_dir(mraa_gpio_context dev, mraa_gpio_dir_t dir)
{
4000cdd0:	f1 c0                   	push_s     blink
4000cdd2:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000cdd6:	41 c6                   	st_s       r14,[sp,4]
4000cdd8:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000cddc:	9b 43                   	mov_s      fp,sp
4000cdde:	28 46                   	mov_s      r14,r1
4000cde0:	a1 c1                   	sub_s      sp,sp,4
    int flags = 0;
    uint32_t value = 0;
    switch (dir) {
4000cde2:	d5 73                   	cmp_s      r14,3
        case MRAA_GPIO_OUT_LOW:
            flags = GPIO_DIR_OUT;
            value = 0;
            break;
        default:
            return MRAA_ERROR_FEATURE_NOT_IMPLEMENTED;
4000cde4:	ca 20 6d 00             	mov.hi     r0,1
mraa_result_t
mraa_gpio_dir(mraa_gpio_context dev, mraa_gpio_dir_t dir)
{
    int flags = 0;
    uint32_t value = 0;
    switch (dir) {
4000cde8:	7e 00 0d 00             	bhi        4000ce66 <mraa_gpio_dir+0x96>

4000cdec:	08 45                   	mov_s      r13,r0
4000cdee:	32 26 40 70 00 40 fe cd 	ldb        r0,[0x4000cdfe,r1]
4000cdf6:	c3 70 00 40 fe cd       	add_s      r0,r0,0x4000cdfe
4000cdfc:	00 78                   	j_s        [r0]
4000cdfe:	04 0e 08 04             	blnv       40015400 <__data_rom_start+0x73e8>


mraa_result_t
mraa_gpio_dir(mraa_gpio_context dev, mraa_gpio_dir_t dir)
{
    int flags = 0;
    uint32_t value = 0;
4000ce02:	6c 70                   	mov_s      r3,0
4000ce04:	02 f0                   	b_s        4000ce08 <mraa_gpio_dir+0x38>

        case MRAA_GPIO_IN:
            flags = GPIO_DIR_IN;
            break;
        case MRAA_GPIO_OUT_HIGH:
            flags = GPIO_DIR_OUT;
            value = 1;
4000ce06:	6c 71                   	mov_s      r3,1
            break;
        case MRAA_GPIO_IN:
            flags = GPIO_DIR_IN;
            break;
        case MRAA_GPIO_OUT_HIGH:
            flags = GPIO_DIR_OUT;
4000ce08:	4c 71                   	mov_s      r2,1
            value = 1;
            break;
4000ce0a:	04 f0                   	b_s        4000ce10 <mraa_gpio_dir+0x40>


mraa_result_t
mraa_gpio_dir(mraa_gpio_context dev, mraa_gpio_dir_t dir)
{
    int flags = 0;
    uint32_t value = 0;
4000ce0c:	6c 70                   	mov_s      r3,0
    switch (dir) {
        case MRAA_GPIO_OUT:
            flags = GPIO_DIR_OUT;
            break;
        case MRAA_GPIO_IN:
            flags = GPIO_DIR_IN;
4000ce0e:	4c 70                   	mov_s      r2,0
            value = 0;
            break;
        default:
            return MRAA_ERROR_FEATURE_NOT_IMPLEMENTED;
    }
    if (gpio_pin_configure(dev->zdev, dev->phy_pin, flags))
4000ce10:	82 8d                   	ldb_s      r12,[r13,2]
4000ce12:	03 8d                   	ldb_s      r0,[r13,3]
4000ce14:	24 8d                   	ldb_s      r1,[r13,4]
4000ce16:	08 b8                   	asl_s      r0,r0,8
4000ce18:	85 78                   	or_s       r0,r0,r12
4000ce1a:	10 b9                   	asl_s      r1,r1,16
4000ce1c:	05 79                   	or_s       r1,r1,r0
4000ce1e:	05 8d                   	ldb_s      r0,[r13,5]
4000ce20:	18 b8                   	asl_s      r0,r0,24
4000ce22:	25 78                   	or_s       r0,r0,r1
4000ce24:	21 8d                   	ldb_s      r1,[r13,1]
4000ce26:	56 0e ef ff             	bl.d       4000cc78 <gpio_pin_configure>

4000ce2a:	fc 1b c0 b0             	st         r3,[fp,-4]
4000ce2e:	fc 13 03 b0             	ld         r3,[fp,-4]
4000ce32:	04 e8                   	breq_s     r0,0,4000ce38 <mraa_gpio_dir+0x68>

        return MRAA_ERROR_UNSPECIFIED;
4000ce34:	63 d8                   	mov_s      r0,99
4000ce36:	19 f0                   	b_s        4000ce66 <mraa_gpio_dir+0x96>

    if (dir == MRAA_GPIO_OUT_HIGH || dir == MRAA_GPIO_OUT_LOW) {
4000ce38:	42 26 8e 10             	sub        r14,r14,2
4000ce3c:	d5 71                   	cmp_s      r14,1
        if (gpio_pin_write(dev->zdev, dev->phy_pin, value))
            return MRAA_ERROR_UNSPECIFIED;
    }
    return MRAA_SUCCESS;
4000ce3e:	ca 20 2d 00             	mov.hi     r0,0
        default:
            return MRAA_ERROR_FEATURE_NOT_IMPLEMENTED;
    }
    if (gpio_pin_configure(dev->zdev, dev->phy_pin, flags))
        return MRAA_ERROR_UNSPECIFIED;
    if (dir == MRAA_GPIO_OUT_HIGH || dir == MRAA_GPIO_OUT_LOW) {
4000ce42:	13 f7                   	bhi_s      4000ce66 <mraa_gpio_dir+0x96>

        if (gpio_pin_write(dev->zdev, dev->phy_pin, value))
4000ce44:	82 8d                   	ldb_s      r12,[r13,2]
4000ce46:	43 8d                   	ldb_s      r2,[r13,3]
4000ce48:	24 8d                   	ldb_s      r1,[r13,4]
4000ce4a:	05 8d                   	ldb_s      r0,[r13,5]
4000ce4c:	08 ba                   	asl_s      r2,r2,8
4000ce4e:	10 b9                   	asl_s      r1,r1,16
4000ce50:	85 7a                   	or_s       r2,r2,r12
4000ce52:	45 79                   	or_s       r1,r1,r2
4000ce54:	18 b8                   	asl_s      r0,r0,24
4000ce56:	25 78                   	or_s       r0,r0,r1
				 uint32_t value)
{
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
4000ce58:	21 80                   	ld_s       r1,[r0,4]
4000ce5a:	01 15 c2 10             	ldb.x      r2,[r13,1]
4000ce5e:	81 81                   	ld_s       r12,[r1,4]
4000ce60:	60 7c                   	jl_s.d     [r12]
4000ce62:	2c 70                   	mov_s      r1,0
4000ce64:	e8 e8                   	brne_s     r0,0,4000ce34 <mraa_gpio_dir+0x64>

            return MRAA_ERROR_UNSPECIFIED;
    }
    return MRAA_SUCCESS;
}
4000ce66:	7b 44                   	mov_s      sp,fp
4000ce68:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000ce6c:	08 dc                   	mov_s      r12,8
4000ce6e:	6d 00 4f fd             	b          400076d8 <__ld_r13_to_r14_ret>

4000ce72:	e0 78                   	nop_s      

4000ce74 <mraa_gpio_read>:
}


int
mraa_gpio_read(mraa_gpio_context dev)
{
4000ce74:	f1 c0                   	push_s     blink
4000ce76:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000ce7a:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000ce7e:	08 45                   	mov_s      r13,r0
    uint32_t value;
	printf("inside mraa %d\n", dev->phy_pin);
4000ce80:	01 15 c1 10             	ldb.x      r1,[r13,1]
}


int
mraa_gpio_read(mraa_gpio_context dev)
{
4000ce84:	9b 43                   	mov_s      fp,sp
    uint32_t value;
	printf("inside mraa %d\n", dev->phy_pin);
4000ce86:	c3 40 00 40 50 dc       	mov_s      r0,0x4000dc50
4000ce8c:	a2 0d ef f9             	bl.d       40000c2c <printf>

4000ce90:	a1 c1                   	sub_s      sp,sp,4
    if (gpio_pin_read(dev->zdev, dev->phy_pin, &value))
4000ce92:	62 8d                   	ldb_s      r3,[r13,2]
4000ce94:	43 8d                   	ldb_s      r2,[r13,3]
4000ce96:	24 8d                   	ldb_s      r1,[r13,4]
4000ce98:	05 8d                   	ldb_s      r0,[r13,5]
4000ce9a:	08 ba                   	asl_s      r2,r2,8
4000ce9c:	10 b9                   	asl_s      r1,r1,16
4000ce9e:	65 7a                   	or_s       r2,r2,r3
4000cea0:	45 79                   	or_s       r1,r1,r2
4000cea2:	18 b8                   	asl_s      r0,r0,24
4000cea4:	25 78                   	or_s       r0,r0,r1
				uint32_t *value)
{
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->read(port, GPIO_ACCESS_BY_PIN, pin, value);
4000cea6:	21 80                   	ld_s       r1,[r0,4]
4000cea8:	01 15 c2 10             	ldb.x      r2,[r13,1]
4000ceac:	82 81                   	ld_s       r12,[r1,8]
4000ceae:	42 23 03 31             	sub        r3,fp,4
4000ceb2:	60 7c                   	jl_s.d     [r12]
4000ceb4:	2c 70                   	mov_s      r1,0
4000ceb6:	85 e8                   	brne_s     r0,0,4000cebe <mraa_gpio_read+0x4a>

        return -1;
    else
        return (int)value;
4000ceb8:	fc 13 00 b0             	ld         r0,[fp,-4]
4000cebc:	02 f0                   	b_s        4000cec0 <mraa_gpio_read+0x4c>

mraa_gpio_read(mraa_gpio_context dev)
{
    uint32_t value;
	printf("inside mraa %d\n", dev->phy_pin);
    if (gpio_pin_read(dev->zdev, dev->phy_pin, &value))
        return -1;
4000cebe:	0c 77                   	mov_s      r0,-1
    else
        return (int)value;
}
4000cec0:	7b 44                   	mov_s      sp,fp
4000cec2:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cec6:	04 14 1f 30             	ld         blink,[sp,4]
4000ceca:	00 c5                   	ld_s       r13,[sp,0]
4000cecc:	e0 7f                   	j_s.d      [blink]
4000cece:	a2 c0                   	add_s      sp,sp,8

4000ced0 <mraa_gpio_write>:

mraa_result_t
mraa_gpio_write(mraa_gpio_context dev, int value)
{
4000ced0:	f1 c0                   	push_s     blink
4000ced2:	fc 1c c8 b6             	st.a       fp,[sp,-4]
     if (gpio_pin_write(dev->zdev, dev->phy_pin, (uint32_t)value))
4000ced6:	02 10 84 00             	ldb        r4,[r0,2]
        return (int)value;
}

mraa_result_t
mraa_gpio_write(mraa_gpio_context dev, int value)
{
4000ceda:	20 43                   	mov_s      r3,r1
     if (gpio_pin_write(dev->zdev, dev->phy_pin, (uint32_t)value))
4000cedc:	83 88                   	ldb_s      r12,[r0,3]
4000cede:	24 88                   	ldb_s      r1,[r0,4]
        return (int)value;
}

mraa_result_t
mraa_gpio_write(mraa_gpio_context dev, int value)
{
4000cee0:	00 42                   	mov_s      r2,r0
     if (gpio_pin_write(dev->zdev, dev->phy_pin, (uint32_t)value))
4000cee2:	05 88                   	ldb_s      r0,[r0,5]
4000cee4:	08 bc                   	asl_s      r12,r12,8
4000cee6:	10 b9                   	asl_s      r1,r1,16
4000cee8:	05 24 0c 11             	or         r12,r12,r4
4000ceec:	85 79                   	or_s       r1,r1,r12
4000ceee:	18 b8                   	asl_s      r0,r0,24
4000cef0:	25 78                   	or_s       r0,r0,r1
				 uint32_t value)
{
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
4000cef2:	21 80                   	ld_s       r1,[r0,4]
4000cef4:	01 12 c2 00             	ldb.x      r2,[r2,1]
4000cef8:	81 81                   	ld_s       r12,[r1,4]
        return (int)value;
}

mraa_result_t
mraa_gpio_write(mraa_gpio_context dev, int value)
{
4000cefa:	9b 43                   	mov_s      fp,sp
4000cefc:	60 7c                   	jl_s.d     [r12]
4000cefe:	2c 70                   	mov_s      r1,0
     if (gpio_pin_write(dev->zdev, dev->phy_pin, (uint32_t)value))
        return MRAA_ERROR_UNSPECIFIED;
4000cf00:	63 d9                   	mov_s      r1,99
4000cf02:	0b 78                   	tst_s      r0,r0
4000cf04:	ca 21 21 00             	mov.z      r1,0
     return MRAA_SUCCESS;
}
4000cf08:	20 40                   	mov_s      r0,r1
4000cf0a:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cf0e:	d1 c0                   	pop_s      blink
4000cf10:	e0 7e                   	j_s        [blink]
4000cf12:	e0 78                   	nop_s      

4000cf14 <mraa_gpio_owner>:
}


mraa_result_t
mraa_gpio_owner(mraa_gpio_context dev, mraa_boolean_t own)
{
4000cf14:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000cf18:	9b 43                   	mov_s      fp,sp
4000cf1a:	2f 79                   	exth_s     r1,r1
    if (dev == NULL) {
4000cf1c:	04 e8                   	breq_s     r0,0,4000cf24 <mraa_gpio_owner+0x10>

        return MRAA_ERROR_INVALID_RESOURCE;
    }
    dev->owner = own;
4000cf1e:	32 a8                   	stb_s      r1,[r0,18]
    return MRAA_SUCCESS;
4000cf20:	0c 70                   	mov_s      r0,0
4000cf22:	03 f0                   	b_s        4000cf26 <mraa_gpio_owner+0x12>


mraa_result_t
mraa_gpio_owner(mraa_gpio_context dev, mraa_boolean_t own)
{
    if (dev == NULL) {
        return MRAA_ERROR_INVALID_RESOURCE;
4000cf24:	07 d8                   	mov_s      r0,7
    }
    dev->owner = own;
    return MRAA_SUCCESS;
}
4000cf26:	e0 7f                   	j_s.d      [blink]
4000cf28:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000cf2c <mraa_gpio_mode>:

mraa_result_t
mraa_gpio_mode(mraa_gpio_context dev, mraa_gpio_mode_t mode)
{
4000cf2c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
    return MRAA_SUCCESS;
}
4000cf30:	0c 70                   	mov_s      r0,0
    return MRAA_SUCCESS;
}

mraa_result_t
mraa_gpio_mode(mraa_gpio_context dev, mraa_gpio_mode_t mode)
{
4000cf32:	9b 43                   	mov_s      fp,sp
    return MRAA_SUCCESS;
}
4000cf34:	e0 7f                   	j_s.d      [blink]
4000cf36:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cf3a:	e0 78                   	nop_s      

4000cf3c <mraa_gpio_close>:
    return dev->pin;
}

mraa_result_t
mraa_gpio_close(mraa_gpio_context dev)
{
4000cf3c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
    return MRAA_ERROR_FEATURE_NOT_IMPLEMENTED;
}
4000cf40:	0c 71                   	mov_s      r0,1
    return dev->pin;
}

mraa_result_t
mraa_gpio_close(mraa_gpio_context dev)
{
4000cf42:	9b 43                   	mov_s      fp,sp
    return MRAA_ERROR_FEATURE_NOT_IMPLEMENTED;
}
4000cf44:	e0 7f                   	j_s.d      [blink]
4000cf46:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000cf4a:	e0 78                   	nop_s      

4000cf4c <mraa_intel_arduino_101_sss>:
#include "mraa_internal.h"

static mraa_board_t _board;

mraa_board_t* mraa_intel_arduino_101_sss()
{
4000cf4c:	f1 c0                   	push_s     blink
4000cf4e:	26 0f 2f fd             	bl.d       40007670 <__st_r13_to_r16>

4000cf52:	a4 c1                   	sub_s      sp,sp,16
4000cf54:	fc 1c c8 b6             	st.a       fp,[sp,-4]
    mraa_board_t* b = &_board;
    mraa_set_board_config(b);
4000cf58:	cb 45 00 a8 17 11       	mov_s      r13,0xa8001117
#include "mraa_internal.h"

static mraa_board_t _board;

mraa_board_t* mraa_intel_arduino_101_sss()
{
4000cf5e:	9b 43                   	mov_s      fp,sp
    mraa_board_t* b = &_board;
    mraa_set_board_config(b);
4000cf60:	a1 40                   	mov_s      r0,r13
4000cf62:	e2 0c ef ff             	bl.d       4000cc40 <mraa_set_board_config>

4000cf66:	a4 c1                   	sub_s      sp,sp,16
    b->platform_name = "Arduino 101 SSS";
4000cf68:	c3 40 00 40 88 dc       	mov_s      r0,0x4000dc88
4000cf6e:	41 28 01 02             	lsr        r1,r0,8
    b->platform_type = MRAA_INTEL_ARDUINO_101_SSS;
    mraa_set_pininfo(b,  0,  0, "IO0",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cf72:	00 16 8e 70 00 40 48 d3 	ldb        r14,[0x4000d348]

mraa_board_t* mraa_intel_arduino_101_sss()
{
    mraa_board_t* b = &_board;
    mraa_set_board_config(b);
    b->platform_name = "Arduino 101 SSS";
4000cf7a:	1f ad                   	stb_s      r0,[r13,31]
4000cf7c:	20 1d 42 10             	stb        r1,[r13,32]
4000cf80:	41 28 01 04             	lsr        r1,r0,16
4000cf84:	38 b8                   	lsr_s      r0,r0,24
4000cf86:	22 1d 02 10             	stb        r0,[r13,34]
    b->platform_type = MRAA_INTEL_ARDUINO_101_SSS;
4000cf8a:	8a 20 7f 02             	mov        r0,-55

mraa_board_t* mraa_intel_arduino_101_sss()
{
    mraa_board_t* b = &_board;
    mraa_set_board_config(b);
    b->platform_name = "Arduino 101 SSS";
4000cf8e:	ed 70                   	mov_s      r15,0
    b->platform_type = MRAA_INTEL_ARDUINO_101_SSS;
    mraa_set_pininfo(b,  0,  0, "IO0",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cf90:	c1 44                   	mov_s      r4,r14

mraa_board_t* mraa_intel_arduino_101_sss()
{
    mraa_board_t* b = &_board;
    mraa_set_board_config(b);
    b->platform_name = "Arduino 101 SSS";
4000cf92:	21 1d 42 10             	stb        r1,[r13,33]
    b->platform_type = MRAA_INTEL_ARDUINO_101_SSS;
4000cf96:	1b ad                   	stb_s      r0,[r13,27]
    mraa_set_pininfo(b,  0,  0, "IO0",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cf98:	2c 70                   	mov_s      r1,0
4000cf9a:	4c 70                   	mov_s      r2,0
4000cf9c:	c3 43 00 40 98 dc       	mov_s      r3,0x4000dc98
mraa_board_t* mraa_intel_arduino_101_sss()
{
    mraa_board_t* b = &_board;
    mraa_set_board_config(b);
    b->platform_name = "Arduino 101 SSS";
    b->platform_type = MRAA_INTEL_ARDUINO_101_SSS;
4000cfa2:	fc ad                   	stb_s      r15,[r13,28]
4000cfa4:	fd ad                   	stb_s      r15,[r13,29]
4000cfa6:	fe ad                   	stb_s      r15,[r13,30]
    mraa_set_pininfo(b,  0,  0, "IO0",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cfa8:	66 0c ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000cfac:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  1,  3, "IO1",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cfae:	c1 44                   	mov_s      r4,r14
4000cfb0:	2c 71                   	mov_s      r1,1
4000cfb2:	4c 73                   	mov_s      r2,3
4000cfb4:	c3 43 00 40 9c dc       	mov_s      r3,0x4000dc9c
4000cfba:	56 0c ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000cfbe:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  2, 18, "IO2",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cfc0:	c1 44                   	mov_s      r4,r14
4000cfc2:	2c 72                   	mov_s      r1,2
4000cfc4:	12 da                   	mov_s      r2,18
4000cfc6:	c3 43 00 40 a0 dc       	mov_s      r3,0x4000dca0
4000cfcc:	42 0c ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000cfd0:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  3, 17, "IO3",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cfd2:	c1 44                   	mov_s      r4,r14
4000cfd4:	2c 73                   	mov_s      r1,3
4000cfd6:	11 da                   	mov_s      r2,17
4000cfd8:	c3 43 00 40 a4 dc       	mov_s      r3,0x4000dca4
4000cfde:	32 0c ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000cfe2:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  4, 19, "IO4",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cfe4:	c1 44                   	mov_s      r4,r14
4000cfe6:	2c 74                   	mov_s      r1,4
4000cfe8:	13 da                   	mov_s      r2,19
4000cfea:	c3 43 00 40 a8 dc       	mov_s      r3,0x4000dca8
4000cff0:	1e 0c ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000cff4:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  5, 15, "IO5",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000cff6:	c1 44                   	mov_s      r4,r14
4000cff8:	2c 75                   	mov_s      r1,5
4000cffa:	0f da                   	mov_s      r2,15
4000cffc:	c3 43 00 40 ac dc       	mov_s      r3,0x4000dcac
4000d002:	0e 0c ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d006:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  6,  0, "IO6",  (mraa_pincapabilities_t){ 0, 0, 0, 0, 0, 0, 0, 0 });
4000d008:	2c 76                   	mov_s      r1,6
4000d00a:	4c 70                   	mov_s      r2,0
4000d00c:	c3 43 00 40 b0 dc       	mov_s      r3,0x4000dcb0
4000d012:	8c 70                   	mov_s      r4,0
4000d014:	fa 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d018:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  7, 20, "IO7",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d01a:	c1 44                   	mov_s      r4,r14
4000d01c:	07 d9                   	mov_s      r1,7
4000d01e:	14 da                   	mov_s      r2,20
4000d020:	c3 43 00 40 b4 dc       	mov_s      r3,0x4000dcb4
4000d026:	ea 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d02a:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  8, 16, "IO8",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d02c:	c1 44                   	mov_s      r4,r14
4000d02e:	08 d9                   	mov_s      r1,8
4000d030:	10 da                   	mov_s      r2,16
4000d032:	c3 43 00 40 b8 dc       	mov_s      r3,0x4000dcb8
4000d038:	d6 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d03c:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b,  9, 16, "IO9",  (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d03e:	c1 44                   	mov_s      r4,r14
4000d040:	09 d9                   	mov_s      r1,9
4000d042:	10 da                   	mov_s      r2,16
4000d044:	c3 43 00 40 bc dc       	mov_s      r3,0x4000dcbc
4000d04a:	c6 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d04e:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 10,  0, "IO10", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d050:	c1 44                   	mov_s      r4,r14
4000d052:	0a d9                   	mov_s      r1,10
4000d054:	4c 70                   	mov_s      r2,0
4000d056:	c3 43 00 40 c0 dc       	mov_s      r3,0x4000dcc0
4000d05c:	b2 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d060:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 11,  3, "IO11", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d062:	c1 44                   	mov_s      r4,r14
4000d064:	0b d9                   	mov_s      r1,11
4000d066:	4c 73                   	mov_s      r2,3
4000d068:	c3 43 00 40 c8 dc       	mov_s      r3,0x4000dcc8
4000d06e:	a2 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d072:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 12,  1, "IO12", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d074:	c1 44                   	mov_s      r4,r14
4000d076:	0c d9                   	mov_s      r1,12
4000d078:	4c 71                   	mov_s      r2,1
4000d07a:	c3 43 00 40 d0 dc       	mov_s      r3,0x4000dcd0
4000d080:	8e 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d084:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 13,  2, "IO13", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d086:	c1 44                   	mov_s      r4,r14
4000d088:	0d d9                   	mov_s      r1,13
4000d08a:	4c 72                   	mov_s      r2,2
4000d08c:	c3 43 00 40 d8 dc       	mov_s      r3,0x4000dcd8
4000d092:	7e 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d096:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 14, 10, "A0  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d098:	c1 44                   	mov_s      r4,r14
4000d09a:	0e d9                   	mov_s      r1,14
4000d09c:	0a da                   	mov_s      r2,10
4000d09e:	c3 43 00 40 e0 dc       	mov_s      r3,0x4000dce0
4000d0a4:	6a 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d0a8:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 15, 11, "A1  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d0aa:	c1 44                   	mov_s      r4,r14
4000d0ac:	0f d9                   	mov_s      r1,15
4000d0ae:	0b da                   	mov_s      r2,11
4000d0b0:	c3 43 00 40 e8 dc       	mov_s      r3,0x4000dce8
4000d0b6:	5a 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d0ba:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 16, 12, "A2  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d0bc:	c1 44                   	mov_s      r4,r14
4000d0be:	10 d9                   	mov_s      r1,16
4000d0c0:	0c da                   	mov_s      r2,12
4000d0c2:	c3 43 00 40 f0 dc       	mov_s      r3,0x4000dcf0
4000d0c8:	46 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d0cc:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 17, 13, "A3  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
4000d0ce:	c1 44                   	mov_s      r4,r14
4000d0d0:	11 d9                   	mov_s      r1,17
4000d0d2:	0d da                   	mov_s      r2,13
4000d0d4:	c3 43 00 40 f8 dc       	mov_s      r3,0x4000dcf8
4000d0da:	36 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d0de:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 18, 14, "A4  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 1, 0, 0 });
4000d0e0:	c3 40 00 40 48 d3       	mov_s      r0,0x4000d348
4000d0e6:	c1 88                   	ldb_s      r14,[r0,1]
4000d0e8:	12 d9                   	mov_s      r1,18
4000d0ea:	c1 44                   	mov_s      r4,r14
4000d0ec:	0e da                   	mov_s      r2,14
4000d0ee:	c3 43 00 40 00 dd       	mov_s      r3,0x4000dd00
4000d0f4:	1a 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d0f8:	a1 40                   	mov_s      r0,r13
    mraa_set_pininfo(b, 19,  9, "A5  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 1, 0, 0 });
4000d0fa:	c1 44                   	mov_s      r4,r14
4000d0fc:	c3 43 00 40 08 dd       	mov_s      r3,0x4000dd08
4000d102:	13 d9                   	mov_s      r1,19
4000d104:	09 da                   	mov_s      r2,9
4000d106:	0a 0b ef ff             	bl.d       4000cc0c <mraa_set_pininfo>

4000d10a:	a1 40                   	mov_s      r0,r13
    b->def_i2c_bus = 0;
    b->i2c_bus[0].bus_id = 0;
    b->pins[18].i2c.mux_total = 0;
4000d10c:	c3 40 00 a8 17 13       	mov_s      r0,0xa8001317
4000d112:	f0 18 c2 03             	stb        r15,[r0,240]
    b->pins[19].i2c.mux_total = 0;
4000d116:	c3 40 00 a8 17 15       	mov_s      r0,0xa8001517
4000d11c:	16 18 c2 83             	stb        r15,[r0,-234]
    b->i2c_bus[0].sda = 18;
4000d120:	12 d8                   	mov_s      r0,18
    mraa_set_pininfo(b, 16, 12, "A2  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
    mraa_set_pininfo(b, 17, 13, "A3  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
    mraa_set_pininfo(b, 18, 14, "A4  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 1, 0, 0 });
    mraa_set_pininfo(b, 19,  9, "A5  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 1, 0, 0 });
    b->def_i2c_bus = 0;
    b->i2c_bus[0].bus_id = 0;
4000d122:	e4 ad                   	stb_s      r15,[r13,4]
    b->pins[18].i2c.mux_total = 0;
    b->pins[19].i2c.mux_total = 0;
    b->i2c_bus[0].sda = 18;
4000d124:	06 ad                   	stb_s      r0,[r13,6]
    b->i2c_bus[0].scl = 19;
4000d126:	13 d8                   	mov_s      r0,19
4000d128:	05 ad                   	stb_s      r0,[r13,5]

    int i2c_raw_gpios[] = { 9, 14, 24, 25 };
4000d12a:	c3 41 00 40 4c d3       	mov_s      r1,0x4000d34c
4000d130:	10 da                   	mov_s      r2,16
    mraa_set_pininfo(b, 15, 11, "A1  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
    mraa_set_pininfo(b, 16, 12, "A2  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
    mraa_set_pininfo(b, 17, 13, "A3  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 0, 0, 0 });
    mraa_set_pininfo(b, 18, 14, "A4  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 1, 0, 0 });
    mraa_set_pininfo(b, 19,  9, "A5  ", (mraa_pincapabilities_t){ 1, 1, 0, 0, 0, 1, 0, 0 });
    b->def_i2c_bus = 0;
4000d132:	e7 ad                   	stb_s      r15,[r13,7]
    b->pins[18].i2c.mux_total = 0;
    b->pins[19].i2c.mux_total = 0;
    b->i2c_bus[0].sda = 18;
    b->i2c_bus[0].scl = 19;

    int i2c_raw_gpios[] = { 9, 14, 24, 25 };
4000d134:	b2 09 ef f9             	bl.d       40000ae4 <memcpy>

4000d138:	42 23 00 34             	sub        r0,fp,16
    struct device* zdev = device_get_binding("GPIO_0");
4000d13c:	c3 40 00 40 f4 d8       	mov_s      r0,0x4000d8f4
4000d142:	26 0d 0f ff             	bl         4000b664 <device_get_binding>

    if (zdev != NULL) {
4000d146:	0a 26 00 90             	mov.f      r14,r0
4000d14a:	1c f2                   	beq_s      4000d180 <mraa_intel_arduino_101_sss+0x234>

4000d14c:	42 23 0d 35             	sub        r13,fp,20
4000d150:	42 23 10 31             	sub        r16,fp,4
				     int flags)
{
	struct gpio_driver_api *api;

	api = (struct gpio_driver_api *) port->driver_api;
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
4000d154:	01 86                   	ld_s       r0,[r14,4]
        for (int i = 0; i<4; ++i) {
            int ret = gpio_pin_configure(zdev, i2c_raw_gpios[i], GPIO_PUD_PULL_UP);
4000d156:	04 15 0f 12             	ld.a       r15,[r13,4]
4000d15a:	80 80                   	ld_s       r12,[r0,0]
4000d15c:	2c 70                   	mov_s      r1,0
4000d15e:	ef 7a                   	exth_s     r2,r15
4000d160:	8a 23 04 00             	mov        r3,0x100
4000d164:	60 7c                   	jl_s.d     [r12]
4000d166:	c1 40                   	mov_s      r0,r14
            if (ret) {
4000d168:	0b 78                   	tst_s      r0,r0
                printf("Failed to set pull up for pin %d\n", i2c_raw_gpios[i]);
4000d16a:	ca 20 82 0f 00 40 10 dd 	mov.nz     r0,0x4000dd10
4000d172:	bc 0a e2 f9             	blnz.d     40000c2c <printf>

4000d176:	ca 21 c2 03             	mov.nz     r1,r15
    b->i2c_bus[0].scl = 19;

    int i2c_raw_gpios[] = { 9, 14, 24, 25 };
    struct device* zdev = device_get_binding("GPIO_0");
    if (zdev != NULL) {
        for (int i = 0; i<4; ++i) {
4000d17a:	dd 0d 01 94             	brne       r13,r16,4000d154 <mraa_intel_arduino_101_sss+0x208>

4000d17e:	07 f0                   	b_s        4000d18a <mraa_intel_arduino_101_sss+0x23e>

            if (ret) {
                printf("Failed to set pull up for pin %d\n", i2c_raw_gpios[i]);
            }
        }
    } else
        printf("Failed to open gpio driver\n");
4000d180:	c3 40 00 40 34 dd       	mov_s      r0,0x4000dd34
4000d186:	aa 0a cf f9             	bl         40000c2c <printf>


    return b;
}
4000d18a:	c3 40 00 a8 17 11       	mov_s      r0,0xa8001117
4000d190:	7b 44                   	mov_s      sp,fp
4000d192:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000d196:	10 dc                   	mov_s      r12,16
4000d198:	39 05 0f fd             	b          400076d0 <__ld_r13_to_r16_ret>


4000d19c <upm_ttp223_close>:
	mraa_gpio_dir(dev->gpio, MRAA_GPIO_IN);
	dev->isr_installed = false;
	return dev;
}

void upm_ttp223_close(void* dev){
4000d19c:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000d1a0:	9b 43                   	mov_s      fp,sp
	//if(dev != NULL)
	//	upm_free(dev);
}
4000d1a2:	e0 7f                   	j_s.d      [blink]
4000d1a4:	04 14 1b 34             	ld.ab      fp,[sp,4]

4000d1a8 <upm_ttp223_read>:
upm_result_t upm_ttp223_get_value(mraa_gpio_context dev, uint32_t* value){
	*value = mraa_gpio_read(dev);
	return UPM_SUCCESS;
}

upm_result_t upm_ttp223_read(const void* dev, void* data, int len){
4000d1a8:	f1 c0                   	push_s     blink
4000d1aa:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000d1ae:	41 c6                   	st_s       r14,[sp,4]
4000d1b0:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000d1b4:	08 45                   	mov_s      r13,r0
4000d1b6:	28 46                   	mov_s      r14,r1
	upm_ttp223 device = (upm_ttp223) dev;
	printf("pin for gpio %d\n", device->gpio_pin);
4000d1b8:	24 8d                   	ldb_s      r1,[r13,4]
4000d1ba:	c3 40 00 40 50 dd       	mov_s      r0,0x4000dd50
4000d1c0:	6e 0a ef f9             	bl.d       40000c2c <printf>

4000d1c4:	9b 43                   	mov_s      fp,sp
	int* int_data = data;
	*int_data = mraa_gpio_read(device->gpio);
4000d1c6:	b2 0c ef ff             	bl.d       4000ce74 <mraa_gpio_read>

4000d1ca:	00 85                   	ld_s       r0,[r13,0]
4000d1cc:	00 a6                   	st_s       r0,[r14,0]
	return UPM_SUCCESS;
}
4000d1ce:	0c 70                   	mov_s      r0,0
4000d1d0:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000d1d4:	08 dc                   	mov_s      r12,8
4000d1d6:	05 05 0f fd             	b          400076d8 <__ld_r13_to_r14_ret>

4000d1da:	e0 78                   	nop_s      

4000d1dc <upm_ttp223_init>:

void* upm_ttp223_init_name(){
	return NULL;
}

void* upm_ttp223_init(int pin){
4000d1dc:	f1 c0                   	push_s     blink
4000d1de:	f8 1c 48 b3             	st.a       r13,[sp,-8]
4000d1e2:	41 c6                   	st_s       r14,[sp,4]
4000d1e4:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000d1e8:	08 46                   	mov_s      r14,r0
	upm_ttp223 dev;

	printf("Hello from ttp223\n");
4000d1ea:	c3 40 00 40 64 dd       	mov_s      r0,0x4000dd64
4000d1f0:	3e 0a ef f9             	bl.d       40000c2c <printf>

4000d1f4:	9b 43                   	mov_s      fp,sp
	//dev = (upm_ttp223) upm_malloc(UPM_TTP223_MEM_MAP, sizeof(struct _upm_ttp223));
	dev = (upm_ttp223) upm_malloc(sizeof(struct _upm_ttp223));
4000d1f6:	4a 08 20 00             	bl.d       4000d23c <upm_malloc>

4000d1fa:	08 d8                   	mov_s      r0,8
4000d1fc:	08 45                   	mov_s      r13,r0
	printf("Hello from ttp223-after %d\n", sizeof(struct _upm_ttp223));
4000d1fe:	c3 40 00 40 78 dd       	mov_s      r0,0x4000dd78
4000d204:	2a 0a ef f9             	bl.d       40000c2c <printf>

4000d208:	08 d9                   	mov_s      r1,8
	//dev = (upm_ttp223) malloc(sizeof(struct _upm_ttp223));
	// zephyr specific part - end
	if(dev == NULL){
4000d20a:	89 ed                   	brne_s     r13,0,4000d21a <upm_ttp223_init+0x3e>

		printf("Unable to allocate space for the sensor struct\n");
4000d20c:	c3 40 00 40 94 dd       	mov_s      r0,0x4000dd94
4000d212:	1e 0a cf f9             	bl         40000c2c <printf>

		return NULL;
4000d216:	0c 70                   	mov_s      r0,0
4000d218:	0c f0                   	b_s        4000d230 <upm_ttp223_init+0x54>

	}

	dev->gpio_pin = pin;
4000d21a:	c4 ad                   	stb_s      r14,[r13,4]

	dev->gpio = mraa_gpio_init(dev->gpio_pin);
4000d21c:	e2 0a ef ff             	bl.d       4000ccfc <mraa_gpio_init>

4000d220:	cf 78                   	exth_s     r0,r14
4000d222:	00 a5                   	st_s       r0,[r13,0]
	mraa_gpio_dir(dev->gpio, MRAA_GPIO_IN);
4000d224:	ae 0b ef ff             	bl.d       4000cdd0 <mraa_gpio_dir>

4000d228:	2c 71                   	mov_s      r1,1
	dev->isr_installed = false;
4000d22a:	0c 70                   	mov_s      r0,0
4000d22c:	05 ad                   	stb_s      r0,[r13,5]
	return dev;
4000d22e:	a1 40                   	mov_s      r0,r13
}
4000d230:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000d234:	08 dc                   	mov_s      r12,8
4000d236:	a5 04 0f fd             	b          400076d8 <__ld_r13_to_r14_ret>

4000d23a:	e0 78                   	nop_s      

4000d23c <upm_malloc>:
	else{
		printf("unable to allocate memory");
		mem = NULL;
	}
#elif defined(CONFIG_BOARD_ARDUINO_101_SSS)
	if(upm_mem_head+size>=100){
4000d23c:	00 16 01 70 00 a8 38 14 	ld         r1,[0xa8001438]
4000d244:	1a 61                   	add_s      r2,r1,r0
4000d246:	27 0e 83 70 00 00 63 00 	brge       99,r2,4000d26a <upm_malloc+0x2e>

#if defined(CONFIG_BOARD_ARDUINO_101_SSS)
uint8_t upm_mem[100];
int upm_mem_head = 0;
#endif

void* upm_malloc(int size){
4000d24e:	f1 c0                   	push_s     blink
4000d250:	fc 1c c8 b6             	st.a       fp,[sp,-4]
		printf("unable to allocate memory");
		mem = NULL;
	}
#elif defined(CONFIG_BOARD_ARDUINO_101_SSS)
	if(upm_mem_head+size>=100){
		printf("The memory is full can't allocate anymore memory\n");
4000d254:	c3 40 00 40 fc dd       	mov_s      r0,0x4000ddfc
4000d25a:	d6 09 ef f9             	bl.d       40000c2c <printf>

4000d25e:	9b 43                   	mov_s      fp,sp
		mem = NULL;
4000d260:	0c 70                   	mov_s      r0,0
		mem = &upm_mem[upm_mem_head];
		upm_mem_head += size;
	}
#endif
	return mem;
}
4000d262:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000d266:	d1 c0                   	pop_s      blink
4000d268:	e0 7e                   	j_s        [blink]
	if(upm_mem_head+size>=100){
		printf("The memory is full can't allocate anymore memory\n");
		mem = NULL;
	}
	else{
		mem = &upm_mem[upm_mem_head];
4000d26a:	00 21 80 0f 00 a8 4c 14 	add        r0,r1,0xa800144c
		upm_mem_head += size;
4000d272:	00 1e 80 70 00 a8 38 14 	st         r2,[0xa8001438]
4000d27a:	e0 7e                   	j_s        [blink]

4000d27c <upm_delay_ms>:
	nano_timer_start(&timer, SECONDS(time));
	nano_timer_test(&timer, TICKS_UNLIMITED);
#endif
}

void upm_delay_ms(int time){
4000d27c:	f1 c0                   	push_s     blink
4000d27e:	fc 1c 48 b3             	st.a       r13,[sp,-4]
4000d282:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000d286:	9b 43                   	mov_s      fp,sp
4000d288:	08 45                   	mov_s      r13,r0
4000d28a:	a9 c1                   	sub_s      sp,sp,36
#if defined(linux)
	usleep(1000 * time);
#elif defined(CONFIG_BOARD_ARDUINO_101) || defined(CONFIG_BOARD_ARDUINO_101_SSS) || defined(CONFIG_BOARD_QUARK_D2000_CRB)
	struct nano_timer timer;
	void *timer_data[1];
	nano_timer_init(&timer, timer_data);
4000d28c:	42 23 00 38             	sub        r0,fp,32
4000d290:	8e 0c 2f ff             	bl.d       4000b71c <nano_timer_init>

4000d294:	42 23 01 39             	sub        r1,fp,36
	nano_timer_start(&timer, MSEC(time));
4000d298:	1a 25 80 1f 00 00 64 00 	mpy        r0,r13,100
4000d2a0:	ea 0a 2f fd             	bl.d       40007588 <__divsi3>

4000d2a4:	8a 21 0f 0a             	mov        r1,0x3e8
4000d2a8:	00 41                   	mov_s      r1,r0
4000d2aa:	92 0c 2f ff             	bl.d       4000b738 <_timer_start>

4000d2ae:	42 23 00 38             	sub        r0,fp,32
	nano_timer_test(&timer, TICKS_UNLIMITED);
4000d2b2:	42 23 00 38             	sub        r0,fp,32
4000d2b6:	0e 0d 2f ff             	bl.d       4000b7c0 <nano_timer_test>

4000d2ba:	2c 77                   	mov_s      r1,-1
#endif
}
4000d2bc:	7b 44                   	mov_s      sp,fp
4000d2be:	04 14 1b 34             	ld.ab      fp,[sp,4]
4000d2c2:	04 14 1f 30             	ld         blink,[sp,4]
4000d2c6:	00 c5                   	ld_s       r13,[sp,0]
4000d2c8:	e0 7f                   	j_s.d      [blink]
4000d2ca:	a2 c0                   	add_s      sp,sp,8

4000d2cc <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
4000d2cc:	fc 1c c8 b6             	st.a       fp,[sp,-4]
4000d2d0:	9b 43                   	mov_s      fp,sp
GEN_ABSOLUTE_SYM(__tCalleeSaved_SIZEOF, sizeof(tCalleeSaved));

/* size of the struct tcs structure sans save area for floating point regs */
GEN_ABSOLUTE_SYM(__tTCS_NOFLOAT_SIZEOF, sizeof(tTCS));

GEN_ABS_SYM_END
4000d2d2:	e0 7f                   	j_s.d      [blink]
4000d2d4:	04 14 1b 34             	ld.ab      fp,[sp,4]
